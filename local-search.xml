<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mac安装Wine-6.0</title>
    <link href="/2021/02/16/Mac%E5%AE%89%E8%A3%85Wine-6-0/"/>
    <url>/2021/02/16/Mac%E5%AE%89%E8%A3%85Wine-6-0/</url>
    
    <content type="html"><![CDATA[<h2 id="Mac安装Wine-6-0"><a href="#Mac安装Wine-6-0" class="headerlink" title="Mac安装Wine-6.0"></a>Mac安装Wine-6.0</h2><p>官方网站为MacOS用户提供了二进制安装版本Wine-5.x：<a href="https://www.winehq.org/">https://www.winehq.org/</a></p><p><img src="/2021/02/16/Mac%E5%AE%89%E8%A3%85Wine-6-0/BinaryPackages.png" alt="Wine二进制二进制安装包"></p><p>这个二进制安装包仅适用于仍支持32位应用的MacOS10.8-10.14，高版本MacOS不再为32应用提供支持不必尝试。<a href="https://support.apple.com/en-ca/HT208436">https://support.apple.com/en-ca/HT208436</a></p><h2 id="下载源码解压"><a href="#下载源码解压" class="headerlink" title="下载源码解压"></a>下载源码解压</h2><p><a href="https://dl.winehq.org/wine/source/6.0/wine-6.0.tar.xz">https://dl.winehq.org/wine/source/6.0/wine-6.0.tar.xz</a><br>cd到wine-6.0目录下</p><p><img src="/2021/02/16/Mac%E5%AE%89%E8%A3%85Wine-6-0/wine_dir.png" alt="wine_source_dir"></p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>打开README文件，按照指引安装</p><p><img src="/2021/02/16/Mac%E5%AE%89%E8%A3%85Wine-6-0/README.png" alt="安装指引"></p><p>编译，默认编译为32，目前基本都是64位系统，需要指定64编译</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--enable-win64</span><br></code></pre></td></tr></table></figure><h3 id="解决环境问题"><a href="#解决环境问题" class="headerlink" title="解决环境问题"></a>解决环境问题</h3><p>编译出错，需要升级bison版本，查看原有版本，bison位2.3版本，通过brew安装</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">liaogangwei@<span class="hljs-keyword">bogon </span>wine<span class="hljs-number">-6</span>.<span class="hljs-number">0</span> %<span class="hljs-keyword">bison </span> --version<br><span class="hljs-keyword">bison </span>(GNU <span class="hljs-keyword">Bison) </span><span class="hljs-number">2</span>.<span class="hljs-number">3</span><br><span class="hljs-symbol">configure:</span> error: Your <span class="hljs-keyword">bison </span>version is too old. Please <span class="hljs-keyword">install </span><span class="hljs-keyword">bison </span>version <span class="hljs-number">3</span>.<span class="hljs-number">0</span> <span class="hljs-keyword">or </span>newer.<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">liaogangwei@<span class="hljs-keyword">bogon </span>wine<span class="hljs-number">-6</span>.<span class="hljs-number">0</span> %<span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span><span class="hljs-keyword">bison</span><br><span class="hljs-keyword">...</span><br></code></pre></td></tr></table></figure><p>安装完成后，还是提示同样的错误，没有生效，需要手动替换bison</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">liaogangwei@bogon wine-<span class="hljs-number">6.0</span> %brew list bison<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>bin/bison<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>bin/yacc<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>lib/liby.a<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>share<span class="hljs-regexp">/aclocal/</span>bison-i18n.m4<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>share<span class="hljs-regexp">/bison/</span> (<span class="hljs-number">29</span> files)<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>share<span class="hljs-regexp">/doc/</span> (<span class="hljs-number">50</span> files)<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>share<span class="hljs-regexp">/info/</span>bison.info<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.7.5/</span>share<span class="hljs-regexp">/man/</span> (<span class="hljs-number">2</span> files)<br></code></pre></td></tr></table></figure><p>安装到/usr/local/Cellar/bison/目录，系统实际运行在/Library/Developer/CommandLineTools/usr/bin目前，备份旧文件，复制新文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">liaogangwei@bogon wine-<span class="hljs-number">6.0</span> %cd <span class="hljs-regexp">/Library/</span>Developer<span class="hljs-regexp">/CommandLineTools/u</span>sr/bin<br>liaogangwei@bogon wine-<span class="hljs-number">6.0</span> %ls -l bison<br>-rwxr-xr-x  <span class="hljs-number">1</span> root  wheel  <span class="hljs-number">221200</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span> <span class="hljs-number">15</span>:<span class="hljs-number">44</span> bison<br>liaogangwei@bogon wine-<span class="hljs-number">6.0</span> %mv bison bison_bak<br>mv: rename bison to bison_bak: Permission denied<br>liaogangwei@bogon wine-<span class="hljs-number">6.0</span> %sudo mv bison bison_bak<br>liaogangwei@bogon wine-<span class="hljs-number">6.0</span> %sudo cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>bison<span class="hljs-regexp">/3.5.3/</span>bin<span class="hljs-regexp">/bison ./</span>bison<br></code></pre></td></tr></table></figure><p>版本更新成功</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">liaogangwei@<span class="hljs-keyword">bogon </span>wine<span class="hljs-number">-6</span>.<span class="hljs-number">0</span> %<span class="hljs-keyword">bison </span>--version<br><span class="hljs-keyword">bison </span>(GNU <span class="hljs-keyword">Bison) </span><span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<span class="hljs-number">5</span><br>Written <span class="hljs-keyword">by </span>Robert Corbett <span class="hljs-keyword">and </span>Richard Stallman.<br></code></pre></td></tr></table></figure><h3 id="正式尝试安装"><a href="#正式尝试安装" class="headerlink" title="正式尝试安装"></a>正式尝试安装</h3><p>重新进行configure：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">liaogangwei<span class="hljs-symbol">@bogon</span> wine<span class="hljs-number">-6.0</span> %./configure --enable-win64<br>...<br>configure: Finished.  <span class="hljs-keyword">Do</span> <span class="hljs-string">&#x27;make&#x27;</span> <span class="hljs-keyword">to</span> compile Wine.<br></code></pre></td></tr></table></figure><p>开始编译安装：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">liaogangwei</span>@bogon wine-<span class="hljs-number">6</span>.<span class="hljs-number">0</span> %make install<br><span class="hljs-attribute">mkdir</span>: /usr/local/lib<span class="hljs-number">64</span>/wine: Permission denied<br><span class="hljs-attribute">mkdir</span>: /usr/local/lib<span class="hljs-number">64</span>/wine: Permission denied<br><span class="hljs-attribute">liaogangwei</span>@bogon wine-<span class="hljs-number">6</span>.<span class="hljs-number">0</span> %<br><span class="hljs-attribute">liaogangwei</span>@bogon wine-<span class="hljs-number">6</span>.<span class="hljs-number">0</span> %<br><span class="hljs-attribute">liaogangwei</span>@bogon wine-<span class="hljs-number">6</span>.<span class="hljs-number">0</span> %sudo make install<br></code></pre></td></tr></table></figure><p>编译时间稍长，需耐心等待。</p><h2 id="安装完成-amp-失败"><a href="#安装完成-amp-失败" class="headerlink" title="安装完成&amp;失败"></a>安装完成&amp;失败</h2><p>尝试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">liaogangwei</span>@bogon wine-<span class="hljs-number">6</span>.<span class="hljs-number">0</span> %wine<span class="hljs-number">64</span> notepad<br><span class="hljs-attribute">error</span>...<br></code></pre></td></tr></table></figure><p>还有其他一堆问题</p><p><a href="https://www.cnblogs.com/chendeqiang/p/14309515.html">https://www.cnblogs.com/chendeqiang/p/14309515.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>软件安装</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年2月11日我在北京过大年</title>
    <link href="/2021/02/15/2021%E5%B9%B42%E6%9C%8811%E6%97%A5%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E8%BF%87%E5%A4%A7%E5%B9%B4/"/>
    <url>/2021/02/15/2021%E5%B9%B42%E6%9C%8811%E6%97%A5%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E8%BF%87%E5%A4%A7%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="北京过大年20210211"><a href="#北京过大年20210211" class="headerlink" title="北京过大年20210211"></a>北京过大年20210211</h1><p>今年是我毕业来到北京参加工作的第一年，因为全国新冠疫情的反弹没能回到老家过年。疫情反弹，单位响应号召，全体软开中心人员原则上需留京过年，无特殊情况不允许离京。</p><h2 id="年货大扫荡"><a href="#年货大扫荡" class="headerlink" title="年货大扫荡"></a>年货大扫荡</h2><p>还好我们三十前夕来超市大扫荡，不然这个年估计不太好过！</p><p><img src="/2021/02/15/2021%E5%B9%B42%E6%9C%8811%E6%97%A5%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E8%BF%87%E5%A4%A7%E5%B9%B4/IMG_20210210_170305.jpg" alt="年货大扫荡"></p><h2 id="除夕啦，吃年夜饭"><a href="#除夕啦，吃年夜饭" class="headerlink" title="除夕啦，吃年夜饭"></a>除夕啦，吃年夜饭</h2><p>御用大厨们在做饭 😋，我们这儿第一次在北京过年，和老家不一样的是我们把年夜饭准备的很丰盛，老家的话三十晚饭就是一顿饺子汤圆。</p><p><img src="/2021/02/15/2021%E5%B9%B42%E6%9C%8811%E6%97%A5%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E8%BF%87%E5%A4%A7%E5%B9%B4/IMG_20210211_190140.jpg" alt="贾总康总准备年夜饭"></p><h2 id="边吃饭，边看春节联欢晚会"><a href="#边吃饭，边看春节联欢晚会" class="headerlink" title="边吃饭，边看春节联欢晚会"></a>边吃饭，边看春节联欢晚会</h2><p>上饭啦！同事家里接视频说我们是不是在地上吃😅。有图有真相，我们真的没有在地上吃，我们在阳台上吃🤣。</p><p><img src="/2021/02/15/2021%E5%B9%B42%E6%9C%8811%E6%97%A5%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E8%BF%87%E5%A4%A7%E5%B9%B4/IMG_20210211_185302.jpg" alt="上饭"></p><h2 id="公司年夜饭也不错"><a href="#公司年夜饭也不错" class="headerlink" title="公司年夜饭也不错"></a>公司年夜饭也不错</h2><p>因为疫情不让离京，单位也组织了食堂给我们外地不能回家的员工准备了年夜饭，看着还不错😗</p><p><img src="/2021/02/15/2021%E5%B9%B42%E6%9C%8811%E6%97%A5%E6%88%91%E5%9C%A8%E5%8C%97%E4%BA%AC%E8%BF%87%E5%A4%A7%E5%B9%B4/mmexport1613396939031.jpg" alt="公司年夜饭"></p><p><strong>祝：新年快乐，心想事成！</strong></p>]]></content>
    
    
    <categories>
      
      <category>生活琐事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>心得体会</tag>
      
      <tag>趣事</tag>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/SSM%E9%9B%86%E6%88%90/"/>
    <url>/2021/02/15/SSM%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h3 id="SSM集成"><a href="#SSM集成" class="headerlink" title="SSM集成"></a>SSM集成</h3><p>Spring+SpringMVC+MyBatis</p><p>框架集成核心：如果你的项目中，用到了Spring框架，那么其他框架主要就是和Spring集成！！</p><p>和Spring集成的核心思路：</p><ol><li>把当前框架的核心类，交给Spring管理</li><li>如果框架有事务，那么事务也要统一交给Spring管理</li></ol><p>步骤：</p><ol><li>Spring</li><li>Spring+SpringMVC</li><li>Spring+MyBatis</li><li>Spring+SpringMVC+MyBatis（事务）</li></ol><p>如果要做三大框架集成，必须保证在一个项目中，每个框架都能够独立运行！！</p><h4 id="1、单独集成Spring"><a href="#1、单独集成Spring" class="headerlink" title="1、单独集成Spring"></a>1、单独集成Spring</h4><h5 id="1-1、新建JavaWeb项目"><a href="#1-1、新建JavaWeb项目" class="headerlink" title="1.1、新建JavaWeb项目"></a>1.1、新建JavaWeb项目</h5><h5 id="1-2、导入Spring的Jar包"><a href="#1-2、导入Spring的Jar包" class="headerlink" title="1.2、导入Spring的Jar包"></a>1.2、导入Spring的Jar包</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">org.springframework.version</span>&gt;</span>4.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">org.springframework.version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">com.fasterxml.jackson.version</span>&gt;</span>2.6.5<span class="hljs-tag">&lt;/<span class="hljs-name">com.fasterxml.jackson.version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">org.slf4j.version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">org.slf4j.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- Spring的支持包 --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-core --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-context --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-context-support --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-tx --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-orm --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-aop --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-test --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="1-3、准备一个applicationContext-xml"><a href="#1-3、准备一个applicationContext-xml" class="headerlink" title="1.3、准备一个applicationContext.xml"></a>1.3、准备一个applicationContext.xml</h5><h5 id="1-4、测试"><a href="#1-4、测试" class="headerlink" title="1.4、测试"></a>1.4、测试</h5><p>配置Bean做测试</p><p><img src="/2021/02/15/SSM%E9%9B%86%E6%88%90/2254.png" alt="image-20191213015952254"></p><h4 id="2、集成Spring-SpringMVC"><a href="#2、集成Spring-SpringMVC" class="headerlink" title="2、集成Spring+SpringMVC"></a>2、集成Spring+SpringMVC</h4><h5 id="2-1、导入SpringMVC的Jar包（Spring有关的，有21个）"><a href="#2-1、导入SpringMVC的Jar包（Spring有关的，有21个）" class="headerlink" title="2.1、导入SpringMVC的Jar包（Spring有关的，有21个）"></a>2.1、导入SpringMVC的Jar包（Spring有关的，有21个）</h5><p>aop、tx、jdbc、web、webmvc、dbcp、fileupload、jackson</p><p><img src="/2021/02/15/SSM%E9%9B%86%E6%88%90/image-20191212145239902.png" alt="image-20191212145239902"></p><p>相关的Maven项目依赖：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">org.springframework.version</span>&gt;</span>4.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">org.springframework.version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">com.fasterxml.jackson.version</span>&gt;</span>2.6.5<span class="hljs-tag">&lt;/<span class="hljs-name">com.fasterxml.jackson.version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">org.slf4j.version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">org.slf4j.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-comment">&lt;!-- 引入springmvc:web前端的支持 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 引入springmvc:spring-webmvc核心包--&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;org.springframework.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- SpringMCV上传需要用到io包--&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 文件上传用到的包 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- SpringMVC的json-core支持包 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;com.fasterxml.jackson.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- jackson-annotations --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;com.fasterxml.jackson.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- jackson-databind --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;com.fasterxml.jackson.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- commons-dbcp --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- commons-logging --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- commons-pool --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!--weaver--&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!--spring-aspects--&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-beans --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- spring-experssion --&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2-2、web-xml文件"><a href="#2-2、web-xml文件" class="headerlink" title="2.2、web.xml文件"></a>2.2、web.xml文件</h5><p>1、post乱码过滤器           2、springmvc核心控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">...<br><br><span class="hljs-comment">&lt;!-- post提交中文乱码的过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 按照什么格式进行转码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>...<br></code></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><h5 id="2-3、集成SpringMVC"><a href="#2-3、集成SpringMVC" class="headerlink" title="2.3、集成SpringMVC"></a>2.3、集成SpringMVC</h5><p><strong>方案一：</strong>springmvc初始化的时候就一起把Spring初始化了</p><p><code>web.xml配置文件：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring监听器 ApplicationContext 载入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置核心控制器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 已经在applicationContext.xml中引入applicationContext-mvc.xml --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Spring初始化时就加载这个Servlet --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  1. /* :拦截所有.包括静态资源 (不建议使用)</span><br><span class="hljs-comment">  2. .action .do : 拦截以action和do结尾的请求 (主要用于后台系统.)</span><br><span class="hljs-comment">  3. / :拦截所有,但是不包含jsp...</span><br><span class="hljs-comment">  其他静态资源如:.css,.js等需要用例外的配置进行放行 (主要用于前台系统)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>applicationContext.xml文件：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/tx</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 将Date交给Spring管理 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 一次扫描就OK --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 该配置扫描了所有的组件(Controller、service。。。) --&gt;</span><br>  <span class="hljs-comment">&lt;!-- @Component组件, @Repository持久层, @Service业务逻辑层, and @Controller控制器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;edu.zzu&quot;</span>/&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 加载其他模块：如，MVC、SHIRO等 --&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 引入其它所有Spring的配置：如SpringMVC配置 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-mvc.xml&quot;</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>applicationContext-mvc.xml文件：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> 属性太长了，在此处被省略，请从上面复制添加&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 静态资源放行 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--扫描包，此处第一种方案不需要这样单独导入</span><br><span class="hljs-comment">  &lt;context:component-scan base-package=&quot;edu.zzu.controller&quot;/&gt;</span><br><span class="hljs-comment">--&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 开启SpringMVC支持注解 @RequestMapping --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方案二：</strong>spring和springMVC分别初始化</p><p>web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 初始化Spring --&gt;</span><br><br>  <span class="hljs-comment">&lt;!--初始化Spring Shiro必须要有一个Spring，所以只能用此第二种方案--&gt;</span><br>  <span class="hljs-comment">&lt;!-- Spring的配置文件路径，用于初始化Spring --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--Spring监听器 ApplicationContext 载入，初始化Spring --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 初始化SpringMVC --&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- Spring MVC 核心配置开始 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 配置核心控制器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 初始化SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring初始化时就加载这个Servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    1. /* :拦截所有.包括静态资源 (不建议使用)</span><br><span class="hljs-comment">    2. .action .do : 拦截以action和do结尾的请求 (主要用于后台系统.)</span><br><span class="hljs-comment">    3. / :拦截所有,但是不包含jsp...</span><br><span class="hljs-comment">    其他静态资源如:.css,.js等需要用例外的配置进行放行 (主要用于前台系统)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>applicationContext.xml文件：</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> 占位：请拷贝之前配置文件此处的内容&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 将Date交给Spring管理 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <br><span class="hljs-comment">&lt;!-- 第二种方案不再如此扫描</span><br><span class="hljs-comment">  &lt;!-- 一次扫描就OK --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 该配置扫描了所有的组件(Controller、service。。。) --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;edu.zzu&quot;</span>/&gt;</span><br>--&gt;<br>  <br>  <span class="hljs-comment">&lt;!-- 只扫描service，其他模块由其他模块自行扫描。如SpringMVC扫描controller --&gt;</span><br>  <span class="hljs-comment">&lt;!-- @Component组件, @Repository持久层, @Service业务逻辑层, and @Controller控制器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;edu.zzu.service&quot;</span>/&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 加载其他模块(非SpringMVC)：如redis、SHIRO等 --&gt;</span><br><br><span class="hljs-comment">&lt;!--第二种方案不能这样引入SpringMVC的配置</span><br><span class="hljs-comment">  &lt;!-- 引入其它所有Spring的配置：如SpringMVC配置 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-mvc.xml&quot;</span>&gt;</span><br>--&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>applicationContext-mvc.xml文件：</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> 占位：请拷贝之前配置文件此处的内容&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!--静态资源放行--&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--springmvc注解驱动--&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--扫包:controller层--&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--视图解析器--&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--文件上传--&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 静态资源(图片，css，js等)放行 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span></span><br><br><span class="xml">  <span class="hljs-comment">&lt;!-- 扫描contorller层的包，此处第二种方案需要这样单独导入 --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- @Component组件, @Repository持久层, @Service业务逻辑层, and @Controller控制器 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;edu.zzu.controller&quot;</span>/&gt;</span></span><br><br><span class="xml">  <span class="hljs-comment">&lt;!-- 开启SpringMVC支持注解 @RequestMapping --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 设置视图路径的前后缀，该配置可以让我们写视图路径的时候更简单。 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!--前缀： jsp在当前工程文件夹的路径 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!--后缀：扩展名 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 上传解析器 --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 错误：提示告诉开发者你没有配置文件上传解析器。</span></span><br><span class="xml">       multipartResolver:不能乱写</span><br><span class="xml">  --&gt;</span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 设置上传文件的最大尺寸为1MB --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- spring el写法：5MB --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>#</span><span class="hljs-template-variable">&#123;1024*1024*5&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="3、集成MyBatis环境"><a href="#3、集成MyBatis环境" class="headerlink" title="3、集成MyBatis环境"></a>3、集成MyBatis环境</h4><h5 id="3-1、加入MyBatis相关的9个Jar包（mtbatis-spring-1-2-0-jar）"><a href="#3-1、加入MyBatis相关的9个Jar包（mtbatis-spring-1-2-0-jar）" class="headerlink" title="3.1、加入MyBatis相关的9个Jar包（mtbatis-spring-1.2.0.jar）"></a>3.1、加入MyBatis相关的9个Jar包（mtbatis-spring-1.2.0.jar）</h5><ol><li><p>核心包</p></li><li><p>依赖包(删除一个commons-logging-1.1.1.jar)</p></li><li><p>数据库连接包</p></li></ol><p><img src="/2021/02/15/SSM%E9%9B%86%E6%88%90/image-20191212145710351.png" alt="image-20191212145710351"></p><p>Maven的pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--数据的支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mybatis的jar--&gt;</span><br><span class="hljs-comment">&lt;!--mybatis的核心包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mybatis集成spring--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--代码生成器的jar包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SSM注入顺序：jdbc.properties-&gt;dataSource-&gt;sqlSessionFactory-&gt;mapper(dao)-&gt;service-&gt;controller(action)</p><h5 id="3-2、JDBC配置文件-amp-数据源DataSource"><a href="#3-2、JDBC配置文件-amp-数据源DataSource" class="headerlink" title="3.2、JDBC配置文件&amp;数据源DataSource"></a>3.2、JDBC配置文件&amp;数据源DataSource</h5><p><strong>JDBC配置文件：</strong></p><p>jdbc.properties文件，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driverClassName</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">jdbc.url</span>=jdbc:mysql:///mybatis<br><span class="hljs-attr">jdbc.username</span>=root<br><span class="hljs-attr">jdbc.password</span>=root<br></code></pre></td></tr></table></figure><p><strong>Spring配置文件：</strong></p><p>applicationContext.xml配置文件：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- Jdbc配置文件(jdbc.properties)：拿到连接数据库的数据 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 注入顺序：jdbc.properties -&gt; dataSource(数据源)-&gt; SqlSessionFactory -&gt; Mapper -&gt; Service (事务)-&gt; Controller -&gt;EasyUI --&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 配置dbcp数据源 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 依赖注入连接池需要的属性 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- property name=&quot;是BasicDataSource的set方法，本质属性&quot; --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- property value=&quot;是jdbc.properties配置文件的key&quot; --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.driverClassName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--maxActive: 最大连接数量 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;150&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--minIdle: 最小空闲连接 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--maxIdle: 最大空闲连接 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--initialSize: 初始化连接 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 连接被泄露时是否打印 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--removeAbandoned: 是否自动回收超时连接 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandoned&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--removeAbandonedTimeout: 超时时间(以秒数为单位) --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;removeAbandonedTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;numTestsPerEvictionRun&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validationQuery&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SELECT NOW() FROM DUAL&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="3-3、SqlSessionFactory"><a href="#3-3、SqlSessionFactory" class="headerlink" title="3.3、SqlSessionFactory"></a>3.3、SqlSessionFactory</h5><p><code>SSJ 集成</code>时候需要<code>entityManagerFactory</code></p><p>applicationContext.xml文件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;entityManagerFactory&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>SSM集成</code>时候需要<code>sqlSessionFactory</code></p><p>applicationContext.xml文件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h6 id="3-3-1、获取SqlSessionFactory"><a href="#3-3-1、获取SqlSessionFactory" class="headerlink" title="3.3.1、获取SqlSessionFactory"></a>3.3.1、获取SqlSessionFactory</h6><p>applicationContext.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!--测试的时候:sqlSessionFactory==sqlSession==mapper接口 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>      <br>      <span class="hljs-comment">&lt;!--别名的配置:domain query--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn.itsource.ssm.domain, cn.itsource.ssm.query&quot;</span>/&gt;</span><br>      <br>      <span class="hljs-comment">&lt;!-- 或者</span><br><span class="hljs-comment">      &lt;property name=&quot;typeAliasesPackage&quot;&gt;</span><br><span class="hljs-comment">&lt;value&gt;</span><br><span class="hljs-comment">cn.itsource.ssm.domain</span><br><span class="hljs-comment">Cn.itsource.ssm.query  可能有查询对象</span><br><span class="hljs-comment">&lt;/value&gt;</span><br><span class="hljs-comment">&lt;/property&gt;</span><br><span class="hljs-comment">--&gt;</span><br><br>      <span class="hljs-comment">&lt;!--mapper的映射文件路径:配置所有的映射文件--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath*:cn/itsource/ssm/mapper/*.xml&quot;</span> /&gt;</span><br>      <br>      <span class="hljs-comment">&lt;!--配置分页拦截器--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>                      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>helperDialect=mysql<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--mapper接口的配置:映射器</span><br><span class="hljs-comment">   只配置了一个mapper接口,如果有多个:一个个的复制,很累的</span><br><span class="hljs-comment">  &lt;bean id=&quot;departmentMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="hljs-comment">      &lt;property name=&quot;mapperInterface&quot; value=&quot;DepartmentMapper&quot; /&gt;</span><br><span class="hljs-comment">      &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt;</span><br><span class="hljs-comment">  &lt;/bean&gt; --&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--mapper接口的配置:一劳永逸的配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--把cn.itsource.ssm.mapper路径下的所有的mapper都配置起来--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.ruanko.ssm.mapper&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-4、事物的配置"><a href="#3-4、事物的配置" class="headerlink" title="3.4、事物的配置"></a>3.4、事物的配置</h5><p>applicationContext.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">spring注解式事务管理</span><br><span class="hljs-comment">1、配置一个事务管理器</span><br><span class="hljs-comment">2、识别注解事务</span><br><span class="hljs-comment">3、打注解</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!--事务的配置:service--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-5、注解驱动"><a href="#3-5、注解驱动" class="headerlink" title="3.5、注解驱动"></a>3.5、注解驱动</h5><p>applicationContext.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><h5 id="4-1、重点"><a href="#4-1、重点" class="headerlink" title="4.1、重点"></a>4.1、重点</h5><ol><li><p>SSM集成，操作必须非常熟练</p></li><li><p>多对一嵌套结果，嵌套查询</p></li><li><p>一对多嵌套结果</p></li><li><p>映射器接口</p></li></ol><h5 id="4-2、难点"><a href="#4-2、难点" class="headerlink" title="4.2、难点"></a>4.2、难点</h5><ol><li><p>多对一嵌套结果：查询的有dept表的别名配置</p></li><li><p>映射文件里面使用${}的适用场景：order by</p></li></ol><h4 id="5、常见异常"><a href="#5、常见异常" class="headerlink" title="5、常见异常"></a>5、常见异常</h4><p>Caused by: java.io.NotSerializableException: cn.itsource.mybatis.day2._5_cache.User</p><p>要使用二级缓存，要求domain必须实现序列化接口</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/Spring%20Security/"/>
    <url>/2021/02/15/Spring%20Security/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><p>Spring Security 是 Spring 社区的一个顶级项目，也是 Spring Boot 官方推荐使用的安全框架。除了常规的认证（Authentication）和授权（Authorization）之外，Spring Security还提供了诸如ACLs，LDAP，JAAS，CAS等高级特性以满足复杂场景下的安全需求。</p><p>Spring Security 应用级别的安全主要包含两个主要部分，即<code>登录认证（Authentication）</code>和<code>访问授权（Authorization）</code>，首先用户登录的时候传入【登录信息】，【登录验证器】完成登录认证并将登录认证好的信息存储到【请求上下文】，然后在进行其他操作，如接口访问、方法调用时，权限认证器从上下文中获取登录认证信息，然后根据认证信息获取权限信息，通过权限信息和特定的授权策略决定是否授权。</p><p>接下来，将分别对登录认证和访问授权的执行流程进行剖析，并在最后给出完整的案例实现，结合案例理解登录认证和访问授权的执行原理。</p><h2 id="登录认证（Authentication）"><a href="#登录认证（Authentication）" class="headerlink" title="登录认证（Authentication）"></a>登录认证（Authentication）</h2><h3 id="登录认证过滤器"><a href="#登录认证过滤器" class="headerlink" title="登录认证过滤器"></a>登录认证过滤器</h3><p>如果在继承 WebSecurityConfigurerAdapter 的配置类中的 configure(HttpSecurity http) 方法中有配置 HttpSecurity 的 formLogin，则会返回一个 FormLoginConfigurer 对象。</p><p>如下是一个 Spring Security 的配置样例， formLogin().x.x 就是配置使用<code>内置的登录验证过滤器</code>，默认实现为 <code>UsernamePasswordAuthenticationFilter</code>。</p><p>WebSecurityConfig.java</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@EnableWebSecurity</span><br><span class="hljs-variable">@EnableGlobalMethodSecurity</span>(prePostEnabled = true)<br>public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;<br><br>    <span class="hljs-variable">@Autowired</span><br>    private UserDetailsService userDetailsService;<br>    <br>    <span class="hljs-variable">@Override</span><br>    public void configure(AuthenticationManagerBuilder auth) throws Exception &#123;<br>        <span class="hljs-comment">// 使用自定义身份验证组件</span><br>        <span class="hljs-selector-tag">auth</span><span class="hljs-selector-class">.authenticationProvider</span>(new JwtAuthenticationProvider(userDetailsService));<br>    &#125;<br>    <br>    @<span class="hljs-selector-tag">Override</span><br>    <span class="hljs-selector-tag">protected</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">configure</span>(HttpSecurity http) <span class="hljs-selector-tag">throws</span> <span class="hljs-selector-tag">Exception</span> &#123;<br>        <span class="hljs-selector-tag">http</span><span class="hljs-selector-class">.cors</span>()<span class="hljs-selector-class">.and</span>()<span class="hljs-selector-class">.csrf</span>()<span class="hljs-selector-class">.disable</span>()<br>            <span class="hljs-selector-class">.authorizeRequests</span>()<br>        <span class="hljs-comment">// 首页和登录页面</span><br>        <span class="hljs-selector-class">.antMatchers</span>(<span class="hljs-string">&quot;/&quot;</span>)<span class="hljs-selector-class">.permitAll</span>()<br>        <span class="hljs-comment">// 其他所有请求需要身份认证</span><br>        <span class="hljs-selector-class">.anyRequest</span>()<span class="hljs-selector-class">.authenticated</span>()<br>        <span class="hljs-comment">// 配置登录认证</span><br>        <span class="hljs-selector-class">.and</span>()<span class="hljs-selector-class">.formLogin</span>()<span class="hljs-selector-class">.loginProcessingUrl</span>(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看 HttpSecurity源代码的 formLogion 方法返回一个 <code>FormLoginConfigurer</code> 对象。</p><p>org.springframework.security.config.annotation.web.builders.HttpSecurity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> FormLoginConfigurer&lt;HttpSecurity&gt; <span class="hljs-title">formLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">return</span> getOrApply(<span class="hljs-keyword">new</span> FormLoginConfigurer&lt;&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>而 FormLoginConfigurer 的构造函数内绑定了一个 <code>UsernamePasswordAuthenticationFilter</code> 过滤器。</p><p>org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">FormLoginConfigurer</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> UsernamePasswordAuthenticationFilter(), <span class="hljs-literal">null</span>);<br>usernameParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>passwordParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>再看 UsernamePasswordAuthenticationFilter 过滤器的构造函数内绑定了 POST 类型的 /login 请求，也就是说，如果配置了 formLogin 的相关信息，那么在使用 POST 类型的 /login URL进行登录的时候就会被这个过滤器拦截，并进行登录验证，登录验证过程我们下面继续分析。</p><p>org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">UsernamePasswordAuthenticationFilter</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> AntPathRequestMatcher(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>查看 UsernamePasswordAuthenticationFilter，发现它继承了 AbstractAuthenticationProcessingFilter</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAuthenticationProcessingFilter</span></span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>AbstractAuthenticationProcessingFilter 中的 doFilter 包含了触发登录认证执行流程的相关逻辑。</p><p>org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(ServletRequest <span class="hljs-params">req</span>, ServletResponse <span class="hljs-params">res</span>, FilterChain <span class="hljs-params">chain</span>)</span> throws IOException, ServletException &#123;<br>        HttpServletRequest request = (HttpServletRequest)req;<br>        HttpServletResponse response = (HttpServletResponse)res;<br>        <span class="hljs-keyword">if</span> (!this.requires<span class="hljs-constructor">Authentication(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>) &#123;<br>            chain.<span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (this.logger.is<span class="hljs-constructor">DebugEnabled()</span>) &#123;<br>                this.logger.debug(<span class="hljs-string">&quot;Request is to process authentication&quot;</span>);<br>            &#125;<br><br>            Authentication authResult;<br>            <span class="hljs-keyword">try</span> &#123;<br>                authResult = this.attempt<span class="hljs-constructor">Authentication(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>;<br>                <span class="hljs-keyword">if</span> (authResult<span class="hljs-operator"> == </span>null) &#123;<br>                    return;<br>                &#125;<br><br>                this.sessionStrategy.on<span class="hljs-constructor">Authentication(<span class="hljs-params">authResult</span>, <span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>;<br>            &#125; catch (InternalAuthenticationServiceException var8) &#123;<br>                this.logger.error(<span class="hljs-string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, var8);<br>                this.unsuccessful<span class="hljs-constructor">Authentication(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>, <span class="hljs-params">var8</span>)</span>;<br>                return;<br>            &#125; catch (AuthenticationException var9) &#123;<br>                this.unsuccessful<span class="hljs-constructor">Authentication(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>, <span class="hljs-params">var9</span>)</span>;<br>                return;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (this.continueChainBeforeSuccessfulAuthentication) &#123;<br>                chain.<span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>)</span>;<br>            &#125;<br><br>            this.successful<span class="hljs-constructor">Authentication(<span class="hljs-params">request</span>, <span class="hljs-params">response</span>, <span class="hljs-params">chain</span>, <span class="hljs-params">authResult</span>)</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面的登录逻辑主要步骤有两个：</p><ol><li><p>attemptAuthentication(request, response)</p><p>这是 AbstractAuthenticationProcessingFilter 中的一个抽象方法，包含登录主逻辑，由其子类实现具体的登录验证，如 UsernamePasswordAuthenticationFilter 是使用表单方式登录的具体实现。如果是非表单登录的方式，如JNDI等其他方式登录的可以通过<code>继承 AbstractAuthenticationProcessingFilter</code> 自定义登录实现。UsernamePasswordAuthenticationFilter 的登录实现逻辑如下。</p></li></ol><p>org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public Authentication attempt<span class="hljs-constructor">Authentication(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span> throws AuthenticationException &#123;<br>        <span class="hljs-keyword">if</span> (postOnly<span class="hljs-operator"> &amp;&amp; </span>!request.get<span class="hljs-constructor">Method()</span>.equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">AuthenticationServiceException(<span class="hljs-string">&quot;Authentication method not supported: &quot;</span> + <span class="hljs-params">request</span>.<span class="hljs-params">getMethod</span>()</span>);<br>        &#125;<br>　　　　　<span class="hljs-comment">// 获取用户名和密码</span><br>        String username = obtain<span class="hljs-constructor">Username(<span class="hljs-params">request</span>)</span>;<br>        String password = obtain<span class="hljs-constructor">Password(<span class="hljs-params">request</span>)</span>;<br><br>        <span class="hljs-keyword">if</span> (username<span class="hljs-operator"> == </span>null) &#123;<br>            username = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (password<span class="hljs-operator"> == </span>null) &#123;<br>            password = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        username = username.trim<span class="hljs-literal">()</span>;<br><br>        UsernamePasswordAuthenticationToken authRequest = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UsernamePasswordAuthenticationToken(<span class="hljs-params">username</span>, <span class="hljs-params">password</span>)</span>;<br><br>        <span class="hljs-comment">// Allow subclasses to set the &quot;details&quot; property</span><br>        set<span class="hljs-constructor">Details(<span class="hljs-params">request</span>, <span class="hljs-params">authRequest</span>)</span>;<br><br>        return this.get<span class="hljs-constructor">AuthenticationManager()</span>.authenticate(authRequest);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</p><p>登录成功之后，将认证后的 Authentication 对象存储到请求线程上下文，这样在授权阶段就可以获取到 Authentication 认证信息，并利用 Authentication 内的权限信息进行访问控制判断。</p></li></ol><p>org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.java</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">protected</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">successfulAuthentication</span>(HttpServletRequest request,<br>        HttpServletResponse response, FilterChain chain, Authentication authResult)<br>        <span class="hljs-selector-tag">throws</span> <span class="hljs-selector-tag">IOException</span>, <span class="hljs-selector-tag">ServletException</span> &#123;<br><br>    <span class="hljs-selector-tag">if</span> (logger.isDebugEnabled()) &#123;<br>        <span class="hljs-selector-tag">logger</span><span class="hljs-selector-class">.debug</span>(<span class="hljs-string">&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span> + authResult);<br>    &#125;<br>　　　　　<span class="hljs-comment">// 登录成功之后，把认证后的 Authentication 对象存储到请求线程上下文，这样在授权阶段就可以获取到此认证信息进行访问控制判断</span><br>    <span class="hljs-selector-tag">SecurityContextHolder</span><span class="hljs-selector-class">.getContext</span>()<span class="hljs-selector-class">.setAuthentication</span>(authResult);<br><br>    <span class="hljs-selector-tag">rememberMeServices</span><span class="hljs-selector-class">.loginSuccess</span>(request, response, authResult);<br><br>    <span class="hljs-comment">// Fire event</span><br>    <span class="hljs-selector-tag">if</span> (this.eventPublisher != null) &#123;<br>        <span class="hljs-selector-tag">eventPublisher</span><span class="hljs-selector-class">.publishEvent</span>(new InteractiveAuthenticationSuccessEvent(<br>                authResult, this.getClass()));<br>    &#125;<br><br>    <span class="hljs-selector-tag">successHandler</span><span class="hljs-selector-class">.onAuthenticationSuccess</span>(request, response, authResult);<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的登录逻辑我们可以看到，Spring Security的登录认证过程是委托给 AuthenticationManager 完成的，它先是解析出用户名和密码，然后把用户名和密码封装到一个UsernamePasswordAuthenticationToken 中，传递给 AuthenticationManager，交由 AuthenticationManager 完成实际的登录认证过程。</p><p>package org.springframework.security.authentication.AuthenticationManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.security.authentication;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> \* Processes an &#123;<span class="hljs-doctag">@link</span> Authentication&#125; request.</span><br><span class="hljs-comment"> \* <span class="hljs-doctag">@author</span> Ben Alex</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthenticationManager</span> </span>&#123;<br><br><span class="hljs-function">Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AuthenticationManager 提供了一个默认的 实现 ProviderManager，而 ProviderManager 又将验证委托给了 AuthenticationProvider。</p><p>ProviderManager.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> Authentication authenticate(Authentication authentication)<br>        <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>　　　　　...　　 <span class="hljs-keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;<br>        <span class="hljs-keyword">if</span> (!provider.supports(toTest)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<span class="hljs-keyword">try</span> &#123;<br>            result = provider.authenticate(authentication);<br>            <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) &#123;<br>                copyDetails(authentication, result);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;　　　　 ...<br>&#125;<br></code></pre></td></tr></table></figure><p>根据验证方式的多样化，AuthenticationProvider 衍生出多种类型的实现，AbstractUserDetailsAuthenticationProvider 是 AuthenticationProvider 的抽象实现，定义了较为统一的验证逻辑，各种验证方式可以选择直接继承 AbstractUserDetailsAuthenticationProvider 完成登录认证，如 DaoAuthenticationProvider 就是继承了此抽象类，完成了从DAO方式获取验证需要的用户信息的。</p><p>AbstractUserDetailsAuthenticationProvider.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public Authentication authenticate(Authentication authentication) throws AuthenticationException &#123;<span class="hljs-comment">// Determine username</span><br>        String username = (authentication.get<span class="hljs-constructor">Principal()</span><span class="hljs-operator"> == </span>null) ? <span class="hljs-string">&quot;NONE_PROVIDED&quot;</span> : authentication.get<span class="hljs-constructor">Name()</span>;<br>        boolean cacheWasUsed = <span class="hljs-literal">true</span>;<br>        UserDetails user = this.userCache.get<span class="hljs-constructor">UserFromCache(<span class="hljs-params">username</span>)</span>;<br>        <span class="hljs-keyword">if</span> (user<span class="hljs-operator"> == </span>null) &#123;<br>            cacheWasUsed = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">try</span> &#123;　　　　　　　　　 <span class="hljs-comment">// 子类根据自身情况从指定的地方加载认证需要的用户信息</span><br>                user = retrieve<span class="hljs-constructor">User(<span class="hljs-params">username</span>, (UsernamePasswordAuthenticationToken)</span> authentication);<br>            &#125;<br>            ...<span class="hljs-keyword">try</span> &#123;　　　　　　　<span class="hljs-comment">// 前置检查，一般是检查账号状态，如是否锁定之类</span><br>            preAuthenticationChecks.check(user);　　　　　　　<span class="hljs-comment">// 进行一般逻辑认证，如 DaoAuthenticationProvider 实现中的密码验证就是在这里完成的</span><br>            additional<span class="hljs-constructor">AuthenticationChecks(<span class="hljs-params">user</span>, (UsernamePasswordAuthenticationToken)</span> authentication);<br>        &#125;<br>        ...<br>　　　　 <span class="hljs-comment">//　后置检查，如可以检查密码是否过期之类</span><br>        postAuthenticationChecks.check(user);<br><br><span class="hljs-operator">　　　　 ...　　　　　</span><span class="hljs-comment">// 验证成功之后返回包含完整认证信息的 Authentication 对象</span><br>        return create<span class="hljs-constructor">SuccessAuthentication(<span class="hljs-params">principalToReturn</span>, <span class="hljs-params">authentication</span>, <span class="hljs-params">user</span>)</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>如上面所述， AuthenticationProvider 通过 retrieveUser(String username, UsernamePasswordAuthenticationToken authentication) 获取验证信息，对于我们一般所用的 DaoAuthenticationProvider 是由 UserDetailsService 专门负责获取验证信息的。</p><p>DaoAuthenticationProvider.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-function">UserDetails <span class="hljs-title">retrieveUser</span><span class="hljs-params">(String username, UsernamePasswordAuthenticationToken authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserDetails loadedUser = <span class="hljs-keyword">this</span>.getUserDetailsService().loadUserByUsername(username);<br>        <span class="hljs-keyword">if</span> (loadedUser == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InternalAuthenticationServiceException(<span class="hljs-string">&quot;UserDetailsService returned null, which is an interface contract violation&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> loadedUser;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserDetailsService 接口只有一个方法，loadUserByUsername(String username)，一般需要我们实现此接口方法，根据用户名加载登录认证和访问授权所需要的信息，并返回一个 UserDetails的实现类，后面登录认证和访问授权都需要用到此中的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Locates the user based on the username. In the actual implementation, the search</span><br><span class="hljs-comment">     * may possibly be case sensitive, or case insensitive depending on how the</span><br><span class="hljs-comment">     * implementation instance is configured. In this case, the &lt;code&gt;UserDetails&lt;/code&gt;</span><br><span class="hljs-comment">     * object that comes back may have a username that is of a different case than what</span><br><span class="hljs-comment">     * was actually requested..</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username the username identifying the user whose data is required.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a fully populated user record (never &lt;code&gt;null&lt;/code&gt;)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> UsernameNotFoundException if the user could not be found or the user has no</span><br><span class="hljs-comment">     * GrantedAuthority</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserDetails 提供了一个默认实现 User，主要包含用户名（username）、密码(password)、权限（authorities）和一些账号或密码状态的标识。</p><p>如果默认实现满足不了你的需求，可以根据需求定制自己的 UserDetails，然后在 UserDetailsService 的 loadUserByUsername 中返回即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span>, <span class="hljs-title">CredentialsContainer</span> </span>&#123;<span class="hljs-comment">// ~ Instance fields</span><br>    <span class="hljs-comment">// ================================================================================================</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;GrantedAuthority&gt; authorities;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> accountNonExpired;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> accountNonLocked;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> credentialsNonExpired;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> enabled;<br><br>    <span class="hljs-comment">// ~ Constructors</span><br>    <span class="hljs-comment">// ===================================================================================================</span><br>    <span class="hljs-keyword">public</span> User(<span class="hljs-keyword">String</span> username, <span class="hljs-keyword">String</span> password,<br>            Collection<span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">extends</span> GrantedAuthority&gt; authorities) &#123;<br>        this(username, password, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, authorities);<br>    &#125;　　 ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>Spring Security 提供了一个默认的登出过滤器 LogoutFilter，默认拦截路径是 /logout，当访问 /logout 路径的时候，LogoutFilter 会进行退出处理。</p><p>LogoutFilter.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> org.springframework.security.web.authentication.logout;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogoutFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericFilterBean</span> </span>&#123;<br><br>    <span class="hljs-comment">// ~ Instance fields</span><br>    <span class="hljs-comment">// ================================================================================================</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">RequestMatcher</span> logoutRequestMatcher;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">LogoutHandler</span> handler;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">LogoutSuccessHandler</span> logoutSuccessHandler;<br><br>    <span class="hljs-comment">// ~ Constructors</span><br>    <span class="hljs-comment">// ===================================================================================================</span><br>    public <span class="hljs-type">LogoutFilter</span>(<span class="hljs-type">LogoutSuccessHandler</span> logoutSuccessHandler,<br>            <span class="hljs-type">LogoutHandler</span>... handlers) &#123;<br>        <span class="hljs-keyword">this</span>.handler = <span class="hljs-keyword">new</span> <span class="hljs-type">CompositeLogoutHandler</span>(handlers);<br>        <span class="hljs-type">Assert</span>.notNull(logoutSuccessHandler, <span class="hljs-string">&quot;logoutSuccessHandler cannot be null&quot;</span>);<br>        <span class="hljs-keyword">this</span>.logoutSuccessHandler = logoutSuccessHandler;<br>        setFilterProcessesUrl(<span class="hljs-string">&quot;/logout&quot;</span>);　　<span class="hljs-comment">// 绑定 /logout</span><br>    &#125;<span class="hljs-comment">// ~ Methods</span><br>    <span class="hljs-comment">// ========================================================================================================</span><br>    public void doFilter(<span class="hljs-type">ServletRequest</span> req, <span class="hljs-type">ServletResponse</span> res, <span class="hljs-type">FilterChain</span> chain)<br>            <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span>, <span class="hljs-type">ServletException</span> &#123;<br>        <span class="hljs-type">HttpServletRequest</span> request = (<span class="hljs-type">HttpServletRequest</span>) req;<br>        <span class="hljs-type">HttpServletResponse</span> response = (<span class="hljs-type">HttpServletResponse</span>) res;<br><br>        <span class="hljs-keyword">if</span> (requiresLogout(request, response)) &#123;<br>            <span class="hljs-type">Authentication</span> auth = <span class="hljs-type">SecurityContextHolder</span>.getContext().getAuthentication();<span class="hljs-keyword">this</span>.handler.logout(request, response, auth);　　<span class="hljs-comment">// 登出处理，可能包含session、cookie、认证信息的清理工作</span><br><br>            logoutSuccessHandler.onLogoutSuccess(request, response, auth);　　<span class="hljs-comment">// 退出后的操作，可能是跳转、返回成功状态等</span><br><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        chain.doFilter(request, response);<br>    &#125;<br><br>   ...<br>&#125;<br></code></pre></td></tr></table></figure><p>如下是 SecurityContextLogoutHandler 中的登出处理实现。</p><p>SecurityContextLogoutHandler.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void logout(HttpServletRequest request, HttpServletResponse response,<br>        Authentication authentication) &#123;<br>    <span class="hljs-comment">// 让 session 失效　if (invalidateHttpSession) &#123;</span><br>        HttpSession session = request.get<span class="hljs-constructor">Session(<span class="hljs-params">false</span>)</span>;<br>        <span class="hljs-keyword">if</span> (session != null) &#123;<br>            logger.debug(<span class="hljs-string">&quot;Invalidating session: &quot;</span> + session.get<span class="hljs-constructor">Id()</span>);<br>            session.invalidate<span class="hljs-literal">()</span>;<br>        &#125;<br>    &#125;<br>　　　　　<span class="hljs-comment">// 清理 Security 上下文，其中包含登录认证信息</span><br>    <span class="hljs-keyword">if</span> (clearAuthentication) &#123;<br>        SecurityContext context = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityContextHolder</span>.</span></span>get<span class="hljs-constructor">Context()</span>;<br>        context.set<span class="hljs-constructor">Authentication(<span class="hljs-params">null</span>)</span>;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityContextHolder</span>.</span></span>clear<span class="hljs-constructor">Context()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="访问授权（Authorization）"><a href="#访问授权（Authorization）" class="headerlink" title="访问授权（Authorization）"></a>访问授权（Authorization）</h2><p>访问授权主要分为两种：通过URL方式的接口访问控制和方法调用的权限控制。</p><h3 id="接口访问授权"><a href="#接口访问授权" class="headerlink" title="接口访问授权"></a>接口访问授权</h3><p>在通过比如浏览器使用URL访问后台接口时，是否允许访问此URL，就是接口访问权限。</p><p>在进行接口访问时，会由 FilterSecurityInterceptor 进行拦截并进行授权。</p><p>FilterSecurityInterceptor 继承了 AbstractSecurityInterceptor 并实现了 javax.servlet.Filter 接口， 所以在URL访问的时候都会被过滤器拦截，doFilter 实现如下。</p><p>FilterSecurityInterceptor.java</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">public</span> void <span class="hljs-keyword">do</span><span class="hljs-built_in">Filter</span>(ServletRequest <span class="hljs-built_in">request</span>, ServletResponse <span class="hljs-built_in">response</span>,<br>        FilterChain chain) throws IOException, ServletException &#123;<br>    FilterInvocation fi = <span class="hljs-keyword">new</span> FilterInvocation(<span class="hljs-built_in">request</span>, <span class="hljs-built_in">response</span>, chain);<br>    invoke(fi);<br>&#125;<br></code></pre></td></tr></table></figure><p>doFilter 方法又调用了自身的 invoke 方法， invoke 方法又调用了父类 AbstractSecurityInterceptor 的 beforeInvocation 方法。</p><p>FilterSecurityInterceptor.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void invoke(FilterInvocation fi) throws IOException, ServletException &#123;<br>    <span class="hljs-keyword">if</span> ((fi.get<span class="hljs-constructor">Request()</span> != null)<br><span class="hljs-operator">            &amp;&amp; </span>(fi.get<span class="hljs-constructor">Request()</span>.get<span class="hljs-constructor">Attribute(FILTER_APPLIED)</span> != null)<br><span class="hljs-operator">            &amp;&amp; </span>observeOncePerRequest) &#123;<br>        <span class="hljs-comment">// filter already applied to this request and user wants us to observe</span><br>        <span class="hljs-comment">// once-per-request handling, so don&#x27;t re-do security checking</span><br>        fi.get<span class="hljs-constructor">Chain()</span>.<span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(<span class="hljs-params">fi</span>.<span class="hljs-params">getRequest</span>()</span>, fi.get<span class="hljs-constructor">Response()</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// first time this request being called, so perform security checking</span><br>        <span class="hljs-keyword">if</span> (fi.get<span class="hljs-constructor">Request()</span> != null<span class="hljs-operator"> &amp;&amp; </span>observeOncePerRequest) &#123;<br>            fi.get<span class="hljs-constructor">Request()</span>.set<span class="hljs-constructor">Attribute(FILTER_APPLIED, Boolean.TRUE)</span>;<br>        &#125;<br><br>        InterceptorStatusToken token = super.before<span class="hljs-constructor">Invocation(<span class="hljs-params">fi</span>)</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fi.get<span class="hljs-constructor">Chain()</span>.<span class="hljs-keyword">do</span><span class="hljs-constructor">Filter(<span class="hljs-params">fi</span>.<span class="hljs-params">getRequest</span>()</span>, fi.get<span class="hljs-constructor">Response()</span>);<br>        &#125;<br>        finally &#123;<br>            super.finally<span class="hljs-constructor">Invocation(<span class="hljs-params">token</span>)</span>;<br>        &#125;<br><br>        super.after<span class="hljs-constructor">Invocation(<span class="hljs-params">token</span>, <span class="hljs-params">null</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法调用授权"><a href="#方法调用授权" class="headerlink" title="方法调用授权"></a>方法调用授权</h3><p>在进行后台方法调用时，是否允许该方法调用，就是方法调用权限。比如在方法上添加了此类注解 @PreAuthorize(“hasRole(‘ROLE_ADMIN’)”) ，Security 方法注解的支持需要在任何配置类中（如 WebSecurityConfigurerAdapter ）添加 @EnableGlobalMethodSecurity(prePostEnabled = true) 开启，才能够使用。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@EnableWebSecurity</span><br><span class="hljs-variable">@EnableGlobalMethodSecurity</span>(prePostEnabled = true)<br>public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在进行方法调用时，会由 MethodSecurityInterceptor 进行拦截并进行授权。</p><p>MethodSecurityInterceptor 继承了 AbstractSecurityInterceptor 并实现了AOP 的 org.aopalliance.intercept.MethodInterceptor 接口， 所以可以在方法调用时进行拦截。</p><p>MethodSecurityInterceptor .java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">invoke</span><span class="hljs-params">(MethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    InterceptorStatusToken token = <span class="hljs-keyword">super</span>.beforeInvocation(mi);<br><br>    Object result;<br>    <span class="hljs-keyword">try</span> &#123;<br>        result = mi.<span class="hljs-keyword">proceed</span>();<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">super</span>.finallyInvocation(token);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.<span class="hljs-title">afterInvocation</span><span class="hljs-params">(token, result)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看到，MethodSecurityInterceptor 跟 FilterSecurityInterceptor 一样， 都是通过调用父类 AbstractSecurityInterceptor 的相关方法完成授权，其中 beforeInvocation 是完成权限认证的关键。</p><p>AbstractSecurityInterceptor.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">protected</span> InterceptorStatusToken <span class="hljs-function"><span class="hljs-title">beforeInvocation</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> <span class="hljs-built_in">object</span></span>)</span> &#123;<br>        ...<br>　　　　　<span class="hljs-comment">// 通过 SecurityMetadataSource 获取权限配置信息，可以定制实现自己的权限信息获取逻辑</span><br>        Collection&lt;ConfigAttribute&gt; attributes = <span class="hljs-built_in">this</span>.obtainSecurityMetadataSource().getAttributes(<span class="hljs-built_in">object</span>);<br><br>　　　　　...　　　　　<span class="hljs-comment">// 确认是否经过登录认证　　　　　</span><br>        Authentication authenticated = authenticateIfRequired();<br><br>        <span class="hljs-comment">// Attempt authorization</span><br>        <span class="hljs-keyword">try</span> &#123;　　　　　　  <span class="hljs-comment">// 通过 AccessDecisionManager 完成授权认证，默认实现是 AffirmativeBased</span><br>            <span class="hljs-built_in">this</span>.accessDecisionManager.decide(authenticated, <span class="hljs-built_in">object</span>, attributes);<br>        &#125;<br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面代码显示 AbstractSecurityInterceptor 又是委托授权认证器 AccessDecisionManager 完成授权认证，默认实现是 AffirmativeBased， decide 方法实现如下。</p><p>AffirmativeBased.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decide</span>(<span class="hljs-params">Authentication authentication, Object <span class="hljs-built_in">object</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            Collection&lt;ConfigAttribute&gt; configAttributes</span>) throws AccessDeniedException</span> &#123;<br>        <span class="hljs-built_in">int</span> deny = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (AccessDecisionVoter voter : getDecisionVoters()) &#123;　　　　　　　　　 <span class="hljs-comment">// 通过各种投票策略，最终决定是否授权　</span><br>            <span class="hljs-built_in">int</span> result = voter.vote(authentication, <span class="hljs-built_in">object</span>, configAttributes);<br><span class="hljs-keyword">switch</span> (result) &#123;<br>            <span class="hljs-keyword">case</span> AccessDecisionVoter.ACCESS_GRANTED:<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">case</span> AccessDecisionVoter.ACCESS_DENIED:<br>                deny++;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-literal">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>　　　　...<br>    &#125;<br></code></pre></td></tr></table></figure><p>而 AccessDecisionManager 决定授权又是通过一个授权策略集合（AccessDecisionVoter ）决定的，授权决定的原则是：</p><ol><li><p>遍历所有授权策略， 如果有其中一个返回 ACCESS_GRANTED，则同意授权。</p></li><li><p>否则，等待遍历结束，统计 ACCESS_DENIED 个数，只要拒绝数大于1，则不同意授权。</p><p>对于接口访问授权，也就是 FilterSecurityInterceptor 管理的URL授权，默认对应的授权策略只有一个，就是 WebExpressionVoter，它的授权策略主要是根据 WebSecurityConfigurerAdapter 内配置的路径访问策略进行匹配，然后决定是否授权。</p></li></ol><p>WebExpressionVoter.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Voter which handles web authorisation decisions.</span><br><span class="hljs-comment"> * @author Luke Taylor</span><br><span class="hljs-comment"> * @since 3.0</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> WebExpressionVoter implements AccessDecisionVoter&lt;FilterInvocation&gt; &#123;<br>    <span class="hljs-keyword">private</span> SecurityExpressionHandler&lt;FilterInvocation&gt; expressionHandler = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultWebSecurityExpressionHandler()</span>;<br><br>    public <span class="hljs-built_in">int</span> vote(Authentication authentication, FilterInvocation fi,<br>            Collection&lt;ConfigAttribute&gt; attributes) &#123;<br>        <span class="hljs-keyword">assert</span> authentication != null;<br>        <span class="hljs-keyword">assert</span> fi != null;<br>        <span class="hljs-keyword">assert</span> attributes != null;<br><br>        WebExpressionConfigAttribute weca = find<span class="hljs-constructor">ConfigAttribute(<span class="hljs-params">attributes</span>)</span>;<br><br>        <span class="hljs-keyword">if</span> (weca<span class="hljs-operator"> == </span>null) &#123;<br>            return ACCESS_ABSTAIN;<br>        &#125;<br><br>        EvaluationContext ctx = expressionHandler.create<span class="hljs-constructor">EvaluationContext(<span class="hljs-params">authentication</span>, <span class="hljs-params">fi</span>)</span>;<br>        ctx = weca.post<span class="hljs-constructor">Process(<span class="hljs-params">ctx</span>, <span class="hljs-params">fi</span>)</span>;<br><br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ExpressionUtils</span>.</span></span>evaluate<span class="hljs-constructor">AsBoolean(<span class="hljs-params">weca</span>.<span class="hljs-params">getAuthorizeExpression</span>()</span>, ctx) ? ACCESS_GRANTED : ACCESS_DENIED;<br>    &#125;<br><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>对于方法调用授权，在全局方法安全配置类里，可以看到给 MethodSecurityInterceptor 默认配置的有 RoleVoter、AuthenticatedVoter、Jsr250Voter、和 PreInvocationAuthorizationAdviceVoter，其中 Jsr250Voter、PreInvocationAuthorizationAdviceVoter 都需要打开指定的开关，才会添加支持。</p><p>GlobalMethodSecurityConfiguration.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Configuration<br>public <span class="hljs-keyword">class</span> GlobalMethodSecurityConfiguration implements ImportAware, SmartInitializingSingleton &#123;<br>    ...<span class="hljs-keyword">private</span> MethodSecurityInterceptor methodSecurityInterceptor;<br>        　　@Bean<br>    public MethodInterceptor <span class="hljs-keyword">method</span><span class="hljs-constructor">SecurityInterceptor()</span> throws Exception &#123;<br>        this.methodSecurityInterceptor = is<span class="hljs-constructor">AspectJ()</span><br>                ? <span class="hljs-keyword">new</span> <span class="hljs-constructor">AspectJMethodSecurityInterceptor()</span><br>                : <span class="hljs-keyword">new</span> <span class="hljs-constructor">MethodSecurityInterceptor()</span>;<br>        methodSecurityInterceptor.set<span class="hljs-constructor">AccessDecisionManager(<span class="hljs-params">accessDecisionManager</span>()</span>);<br>        methodSecurityInterceptor.set<span class="hljs-constructor">AfterInvocationManager(<span class="hljs-params">afterInvocationManager</span>()</span>);<br>        methodSecurityInterceptor<br>                .set<span class="hljs-constructor">SecurityMetadataSource(<span class="hljs-params">methodSecurityMetadataSource</span>()</span>);<br>        RunAsManager runAsManager = run<span class="hljs-constructor">AsManager()</span>;<br>        <span class="hljs-keyword">if</span> (runAsManager != null) &#123;<br>            methodSecurityInterceptor.set<span class="hljs-constructor">RunAsManager(<span class="hljs-params">runAsManager</span>)</span>;<br>        &#125;<br><br>        return this.methodSecurityInterceptor;<br>    &#125;<br>    <br>    protected AccessDecisionManager access<span class="hljs-constructor">DecisionManager()</span> &#123;<br>        List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters = <span class="hljs-keyword">new</span> ArrayList&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt;<span class="hljs-literal">()</span>;<br>        ExpressionBasedPreInvocationAdvice expressionAdvice = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ExpressionBasedPreInvocationAdvice()</span>;<br>        expressionAdvice.set<span class="hljs-constructor">ExpressionHandler(<span class="hljs-params">getExpressionHandler</span>()</span>);<br>        <span class="hljs-keyword">if</span> (pre<span class="hljs-constructor">PostEnabled()</span>) &#123;<br>            decisionVoters<br>                    .add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">PreInvocationAuthorizationAdviceVoter(<span class="hljs-params">expressionAdvice</span>)</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (jsr250<span class="hljs-constructor">Enabled()</span>) &#123;<br>            decisionVoters.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Jsr250Voter()</span>);<br>        &#125;<br>        decisionVoters.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">RoleVoter()</span>);<br>        decisionVoters.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">AuthenticatedVoter()</span>);<br>        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">AffirmativeBased(<span class="hljs-params">decisionVoters</span>)</span>;<br>    &#125;　　...&#125;<br></code></pre></td></tr></table></figure><p>RoleVoter 是根据角色进行匹配授权的策略。</p><p>RoleVoter.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleVoter</span> <span class="hljs-title">implements</span> <span class="hljs-title">AccessDecisionVoter</span>&lt;<span class="hljs-title">Object</span>&gt; </span>&#123;<br>　　 <span class="hljs-comment">// RoleVoter  默认角色名以 &quot;ROLE_&quot; 为前缀。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> rolePrefix = <span class="hljs-string">&quot;ROLE_&quot;</span>;<span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">supports</span>(<span class="hljs-params">ConfigAttribute attribute</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> ((attribute.getAttribute() != <span class="hljs-literal">null</span>)<br>                &amp;&amp; attribute.getAttribute().startsWith(getRolePrefix())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">public</span> int vote(Authentication authentication, <span class="hljs-built_in">Object</span> <span class="hljs-built_in">object</span>,<br>            Collection&lt;ConfigAttribute&gt; attributes) &#123;<br>        <span class="hljs-keyword">if</span>(authentication == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ACCESS_DENIED;<br>        &#125;<br>        int result = ACCESS_ABSTAIN;<br>        Collection&lt;? <span class="hljs-keyword">extends</span> GrantedAuthority&gt; authorities = extractAuthorities(authentication);<br>　　　　　<span class="hljs-comment">// 逐个角色进行匹配，入股有一个匹配得上，则进行授权</span><br>        <span class="hljs-keyword">for</span> (ConfigAttribute attribute : attributes) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.supports(attribute)) &#123;<br>                result = ACCESS_DENIED;<br>                <span class="hljs-comment">// Attempt to find a matching granted authority</span><br>                <span class="hljs-keyword">for</span> (GrantedAuthority authority : authorities) &#123;<br>                    <span class="hljs-keyword">if</span> (attribute.getAttribute().equals(authority.getAuthority())) &#123;<br>                        <span class="hljs-keyword">return</span> ACCESS_GRANTED;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    Collection&lt;? <span class="hljs-keyword">extends</span> GrantedAuthority&gt; <span class="hljs-function"><span class="hljs-title">extractAuthorities</span>(<span class="hljs-params">Authentication authentication</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> authentication.getAuthorities();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>AuthenticatedVoter 主要是针对有配置以下几个属性来决定授权的策略。</p><p>IS_AUTHENTICATED_REMEMBERED：记住我登录状态</p><p>IS_AUTHENTICATED_ANONYMOUSLY：匿名认证状态</p><p>IS_AUTHENTICATED_FULLY： 完全登录状态，即非上面两种类型</p><p>AuthenticatedVoter.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-built_in">int</span> vote(Authentication authentication, Object <span class="hljs-keyword">object</span>,<br>            Collection&lt;ConfigAttribute&gt; attributes) &#123;<br>        <span class="hljs-built_in">int</span> result = ACCESS_ABSTAIN;<br><br>        <span class="hljs-keyword">for</span> (ConfigAttribute attribute : attributes) &#123;<br>            <span class="hljs-keyword">if</span> (this.supports(attribute)) &#123;<br>                result = ACCESS_DENIED;<br>　　　　　　　　　　<span class="hljs-comment">// 完全登录状态</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IS_AUTHENTICATED_FULLY</span>.</span></span>equals(attribute.get<span class="hljs-constructor">Attribute()</span>)) &#123;<br>                    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">FullyAuthenticated(<span class="hljs-params">authentication</span>)</span>) &#123;<br>                        return ACCESS_GRANTED;<br>                    &#125;<br>                &#125;<br>　　　　　　　　　 <span class="hljs-comment">// 记住我登录状态</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IS_AUTHENTICATED_REMEMBERED</span>.</span></span>equals(attribute.get<span class="hljs-constructor">Attribute()</span>)) &#123;<br>                    <span class="hljs-keyword">if</span> (authenticationTrustResolver.is<span class="hljs-constructor">RememberMe(<span class="hljs-params">authentication</span>)</span><br><span class="hljs-operator">                            || </span>is<span class="hljs-constructor">FullyAuthenticated(<span class="hljs-params">authentication</span>)</span>) &#123;<br>                        return ACCESS_GRANTED;<br>                    &#125;<br>                &#125;<br>　　　　　　　　　 <span class="hljs-comment">// 匿名登录状态</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">IS_AUTHENTICATED_ANONYMOUSLY</span>.</span></span>equals(attribute.get<span class="hljs-constructor">Attribute()</span>)) &#123;<br>                    <span class="hljs-keyword">if</span> (authenticationTrustResolver.is<span class="hljs-constructor">Anonymous(<span class="hljs-params">authentication</span>)</span><br><span class="hljs-operator">                            || </span>is<span class="hljs-constructor">FullyAuthenticated(<span class="hljs-params">authentication</span>)</span><br><span class="hljs-operator">                            || </span>authenticationTrustResolver.is<span class="hljs-constructor">RememberMe(<span class="hljs-params">authentication</span>)</span>) &#123;<br>                        return ACCESS_GRANTED;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        return result;<br>    &#125;<br></code></pre></td></tr></table></figure><p>PreInvocationAuthorizationAdviceVoter 是针对类似 @PreAuthorize(“hasRole(‘ROLE_ADMIN’)”) 注解解析并进行授权的策略。</p><p>PreInvocationAuthorizationAdviceVoter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PreInvocationAuthorizationAdviceVoter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccessDecisionVoter</span>&lt;<span class="hljs-title">MethodInvocation</span>&gt; </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PreInvocationAuthorizationAdvice preAdvice;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vote</span><span class="hljs-params">(Authentication authentication, MethodInvocation method,</span></span><br><span class="hljs-function"><span class="hljs-params">            Collection&lt;ConfigAttribute&gt; attributes)</span> </span>&#123;<br><br>        PreInvocationAttribute preAttr = findPreInvocationAttribute(attributes);<br><br>        <span class="hljs-keyword">if</span> (preAttr == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// No expression based metadata, so abstain</span><br>            <span class="hljs-keyword">return</span> ACCESS_ABSTAIN;<br>        &#125;<br><br>        <span class="hljs-keyword">boolean</span> allowed = preAdvice.before(authentication, method, preAttr);<br><br>        <span class="hljs-keyword">return</span> allowed ? ACCESS_GRANTED : ACCESS_DENIED;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> PreInvocationAttribute <span class="hljs-title">findPreInvocationAttribute</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            Collection&lt;ConfigAttribute&gt; config)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (ConfigAttribute attribute : config) &#123;<br>            <span class="hljs-keyword">if</span> (attribute <span class="hljs-keyword">instanceof</span> PreInvocationAttribute) &#123;<br>                <span class="hljs-keyword">return</span> (PreInvocationAttribute) attribute;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PreInvocationAuthorizationAdviceVoter 解析出注解属性配置， 然后通过调用 PreInvocationAuthorizationAdvice 的前置通知方法进行授权认证，默认实现类似 ExpressionBasedPreInvocationAdvice，通知内主要进行了内容的过滤和权限表达式的匹配。</p><p>ExpressionBasedPreInvocationAdvice.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ExpressionBasedPreInvocationAdvice implements PreInvocationAuthorizationAdvice &#123;<br>    <span class="hljs-keyword">private</span> MethodSecurityExpressionHandler expressionHandler = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultMethodSecurityExpressionHandler()</span>;<br><br>    public boolean before(Authentication authentication, MethodInvocation mi, PreInvocationAttribute attr) &#123;<br>        PreInvocationExpressionAttribute preAttr = (PreInvocationExpressionAttribute) attr;<br>        EvaluationContext ctx = expressionHandler.create<span class="hljs-constructor">EvaluationContext(<span class="hljs-params">authentication</span>, <span class="hljs-params">mi</span>)</span>;<br>        Expression preFilter = preAttr.get<span class="hljs-constructor">FilterExpression()</span>;<br>        Expression preAuthorize = preAttr.get<span class="hljs-constructor">AuthorizeExpression()</span>;<br><br>        <span class="hljs-keyword">if</span> (preFilter != null) &#123;<br>            Object filterTarget = find<span class="hljs-constructor">FilterTarget(<span class="hljs-params">preAttr</span>.<span class="hljs-params">getFilterTarget</span>()</span>, ctx, mi);<br>            expressionHandler.filter(filterTarget, preFilter, ctx);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (preAuthorize<span class="hljs-operator"> == </span>null) &#123;<br>            return <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ExpressionUtils</span>.</span></span>evaluate<span class="hljs-constructor">AsBoolean(<span class="hljs-params">preAuthorize</span>, <span class="hljs-params">ctx</span>)</span>;<br>    &#125;<br><br>　　...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h2><p>接下来，我们以一个实现案例来进行说明讲解。</p><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>新建一个 Spring Boot 项目 springboot-spring-security。</p><p>![img](Spring Security/1-20181128154034209-1921752671.png)</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>添加项目依赖，主要是 Spring Security 和 JWT，另外添加 Swagger 和 fastjson 作为辅助工具。</p><p>pom.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="xml">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>top.ivan.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-spring-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot-spring-security<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.spring.version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.spring.version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">swagger.version</span>&gt;</span>2.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">swagger.version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">jwt.version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">jwt.version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.2.48<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml">           <span class="hljs-comment">&lt;!-- spring boot --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- swagger --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;swagger.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;swagger.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- spring security --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- jwt --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;jwt.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- fastjson --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;fastjson.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><p>启动类没什么，主要开启以下包扫描。</p><p>SpringSecurityApplication.java</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">package</span> com.citibank.springboot.spring.security;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 启动器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">@SpringBootApplication</span><br><span class="hljs-keyword">@ComponentScan</span>(basePackages = <span class="hljs-string">&quot;com.louis.springboot&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> SpringSecurityApplication &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        SpringApplication.run(SpringSecurityApplication.<span class="hljs-keyword">class</span>, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跨域配置类"><a href="#跨域配置类" class="headerlink" title="跨域配置类"></a>跨域配置类</h3><p>跨域配置类，不多说，都懂得。</p><p>CorsConfig.java</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">package com.citibank.springboot.spring.security.config;<br><br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.servlet.config.annotation.CorsRegistry;<br>import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br>/**<br> * 跨域配置<br> */<br>@Configuration<br>public class CorsConfig implements WebMvcConfigurer &#123;<br><br>    @Override<br>    public void addCorsMappings(CorsRegistry registry) &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)    // 允许跨域访问的路径<br>        .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)    // 允许跨域访问的源<br>        .allowedMethods(<span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">OPTIONS</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">DELETE</span>&quot;</span>)    // 允许请求方法<br>        .maxAge(<span class="hljs-number">168000</span>)    // 预检间隔时间<br>        .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)  // 允许头部设置<br>        .allowCredentials(true);    // 是否发送cookie<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Swagger配置类"><a href="#Swagger配置类" class="headerlink" title="Swagger配置类"></a>Swagger配置类</h3><p>Swagger配置类，除了常规配置外，加了一个令牌属性，可以在接口调用的时候传递令牌。</p><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.citibank.springboot.spring.security.config;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ParameterBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.schema.ModelRef;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Parameter;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Swagger配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 添加请求参数，我们这里把token作为请求头部参数传入后端</span><br>        ParameterBuilder parameterBuilder = <span class="hljs-keyword">new</span> ParameterBuilder();<br>        List&lt;Parameter&gt; parameters = <span class="hljs-keyword">new</span> ArrayList&lt;Parameter&gt;();<br>        parameterBuilder.name(<span class="hljs-string">&quot;Authorization&quot;</span>).description(<span class="hljs-string">&quot;令牌&quot;</span>).modelRef(<span class="hljs-keyword">new</span> ModelRef(<span class="hljs-string">&quot;string&quot;</span>)).parameterType(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-keyword">false</span>).build();<br>        parameters.add(parameterBuilder.build());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select().apis(RequestHandlerSelectors.any())<br>                .paths(PathSelectors.any()).build().globalOperationParameters(parameters);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder().build();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>加了令牌属性后的 Swagger 接口调用界面。</p><p>![img](Spring Security/2-20181128155349854-989402738.png)</p><h3 id="安全配置类"><a href="#安全配置类" class="headerlink" title="安全配置类"></a>安全配置类</h3><p>下面这个配置类是Spring Security的关键配置。</p><p>在这个配置类中，我们主要做了以下几个配置：</p><ol><li><p>访问路径URL的授权策略，如登录、Swagger访问免登录认证等</p></li><li><p>指定了登录认证流程过滤器 JwtLoginFilter，由它来触发登录认证</p></li><li><p>指定了自定义身份认证组件 JwtAuthenticationProvider，并注入 UserDetailsService</p></li><li><p>指定了访问控制过滤器 JwtAuthenticationFilter，在授权时解析令牌和设置登录状态</p></li><li><p>指定了退出登录处理器，因为是前后端分离，防止内置的登录处理器在后台进行跳转</p></li></ol><p>WebSecurityConfig.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.citibank.springboot.spring.security.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.<span class="hljs-type">Autowired</span>;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.<span class="hljs-type">Bean</span>;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.<span class="hljs-type">Configuration</span>;<br><span class="hljs-keyword">import</span> org.springframework.http.<span class="hljs-type">HttpMethod</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.<span class="hljs-type">AuthenticationManager</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.<span class="hljs-type">AuthenticationManagerBuilder</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.<span class="hljs-type">EnableGlobalMethodSecurity</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.<span class="hljs-type">HttpSecurity</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.<span class="hljs-type">EnableWebSecurity</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.<span class="hljs-type">WebSecurityConfigurerAdapter</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.<span class="hljs-type">UserDetailsService</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.<span class="hljs-type">UsernamePasswordAuthenticationFilter</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.logout.<span class="hljs-type">HttpStatusReturningLogoutSuccessHandler</span>;<br><br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.security.<span class="hljs-type">JwtAuthenticationFilter</span>;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.security.<span class="hljs-type">JwtAuthenticationProvider</span>;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.security.<span class="hljs-type">JwtLoginFilter</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Security Config</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="hljs-literal">true</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserDetailsService</span> userDetailsService;<br>    <br>    <span class="hljs-meta">@Override</span><br>    public void configure(<span class="hljs-type">AuthenticationManagerBuilder</span> auth) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>        <span class="hljs-comment">// 使用自定义登录身份认证组件</span><br>        auth.authenticationProvider(<span class="hljs-keyword">new</span> <span class="hljs-type">JwtAuthenticationProvider</span>(userDetailsService));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void configure(<span class="hljs-type">HttpSecurity</span> http) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>        <span class="hljs-comment">// 禁用 csrf, 由于使用的是JWT，我们这里不需要csrf</span><br>        http.cors().and().csrf().disable()<br>            .authorizeRequests()<br>            <span class="hljs-comment">// 跨域预检请求</span><br>            .antMatchers(<span class="hljs-type">HttpMethod</span>.<span class="hljs-type">OPTIONS</span>, <span class="hljs-string">&quot;/**&quot;</span>).permitAll()<br>            <span class="hljs-comment">// 登录URL</span><br>            .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>            <span class="hljs-comment">// swagger</span><br>            .antMatchers(<span class="hljs-string">&quot;/swagger-ui.html&quot;</span>).permitAll()<br>            .antMatchers(<span class="hljs-string">&quot;/swagger-resources&quot;</span>).permitAll()<br>            .antMatchers(<span class="hljs-string">&quot;/v2/api-docs&quot;</span>).permitAll()<br>            .antMatchers(<span class="hljs-string">&quot;/webjars/springfox-swagger-ui/**&quot;</span>).permitAll()<br>            <span class="hljs-comment">// 其他所有请求需要身份认证</span><br>            .anyRequest().authenticated();<br>        <span class="hljs-comment">// 退出登录处理器</span><br>        http.logout().logoutSuccessHandler(<span class="hljs-keyword">new</span> <span class="hljs-type">HttpStatusReturningLogoutSuccessHandler</span>());<br>        <span class="hljs-comment">// 开启登录认证流程过滤器</span><br>        http.addFilterBefore(<span class="hljs-keyword">new</span> <span class="hljs-type">JwtLoginFilter</span>(authenticationManager()), <span class="hljs-type">UsernamePasswordAuthenticationFilter</span>.<span class="hljs-keyword">class</span>);<br>        <span class="hljs-comment">// 访问控制时登录状态检查过滤器</span><br>        http.addFilterBefore(<span class="hljs-keyword">new</span> <span class="hljs-type">JwtAuthenticationFilter</span>(authenticationManager()), <span class="hljs-type">UsernamePasswordAuthenticationFilter</span>.<span class="hljs-keyword">class</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">AuthenticationManager</span> authenticationManager() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.authenticationManager();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="登录认证触发过滤器"><a href="#登录认证触发过滤器" class="headerlink" title="登录认证触发过滤器"></a>登录认证触发过滤器</h3><p>JwtLoginFilter 是在通过访问 /login 的POST请求是被首先被触发的过滤器，默认实现是 UsernamePasswordAuthenticationFilter，它继承了 AbstractAuthenticationProcessingFilter，抽象父类的 doFilter 定义了登录认证的大致操作流程，这里我们的 JwtLoginFilter 继承了 UsernamePasswordAuthenticationFilter，并进行了两个主要内容的定制。</p><ol><li><p>覆写认证方法，修改用户名、密码的获取方式，具体原因看代码注释</p></li><li><p>覆写认证成功后的操作，移除后台跳转，添加生成令牌并返回给客户端</p></li></ol><p>JwtLoginFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.citibank.springboot.spring.security.security;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.utils.HttpUtils;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.utils.JwtTokenUtils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 启动登录认证流程过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtLoginFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JwtLoginFilter</span><span class="hljs-params">(AuthenticationManager authManager)</span> </span>&#123;<br>        setAuthenticationManager(authManager);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// POST 请求 /login 登录时拦截， 由此方法触发执行登录认证流程，可以在此覆写整个登录认证逻辑</span><br>        <span class="hljs-keyword">super</span>.doFilter(req, res, chain); <br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        <span class="hljs-comment">// 可以在此覆写尝试进行登录认证的逻辑，登录成功之后等操作不再此方法内</span><br>        <span class="hljs-comment">// 如果使用此过滤器来触发登录认证流程，注意登录请求数据格式的问题</span><br>        <span class="hljs-comment">// 此过滤器的用户名密码默认从request.getParameter()获取，但是这种</span><br>        <span class="hljs-comment">// 读取方式不能读取到如 application/json 等 post 请求数据，需要把</span><br>        <span class="hljs-comment">// 用户名密码的读取逻辑修改为到流中读取request.getInputStream()</span><br><br>        String body = getBody(request);<br>        JSONObject jsonObject = JSON.parseObject(body);<br>        String username = jsonObject.getString(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = jsonObject.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (username == <span class="hljs-keyword">null</span>) &#123;<br>            username = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (password == <span class="hljs-keyword">null</span>) &#123;<br>            password = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        username = username.trim();<br><br>        JwtAuthenticatioToken authRequest = <span class="hljs-keyword">new</span> JwtAuthenticatioToken(username, password);<br><br>        <span class="hljs-comment">// Allow subclasses to set the &quot;details&quot; property</span><br>        setDetails(request, authRequest);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getAuthenticationManager().authenticate(authRequest);<br>    <br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">successfulAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain,</span></span><br><span class="hljs-function"><span class="hljs-params">            Authentication authResult)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// 存储登录认证信息到上下文</span><br>        SecurityContextHolder.getContext().setAuthentication(authResult);<br>        <span class="hljs-comment">// 记住我服务</span><br>        getRememberMeServices().loginSuccess(request, response, authResult);<br>        <span class="hljs-comment">// 触发事件监听器</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.eventPublisher != <span class="hljs-keyword">null</span>) &#123;<br>            eventPublisher.publishEvent(<span class="hljs-keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="hljs-keyword">this</span>.getClass()));<br>        &#125;<br>        <span class="hljs-comment">// 生成并返回token给客户端，后续访问携带此token</span><br>        JwtAuthenticatioToken token = <span class="hljs-keyword">new</span> JwtAuthenticatioToken(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, JwtTokenUtils.generateToken(authResult));<br>        HttpUtils.write(response, token);<br>    &#125;<br>    <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * 获取请求Body</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBody</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        BufferedReader reader = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = request.getInputStream();<br>            reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(inputStream, Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>)));<br>            String line = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>                sb.append(line);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (reader != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    reader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="登录控制器"><a href="#登录控制器" class="headerlink" title="登录控制器"></a>登录控制器</h3><p>除了使用上面的登录认证过滤器拦截 /login Post请求之外，我们也可以不使用上面的过滤器，通过自定义登录接口实现，只要在登录接口手动触发登录流程并生产令牌即可。</p><p>其实 Spring Security 的登录认证过程只需 调用 AuthenticationManager 的 authenticate(Authentication authentication) 方法，最终返回认证成功的 Authentication 实现类并存储到SpringContexHolder 上下文即可，这样后面授权的时候就可以从 SpringContexHolder 中获取登录认证信息，并根据其中的用户信息和权限信息决定是否进行授权。</p><p>LoginController.java</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.citibank.springboot.spring.security.controller;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RestController;<br><br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.security.JwtAuthenticatioToken;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.utils.SecurityUtils;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.vo.HttpResult;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.vo.LoginBean;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录控制器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(value = <span class="hljs-meta-string">&quot;/login&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> HttpResult login(<span class="hljs-meta">@RequestBody</span> LoginBean loginBean, HttpServletRequest request) throws IOException &#123;<br>        String username = loginBean.getUsername();<br>        String password = loginBean.getPassword();<br>        <br>        <span class="hljs-comment">// 系统登录认证</span><br>        JwtAuthenticatioToken token = SecurityUtils.login(request, username, password, authenticationManager);<br>                <br>        <span class="hljs-keyword">return</span> HttpResult.ok(token);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果使用此登录控制器触发登录认证，需要禁用登录认证过滤器，即将 WebSecurityConfig 中的以下配置项注释即可，否则访问登录接口会被过滤拦截，执行不会再进入此登录接口，大家根据使用习惯二选一即可。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 开启登录认证流程过滤器，如果使用LoginController的login接口, 需要注释掉此过滤器，根据使用习惯二选一即可</span><br>http.add<span class="hljs-constructor">FilterBefore(<span class="hljs-params">new</span> JwtLoginFilter(<span class="hljs-params">authenticationManager</span>()</span>), <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UsernamePasswordAuthenticationFilter</span>.</span></span><span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><p>如下是登录认证的逻辑， 可以看到部分逻辑跟上面的登录认证过滤器差不多。</p><ol><li><p>执行登录认证过程，通过调用 AuthenticationManager 的 authenticate(token) 方法实现</p></li><li><p>将认证成功的认证信息存储到上下文，供后续访问授权的时候获取使用</p></li><li><p>通过JWT生成令牌并返回给客户端，后续访问和操作都需要携带此令牌</p></li></ol><p>SecurityUtils.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Security相关操作</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> SecurityUtils &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统登录认证</span><br><span class="hljs-comment">     * @param request</span><br><span class="hljs-comment">     * @param username</span><br><span class="hljs-comment">     * @param password</span><br><span class="hljs-comment">     * @param authenticationManager</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static JwtAuthenticatioToken login(HttpServletRequest request, String username, String password, AuthenticationManager authenticationManager) &#123;<br>        JwtAuthenticatioToken token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JwtAuthenticatioToken(<span class="hljs-params">username</span>, <span class="hljs-params">password</span>)</span>;<br>        token.set<span class="hljs-constructor">Details(<span class="hljs-params">new</span> WebAuthenticationDetailsSource()</span>.build<span class="hljs-constructor">Details(<span class="hljs-params">request</span>)</span>);<br>        <span class="hljs-comment">// 执行登录认证过程</span><br>        Authentication authentication = authenticationManager.authenticate(token);<br>        <span class="hljs-comment">// 认证成功存储认证信息到上下文</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityContextHolder</span>.</span></span>get<span class="hljs-constructor">Context()</span>.set<span class="hljs-constructor">Authentication(<span class="hljs-params">authentication</span>)</span>;<br>        <span class="hljs-comment">// 生成令牌并返回给客户端</span><br>        token.set<span class="hljs-constructor">Token(JwtTokenUtils.<span class="hljs-params">generateToken</span>(<span class="hljs-params">authentication</span>)</span>);<br>        return token;<br>    &#125;　　　　...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="令牌生成器"><a href="#令牌生成器" class="headerlink" title="令牌生成器"></a>令牌生成器</h3><p>我们令牌是使用JWT生成的，下面是令牌生成的简要逻辑，详细参见源码。</p><p>JwtTokenUtils.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtTokenUtils</span> <span class="hljs-title">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    ...<span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成令牌</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>userDetails 用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>令牌</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">generateToken</span>(<span class="hljs-params">Authentication authentication</span>)</span> &#123;<br>        <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; claims = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(<span class="hljs-number">3</span>);<br>        claims.put(USERNAME, SecurityUtils.getUsername(authentication));<br>        claims.put(CREATED, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br>        claims.put(AUTHORITIES, authentication.getAuthorities());<br>        <span class="hljs-keyword">return</span> generateToken(claims);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从数据声明生成令牌</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>claims 数据声明</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return </span>令牌</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">generateToken</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; claims</span>)</span> &#123;<br>        <span class="hljs-built_in">Date</span> expirationDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(System.currentTimeMillis() + EXPIRE_TIME);<br>        <span class="hljs-keyword">return</span> Jwts.builder().setClaims(claims).setExpiration(expirationDate).signWith(SignatureAlgorithm.HS512, SECRET).compact();<br>    &#125;<br><br>　　...<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="登录身份认证组件"><a href="#登录身份认证组件" class="headerlink" title="登录身份认证组件"></a>登录身份认证组件</h3><p>上面说到登录认证是通过调用 AuthenticationManager 的 authenticate(token) 方法实现的，而 AuthenticationManager 又是通过调用 AuthenticationProvider 的 authenticate(Authentication authentication) 来完成认证的，所以通过定制 AuthenticationProvider 也可以完成各种自定义的需求，我们这里只是简单的继承 DaoAuthenticationProvider 展示如何自定义，具体的大家可以根据各自的需求按需定制。</p><p>JwtAuthenticationProvider.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.citibank.springboot.spring.security.security;<br><br><span class="hljs-keyword">import</span> org.springframework.security.authentication.<span class="hljs-type">UsernamePasswordAuthenticationToken</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.dao.<span class="hljs-type">DaoAuthenticationProvider</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.core.<span class="hljs-type">Authentication</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.core.<span class="hljs-type">AuthenticationException</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.<span class="hljs-type">UserDetails</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.<span class="hljs-type">UserDetailsService</span>;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.<span class="hljs-type">BCryptPasswordEncoder</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 身份验证提供者</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtAuthenticationProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DaoAuthenticationProvider</span> </span>&#123;<br><br>    public <span class="hljs-type">JwtAuthenticationProvider</span>(<span class="hljs-type">UserDetailsService</span> userDetailsService) &#123;<br>        setUserDetailsService(userDetailsService);<br>        setPasswordEncoder(<span class="hljs-keyword">new</span> <span class="hljs-type">BCryptPasswordEncoder</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">Authentication</span> authenticate(<span class="hljs-type">Authentication</span> authentication) <span class="hljs-keyword">throws</span> <span class="hljs-type">AuthenticationException</span> &#123;<br>        <span class="hljs-comment">// 可以在此处覆写整个登录认证逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.authenticate(authentication);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void additionalAuthenticationChecks(<span class="hljs-type">UserDetails</span> userDetails, <span class="hljs-type">UsernamePasswordAuthenticationToken</span> authentication)<br>            <span class="hljs-keyword">throws</span> <span class="hljs-type">AuthenticationException</span> &#123;<br>        <span class="hljs-comment">// 可以在此处覆写密码验证逻辑</span><br>        <span class="hljs-keyword">super</span>.additionalAuthenticationChecks(userDetails, authentication);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="认证信息获取服务"><a href="#认证信息获取服务" class="headerlink" title="认证信息获取服务"></a>认证信息获取服务</h3><p>通过跟踪代码运行，我们发现像默认使用的 DaoAuthenticationProvider，在认证的使用都是通过一个叫 UserDetailsService 的来获取用户认证所需信息的。</p><p>AbstractUserDetailsAuthenticationProvider 定义了在 authenticate 方法中通过 retrieveUser 方法获取用户信息，子类 DaoAuthenticationProvider 通过 UserDetailsService 来进行获取， 一般情况，这个 UserDetailsService 需要我们自定义，实现从用户服务获取用户和权限信息封装到 UserDetails 的实现类。</p><p>AbstractUserDetailsAuthenticationProvider.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function">Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        <br>　　　　　...<span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;<br>            cacheWasUsed = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);<br>            &#125;<br>     <br>        ...<span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">createSuccessAuthentication</span><span class="hljs-params">(principalToReturn, authentication, user)</span></span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>DaoAuthenticationProvider.java</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> UserDetails <span class="hljs-title">retrieveUser</span><span class="hljs-params">(<span class="hljs-keyword">String</span> username, UsernamePasswordAuthenticationToken authentication)</span></span><br><span class="hljs-function">        throws AuthenticationException </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        UserDetails loadedUser = <span class="hljs-keyword">this</span>.getUserDetailsService().loadUserByUsername(username);<br>   <span class="hljs-keyword">return</span> loadedUser;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>我们自定义的 UserDetailsService，从我们的用户服务 UserService 中获取用户和权限信息。</p><p>UserDetailsServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.citibank.springboot.spring.security.security;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.model.User;<br><span class="hljs-keyword">import</span> com.citibank.springboot.spring.security.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户登录认证信息查询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        User user = userService.findByUsername(username);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">&quot;该用户不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 用户权限列表，根据用户拥有的权限标识与如 @PreAuthorize(&quot;hasAuthority(&#x27;sys:menu:view&#x27;)&quot;) 标注的接口对比，决定是否可以调用接口</span><br>        Set&lt;String&gt; permissions = userService.findPermissions(username);<br>        List&lt;GrantedAuthority&gt; grantedAuthorities = permissions.stream().map(GrantedAuthorityImpl::<span class="hljs-keyword">new</span>).collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JwtUserDetails(username, user.getPassword(), grantedAuthorities);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般而言，定制 UserDetailsService 就可以满足大部分需求了，在 UserDetailsService 满足不了我们的需求的时候考虑定制 AuthenticationProvider。</p><p>如果直接定制UserDetailsService ，而不自定义 AuthenticationProvider，可以直接在配置文件 WebSecurityConfig 中这样配置。</p><p>WebSecurityConfig.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 指定自定义的获取信息获取服务</span><br>    auth.userDetailsService(userDetailsService)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户认证信息"><a href="#用户认证信息" class="headerlink" title="用户认证信息"></a>用户认证信息</h3><p>上面 UserDetailsService 加载好用户认证信息后会封装认证信息到一个 UserDetails 的实现类。</p><p>默认实现是 User 类，我们这里没有特殊需要，简单继承即可，复杂需求可以在此基础上进行拓展。</p><p>JwtUserDetails.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.citibank.springboot.spring.security.security;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 安全用户模型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUserDetails</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = 1L;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">JwtUserDetails</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> username, <span class="hljs-built_in">String</span> password, Collection&lt;? <span class="hljs-keyword">extends</span> GrantedAuthority&gt; authorities</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>(username, password, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, authorities);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> JwtUserDetails(<span class="hljs-built_in">String</span> username, <span class="hljs-built_in">String</span> password, <span class="hljs-built_in">boolean</span> enabled, <span class="hljs-built_in">boolean</span> accountNonExpired,<br>            <span class="hljs-built_in">boolean</span> credentialsNonExpired, <span class="hljs-built_in">boolean</span> accountNonLocked, Collection&lt;? <span class="hljs-keyword">extends</span> GrantedAuthority&gt; authorities) &#123;<br>        <span class="hljs-built_in">super</span>(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户操作代码"><a href="#用户操作代码" class="headerlink" title="用户操作代码"></a>用户操作代码</h3><p>简单的用户模型，包含用户名密码。</p><p>User.java</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.louis.springboot.spring.security.model;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户模型</span><br><span class="hljs-comment"> * @author Louis</span><br><span class="hljs-comment"> * @date Nov 28, 2018</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> username;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> password;<br><br>    ...<br><br>&#125;<br></code></pre></td></tr></table></figure><p>用户服务接口，只提供简单的用户查询和权限查询接口用于模拟。</p><p>UserService.java</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户管理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名查找用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    User findByUsername(<span class="hljs-keyword">String</span> username);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查找用户的菜单权限标识集合</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Set&lt;<span class="hljs-keyword">String</span>&gt; findPermissions(<span class="hljs-keyword">String</span> username);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>用户服务实现，只简单获取返回模拟数据，实际场景根据情况从DAO获取即可。</p><p>SysUserServiceImpl.java</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Service<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> SysUserServiceImpl implements UserService &#123;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> findByUsername(String username) &#123;<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>        <span class="hljs-keyword">user</span>.setId(<span class="hljs-number">1</span>L);<br>        <span class="hljs-keyword">user</span>.setUsername(username);<br>        String <span class="hljs-keyword">password</span> = <span class="hljs-built_in">new</span> BCryptPasswordEncoder().encode(&quot;123&quot;);<br>        <span class="hljs-keyword">user</span>.setPassword(<span class="hljs-keyword">password</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Set</span>&lt;String&gt; findPermissions(String username) &#123;<br>        <span class="hljs-keyword">Set</span>&lt;String&gt; permissions = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>        permissions.<span class="hljs-keyword">add</span>(&quot;sys:user:view&quot;);<br>        permissions.<span class="hljs-keyword">add</span>(&quot;sys:user:add&quot;);<br>        permissions.<span class="hljs-keyword">add</span>(&quot;sys:user:edit&quot;);<br>        <span class="hljs-keyword">return</span> permissions;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>用户控制器，提供三个测试接口，其中权限列表中未包含删除接口定义的权限（’sys:user:delete’），登录之后也将无权限调用。</p><p>UserController.java</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户控制器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@RestController</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;user&quot;</span>)<br>public class UserController &#123;<br><br>    <br>    <span class="hljs-variable">@PreAuthorize</span>(<span class="hljs-string">&quot;hasAuthority(&#x27;sys:user:view&#x27;)&quot;</span>)<br>    <span class="hljs-variable">@GetMapping</span>(value=<span class="hljs-string">&quot;/findAll&quot;</span>)<br>    public HttpResult findAll() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">HttpResult</span><span class="hljs-selector-class">.ok</span>(<span class="hljs-string">&quot;the findAll service is called success.&quot;</span>);<br>    &#125;<br>    <br>    @<span class="hljs-selector-tag">PreAuthorize</span>(<span class="hljs-string">&quot;hasAuthority(&#x27;sys:user:edit&#x27;)&quot;</span>)<br>    @<span class="hljs-selector-tag">GetMapping</span>(value=<span class="hljs-string">&quot;/edit&quot;</span>)<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">HttpResult</span> <span class="hljs-selector-tag">edit</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">HttpResult</span><span class="hljs-selector-class">.ok</span>(<span class="hljs-string">&quot;the edit service is called success.&quot;</span>);<br>    &#125;<br>    <br>    @<span class="hljs-selector-tag">PreAuthorize</span>(<span class="hljs-string">&quot;hasAuthority(&#x27;sys:user:delete&#x27;)&quot;</span>)<br>    @<span class="hljs-selector-tag">GetMapping</span>(value=<span class="hljs-string">&quot;/delete&quot;</span>)<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">HttpResult</span> <span class="hljs-selector-tag">delete</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">HttpResult</span><span class="hljs-selector-class">.ok</span>(<span class="hljs-string">&quot;the delete service is called success.&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="登录认证检查过滤器"><a href="#登录认证检查过滤器" class="headerlink" title="登录认证检查过滤器"></a>登录认证检查过滤器</h3><p>访问接口的时候，登录认证检查过滤器 JwtAuthenticationFilter 会拦截请求校验令牌和登录状态，并根据情况设置登录状态。</p><p>JwtAuthenticationFilter.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录认证检查过滤器</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasicAuthenticationFilter</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    public <span class="hljs-type">JwtAuthenticationFilter</span>(<span class="hljs-type">AuthenticationManager</span> authenticationManager) &#123;<br>        <span class="hljs-keyword">super</span>(authenticationManager);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doFilterInternal(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response, <span class="hljs-type">FilterChain</span> chain) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span>, <span class="hljs-type">ServletException</span> &#123;<br>        <span class="hljs-comment">// 获取token, 并检查登录状态</span><br>        <span class="hljs-type">SecurityUtils</span>.checkAuthentication(request);<br>        chain.doFilter(request, response);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>SecurityUtils.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取令牌进行认证</span><br><span class="hljs-comment"> * @param request</span><br><span class="hljs-comment"> */</span><br>public static void check<span class="hljs-constructor">Authentication(HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>    <span class="hljs-comment">// 获取令牌并根据令牌获取登录认证信息</span><br>    Authentication authentication = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JwtTokenUtils</span>.</span></span>get<span class="hljs-constructor">AuthenticationeFromToken(<span class="hljs-params">request</span>)</span>;<br>    <span class="hljs-comment">// 设置登录认证信息到上下文</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityContextHolder</span>.</span></span>get<span class="hljs-constructor">Context()</span>.set<span class="hljs-constructor">Authentication(<span class="hljs-params">authentication</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>JwtTokenUtils.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据请求令牌获取登录认证信息</span><br><span class="hljs-comment"> * @param token 令牌</span><br><span class="hljs-comment"> * @return 用户名</span><br><span class="hljs-comment"> */</span><br>public static Authentication get<span class="hljs-constructor">AuthenticationeFromToken(HttpServletRequest <span class="hljs-params">request</span>)</span> &#123;<br>    Authentication authentication = null;<br>    <span class="hljs-comment">// 获取请求携带的令牌</span><br>    String token = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JwtTokenUtils</span>.</span></span>get<span class="hljs-constructor">Token(<span class="hljs-params">request</span>)</span>;<br>    <span class="hljs-keyword">if</span>(token != null) &#123;<br>        <span class="hljs-comment">// 请求令牌不能为空</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Authentication()</span><span class="hljs-operator"> == </span>null) &#123;<br>            <span class="hljs-comment">// 上下文中Authentication为空</span><br>            Claims claims = get<span class="hljs-constructor">ClaimsFromToken(<span class="hljs-params">token</span>)</span>;<br>            <span class="hljs-keyword">if</span>(claims<span class="hljs-operator"> == </span>null) &#123;<br>                return null;<br>            &#125;<br>            String username = claims.get<span class="hljs-constructor">Subject()</span>;<br>            <span class="hljs-keyword">if</span>(username<span class="hljs-operator"> == </span>null) &#123;<br>                return null;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(is<span class="hljs-constructor">TokenExpired(<span class="hljs-params">token</span>)</span>) &#123;<br>                return null;<br>            &#125;<br>            Object authors = claims.get(AUTHORITIES);<br>            List&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;GrantedAuthority&gt;<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">if</span> (authors != null<span class="hljs-operator"> &amp;&amp; </span>authors instanceof List) &#123;<br>                <span class="hljs-keyword">for</span> (Object <span class="hljs-keyword">object</span> : (List) authors) &#123;<br>                    authorities.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">GrantedAuthorityImpl((String)</span> ((Map) <span class="hljs-keyword">object</span>).get(<span class="hljs-string">&quot;authority&quot;</span>)));<br>                &#125;<br>            &#125;<br>            authentication = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JwtAuthenticatioToken(<span class="hljs-params">username</span>, <span class="hljs-params">null</span>, <span class="hljs-params">authorities</span>, <span class="hljs-params">token</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(validate<span class="hljs-constructor">Token(<span class="hljs-params">token</span>, SecurityUtils.<span class="hljs-params">getUsername</span>()</span>)) &#123;<br>                <span class="hljs-comment">// 如果上下文中Authentication非空，且请求令牌合法，直接返回当前登录认证信息</span><br>                authentication = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Authentication()</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    return authentication;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><p>找到 SpringSecurityApplication， 启动程序， 访问 <a href="http://localhost:8080/swagger-ui.html%EF%BC%8C%E8%BF%9B%E5%85%A5Swagger%E3%80%82">http://localhost:8080/swagger-ui.html，进入Swagger。</a></p><p>![img](Spring Security/3-20181128173706668-177381559.png)</p><p>我们先再未登录没有令牌的时候直接访问接口，发现都返回无权限，禁止访问的结果。</p><p>![img](Spring Security/4-20181128173840193-199335952.png)</p><p>返回拒绝访问结果。</p><p>![img](Spring Security/5-20181128174042582-676639129.png)</p><p> 打开 LoginController，输入我们用户名和密码（username:amdin, password:123）</p><p>![img](Spring Security/6-20181128174231451-1027667004.png)</p><p> 登录成功之后，成功返回令牌，如下图所示。</p><p> ![img](Spring Security/7-20181128174436613-252448914.png)</p><p>拷贝返回的令牌，粘贴到令牌参数输入框，再次访问 /user/edit 接口。</p><p>![img](Spring Security/8-20181128174642788-1883486292.png)</p><p>这个时候，成功的返回了结果： the edit service is called success.</p><p>![img](Spring Security/9-20181128174754351-925193390.png)</p><p>同样的，拷贝返回的令牌，粘贴到令牌参数输入框，访问 /user/delete 接口。</p><p>![img](Spring Security/91-20181128174924465-934756567.png)</p><p>发现还是返回拒绝访问的结果，那是因为访问这个接口需要 ‘sys:user:delete’ 权限，而我们之前返回的权限列表中并没有包含，所以授权访问失败。</p><p>![img](Spring Security/92-20181128175018727-518353637.png)</p><p>我们修改一下 SysUserServiceImpl，添加上‘sys:user:delete’ 权限，重新登录，再次访问一遍。</p><p>![img](Spring Security/93-20181128175401465-494777099.png)</p><p>发现删除接口也可以访问了，记住务必要重新调用登录接口，获取令牌后拷贝到删除接口，再次访问删除接口。</p><p>![img](Spring Security/94-20181128175606389-1013803667.png)</p><p>至此结束。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/Shiro/"/>
    <url>/2021/02/15/Shiro/</url>
    
    <content type="html"><![CDATA[<h3 id="Shiro安全框架"><a href="#Shiro安全框架" class="headerlink" title="Shiro安全框架"></a>Shiro安全框架</h3><p>Apache Shiro是一个<code>强大且易用的Java安全框架</code>，有<code>身份验证</code>、<code>授权</code>、<code>密码学</code>和<code>会话管理</code>。使用Shiro的易于理解的API，您可以快速、轻松地获得任何应用程序，从最小的移动应用程序到最大的网络和企业应用程序。</p><ul><li><p>Spring security是一个重量级的安全框架</p></li><li><p>Apache Shiro是一个轻量级的安全框架</p></li></ul><p><img src="/2021/02/15/Shiro/image-20191214181115794.png" alt="image-20191214181115794"></p><p>Shiro 开发团队称 “ 应用程序的四大基石：身份验证，授权，会话管理和加密 “ 为其目标。</p><p><strong>Authentication(身份认证)：</strong></p><p>有时也简称为“登录”，这是一个证明用户是他们所说的他们是谁的行为。</p><p><strong>Authorization（授权）：</strong></p><p>访问控制的过程，也就是绝对“谁”去访问“什么”权限。</p><p><strong>Session Management（会话管理）：</strong></p><p>管理用户特定的会话，即使在非 Web 或 EJB 应用程序。</p><p><strong>Cryptography（密码学）：</strong></p><p>通过使用加密算法保持数据安全同时易于使用。</p><p>Shiro还提供了额外的功能来支持和加强在不同环境下所关注的方面，尤其是以下这些：</p><p><strong>Web Support：</strong> Shiro 的 web 支持的 API 能够轻松地帮助保护 Web 应用程序。</p><p><strong>Caching：</strong>缓存是 Apache Shiro 中的第一层公民，来确保安全操作快速而又高效。</p><p><strong>Concurrency：</strong> Apache Shiro 利用它的并发特性来支持多线程应用程序。</p><p><strong>Testing：</strong>测试支持的存在来帮助你编写单元测试和集成测试，并确保你的能够如预期的一样安全。</p><p><strong>“Run As”：</strong>一个允许用户假设为另一个用户身份（如果允许）的功能，有时候在管理脚本很有用。</p><p><strong>“Remember Me”：</strong>在会话中记住用户的身份，所以他们只需要在强制时候登录。</p><h4 id="1、Shiro的架构"><a href="#1、Shiro的架构" class="headerlink" title="1、Shiro的架构"></a>1、Shiro的架构</h4><h5 id="1、Shiro外部来说"><a href="#1、Shiro外部来说" class="headerlink" title="1、Shiro外部来说"></a>1、Shiro外部来说</h5><p>从外部来看Shiro，即从应用程序角度来如何使用shiro来完成工作(认证、授权等)。</p><p><img src="/2021/02/15/Shiro/image-20191214182355268.png" alt="image-20191214182355268"></p><p><strong>Subject：</strong>应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject。Subject代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫、机器人等；</p><p>与Subject的所有交互都会委托给SecurityManager，Subject其实就是一个门面，SecurityManager才是实际的执行者；</p><p><strong>SecurityManager：</strong>安全管理器，即所有与安全有关的操作都会SecurityManager交互，并且管理着所有Subject；可以看出他是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC中DispatcherServlet的角色；</p><p><strong>Realm：</strong>Shiro从Realm获取安全数据（如用户，角色，权限），就是说SecurityManager要验证用户身份，那么他需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要Realm得到用户相应的角色/权限进行验证用户是否能进行；可以把Realm看成DataSource。</p><h5 id="2、Shiro内部来看"><a href="#2、Shiro内部来看" class="headerlink" title="2、Shiro内部来看"></a>2、Shiro内部来看</h5><p><img src="/2021/02/15/Shiro/image-20191214183943765.png" alt="image-20191214183943765"></p><p><strong>Subject：</strong>倒可可以与应用交互的”用户”；</p><p><strong>SecurityManager：</strong>相当于SpringMVC中的DispatcherServIet；是Shiro的心脏，所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证、授权、会话及缓存的管理；</p><p><strong>Authenticator：</strong>负责Subject认证，是一个扩展点，可以自定义实现；可以使用认证策略（AuthenticationStrategy），即什么情况下算用户认证通过了；</p><p><strong>Authorizer：</strong>授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能 ；</p><p><strong>Realm：</strong>可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的，可以是JDBC实现也可以是内存实现等等；由用户提供，所以一般在应用中都需要实现自己的Realm；</p><p><strong>SessionManager：</strong>管理Session生命周期的组件，而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境；</p><p><strong>CacheManager：</strong>缓存控制器，来管理如用户、角色、权限等的缓存的，因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能；</p><p><strong>Cryptography：</strong>密码模块Shiro提高了一些常见的加密组件用于如密码加密/解密。</p><p>小结：</p><p>Shiro：是一个apache的安全框架，还有spring security；</p><p>Shiro：能做：身份认证(登录)authentication，授权authorization，密码学，会话管理。</p><p>Shiro路线：应用 –&gt; Subject(当前用户) –&gt; Security Mananger管理 –&gt; Realm –&gt; db</p><h4 id="2、Shiro入门"><a href="#2、Shiro入门" class="headerlink" title="2、Shiro入门"></a>2、Shiro入门</h4><h5 id="2-1、导如相关依赖包"><a href="#2-1、导如相关依赖包" class="headerlink" title="2.1、导如相关依赖包"></a>2.1、导如相关依赖包</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- shiro的支持包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- shiro-core --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2、准备资源"><a href="#2-2、准备资源" class="headerlink" title="2.2、准备资源"></a>2.2、准备资源</h5><p>这个资源我们可以到shiro的源码文件中拷备：/shiro-root-1.4.0-RC2/samples/quickstart/src/main/resources</p><ul><li><strong>shiro.ini</strong></li><li><strong>log4j.properties</strong></li></ul><p>注：users下面代表的登录的用户(用户名=密码)</p><p><strong>shiro.ini</strong>文件(对拷备过来的数据进行了解释)：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># Users and their assigned roles</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Each line conforms to the format defined in the</span><br><span class="hljs-comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setUserDefinitions JavaDoc</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-section">[users]</span><br><span class="hljs-comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span><br><span class="hljs-attr">root</span> = secret, admin<br><span class="hljs-comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span><br><span class="hljs-attr">guest</span> = guest, guest<br><span class="hljs-comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span><br><span class="hljs-comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span><br><span class="hljs-attr">presidentskroob</span> = <span class="hljs-number">12345</span>, president<br><span class="hljs-comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span><br><span class="hljs-attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz<br><span class="hljs-comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span><br><span class="hljs-attr">lonestarr</span> = vespa, goodguy, schwartz<br><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># Roles with assigned permissions</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Each line conforms to the format defined in the</span><br><span class="hljs-comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-section">[roles]</span><br><span class="hljs-comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span><br><span class="hljs-attr">admin</span> = *<br><span class="hljs-comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span><br><span class="hljs-attr">schwartz</span> = lightsaber:*<br><span class="hljs-comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span><br><span class="hljs-comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span><br><span class="hljs-attr">goodguy</span> = winnebago:drive:eagle5<br></code></pre></td></tr></table></figure><h5 id="2-3、测试"><a href="#2-3、测试" class="headerlink" title="2.3、测试"></a>2.3、测试</h5><p>Session数据、登录、授权</p><p>这个文件位置 : /shiro-root-1.4.0-RC2/samples/quickstart/src/main/java</p><p>我们下面对这个文件进行了中文的解释</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单的入门示例，教我们怎么使用shiro中的一个API</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> Quickstart &#123;<br><br>    <span class="hljs-keyword">private</span> static final transient Logger log = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(Quickstart.<span class="hljs-params">class</span>)</span>;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-comment">//读取到shiro.ini文件，并且根据文件创建SecurityManager对象</span><br>        <span class="hljs-comment">//  SecurityManager：权限的核心管理对象</span><br>        Factory&lt;SecurityManager&gt; factory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">IniSecurityManagerFactory(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>)</span>;<br>        SecurityManager securityManager = factory.get<span class="hljs-constructor">Instance()</span>;<br><br>        <span class="hljs-comment">// 为了程序正常运行，需要设计一个这个securityManager(相当于把这个管理放到环境中去了)</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>set<span class="hljs-constructor">SecurityManager(<span class="hljs-params">securityManager</span>)</span>;<br><br>        <span class="hljs-comment">//拿到当前用户【Subject:操作当前系统的一个用户】</span><br>        Subject currentUser = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Subject()</span>;<br><br>        <span class="hljs-comment">//拿到一个会话(它在咱们的所有类型系统都可以使用【不要求必需是web项目】)</span><br>        Session session = currentUser.get<span class="hljs-constructor">Session()</span>;<br>        <span class="hljs-comment">//会话操作【可以在会话中设置值与获取值】</span><br>        session.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;someKey&quot;</span>, <span class="hljs-string">&quot;aValue&quot;</span>)</span>;<br>        String value = (String) session.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;someKey&quot;</span>)</span>;<br>        <span class="hljs-keyword">if</span> (value.equals(<span class="hljs-string">&quot;aValue&quot;</span>)) &#123;<br>           <span class="hljs-comment">// log.info(&quot;Retrieved the correct value! [&quot; + value + &quot;]&quot;);</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;可以获取到这个值&quot;</span>+value);<br>        &#125;<br><br>        <span class="hljs-comment">//判断这个用户是否经过验证(没有登录我们可以认为是一个游客)</span><br>        <span class="hljs-comment">//没有登录，我们就可以完成登录</span><br>        <span class="hljs-keyword">if</span> (!currentUser.is<span class="hljs-constructor">Authenticated()</span>) &#123;<br>            <span class="hljs-comment">//拿到用户名与密码令牌【拿到用户名与密码】</span><br>            UsernamePasswordToken token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UsernamePasswordToken(<span class="hljs-string">&quot;lonestarr&quot;</span>, <span class="hljs-string">&quot;vespa&quot;</span>)</span>;<br>            <span class="hljs-comment">//设置记住我的功能</span><br>            token.set<span class="hljs-constructor">RememberMe(<span class="hljs-params">true</span>)</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//完成登录功能</span><br>                currentUser.login(token);<br>            &#125; catch (UnknownAccountException uae) &#123;<br>                <span class="hljs-comment">//log.info(&quot;There is no user with username of &quot; + token.getPrincipal());</span><br>                <span class="hljs-comment">//token.getPrincipal()[ˈprɪnsəpl] -&gt; 拿到主体（登录用户的主要标识【用户名】）</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;这没有这个账号（用户名）&quot;</span>+token.get<span class="hljs-constructor">Principal()</span>);<br>            &#125; catch (IncorrectCredentialsException ice) &#123;<br>                <span class="hljs-comment">//incorrect [ˌɪnkəˈrekt]:不正确的，错误的</span><br>                <span class="hljs-comment">//Credentials[krəˈdenʃlz]:证书; 凭证，证件</span><br>                <span class="hljs-comment">//log.info(&quot;Password for account &quot; + token.getPrincipal() + &quot; was incorrect!&quot;);</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;这个密码是错误的&quot;</span>+token.get<span class="hljs-constructor">Principal()</span>);<br>            &#125; catch (LockedAccountException lae) &#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;这个账号已经被锁定&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//其它的登录失败异常【它是所有登录异常的父类】</span><br>            catch (AuthenticationException ae) &#123;<br>                <span class="hljs-comment">//unexpected condition?  error?</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//用户登录成功</span><br>        log.info(<span class="hljs-string">&quot;User [&quot;</span> + currentUser.get<span class="hljs-constructor">Principal()</span> + <span class="hljs-string">&quot;] logged in successfully.&quot;</span>);<br><br>        <span class="hljs-comment">//判断这个用户是否是某一个角色</span><br>        <span class="hljs-keyword">if</span> (currentUser.has<span class="hljs-constructor">Role(<span class="hljs-string">&quot;schwartz&quot;</span>)</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;May the Schwartz be with you!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Hello, mere mortal.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//测试用户是否有某一个权限</span><br>        <span class="hljs-keyword">if</span> (currentUser.is<span class="hljs-constructor">Permitted(<span class="hljs-string">&quot;lightsaber:wield&quot;</span>)</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//a (very powerful) Instance Level permission:</span><br>        <span class="hljs-keyword">if</span> (currentUser.is<span class="hljs-constructor">Permitted(<span class="hljs-string">&quot;winnebago:drive:eagle5&quot;</span>)</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +<br>                    <span class="hljs-string">&quot;Here are the keys - have fun!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//登出(注销当前登录用户)</span><br>        currentUser.logout<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>exit(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4、总结"><a href="#2-4、总结" class="headerlink" title="2.4、总结"></a>2.4、总结</h5><p>通过SecurityManger获取Suject :</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>set<span class="hljs-constructor">SecurityManager(<span class="hljs-params">securityManager</span>)</span>;<br>Subject currentUser = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Subject()</span>;<br></code></pre></td></tr></table></figure><p>通过Subject来做事情：</p><p>获取Session-存值和获取值 Subject.getSession、session.setAttribute、session.getAttribute</p><p>认证（登录）:</p><ul><li><p>判断是否登录Suject.isAuthenticated()</p></li><li><p>如果没有登录，通过用户名和密码创建UsernamePasswordToken</p></li><li><p>调用subject.login(UsernamePasswordToken)来进行登录判断</p></li><li><p>登陆成功: 返回principal给当前用户</p></li><li><p>登陆失败: 抛出异常</p></li></ul><p>授权：</p><ul><li><p>判断是否具有某个角色subject .hasRole</p></li><li><p>判断是否有权限subject .isPrermited(resource:操作)</p></li></ul><h4 id="3、自定义Realm"><a href="#3、自定义Realm" class="headerlink" title="3、自定义Realm"></a>3、自定义Realm</h4><p>刚才咱们使用的是准备的好的一个Realm，在Shiro中，除了咱们 刚才使用的IniRealm（通过Shiro.ini拿数据），还有普通SimpleAccountRealm，JDBCRealm等等。</p><p>但是这些Realm都不能满足咱们的需求 (后期咱们Realm的数据肯定是通过JPA去拿的，下一个项目要使用MyBatis去拿)，而这种情况下，就需要我们自己定义一个Realm来实现相应的功能！</p><h5 id="3-1、准备工作"><a href="#3-1、准备工作" class="headerlink" title="3.1、准备工作"></a>3.1、准备工作</h5><p>自定义Realm一般直接继承AuthorizingRealm接口即可(里面包含<code>身份认证</code>与<code>授权</code>两个方法)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义一个Realm</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br><br>    <span class="hljs-comment">//获取到这个Realm的名称(随便取)</span><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">String</span> getName() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyRealm&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//进行授权判断（权限）</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">AuthorizationInfo</span> doGetAuthorizationInfo(<span class="hljs-type">PrincipalCollection</span> principalCollection) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//进行身份认证(登录)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">AuthenticationInfo</span> doGetAuthenticationInfo(<span class="hljs-type">AuthenticationToken</span> authenticationToken) <span class="hljs-keyword">throws</span> <span class="hljs-type">AuthenticationException</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2、身份认证（登录）"><a href="#3-2、身份认证（登录）" class="headerlink" title="3.2、身份认证（登录）"></a>3.2、身份认证（登录）</h5><p>身份认证的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义一个Realm</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br><br>    <span class="hljs-comment">//获取到这个Realm的名称(随便取)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyRealm&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//进行授权的认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-function"><span class="hljs-title">doGetAuthorizationInfo</span>(<span class="hljs-params">PrincipalCollection principalCollection</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//进行登录的认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;<br>        <span class="hljs-comment">//明显的知道：这个authenticationToken就是UsernamePasswordtoken</span><br>        UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;<br>        <span class="hljs-built_in">String</span> username = token.getUsername(); <span class="hljs-comment">//拿到用户名(注:这个用户名是传过来的)</span><br>        <span class="hljs-comment">//这里根据用户名去获取密码(如果没有获取到，相当于这个用户不存在，就返回null值)</span><br>        <span class="hljs-built_in">String</span> password = getByName(username);<br>        <span class="hljs-keyword">if</span>(password==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//创建一个简单的身份信息(把用户名与密码放进去-注：它会自动的比较获取的密码与你传过来的密码)</span><br>        SimpleAuthenticationInfo authenticationInfo = <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(username,password,getName());<br>        <span class="hljs-keyword">return</span> authenticationInfo;<br>    &#125;<br><br><span class="hljs-comment">//模拟从数据库中获取信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getByName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> username</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(username))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;guest&quot;</span>.equals(username))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>身份认证测试</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">MyRealm()</span> throws Exception&#123;<br><br>    <span class="hljs-comment">//创建自己定义的Realm</span><br>    MyRealm myRealm = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MyRealm()</span>;<br>   <span class="hljs-comment">//把Realm放到securityManager中去</span><br>    DefaultSecurityManager securityManager = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultSecurityManager()</span>;<br>    securityManager.set<span class="hljs-constructor">Realm(<span class="hljs-params">myRealm</span>)</span>;<br>    <span class="hljs-comment">//把权限管理器放到相应的环境中(我们可以在项目任何位置拿到)</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>set<span class="hljs-constructor">SecurityManager(<span class="hljs-params">securityManager</span>)</span>;<br><br>    <span class="hljs-comment">//拿到当前用户(Subject就是当前用户,游客)</span><br>    Subject currentUser = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Subject()</span>;<br>    <span class="hljs-comment">//准备登录的令牌(准备用户名与密码)</span><br>    UsernamePasswordToken token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UsernamePasswordToken(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>)</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//根据令牌进行功能登录(当前用户进行登录)</span><br>        currentUser.login(token);<br>    &#125; catch (UnknownAccountException e) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;这个账号不存在!&quot;</span> + token.get<span class="hljs-constructor">Principal()</span>);<br>        e.print<span class="hljs-constructor">StackTrace()</span>;<br>    &#125; catch (IncorrectCredentialsException ice) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;这个密码不存在!&quot;</span> + token.get<span class="hljs-constructor">Principal()</span>);<br>        ice.print<span class="hljs-constructor">StackTrace()</span>;<br>    &#125;catch (AuthenticationException e)&#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;i don&#x27;t k&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3、授权（权限）认证"><a href="#3-3、授权（权限）认证" class="headerlink" title="3.3、授权（权限）认证"></a>3.3、授权（权限）认证</h5><p>授权认证的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br><br>    <span class="hljs-comment">//获取到这个Realm的名称(随便取)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyRealm&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//进行授权的认证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-function"><span class="hljs-title">doGetAuthorizationInfo</span>(<span class="hljs-params">PrincipalCollection principalCollection</span>)</span> &#123;<br>    <br>        <span class="hljs-comment">//拿到认证的主要信息(用户名)</span><br>        <span class="hljs-built_in">String</span> username = (<span class="hljs-built_in">String</span>) principalCollection.getPrimaryPrincipal();<br>        <br>        <span class="hljs-comment">//模拟 根据用户名  拿到  角色信息与权限信息</span><br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; roles = getRolesByUsername(username);<br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; permissions = getPermissionsByUsername(username);<br>        <br>        <span class="hljs-comment">//拿到验证信息对象</span><br>        SimpleAuthorizationInfo authorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();<br>        <br>        <span class="hljs-comment">//设置用户的角色</span><br>        authorizationInfo.setRoles(roles);<br>        <br>        <span class="hljs-comment">//设置用户的权限</span><br>        authorizationInfo.setStringPermissions(permissions);<br>        <span class="hljs-keyword">return</span> authorizationInfo;<br>    &#125;<br><br>    <span class="hljs-comment">//模拟 根据用户名  拿到  角色的功能</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-function"><span class="hljs-title">getRolesByUsername</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> username</span>)</span> &#123;<br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; roles = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        roles.add(<span class="hljs-string">&quot;admin&quot;</span>);<br>        roles.add(<span class="hljs-string">&quot;it&quot;</span>);<br>        <span class="hljs-keyword">return</span> roles;<br>    &#125;<br>    <span class="hljs-comment">//模拟 根据用户名  拿到  权限的功能</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-function"><span class="hljs-title">getPermissionsByUsername</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> username</span>)</span> &#123;<br>        <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; permissions = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        permissions.add(<span class="hljs-string">&quot;employee.*&quot;</span>);<br>        permissions.add(<span class="hljs-string">&quot;department.save&quot;</span>);<br>        <span class="hljs-keyword">return</span> permissions;<br>    &#125;<br> ...<br>&#125;<br></code></pre></td></tr></table></figure><p>功能测试</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;是否是这个角色：&quot;</span>+currentUser.has<span class="hljs-constructor">Role(<span class="hljs-string">&quot;admin&quot;</span>)</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;是否是拥有权限：&quot;</span>+currentUser.is<span class="hljs-constructor">Permitted(<span class="hljs-string">&quot;employee.save&quot;</span>)</span>);<br></code></pre></td></tr></table></figure><h4 id="4、密码加密"><a href="#4、密码加密" class="headerlink" title="4、密码加密"></a>4、密码加密</h4><h5 id="4-1、Shiro中的密码加密"><a href="#4-1、Shiro中的密码加密" class="headerlink" title="4.1、Shiro中的密码加密"></a>4.1、Shiro中的密码加密</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  algorithmName:加密算法(md5,sha)</span><br><span class="hljs-comment"> *  source:原始密码</span><br><span class="hljs-comment"> *  salt,加盐</span><br><span class="hljs-comment"> *  hashIterations:遍历次数</span><br><span class="hljs-comment"> */</span><br>SimpleHash simpleHash = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleHash(<span class="hljs-string">&quot;MD5&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;kongwei_liao&quot;</span>,10)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(simpleHash);<br></code></pre></td></tr></table></figure><h5 id="4-2、测试时让自定义Realm加上算法"><a href="#4-2、测试时让自定义Realm加上算法" class="headerlink" title="4.2、测试时让自定义Realm加上算法"></a>4.2、测试时让自定义Realm加上算法</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">MyRealm()</span> throws Exception&#123;<br><br>    <span class="hljs-comment">//创建自己定义的Realm</span><br>    MyRealm myRealm = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MyRealm()</span>;<br>    <br>    <span class="hljs-comment">//把Realm放到securityManager中去</span><br>    DefaultSecurityManager securityManager = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultSecurityManager()</span>;<br>    securityManager.set<span class="hljs-constructor">Realm(<span class="hljs-params">myRealm</span>)</span>;<br>    <br>    <span class="hljs-comment">//把权限管理器放到相应的环境中(我们可以在项目任何位置拿到)</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>set<span class="hljs-constructor">SecurityManager(<span class="hljs-params">securityManager</span>)</span>;<br><br><span class="hljs-comment">//设置咱们Realm的密码匹配器(我们的密码要怎么处理)</span><br>    HashedCredentialsMatcher matcher = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HashedCredentialsMatcher()</span>;<br>    matcher.set<span class="hljs-constructor">HashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>)</span>; <span class="hljs-comment">//匹配器使用MD5的算法</span><br>    matcher.set<span class="hljs-constructor">HashIterations(10)</span>;<span class="hljs-comment">//加密算法要迭代多少次</span><br>    myRealm.set<span class="hljs-constructor">CredentialsMatcher(<span class="hljs-params">matcher</span>)</span>;<br><br><span class="hljs-comment">//拿到当前用户(Subject就是当前用户,游客)</span><br>    Subject currentUser = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Subject()</span>;<br>    <span class="hljs-comment">//准备登录的令牌(准备用户名与密码) -&gt; 这里的密码进行了加密</span><br>    UsernamePasswordToken token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UsernamePasswordToken(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>)</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//根据令牌进行功能登录(当前用户进行登录)</span><br>        currentUser.login(token);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;登录成功啦。。。。&quot;</span>);<br>     &#125; catch (UnknownAccountException e) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;这个账号不存在!&quot;</span> + token.get<span class="hljs-constructor">Principal()</span>);<br>        e.print<span class="hljs-constructor">StackTrace()</span>;<br>     &#125; catch (IncorrectCredentialsException ice) &#123;<br>         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;这个密码不存在!&quot;</span> + token.get<span class="hljs-constructor">Principal()</span>);<br>         ice.print<span class="hljs-constructor">StackTrace()</span>;<br>     &#125;catch (AuthenticationException e)&#123;<br>         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;i don&#x27;t k&quot;</span>);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-3、自定义Realm加上盐值"><a href="#4-3、自定义Realm加上盐值" class="headerlink" title="4.3、自定义Realm加上盐值"></a>4.3、自定义Realm加上盐值</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//进行登录的认证</span><br>@Override<br>protected AuthenticationInfo <span class="hljs-keyword">do</span><span class="hljs-constructor">GetAuthenticationInfo(AuthenticationToken <span class="hljs-params">authenticationToken</span>)</span> throws AuthenticationException &#123;<br><br>    <span class="hljs-comment">//明显的知道：这个authenticationToken就是UsernamePasswordtoken</span><br>    UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;<br>    String username = token.get<span class="hljs-constructor">Username()</span>; <span class="hljs-comment">//拿到用户名(注:这个用户名是传过来的)</span><br><br>    <span class="hljs-comment">//这里根据用户名去获取密码(如果没有获取到，相当于这个用户不存在，就返回陪我)</span><br>    String password = get<span class="hljs-constructor">ByName(<span class="hljs-params">username</span>)</span>;<br>    <span class="hljs-keyword">if</span>(password==null)&#123;<br>        return null;<br>    &#125;<br>    <br>    <span class="hljs-comment">//在这里加盐值需一个ByteSource对象，而Shiro提供了一个ByteSource对象给咱们</span><br>    ByteSource salt = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ByteSource</span>.</span><span class="hljs-module"><span class="hljs-identifier">Util</span>.</span></span><span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;kongwei_liao&quot;</span>);<br>    <br>    <span class="hljs-comment">//创建一个简单的身份信息(把用户名与密码放进去-注：它会自动的比较获取的密码与你传过来的密码)</span><br>    SimpleAuthenticationInfo authenticationInfo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleAuthenticationInfo(<span class="hljs-params">username</span>,<span class="hljs-params">password</span>,<span class="hljs-params">salt</span>,<span class="hljs-params">getName</span>()</span>);<br>    return authenticationInfo;<br>&#125;<br><br><span class="hljs-keyword">private</span> String get<span class="hljs-constructor">ByName(String <span class="hljs-params">username</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(username))&#123;<br>        <span class="hljs-comment">// 4a95737b032e98a50c056c41f2fa9ec6: 123456 迭代10次不加盐的结果</span><br>        <span class="hljs-comment">// 922ad745e6fc8a539f70003fa7473336: 123456 迭代10次加盐(kongwei_liao)的结果</span><br>        return <span class="hljs-string">&quot;922ad745e6fc8a539f70003fa7473336&quot;</span>; <span class="hljs-comment">//修改为加密加盐后的数据</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;guest&quot;</span>.equals(username))&#123;<br>        return <span class="hljs-string">&quot;abcd&quot;</span>;<br>    &#125;<br>    return null;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、Shiro集成Spring"><a href="#5、Shiro集成Spring" class="headerlink" title="5、Shiro集成Spring"></a>5、Shiro集成Spring</h4><p>我们的项目基本都是通过Spring来管理bean的，如果要想使用Shiro，那就要把shiro集成到Spring。集成Spring的核心就是把框架的核心类(SecurityManager，Subject，Realm)交给Spring管理！</p><h5 id="5-1、准备Spring-web项目"><a href="#5-1、准备Spring-web项目" class="headerlink" title="5.1、准备Spring-web项目"></a>5.1、准备Spring-web项目</h5><h5 id="5-2、集成"><a href="#5-2、集成" class="headerlink" title="5.2、集成"></a>5.2、集成</h5><p>导入Shiro包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- shiro的支持包 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- shiro与Spring的集成包 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>拷贝ShiroFilter配置到web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring与shiro集成:需要定义一个shiro过滤器(这是一个代理过滤器，它会到spring的配置中找一个名称相同的真实过滤器) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>shiroFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>targetFilterLifecycle<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>shiroFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>集成到Spring，拷贝shiro Spring配置到配置文件applicationContext-shiro.xml，在applicationContext.xml中导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 1.配置shiro的核心对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置一个realm，到数据库中获取权限数据 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;realm&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;MyRealm&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  2.我们可以自定义一个realm，这个必需实现org.apache.shiro.realm.Realm接口 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyRealm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.realm.MyRealm&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注入密码匹配器--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;credentialsMatcher&quot;&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;bean class=&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&amp;lt;!&amp;ndash;加密的方式&amp;ndash;&amp;gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;hashAlgorithmName&quot; value=&quot;MD5&quot;&gt;&lt;/property&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&amp;lt;!&amp;ndash;加密次数&amp;ndash;&amp;gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;hashIterations&quot; value=&quot;10&quot;&gt;&lt;/property&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;/bean&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;/property&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 3.lifecycleBeanPostProcessor：可以自动调用在Spring Ioc窗口中 Shiro bean的生命周期方法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lifecycleBeanPostProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 4.启动ioc容器中使用 shiro的注解，但是必需配置在Spring Ioc容器中Shiro bean的生成周期方法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">depends-on</span>=<span class="hljs-string">&quot;lifecycleBeanPostProcessor&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;securityManager&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 5.shiro的核心过滤器(注：这个名称必需和web.xml的代表过滤器【DelegatingFilterProxy】名称一样) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shiroFilter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;securityManager&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 登录的url,如果没有登录，你访问的路径会跳到这个页面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/login.jsp&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 登录成功的url,如果登录成功，会跳转到这个页面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;successUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/success.jsp&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 没有权限时跳转到这个位置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;unauthorizedUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/noPermission.jsp&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--定义过滤器链--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filterChainDefinitions&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--anon:匿名过滤器,表示直接放行--&gt;</span><br>                login.jsp = anon<br>                /login = anon<br>                <span class="hljs-comment">&lt;!--注销--&gt;</span><br>                /logout = logout<br>                <span class="hljs-comment">&lt;!--/**：所有请求包括子请求，authc：必须认证通过才放行--&gt;</span><br>                /** = authc<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            配置哪些资源被保护，哪些资源需要权限</span><br><span class="hljs-comment">            anon：不需要登录也可以访问相应的权限</span><br><span class="hljs-comment">            authc：需要权限才能访问</span><br><span class="hljs-comment">              /** ：所有文件及其子文件</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;property name=&quot;filterChainDefinitionMap&quot; ref=&quot;filterChainDefinitionMap&quot;&gt;&lt;/property&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;bean id=&quot;chainDefinitionMapFactory&quot; class=&quot;cn.itsource.crm.realm.FilterChainDefinitionMapFactory&quot;/&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;bean id=&quot;filterChainDefinitionMap&quot; factory-bean=&quot;chainDefinitionMapFactory&quot; factory-method=&quot;createFilterChainDefinitionMap&quot;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入Shiro的配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-shiro.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>测试：除了登录界面能够被正常访问，其他的都要跳转到登录界面！</p><h5 id="5-3、小结"><a href="#5-3、小结" class="headerlink" title="5.3、小结"></a>5.3、小结</h5><p>注意：需要一个Spring的环境，不能全部都在SpringMVC那儿初始化</p><h4 id="6、Authentication（身份认证）"><a href="#6、Authentication（身份认证）" class="headerlink" title="6、Authentication（身份认证）"></a>6、Authentication（身份认证）</h4><p>在集成Spring的例子中，只有登录页面是不需要登录可以直接访问。其他的页面需要认证（即登录）后才能访问，那怎么来实现登录认证，又叫做身份认证呢？</p><p><strong>身份验证：</strong>一般需要提供如身份ID等一些标识信息来表明登录者的身份，如提供email用户名/密码来证明。</p><p>在Shiro中用户需要提供principals（身份）和credentiaIs（证明）给Shiro，从而应用能验证用户身份：</p><ul><li><strong>principals：</strong>身份，即主体的标识属性，可以是田可属性，如用户名、邮箱等，唯一即可。一个主体可以有多个principals，但只有一个Primaryprincipals，一般是用户名/邮箱/手机号。</li><li><strong>credentials：</strong>证明/凭证，即只有主体知道的安全值，如密码/数字证书等。</li><li>最常见的principals和credentials组合就是用户名/密码了</li></ul><p>做认证需要用户名和密码，认证流程，如下图：</p><p><img src="/2021/02/15/Shiro/image-20191214195132572.png" alt="image-20191214195132572"></p><h5 id="6-1、详细步骤分析"><a href="#6-1、详细步骤分析" class="headerlink" title="6.1、详细步骤分析"></a>6.1、详细步骤分析</h5><p>要想实现登录，分前台和后台两部分：</p><ul><li><p>前台：实现一个login.jsp的页面，用来搜集登录信息（用户名和密码）！当点击登录时把登录信息提交到后台完成认证。</p></li><li><p>后台：写一个Controller接收前台传入的登录信息，完成登录认证。</p></li></ul><p>具体步骤如下：</p><ol><li><p>创建LoginConroller，写一个方法接收前台登录请求并接受登录信息(用户名和密码)</p></li><li><p>获取当前的 Subject，调用 SecurityUtils.getSubject();</p></li><li><p>测试当前的用户是否已经被认证。即是否已经登录. 调用 Subject 的 isAuthenticated() </p></li><li><p>若没有被认证，则把用户名和密码封装为 UsernamePasswordToken 对象</p></li><li><p>执行登录: 调用 Subject 的 login(AuthenticationToken) 方法. </p></li><li><p>自定义 Realm 的方法，从数据库中获取对应的记录, 返回给 Shiro.</p><ul><li>入门中使用的是Shiro自带的IniRealm，IniRealm从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。</li><li>实际上需要继承 org.apache.shiro.realm.AuthenticatingRealm 类</li><li>实现 doGetAuthenticationInfo(AuthenticationToken) 方法. </li></ul></li><li><p>由 shiro 完成对密码的比对.</p></li></ol><h5 id="6-2、简单认证实现"><a href="#6-2、简单认证实现" class="headerlink" title="6.2、简单认证实现"></a>6.2、简单认证实现</h5><p>login.jsp</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;/login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    用户名&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> /&gt; &lt;<span class="hljs-keyword">br</span> /&gt;<br>    密码:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> /&gt; &lt;<span class="hljs-keyword">br</span> /&gt;<br>    &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span> /&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><p>LoginController</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Controller<br>public <span class="hljs-keyword">class</span> LoginController &#123;<br>    @<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/login&quot;</span>)</span><br>    public String login(String username,String password)&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取当前的 Subject. 调用 SecurityUtils.getSubject();</span><br><span class="hljs-comment">         * 测试当前的用户是否已经被认证. 即是否已经登录. 调用 Subject 的 isAuthenticated()</span><br><span class="hljs-comment">         * 若没有被认证, 则把用户名和密码封装为 UsernamePasswordToken 对象</span><br><span class="hljs-comment">         * 执行登录: 调用 Subject 的 login(AuthenticationToken) 方法.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//1.拿到访问的主体(当前登录用户)</span><br>        Subject subject = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityUtils</span>.</span></span>get<span class="hljs-constructor">Subject()</span>;<br>        <span class="hljs-comment">//2.判断这个用户是否已经登录(通过验证)</span><br>        <span class="hljs-keyword">if</span>(!subject.is<span class="hljs-constructor">Authenticated()</span>)&#123;<br>            <span class="hljs-comment">//3.如果没有验证，就要完成登录</span><br>            UsernamePasswordToken token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UsernamePasswordToken(<span class="hljs-params">username</span>,<span class="hljs-params">password</span>)</span>;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">//4.根据toke完成登录功能</span><br>                subject.login(token);<br>            &#125;catch (UnknownAccountException e)&#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;用户名不存在！！&quot;</span>);<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>            &#125;catch (IncorrectCredentialsException e)&#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;密码不存在！&quot;</span>);<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>            &#125;catch (AuthenticationException e)&#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;登录出错！&quot;</span>);<br>                e.print<span class="hljs-constructor">StackTrace()</span>;<br>            &#125;<br>        &#125;<br>        return <span class="hljs-string">&quot;redirect:/s/main.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JpaRealm</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JpaRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthenticatingRealm</span> </span>&#123;<br><br>    <span class="hljs-comment">//AuthenticationInfo:认证; 身份验证; 证明</span><br>    <span class="hljs-comment">//登录的时候就会调用这个方法来做验证</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">AuthenticationInfo</span> doGetAuthenticationInfo(<span class="hljs-type">AuthenticationToken</span> token) <span class="hljs-keyword">throws</span> <span class="hljs-type">AuthenticationException</span> &#123;<br>        <span class="hljs-comment">//System.out.println(token.getClass().getName());</span><br>        <span class="hljs-comment">//可以转成相应的token</span><br>        <span class="hljs-comment">//UsernamePasswordToken upToken =(UsernamePasswordToken)token;</span><br>        <span class="hljs-comment">//拿到传过来的用户名</span><br>        <span class="hljs-comment">//String username = upToken.getUsername();</span><br>        <span class="hljs-comment">//自定义Realm中，需要根据用户名到数据库中拿到密码，然后返回给shiro</span><br>        <span class="hljs-comment">//String password = &quot;123456&quot;;</span><br>        <span class="hljs-comment">//身份认证(用户名)</span><br>        <span class="hljs-type">Object</span> principal = token.getPrincipal();<br>        <span class="hljs-type">Object</span> credentials = <span class="hljs-string">&quot;123456&quot;</span>; <span class="hljs-comment">//密码假设是根据用户名到数据库中查询出来的</span><br>        <span class="hljs-comment">// Object principal, Object credentials, String realmName</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">SimpleAuthenticationInfo</span>(principal,credentials,getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-3、加密认证"><a href="#6-3、加密认证" class="headerlink" title="6.3、加密认证"></a>6.3、加密认证</h5><p>分析：</p><p> 1、密码不能明文保存到数据库 加密保存，比对也要加密比对，具体的比对CredentialsMatcher，默认使用就是SimpleCredentialsMatcher，不做加密的比对。要想做md5加密要使用HashedCredentialsMatcher，并且设置加密为md5 </p><p>数据库加密保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure><p><img src="/2021/02/15/Shiro/image-20191214195619630.png" alt="image-20191214195619630"></p><p>加密对比代码实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//完成登录的认证</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;<br>    UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;<br>    <span class="hljs-built_in">String</span> username = token.getUsername();<br>    <span class="hljs-built_in">String</span> dbPassword  = findByUsername(token.getUsername());<br>    <span class="hljs-keyword">if</span>(dbPassword==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    SimpleAuthenticationInfo authorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(username,dbPassword,getName());<br>    <span class="hljs-keyword">return</span> authorizationInfo;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">findByUsername</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> username</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(username))&#123;<br>        <span class="hljs-comment">//这里是没有加盐的结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;4a95737b032e98a50c056c41f2fa9ec6&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置Realm的匹配值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 2.我们可以自定义一个realm 这个必需实现org.apache.shiro.realm.Realm接口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jpaRealm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.shiro.realm.JpaRealm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;credentialsMatcher&quot;</span>&gt;</span><br>        &lt;!—设置加密匹配方案--&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 编码的方式使用:md5 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashAlgorithmName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MD5&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 编码的次数:10 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashIterations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/02/15/Shiro/image-20191214195742239.png" alt="image-20191214195742239"></p><h5 id="6-4、盐值加密认证"><a href="#6-4、盐值加密认证" class="headerlink" title="6.4、盐值加密认证"></a>6.4、盐值加密认证</h5><p>使用盐值加密，盐值加密，更安全！</p><p>数据库要加密保存</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testHash() throws <span class="hljs-keyword">Exception</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * algorithmName:加密算法(md5,sha)</span><br><span class="hljs-comment">     *  source:原始密码</span><br><span class="hljs-comment">     *  salt,加盐</span><br><span class="hljs-comment">     *  hashIterations:遍历次数</span><br><span class="hljs-comment">     */</span><br>    SimpleHash simpleHash = <span class="hljs-built_in">new</span> SimpleHash(&quot;MD5&quot;,&quot;123456&quot;,&quot;kongwei_liao&quot;,<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(simpleHash);<br>&#125;<br></code></pre></td></tr></table></figure><p>认证时要支持盐值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//AuthenticationInfo:认证; 身份验证; 证明</span><br><span class="hljs-comment">//登录的时候就会调用这个方法来做验证</span><br><span class="hljs-comment">//进行登录的认证</span><br>@Override<br>protected AuthenticationInfo <span class="hljs-keyword">do</span><span class="hljs-constructor">GetAuthenticationInfo(AuthenticationToken <span class="hljs-params">authenticationToken</span>)</span> throws AuthenticationException &#123;<br>    <span class="hljs-comment">//明显的知道：这个authenticationToken就是UsernamePasswordtoken</span><br>    UsernamePasswordToken token = (UsernamePasswordToken)authenticationToken;<br>    String username = token.get<span class="hljs-constructor">Username()</span>; <span class="hljs-comment">//拿到用户名(注:这个用户名是传过来的)</span><br>    <span class="hljs-comment">//这里根据用户名去获取密码(如果没有获取到，相当于这个用户不存在，就返回陪我)</span><br>    String password = get<span class="hljs-constructor">ByName(<span class="hljs-params">username</span>)</span>;<br>    <span class="hljs-keyword">if</span>(password==null)&#123;<br>        return null;<br>    &#125;<br>    <span class="hljs-comment">//在这里加盐值需一个ByteSource对象，而Shiro提供了一个ByteSource对象给咱们</span><br>    ByteSource salt = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ByteSource</span>.</span><span class="hljs-module"><span class="hljs-identifier">Util</span>.</span></span><span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;kongwei_liao&quot;</span>);<br>    <span class="hljs-comment">//创建一个简单的身份信息(把用户名与密码放进去-注：它会自动的比较获取的密码与你传过来的密码)</span><br>    SimpleAuthenticationInfo authenticationInfo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleAuthenticationInfo(<span class="hljs-params">username</span>,<span class="hljs-params">password</span>,<span class="hljs-params">salt</span>,<span class="hljs-params">getName</span>()</span>);<br>    return authenticationInfo;<br>&#125;<br><br><span class="hljs-keyword">private</span> String get<span class="hljs-constructor">ByName(String <span class="hljs-params">username</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(username))&#123;<br>        <span class="hljs-comment">// 4a95737b032e98a50c056c41f2fa9ec6: 123456 迭代10次不加盐的结果</span><br>        <span class="hljs-comment">// 922ad745e6fc8a539f70003fa7473336: 123456 迭代10次加盐(kongwei_liao)的结果</span><br>        return <span class="hljs-string">&quot;922ad745e6fc8a539f70003fa7473336&quot;</span>; <span class="hljs-comment">//修改为加密加盐后的数据</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;guest&quot;</span>.equals(username))&#123;<br>        return <span class="hljs-string">&quot;abcd&quot;</span>;<br>    &#125;<br>    return null;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-5、小结"><a href="#6-5、小结" class="headerlink" title="6.5、小结"></a>6.5、小结</h5><p>普通认证、加密认证、加密加盐认证（<strong>采纳</strong>）</p><h4 id="7、Authorizing（授权）"><a href="#7、Authorizing（授权）" class="headerlink" title="7、Authorizing（授权）"></a>7、Authorizing（授权）</h4><p>有的资源需要有对应的权限才能访问，如果想要某个用户能够访问某个资源，必须给对应用户授权。</p><p>对于授权需要做两个事情：</p><ol><li><code>权限拦截</code>：当用户访问没有权限的资源时进行拦截</li><li><code>权限判断</code>：给用户授权</li></ol><p>授权，也叫访问控制，即在应用中控制谁访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需了解的几个关键对象主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。</p><ol><li><code>主体(Subject)</code>：访问应用的用户，在Shiro中使用Subject代表该用户。用户只有授权后才允许访问相应的资源。</li><li><code>资源(Resource)</code>：在应用中用户可以访问的URL，比如访问JSP页面、查看/编辑某些数据、访问某个业务方法、打印文本等等都是资源。用户只要授权后才能访问。</li><li><code>权限(Permission)</code>：安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力。即权限表示在应用中用户能不能访问某个资源，如：访问用户列表页面查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控制）等。权限代表了用户有没有操作某个资源的权利，即反映在某个资源上的操作允不允许。</li><li><code>角色(Role)</code>：权限的集合，一般情况下会赋予用户角色而不是权限即这样用户可以拥有一组权限，赋予权限时比较方便典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限。</li></ol><p>Shiro支持粗粒度权限（如用户模块的所有权限）和细粒度权限（操作某个用户的权限，即实例级别的）</p><h5 id="7-1、Shiro的三种权限判断方式"><a href="#7-1、Shiro的三种权限判断方式" class="headerlink" title="7.1、Shiro的三种权限判断方式"></a>7.1、Shiro的三种权限判断方式</h5><p>编程式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>通过<span class="hljs-keyword">if</span>/<span class="hljs-keyword">else</span>授权代码块完成<br>Subject subject = SecurityUtils.getSubject();<br><span class="hljs-keyword">if</span>(subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br><span class="hljs-regexp">//</span>有权限<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-regexp">//</span>无权限<br>&#125;<br></code></pre></td></tr></table></figure><p>注解式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//通过在执行的Java方法上放置相应的注解完成</span><br><span class="hljs-meta">@RequiresRoles</span>(<span class="hljs-string">&quot;admin&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-comment">//有权限</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JSP/GSP标签：在JSP/GSP 页面通过相应的标签完成</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby"><span class="hljs-variable">@taglib</span> prefix=<span class="hljs-string">&quot;shiro&quot;</span> uri=<span class="hljs-string">&quot;http://shiro.apache.org/tags&quot;</span></span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">shiro:hasRole</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span></span><br><span class="xml">&lt;!— 有权限—&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">shiro:hasRole</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>控制哪些资源要做权限拦截，如果不做拦截，直接放行，如果要拦截就要做权限判断</p><p>获取用户能够访问资源，如果你访问资源在里面，说明有权限。可以访问，否则不能访问。</p><p>不控制直接放行，要控制查看用户是否拥有,如果有直接访问,否则不能访问</p><h5 id="7-2、授权拦截"><a href="#7-2、授权拦截" class="headerlink" title="7.2、授权拦截"></a>7.2、授权拦截</h5><p>权限拦截同样需要从数据库中获取权限或角色信息，所以同样需要自定义Realm。</p><p>注意：现要权限写死在配置中！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 5.shiro的真实过滤器(注：这个名称必需和web.xml的代表过滤器【DelegatingFilterProxy】名称一样) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shiroFilter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;securityManager&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 登录的url,如果没有登录，你访问的路径会跳到这个页面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/s/login.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 登录成功的url,如果登录成功，会跳转到这个页面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;successUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/s/main.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 没有权限时跳转到这个位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;unauthorizedUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/s/unauthorized.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        配置哪些资源被保护，哪些资源需要权限</span><br><span class="hljs-comment">        anon：不需要登录也可以访问相应的权限</span><br><span class="hljs-comment">        authc：需要权限才能访问</span><br><span class="hljs-comment">          /** ：所有文件及其子文件</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filterChainDefinitions&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>            /s/login.jsp = anon<br>            /login = anon<br>            <span class="hljs-comment">&lt;!--对资源进行权限控制，要控制的资源都应该从数据库查出，现在咱们先写死--&gt;</span><br>            /s/permission.jsp = perms[user:*]<br>            /** = authc<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>自定义的Realm授权：</p><p>授权需要继承 AuthorizingRealm 类，并实现其 doGetAuthorizationInfo 方法 </p><p>AuthorizingRealm 类继承自 AuthenticatingRealm，但没有实现 AuthenticatingRealm 中的doGetAuthenticationInfo，所以认证和授权只需要继承 AuthorizingRealm 就可以了。同时实现他的两个抽象方法。</p><p>具体实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> JpaRealm extends AuthorizingRealm &#123;<br>    <span class="hljs-comment">//AuthorizationInfo:授权(是否有权限进入操作)</span><br>    <span class="hljs-comment">// 我们只需要把相应的权限交给Shiro，它就会自动比对</span><br>    @Override<br>    protected AuthorizationInfo <span class="hljs-keyword">do</span><span class="hljs-constructor">GetAuthorizationInfo(PrincipalCollection <span class="hljs-params">principals</span>)</span> &#123;<br>        <span class="hljs-comment">//拿到主体信息(指的就是当前登录用户名) -&gt; 咱们的权限应该是根据当前用户进行查询到的</span><br>        String username = (String) principals.get<span class="hljs-constructor">PrimaryPrincipal()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;后面需要根据用户名获取资源&quot;</span>+username);<br>        <span class="hljs-comment">//获取权限资源(这里假设已经根据用户名到数据库中获取到了)</span><br>        Set&lt;String&gt; permissions = <span class="hljs-keyword">new</span> HashSet&lt;&gt;<span class="hljs-literal">()</span>;<br>        permissions.add(<span class="hljs-string">&quot;user:*&quot;</span>);<br>        <span class="hljs-comment">//拿到授权对象，并且所有权限交给它</span><br>        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleAuthorizationInfo()</span>;<br>        simpleAuthorizationInfo.set<span class="hljs-constructor">StringPermissions(<span class="hljs-params">permissions</span>)</span>;<br>        <span class="hljs-comment">//返回授权对象</span><br>        return simpleAuthorizationInfo;<br>    &#125;<br><br>    <span class="hljs-comment">//AuthenticationInfo:认证; 身份验证; 证明</span><br>    <span class="hljs-comment">//登录的时候就会调用这个方法来做验证</span><br>    @Override<br>    protected AuthenticationInfo <span class="hljs-keyword">do</span><span class="hljs-constructor">GetAuthenticationInfo(AuthenticationToken <span class="hljs-params">token</span>)</span> throws AuthenticationException &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Object principal：主体(现在就是登录的用户名)</span><br><span class="hljs-comment">         * Object hashedCredentials：编码后的认证密码</span><br><span class="hljs-comment">         * ByteSource credentialsSalt:加盐</span><br><span class="hljs-comment">         * String realmName</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//身份认证(用户名)</span><br>        Object principal = token.get<span class="hljs-constructor">Principal()</span>;<br>        <span class="hljs-comment">//密码假设是根据用户名到数据库中查询出来的（数据库密码是经过加密的）</span><br>        Object credentials = <span class="hljs-string">&quot;d5a3fedf6c59c2ecbe7f7a6c1a22da37&quot;</span>;<br>        <span class="hljs-comment">//加盐的数据</span><br>        ByteSource byteSource = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ByteSource</span>.</span><span class="hljs-module"><span class="hljs-identifier">Util</span>.</span></span><span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;itsource&quot;</span>);<br>        return <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleAuthenticationInfo(<span class="hljs-params">principal</span>,<span class="hljs-params">credentials</span>,<span class="hljs-params">byteSource</span>,<span class="hljs-params">getName</span>()</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="7-3、小结"><a href="#7-3、小结" class="headerlink" title="7.3、小结"></a>7.3、小结</h5><p>授权拦截:</p><ol><li><p>写死</p></li><li><p>通过factoryBean动态获取</p></li><li><p>通过Realm获取用户权限返回给框架</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/Object/"/>
    <url>/2021/02/15/Object/</url>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p> <code>Object类</code> 是类层次结构的根类，每个类都使用 <code>Object</code> 作为超类。</p><p>所有的类当然除了Object类（包括数组）都实现这个类的方法 :　所有的实例对象都可以调用到Object中的方法;</p><blockquote><p> 补充：什么是Native Method</p><p>​    简单地讲，一个Native Method就是一个java调用非java代码的接口。</p><p>​    一个Native Method是这样一个java的方法：该方法的实现由非java语言实现，比如C。</p><p>​    这个特征并非java所特有，很多其它的编程语言都有这一机制，比如在C＋＋中，你可以用extern “C”告知C＋＋编译器去调用一个C的函数。</p><p>​    “A native method is a Java method whose implementation is provided by non-java code.”</p></blockquote><p>package java.lang.Object.java源代码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类Object是类层次结构的根。</span><br><span class="hljs-comment"> * 每个类都有Object作为超类。所有对象，包括数组，实现这个类的方法。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>  unascribed</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span>     java.lang.Class</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span>   JDK1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerNatives</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        registerNatives();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回此Object的运行时类。返回的Class对象是由所表示类的static synchronized方法锁定的对象。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 实际结果类型是Class&lt;？extends|X|&gt;，其中|X|是调用getClass的表达式的静态类型的擦除。</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">     * 例如，此代码片段不需要强制转换:</span><br><span class="hljs-comment">     * Number n = 0;</span><br><span class="hljs-comment">     * Class&lt;? extends Number&gt; c = n.getClass(); </span><br><span class="hljs-comment">     * 返回值 表示此对象的运行时类的类对象。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getClass();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回对象的哈希代码值。支持此方法是为了给哈希表提供便利，如java.util.HashMap提供的哈希表。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * The general contract of hashCode is:</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 每当在Java应用程序的执行过程中对同一个对象调用多次时，hashCode方法必须一致地返回相同的整数，前提是   * 在对象的equals比较中使用的信息没有被修改</span><br><span class="hljs-comment">     * 从应用程序的一次执行到同一应用程序的另一次执行，此整数不必保持一致。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 如果根据equals（Object）方法，两个对象相等，那么对两个对象中的每个对象调用hashCode方法必须产生相  * 同的整数结果。</span><br><span class="hljs-comment">     * 根据java.lang.Object#equals（java.lang.Object）方法，如果两个对象不相等，则对这两个对象中的每  * 一个调用hashCode方法都必须产生不同的整数结果。 但是，程序员应该知道，为不相等的对象生成不同的整数结   * 果可能会提高哈希表的性能。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 尽可能合理切实可行的，由类对象定义的hashCode方法确实为不同的对象返回不同的整数。（这通常是通过将对象  * 的内部地址转换为整数来实现的，但是Java&amp;amp;trade；编程语言不需要这种实现技术。）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 返回的是 a hash code value for this object.</span><br><span class="hljs-comment">     * 参考     java.lang.Object#equals(java.lang.Object)</span><br><span class="hljs-comment">     * 参考     java.lang.System#identityHashCode</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指示其他对象是否“等于”此对象。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * equals方法在非空对象引用上实现等价关系：</span><br><span class="hljs-comment">     * 它是自反的：对于任何非空的引用值x，x.equals（x）应该返回true。</span><br><span class="hljs-comment">     * 它是对称的：对于任何非空的引用值x和y，当且仅当y.equals（x）返回true时，x.equals（y）应返回 * true。</span><br><span class="hljs-comment">     * 它是可传递的：对于任何非空的引用值x、y和z，如果x.equals（y）返回true，y.equals（z）返回true，那  * 么x.equals（z）应该返回true。</span><br><span class="hljs-comment">     * 它是一致的：对于任何非空的引用值x和y，多次调用x.equals（y）一致地返回true或一致地返回false，前提  * 是在对象的equals比较中使用的信息没有被修改。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 对于任何非空引用值x，x.equals(null)应返回false。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 类对象的equals方法在对象上实现了最有鉴别能力的等价关系；</span><br><span class="hljs-comment">     * 也就是说，对于任何非空的引用值x和y，只有当x和y引用同一对象时，该方法才返回true</span><br><span class="hljs-comment">     * (x == y has the value true).</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 请注意，每当重写hashCode方法时，通常都需要重写该方法，以便维护hashCode方法的一般约定，该约定声明相 * 等的对象必须具有相等的hash代码。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>   obj   the reference object with which to compare.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  &#123;<span class="hljs-doctag">@code</span> true&#125; if this object is the same as the obj</span><br><span class="hljs-comment">     *          argument; &#123;<span class="hljs-doctag">@code</span> false&#125; otherwise.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>     #hashCode()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>     java.util.HashMap</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建并返回此对象的副本。“复制”的确切含义可能取决于对象的类别。 一般意图是，对于任何对象x，表达式：</span><br><span class="hljs-comment">     * x.clone() != x will be true, and that the expression:</span><br><span class="hljs-comment">     * x.clone().getClass() == x.getClass() will be true, 但这并不是绝对的要求。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * While it is typically the case that: 通常情况下：</span><br><span class="hljs-comment">     * x.clone().equals(x) will be true, 这并不是绝对的要求，如数组的克隆这里返回的就是false.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 按照惯例，返回的对象应该通过调用super.clone来获得。如果一个类及其所有的超类（对象除外）都遵守这个惯   * 例，那么x.clone().getClass()==x.getClass()就是这样。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 按照惯例，此方法返回的对象应独立于此对象（正在克隆）。为了实现这种独立性，可能需要在返回super.clone   * 返回的对象之前修改该对象的一个或多个字段。通常，这意味着复制构成被克隆对象的内部“深层结构”的任何可变 * 对象，并用对副本的引用替换对这些对象的引用。如果一个类只包含原语字段或对不可变对象的引用，那么通常情况   * 下super.clone返回的对象中不需要修改任何字段。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 类对象的方法克隆执行特定的克隆操作。首先，如果这个对象的类没有实现接口Cloneable，那么会抛出 * CloneNotSupportedException。注意，所有数组都被认为实现了接口Cloneable，并且数组类型T[]的 * clone方法的返回类型是T[]，其中T是任何引用或基元类型。</span><br><span class="hljs-comment">     * 否则，此方法将创建此对象类的新实例，并使用此对象相应字段的内容初始化其所有字段，就像通过赋值一样；字段   * 的内容本身不会被克隆。因此，此方法执行此对象的“浅复制”，而不是“深复制”操作。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * Object类本身并不实现接口Cloneable，因此对类为Object的对象调用clone方法将导致在运行时引发异常。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>     a clone of this instance.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  CloneNotSupportedException  if the object&#x27;s class does not</span><br><span class="hljs-comment">     *               support the &#123;<span class="hljs-doctag">@code</span> Cloneable&#125; interface. Subclasses</span><br><span class="hljs-comment">     *               that override the &#123;<span class="hljs-doctag">@code</span> clone&#125; method can also</span><br><span class="hljs-comment">     *               throw this exception to indicate that an instance cannot</span><br><span class="hljs-comment">     *               be cloned.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> java.lang.Cloneable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回对象的字符串表示形式。通常，toString方法返回一个字符串，该字符串“以文本形式表示”该对象。结果应该   * 是一个简洁但信息量大的表述，便于阅读。建议所有子类重写此方法。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 类对象的toString方法返回一个字符串，该字符串由对象为实例的类的名称、at符号字符“@”和对象哈希代码的无* 符号十六进制表示组成。换句话说，此方法返回的字符串等于：</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * getClass().getName() + &#x27;@&#x27; + Integer.toHexString(hashCode())</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  a string representation of the object.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 唤醒等待此对象监视器的单个线程。如果有任何线程正在等待这个对象，则选择其中一个线程被唤醒。选择是任意  * 的，由实现者自行决定。线程通过调用其中一个等待方法来等待对象的监视器。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 在当前线程放弃对该对象的锁定之前，唤醒的线程将无法继续。唤醒的线程将以通常的方式与任何其他线程竞争，这   * 些线程可能正在积极竞争以在此对象上同步；例如，唤醒的线程在成为下一个锁定此对象的线程时没有可靠的特权或 * 劣势。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 此方法只能由作为此对象监视器所有者的线程调用。线程通过以下三种方式之一成为对象监视器的所有者：</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * By executing a synchronized instance method of that object.</span><br><span class="hljs-comment">     * By executing the body of a synchronized statement that synchronizes on the object.</span><br><span class="hljs-comment">     * For objects of type Class, by executing a synchronized static method of that class.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * Only one thread at a time can own an object&#x27;s monitor.一次只有一个线程有该对象的监视器。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  IllegalMonitorStateException  if the current thread is not</span><br><span class="hljs-comment">     *               the owner of this object&#x27;s monitor.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#notifyAll()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#wait()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 唤醒此对象监视器上等待的所有线程。线程通过调用其中一个等待方法来等待对象的监视器。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 在当前线程放弃对该对象的锁定之前，唤醒的线程将无法继续。唤醒的线程将以通常的方式与任何其他线程竞争，这   * 些线程可能正在积极竞争以在此对象上同步；例如，唤醒的线程在成为下一个线程以锁定此对象时没有可靠的特权或 * 劣势。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 此方法只能由作为此对象监视器所有者的线程调用。有关线程成为监视器所有者的方式的描述，请参见notify方 * 法。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  IllegalMonitorStateException  if the current thread is not</span><br><span class="hljs-comment">     *               the owner of this object&#x27;s monitor.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#notify()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#wait()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使当前线程等待，直到另一个线程调用此对象的java.lang.Object#notify（）方法或java.lang.Object#notifyAll（）方法，或者已过指定的时间。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * The current thread must own this object&#x27;s monitor.</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 此方法会导致当前线程（称为T）将自身放置在此对象的等待集中，然后放弃对此对象的任何和所有同步声明。出于   * 线程调度的目的，线程T将被禁用，并处于休眠状态，直到发生以下四种情况之一：</span><br><span class="hljs-comment">     * 其他一些线程为此对象调用notify方法，而线程T恰好被任意选择为要唤醒的线程。</span><br><span class="hljs-comment">     * 其他一些线程为此对象调用notifyAll方法。</span><br><span class="hljs-comment">     * 另一个线程普通线程interrupt（）中断线程T。</span><br><span class="hljs-comment">     * 指定的实时时间或多或少已经过去。但是，如果超时为零，则不考虑实时性，线程只需等待通知。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 然后从该对象的等待集中删除线程T，并重新启用线程调度。然后，它以通常的方式与其他线程竞争对象上的同步  * 权；一旦它获得了对象的控制权，它对该对象的所有同步声明都将恢复到原来的状态，也就是说，恢复到调用wait * 方法时的状态。然后线程T从wait方法的调用返回。因此，从wait方法返回时，对象和线程T的同步状态与调用 * wait方法时完全相同。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 线程也可以在不被通知、中断或超时的情况下唤醒，即所谓的虚假唤醒。虽然这种情况在实践中很少发生，但应用程   * 序必须通过测试本应导致线程被唤醒的条件，并在条件不满足时继续等待来防范这种情况。换句话说，等待应该总是 * 以循环的形式出现，就像这样：</span><br><span class="hljs-comment">     * &lt;pre&gt;</span><br><span class="hljs-comment">     *     synchronized (obj) &#123;</span><br><span class="hljs-comment">     *         while (&amp;lt;condition does not hold&amp;gt;)</span><br><span class="hljs-comment">     *             obj.wait(timeout);</span><br><span class="hljs-comment">     *         ... // Perform action appropriate to condition</span><br><span class="hljs-comment">     *     &#125;</span><br><span class="hljs-comment">     * &lt;/pre&gt;</span><br><span class="hljs-comment">     * （有关此主题的更多信息，请参阅Doug Lea的“Concurrent Programming in Java (Second  * Edition)”（Addison-Wesley，2000）中的第3.2.3节，或Joshua Bloch的“Effective Java  * Programming Language Guide”（Addison-Wesley，2001）中的第50项）。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 如果当前线程是普通的java.lang.thread#interrupt（），在等待之前或等待期间被任何线程中断，则抛出 * InterruptedException。在还原此对象的锁定状态（如上所述）之前，不会引发此异常。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 请注意，wait方法在将当前线程放入此对象的等待集中时，仅解锁此对象；在线程等待期间，可以同步当前线程的 * 任何其他对象将保持锁定状态。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 此方法只能由作为此对象监视器所有者的线程调用。有关线程成为监视器所有者的方式的描述，请参见notify方 * 法。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>      timeout   the maximum time to wait in milliseconds.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  IllegalArgumentException      if the value of timeout is</span><br><span class="hljs-comment">     *               negative.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  IllegalMonitorStateException  if the current thread is not</span><br><span class="hljs-comment">     *               the owner of the object&#x27;s monitor.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  InterruptedException if any thread interrupted the</span><br><span class="hljs-comment">     *             current thread before or while the current thread</span><br><span class="hljs-comment">     *             was waiting for a notification.  The &lt;i&gt;interrupted</span><br><span class="hljs-comment">     *             status&lt;/i&gt; of the current thread is cleared when</span><br><span class="hljs-comment">     *             this exception is thrown.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#notify()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#notifyAll()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Causes the current thread to wait until another thread invokes the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> java.lang.Object#notify()&#125; method or the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> java.lang.Object#notifyAll()&#125; method for this object, or</span><br><span class="hljs-comment">     * some other thread interrupts the current thread, or a certain</span><br><span class="hljs-comment">     * amount of real time has elapsed.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * This method is similar to the &#123;<span class="hljs-doctag">@code</span> wait&#125; method of one</span><br><span class="hljs-comment">     * argument, but it allows finer control over the amount of time to</span><br><span class="hljs-comment">     * wait for a notification before giving up. The amount of real time,</span><br><span class="hljs-comment">     * measured in nanoseconds, is given by:</span><br><span class="hljs-comment">     * &lt;blockquote&gt;</span><br><span class="hljs-comment">     * &lt;pre&gt;</span><br><span class="hljs-comment">     * 1000000*timeout+nanos&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * In all other respects, this method does the same thing as the</span><br><span class="hljs-comment">     * method &#123;<span class="hljs-doctag">@link</span> #wait(long)&#125; of one argument. In particular,</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> wait(0, 0)&#125; means the same thing as &#123;<span class="hljs-doctag">@code</span> wait(0)&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * The current thread must own this object&#x27;s monitor. The thread</span><br><span class="hljs-comment">     * releases ownership of this monitor and waits until either of the</span><br><span class="hljs-comment">     * following two conditions has occurred:</span><br><span class="hljs-comment">     * &lt;ul&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;Another thread notifies threads waiting on this object&#x27;s monitor</span><br><span class="hljs-comment">     *     to wake up either through a call to the &#123;<span class="hljs-doctag">@code</span> notify&#125; method</span><br><span class="hljs-comment">     *     or the &#123;<span class="hljs-doctag">@code</span> notifyAll&#125; method.</span><br><span class="hljs-comment">     * &lt;li&gt;The timeout period, specified by &#123;<span class="hljs-doctag">@code</span> timeout&#125;</span><br><span class="hljs-comment">     *     milliseconds plus &#123;<span class="hljs-doctag">@code</span> nanos&#125; nanoseconds arguments, has</span><br><span class="hljs-comment">     *     elapsed.</span><br><span class="hljs-comment">     * &lt;/ul&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * The thread then waits until it can re-obtain ownership of the</span><br><span class="hljs-comment">     * monitor and resumes execution.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * As in the one argument version, interrupts and spurious wakeups are</span><br><span class="hljs-comment">     * possible, and this method should always be used in a loop:</span><br><span class="hljs-comment">     * &lt;pre&gt;</span><br><span class="hljs-comment">     *     synchronized (obj) &#123;</span><br><span class="hljs-comment">     *         while (&amp;lt;condition does not hold&amp;gt;)</span><br><span class="hljs-comment">     *             obj.wait(timeout, nanos);</span><br><span class="hljs-comment">     *         ... // Perform action appropriate to condition</span><br><span class="hljs-comment">     *     &#125;</span><br><span class="hljs-comment">     * &lt;/pre&gt;</span><br><span class="hljs-comment">     * This method should only be called by a thread that is the owner</span><br><span class="hljs-comment">     * of this object&#x27;s monitor. See the &#123;<span class="hljs-doctag">@code</span> notify&#125; method for a</span><br><span class="hljs-comment">     * description of the ways in which a thread can become the owner of</span><br><span class="hljs-comment">     * a monitor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>      timeout   the maximum time to wait in milliseconds.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>      nanos      additional time, in nanoseconds range</span><br><span class="hljs-comment">     *                       0-999999.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  IllegalArgumentException      if the value of timeout is</span><br><span class="hljs-comment">     *                      negative or the value of nanos is</span><br><span class="hljs-comment">     *                      not in the range 0-999999.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  IllegalMonitorStateException  if the current thread is not</span><br><span class="hljs-comment">     *               the owner of this object&#x27;s monitor.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  InterruptedException if any thread interrupted the</span><br><span class="hljs-comment">     *             current thread before or while the current thread</span><br><span class="hljs-comment">     *             was waiting for a notification.  The &lt;i&gt;interrupted</span><br><span class="hljs-comment">     *             status&lt;/i&gt; of the current thread is cleared when</span><br><span class="hljs-comment">     *             this exception is thrown.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeout, <span class="hljs-keyword">int</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">if</span> (timeout &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;timeout value is negative&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (nanos &lt; <span class="hljs-number">0</span> || nanos &gt; <span class="hljs-number">999999</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                                <span class="hljs-string">&quot;nanosecond timeout value out of range&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0</span>) &#123;<br>            timeout++;<br>        &#125;<br><br>        wait(timeout);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Causes the current thread to wait until another thread invokes the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> java.lang.Object#notify()&#125; method or the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> java.lang.Object#notifyAll()&#125; method for this object.</span><br><span class="hljs-comment">     * In other words, this method behaves exactly as if it simply</span><br><span class="hljs-comment">     * performs the call &#123;<span class="hljs-doctag">@code</span> wait(0)&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * The current thread must own this object&#x27;s monitor. The thread</span><br><span class="hljs-comment">     * releases ownership of this monitor and waits until another thread</span><br><span class="hljs-comment">     * notifies threads waiting on this object&#x27;s monitor to wake up</span><br><span class="hljs-comment">     * either through a call to the &#123;<span class="hljs-doctag">@code</span> notify&#125; method or the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> notifyAll&#125; method. The thread then waits until it can</span><br><span class="hljs-comment">     * re-obtain ownership of the monitor and resumes execution.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * As in the one argument version, interrupts and spurious wakeups are</span><br><span class="hljs-comment">     * possible, and this method should always be used in a loop:</span><br><span class="hljs-comment">     * &lt;pre&gt;</span><br><span class="hljs-comment">     *     synchronized (obj) &#123;</span><br><span class="hljs-comment">     *         while (&amp;lt;condition does not hold&amp;gt;)</span><br><span class="hljs-comment">     *             obj.wait();</span><br><span class="hljs-comment">     *         ... // Perform action appropriate to condition</span><br><span class="hljs-comment">     *     &#125;</span><br><span class="hljs-comment">     * &lt;/pre&gt;</span><br><span class="hljs-comment">     * This method should only be called by a thread that is the owner</span><br><span class="hljs-comment">     * of this object&#x27;s monitor. See the &#123;<span class="hljs-doctag">@code</span> notify&#125; method for a</span><br><span class="hljs-comment">     * description of the ways in which a thread can become the owner of</span><br><span class="hljs-comment">     * a monitor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  IllegalMonitorStateException  if the current thread is not</span><br><span class="hljs-comment">     *               the owner of the object&#x27;s monitor.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span>  InterruptedException if any thread interrupted the</span><br><span class="hljs-comment">     *             current thread before or while the current thread</span><br><span class="hljs-comment">     *             was waiting for a notification.  The &lt;i&gt;interrupted</span><br><span class="hljs-comment">     *             status&lt;/i&gt; of the current thread is cleared when</span><br><span class="hljs-comment">     *             this exception is thrown.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#notify()</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>        java.lang.Object#notifyAll()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        wait(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当垃圾回收确定不再有对对象的引用时，由对象上的垃圾回收器调用。子类重写finalize方法以释放系统资源或执  * 行其他清理。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * finalize的一般约定是，当Java虚拟机确定不再有任何方法可以让任何尚未终止的线程访问该对象时，调用 * finalize，除非是由某个其他对象或类的finalize所采取的准备好进行finalize的操作导致的。finalize方   * 法可以执行任何操作，包括使此对象对其他线程再次可用；但是finalize的通常目的是在对象被不可撤销地丢弃之* 前执行清理操作。例如，表示输入/输出连接的对象的finalize方法可能会执行显式I/O事务，以便在永久丢弃该  * 对象之前断开连接。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 类对象的finalize方法不执行任何特殊操作；它只是正常返回。对象的子类可以重写此定义。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * Java编程语言不保证哪个线程将调用任何给定对象的finalize方法。但是，可以保证调用finalize的线程在调  * 用finalize时不会持有任何用户可见的同步锁。如果finalize方法引发未捕获的异常，则将忽略该异常，并终止  * 该对象的finalize。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 为对象调用finalize方法后，在Java虚拟机再次确定不再有任何方法可以通过任何尚未终止的线程访问该对象之   * 前，不会采取进一步的操作，包括其他已准备好进行finalize的对象或类可能采取的操作，此时对象可能会被丢 * 弃。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 对于任何给定的对象，Java虚拟机都不会多次调用finalize方法。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * finalize方法引发的任何异常都会导致终止此对象的finalize，但是产生的异常将被忽略。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable the &#123;<span class="hljs-doctag">@code</span> Exception&#125; raised by this method</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> java.lang.ref.WeakReference</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> java.lang.ref.PhantomReference</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@jls</span> 12.6 Finalization of Class Instances</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123; &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="equals-方法与-的区别"><a href="#equals-方法与-的区别" class="headerlink" title="equals()方法与 == 的区别"></a>equals()方法与 == 的区别</h1><p>凡是new出来的对象都会在堆中开辟新的空间, 占据不同地址值的空间。</p><p>原来Object中定义的equals方法的比较规则就是 ==  ，如果我们想要写自己的规则，则需要在我们自己的类中覆写Object的equals方法，在方法里面写我们自己的规则。</p><p>相等 : a 传统的理解一般都是数字值是否相等;    b 在程序中任何东西都是数据,都会比较是否相等</p><ul><li><p><code>==</code> 比较的相等：</p><ul><li>基本数据类型:  比较的就是值是否相等；</li><li>引用数据类型:  比较的是对象的地址是否一样；<u>如果要比较两个对象的内容是否相同，此种比较不在适用</u></li></ul></li><li><p><code>equals()</code> 比较的相等 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>基本数据类型：不能够使用！基本数据类型不是对象，不能够调用Object中的方法；</li><li>引用数据类型：在Object的源码中定义的就是使用==进行比较，通过重写equals方法进行对象内容的比较。</li></ul></li></ul><p>如果我们没有去覆写过equals方法而是直接调用到了Object中的此方法，那么结果和==比较引用数据类型的结果一样的；</p><p>在实际开发中，我们一般比较对象都是通过对象的字段值进行比较（一般比较对象的地址没有多大用处），所以我们会经常覆写Object中的equals方法，把自己的规则写在方法里面。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis持久层框架"><a href="#MyBatis持久层框架" class="headerlink" title="MyBatis持久层框架"></a>MyBatis持久层框架</h2><p>MyBatis框架，此框架的主要作用就是更加便捷的操作数据库，比如：MyBatis做查询时可以将ResultSet对象返回的数据记录自动封装进Entity实体类或List中、可以把SQL语句配置到XML文件中，也就是将SQL语句与*.java文件进行分离，有利于代码的后期维护，也使代码的分层更加明确。</p><p>MyBatis不是一个独立的技术，它内部的操作数据库的原理还是使用JDBC，其只是对JDBC进行了轻量级的封装，便于程序员更加方便的设计代码去操作数据库。</p><p>MyBatis是一个“持久化ORM框架”，持久化是指内存中的数据保存到硬盘上。ORM（Object Relation Mapping）对象关系映射，从两方面介绍：</p><ol><li>大的方面，一个类对应表中的一行；</li><li>小的方面，一个类中的属性对应一个表中的列。</li></ol><p>也就是说在使用MyBatis框架时，可以将Java类转化成数据表中的记录，或者将数据表中的记录转化成Java中的类，内部技术的原理其实就是JDBC+Java反射技术。</p><p>MyBatis 是一个支持普通 SQL查询、存储过程和高级映射的<code>优秀的持久层框架</code>。MyBatis 消除了几乎所有的 JDBC代码 和 手工设置参数 ，以及结果集的检索。</p><p>MyBatis 使用简单的 <code>XML</code> 或 <code>注解</code> 用于配置和原始映射，将<code>接口</code>和 <code>Java 的POJOs</code>（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录。MyBatis不能自动创建表，如果能够自动建表，必须自己事先准备好建表的SQL语句。</p><h3 id="1、对象关系映射ORM（Object-Relation-Mapping）概述"><a href="#1、对象关系映射ORM（Object-Relation-Mapping）概述" class="headerlink" title="1、对象关系映射ORM（Object Relation Mapping）概述"></a>1、对象关系映射ORM（Object Relation Mapping）概述</h3><h4 id="1-1、流行的ORM框架"><a href="#1-1、流行的ORM框架" class="headerlink" title="1.1、流行的ORM框架"></a>1.1、流行的ORM框架</h4><p>1、<strong>JPA</strong>：本身是一种<strong>ORM规范</strong>，不是ORM框架，<strong>由各大ORM框架提供实现</strong>。</p><p>2、<strong>Hibernate</strong>：<code>目前最流行的ORM框架</code>，设计灵巧，性能一般（并且开发人员不能够很好的控制性能），文档丰富。Hibernate是一个完整的ORM框架，常规CRUD我们不需要写一句SQL ( 完全自动操作 ) ；</p><p>3、<strong>MyBatis</strong>：原本是apache的一个开源项目iBatis，提供的持久层框架包括SQL Maps和Dao。MyBatis 并不是一个完整的ORM框架（或称“半自动”的ORM框架），因为我们还需要自己去写全部SQL，开发人员直接编写SQL(更好灵活)。</p><h4 id="1-2、JDBC操作数据库的缺陷"><a href="#1-2、JDBC操作数据库的缺陷" class="headerlink" title="1.2、JDBC操作数据库的缺陷"></a>1.2、JDBC操作数据库的缺陷</h4><p>首先，通过jdbc也能实现<strong>对象实体</strong>和<strong>数据库关系的映射</strong>。那就是采用硬编码方式，为每一种可能的数据库访问操作提供单独的方法， 也就是各种Dao (UserDao、DeptDao等)。</p><p>最大的缺点就是：</p><ol><li>SQL写在JAVA代码中，在修改SQL查询语句时，就连带着修改了Java代码，需要重新编译；</li><li>有很多重复性的操作（比如获取连接，释放资源等）。</li></ol><h4 id="1-3、ORM框架的操作数据库关系方式有许多种，常用的有两种"><a href="#1-3、ORM框架的操作数据库关系方式有许多种，常用的有两种" class="headerlink" title="1.3、ORM框架的操作数据库关系方式有许多种，常用的有两种"></a>1.3、ORM框架的操作数据库关系方式有许多种，常用的有两种</h4><h5 id="1、SQL操作方式-对JDBC进行轻量级封装的MyBatis框架实现"><a href="#1、SQL操作方式-对JDBC进行轻量级封装的MyBatis框架实现" class="headerlink" title="1、SQL操作方式 ( 对JDBC进行轻量级封装的MyBatis框架实现 )"></a>1、SQL操作方式 ( 对JDBC进行轻量级封装的MyBatis框架实现 )</h5><p>配置到配置文件中，通过不同中完成对象实体和数据库关系相互转换的操作。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.ProductMapper&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml">select * from product where id= #</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="xml">select : 这个标签里写查询语句</span><br><span class="xml">id : 用来唯一确定这条查询语句</span><br><span class="xml">未来用这条查询时由：namespace + . + id 的方式唯一确定这条查询</span><br><span class="xml">如，cn.kongwei_liao.domain.ProductMapper.get</span><br><span class="xml">parameterType : 传入的参数类型（long：Long、_long：long），具体数据库字段类型对应的高级程序语言类型参见文档</span><br><span class="xml">resultType : 结果类型（第一条数据返回的对象类型），一定是cn.kongwei_liao.domain.Product这样的全限定类名</span><br><span class="xml">--&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2、完整操作-JPA、Hibenate框架实现方式"><a href="#2、完整操作-JPA、Hibenate框架实现方式" class="headerlink" title="2、完整操作(JPA、Hibenate框架实现方式)"></a>2、完整操作(JPA、Hibenate框架实现方式)</h5><p>直接映射的是对象实体和数据库关系映射。操作数据库关系，不用写SQL由框架自己生成。</p><p><img src="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/image-20191203144714812.png" alt="image-20191203144714812"></p><h5 id="3、MyBatis与Hibenate对比"><a href="#3、MyBatis与Hibenate对比" class="headerlink" title="3、MyBatis与Hibenate对比"></a>3、MyBatis与Hibenate对比</h5><p>MyBatis使用SQL语句对数据库进行操作的，所以单独对SQL语句进行优化，以提高查询效率，这点与Hibernate框架相比有很大优势，现阶段大部分的软件企业正逐步用MyBatis替换掉Hibernate。</p><p>更严格的来讲，MyBatis是一种“半自动化”的ORM框架，应该算作SQL映射框架（SQL mapper framework）。因为MyBatis操作数据库时还是使用的原始的SQL语句，这些语句仍要由程序员来自行设计。在使用上和全自动的ORM框架Hibernate有着非常大的区别，MyBatis是以SQL语句为映射基础，而Hibernate是彻底的基于实体类与表进行映射。正是由于MyBatis的半自动化特性，可以将SQL语句灵活多变的特性融入到项目的开发中。</p><p>。。。。。。</p><h4 id="1-4、ORM框架工作原理"><a href="#1-4、ORM框架工作原理" class="headerlink" title="1.4、ORM框架工作原理"></a>1.4、ORM框架工作原理</h4><p>1、以一定的映射方式，把实体模型和数据库关系的映射；</p><p>2、ORM框架启动时加载这些映射和数据库配置文件；</p><p>3、ORM通过对最原生JDBC的封装提供更加便利的操作API；</p><p>4、Dao通过ORM提供的便捷API以对象的方式操作数据库关系。</p><p><img src="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/image-20191203144903564.png" alt="image-20191203144903564"></p><h3 id="3、MyBatis完成CRUD入门举例"><a href="#3、MyBatis完成CRUD入门举例" class="headerlink" title="3、MyBatis完成CRUD入门举例"></a>3、MyBatis完成CRUD入门举例</h3><p>准备步骤：<strong>导包</strong> –&gt; <strong>建表</strong> –&gt; <strong>domain(JavaBean)</strong> –&gt; <strong>准备Dao层(CRUD)</strong> –&gt; <strong>测试及业务代码中使用</strong></p><p>注意：我们要引哪些包?</p><ol><li>一定要引入JDBC驱动包；</li><li>导入MyBatis的核心包；</li><li>导入MyBatis的依赖包。</li></ol><h4 id="3-1、准备工作"><a href="#3-1、准备工作" class="headerlink" title="3.1、准备工作"></a>3.1、准备工作</h4><p>1、创建Java项目</p><p>2、导入所需的Jar包</p><p>MyBatis是一个持久层框架，在Java中框架就是一组Java类最后打成Jar包。所有使用的Java框架，使用前都要先导入相应 的Jar包。在导入jar包之前，我们得先说一下，MyBatis是操作数据库的框架。要操作数据库，还需要导入相应的数据库驱动包。注：数据库驱动包就是各大数据库厂商根据JDBC规范实现的jar包。</p><p>下图为我们使用MyBatis要导入的包：</p><p><img src="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/image-20191203145413871.png" alt="image-20191203145413871"></p><p>如用Maven包管理工具管理项目，可在配置文件中加入如下依赖：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- mybatis版本号 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>3.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- mysql驱动版本号 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mysql-driver.version</span>&gt;</span>5.1.29<span class="hljs-tag">&lt;/<span class="hljs-name">mysql-driver.version</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- log4j日志包版本号 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slf4j.version</span>&gt;</span>1.7.18<span class="hljs-tag">&lt;/<span class="hljs-name">slf4j.version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 添加mybatis依赖 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;mybatis.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>asm<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>asm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.18.1-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- 添加mysql驱动依赖 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;mysql-driver.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- 添加日志相关jar包 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log4j.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;slf4j.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;slf4j.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>3、准备相应的数据库表</p><p>现在直接引入我们准备好的product表即可：</p><p><img src="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/image-20191203150151545.png" alt="image-20191203150151545"></p><p>4、准备实体类JavaBean（domain层，不知道为什么是用domain这个词）</p><p>创建一个Product对象，对象属性 和数据库的 表中字段 对应；</p><p>注：类的名称  和  类型 都和我们的  Product表相对应匹配。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br><span class="hljs-keyword">private</span>Long id;<span class="hljs-comment">//商品名称</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> productName;<span class="hljs-comment">//品牌</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> brand;<span class="hljs-comment">//供应商</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> supplier;<span class="hljs-comment">//零售价</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">Double</span> salePrice;<span class="hljs-comment">//进价</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">Double</span> costPrice;<span class="hljs-comment">//折扣比例</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">Double</span> cutoff;<span class="hljs-comment">//商品分类编号</span><br><span class="hljs-keyword">private</span> Long dir_id; <span class="hljs-comment">//提供getter与setter...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5、Dao层准备</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品的持久操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IProductDao</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span>(<span class="hljs-params">Product p</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span>(<span class="hljs-params">Product p</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>(<span class="hljs-params">Long id</span>)</span>;<br><span class="hljs-function">Product <span class="hljs-title">get</span>(<span class="hljs-params">Long id</span>)</span>;<br><span class="hljs-function">List&lt;Product&gt; <span class="hljs-title">getAll</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2、MyBatis核心配置文件"><a href="#3-2、MyBatis核心配置文件" class="headerlink" title="3.2、MyBatis核心配置文件"></a>3.2、MyBatis核心配置文件</h4><p>入门开始，介绍了MyBatis之后，就在提前知道MyBatis有一个核心对象：<code>SqlSessionFactory</code>，接下来要想方设法拿到这个核心对象。那我们如何拿到这个SqlSessionFactory对象？</p><ol><li>我们需要准备一个核心的xml文件；</li><li>拿到SqlSessionFactory之前需要读取核心的xml配置文件；</li><li>需要构造者(SqlSessionFactoryBuilder)来创建它。</li></ol><h5 id="1、准备核心的xml文件："><a href="#1、准备核心的xml文件：" class="headerlink" title="1、准备核心的xml文件："></a>1、准备核心的xml文件：</h5><p>数据库连接配置，映射文件位置的配置等。</p><p>资源文件加下面创建一个文件，命名为MyBatis-Config.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="xml">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 引入一个外部的Properties文件，如db.properties文件，该文件保存数据库连接属性，包括：驱动、数据库地址、数据库账号及密码 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span> /&gt;</span></span><br><span class="xml">    </span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- alias:取的别名 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- type：这个别名所对应的Java类 ：别名使用的时候与大小写无关 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei-liao.domain.Department&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Department&quot;</span>/&gt;</span></span><br><span class="xml">        </span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 将一个包下面的所有类都取上别名:&lt;package name=&quot;cn.kongwei-liao.domain&quot; /&gt; --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.kongwei-liao.domain&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="xml">    </span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- 环境们 (很多环境的意思)default:默认使用哪一个环境(必需对应一个环境的id) --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 一个环境一个id:为这个环境取唯一一个id名称 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-comment">&lt;!-- 事务管理 type:JDBC(支持事务)/MANAGED(什么都不做) --&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-comment">&lt;!-- 数据源, 连接池 type(POOLED):MyBatis自带的连接池 --&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-comment">&lt;!-- 连接数据库的参数 --&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 这个mappers代表的是相应的ORM映射文件，添加映射文件的位置 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 添加映射文件：1.前面不添加/，表示相对路径;2.使用的文件路径/,不是包路径. --&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 单表crud --&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- &lt;mapper resource=&quot;cn/kongwei_liao/domain/ProductMapper.xml&quot; /&gt; --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;cn/kongwei_liao/domain/ProductMapper.xml&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>Eclipse配置MyBatis-Config.xml提示信息，IDEA没整理不知道咋搞？？</p><p><img src="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/image-20191203152252675.png" alt="image-20191203152252675"></p><h5 id="2、MyBatis核心配置标签的一个简单介绍："><a href="#2、MyBatis核心配置标签的一个简单介绍：" class="headerlink" title="2、MyBatis核心配置标签的一个简单介绍："></a>2、MyBatis核心配置标签的一个简单介绍：</h5><p>configuration：配置文件根标签；</p><p>environments：里面两个内容(<code>transactionManager</code>, <code>dataSource</code> )；</p><p>dataSource : <code>driver</code>, <code>url</code>, <code>username</code>, <code>password</code>(连接数据库的最小单位)；</p><p>mappers：mapper映射文件地址。</p><h5 id="3、抽取数据库信息-到-db-properties配置文件"><a href="#3、抽取数据库信息-到-db-properties配置文件" class="headerlink" title="3、抽取数据库信息 到 db.properties配置文件"></a>3、抽取数据库信息 到 db.properties配置文件</h5><p>关于数据库连接的信息已经在配置文件(XML)中，但是更多时候，我们还是会把配置文件的信息放到db.properties中。(由于properties的结构简单，便于修改，而这个文件只放数据库的连接信息也更好的体现了职责分离)。</p><p>其实，在官方文档的核心文件配置，就是直接使用的推荐的properties方式。</p><p>只需要我们做如下修改即可：</p><p>资源文件夹新建***.properties文件，如<strong>db.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">db.driver</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">db.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/test<br><span class="hljs-attr">db.username</span>=root<br><span class="hljs-attr">db.password</span>=root<br></code></pre></td></tr></table></figure><p>MyBatis-Config.xml文件修改：用${…}符号引入db.properties中参数</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 引入Properties文件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 根据key拿到properties中的value值 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="4、映射文件：对象与关系的映射"><a href="#4、映射文件：对象与关系的映射" class="headerlink" title="4、映射文件：对象与关系的映射"></a>4、映射文件：对象与关系的映射</h5><p>MyBatis是一个ORM映射框架，请问ORM体现在哪?</p><p>核心文件中有一个mappers,它指向了一个映射文件。映射文件在哪？</p><p>不是说好的MyBatis要写SQL语句么？SQL语句又在哪里？</p><p>如果直接写xml是没有提示了，在xml文件中加上约束的时候，xml就会有提示。</p><p>而现在使用的约束是通过网络访问，在Eclipse中，我们可以找到相应的约束文件，然后配置到自己本地即可。</p><p>直接找到我们文档中的探究已映射的SQL语句,在这里，我就可以看到一段xml(如下图)，这个xml就是咱们需要的映射文件，它就可以体现出ORM，并且在这里面，也可以愉快的写sql语句了。</p><p><img src="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/image-20191203155111232.png" alt="image-20191203155111232"></p><p>在这里，我们可以看懂一些配置的意思，但是也有一些东西不是很明白。在下面的实例中，我已经对每一句配置准备好了相应的解释：</p><p>cn/kongwei_liao/domain/ProductMapper.xml文件如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="xml">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><br><span class="xml"><span class="hljs-comment">&lt;!--公共查询句：可由include标签引入--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rootsql&quot;</span>&gt;</span></span><br><span class="xml">select * from product</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-------------------------------------------------------------------------------------&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="xml">这个Mapper的主要功能就是写sql</span><br><span class="xml">mapper:根</span><br><span class="xml">namespace:命令空间 (用来确定唯一) 以前这个是可以不加的,现在必需加</span><br><span class="xml">namespace的值，规则的：映射文件XxxMapper.xml所在的包+domain类名+Mapper</span><br><span class="xml"> --&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.ProductMapper&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 固定书写方法 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="xml">        select : 这里面写查询语句</span><br><span class="xml">        id:用来确定这条sql语句的唯一</span><br><span class="xml">               以后我们确定唯一,也就是找sql语句 : namespace + . + id</span><br><span class="xml">             例: cn.kongwei_liao.domain.ProductMapper.get</span><br><span class="xml">        parameterType : 传入的参数类型  long:大Long  _long:小long (具体的对应请参见文档)</span><br><span class="xml">        resultType : 结果类型(第一条数据返回的对象类型) 自己的对象，一定是cn.kongwei_liao.domain.Product这样的全限定类名</span><br><span class="xml">     --&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--include refid=&quot;rootsql&quot;&gt;&lt;/include--&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--OR--&gt;</span></span><br><span class="xml">select * from product</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;rootsql&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="xml">where id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByNameAndId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee_department_role&quot;</span> &gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;rootsql&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="xml">where  productname=#</span><span class="hljs-template-variable">&#123;0&#125;</span><span class="xml"> and productid=#</span><span class="hljs-template-variable">&#123;1&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchByProductName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span></span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;rootsql&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="xml">where productname like &#x27;%$</span><span class="hljs-template-variable">&#123;productname&#125;</span><span class="xml">%&#x27;</span><br><span class="xml"><span class="hljs-comment">&lt;!-- 若方法传参名于$or#</span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="hljs-comment">中的不匹配，在方法的传入的参数类型前加@Param(&quot;$or#</span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml"><span class="hljs-comment">中的名字&quot;) --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml">insert into product(productName,salePrice,costPrice,cutoff,supplier,brand,dir_id)</span><br><span class="xml">values</span><br><span class="xml">(#</span><span class="hljs-template-variable">&#123;productName&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;salePrice&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;costPrice&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;cutoff&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;supplier&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;brand&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;dir_id&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml">update product set productName=#</span><span class="hljs-template-variable">&#123;productName&#125;</span><span class="xml">,salePrice=#</span><span class="hljs-template-variable">&#123;salePrice&#125;</span><span class="xml">,costPrice=#</span><span class="hljs-template-variable">&#123;costPrice&#125;</span><span class="xml">,</span><br><span class="xml">cutoff=#</span><span class="hljs-template-variable">&#123;cutoff&#125;</span><span class="xml">,supplier=#</span><span class="hljs-template-variable">&#123;supplier&#125;</span><span class="xml">,brand=#</span><span class="hljs-template-variable">&#123;brand&#125;</span><span class="xml">,dir_id=#</span><span class="hljs-template-variable">&#123;dir_id&#125;</span><br><span class="xml">where id=#</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Long&quot;</span>&gt;</span></span><br><span class="xml">delete from product where id=#</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="3-3、上述映射配置文件的规范及注意事项"><a href="#3-3、上述映射配置文件的规范及注意事项" class="headerlink" title="3.3、上述映射配置文件的规范及注意事项"></a>3.3、上述映射配置文件的规范及注意事项</h4><p>① 我们的映射文件一般情况下是放在 <code>resources类型目录下</code> 和它对应的<code>domain</code>在同一个层级；</p><p>② 这个映射文件的名称一般叫做 XxxMapper.xml (Xxx代表的是实体类名称)；</p><p>③ namespace的名称为了确定唯一性，应按推荐要求取名：</p><p>​    如我们有一个类：</p><p>​        cn.kongwei_liao.domain.Product / cn.kongwei_liao.domain.Student</p><p>​    那这里取名应该是：</p><p>​        cn.kongwei_liao.domain.ProductMapper / cn.kongwei_liao.domain.StudentMapper</p><p>④ 除了MyBatis支持的类型，其它的类型都通通使用<code>全限定名</code> ；</p><p>⑤ 如果将映射文件与实体类放在一起，运行时会遇到访问不到这个映射文件资源错误（放到resources类型目录下就不会出现这种情况），可能是因为资源路径不可达，可在pom.xml文件中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- build标签内 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><span class="hljs-comment">&lt;!--关键配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4、完成数据的CRUD"><a href="#3-4、完成数据的CRUD" class="headerlink" title="3.4、完成数据的CRUD"></a>3.4、完成数据的CRUD</h4><p>核心配置文件有了，映射文件也有了，现在就可以完成数据库的CRUD了。首先需要获取的是核心对象SqlSessionFactory，然后通过它去拿到一个SqlSession对象(相当于JDBC的连接)。必需要有SqlSession这个对象，我们才可以去执行相应的SQL。</p><h5 id="1、SqlSession对象的获取"><a href="#1、SqlSession对象的获取" class="headerlink" title="1、SqlSession对象的获取"></a>1、SqlSession对象的获取</h5><p>官方文档从XML 中构建 SqlSessionFactory这一章中，除了配置的核心xml，在上面我们还可以看到几句代码(如下图)，现在咱们就来详细分析一下这几句代码是什么意思：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> static SqlSessionFactory sqlSessionFactory;<br>Reader reader = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Resources</span>.</span></span>get<span class="hljs-constructor">ResourceAsReader(<span class="hljs-string">&quot;MyBatis-Config.xml&quot;</span>)</span>;<br>sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SqlSessionFactoryBuilder()</span>.build(reader);<br></code></pre></td></tr></table></figure><p>我们简单解释一下上面的代码：读取核心配置文件，然后再通过SqlSessionFactoryBuilder构建者来创建一个SqlSessionFactory对象。</p><p>注：上面的SqlSession对象是一个通过SqlSessionFactory工厂对象返回的对象:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> sqlSessionFactory.<span class="hljs-title">openSession</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、获取SqlSession的工具类（MyBatisUtils）抽取"><a href="#2、获取SqlSession的工具类（MyBatisUtils）抽取" class="headerlink" title="2、获取SqlSession的工具类（MyBatisUtils）抽取"></a>2、获取SqlSession的工具类（MyBatisUtils）抽取</h5><p>对于MyBatis的工具类抽取，直接使用静态工具的单例模式。</p><p>注：几种单例模式的区别与使用(单例工具与静态工具的区别)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br>    <span class="hljs-comment">// 保证SqlSessionFactory是单例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-comment">// SqlSessionFactory类似于JPA的EntityManagerFactory，Hibernate的SessionFactory</span><br>    <span class="hljs-comment">// SqlSession 类似于JPA的EntityManager，Hibernate的Session</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;MyBatis-Config.xml&quot;</span>);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(reader);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;解析MyBatis的配置文件或者映射文件出现异常：&quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对外提供一个返回SqlSession对象的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、查询一条数据"><a href="#3、查询一条数据" class="headerlink" title="3、查询一条数据"></a><strong>3、查询一条数据</strong></h5><p>大家要注意咱们传过去的参数，还有在SQL接收的参数！</p><p>传过去的<code>变量名称</code>和<code>#里面的字符串名称</code>不是一回事！</p><p>整个MyBatis的流程再进行一次分析：</p><ol><li><p>我们需要核心文件(提供联系数据库的环境)</p></li><li><p>需要映射文件(提供ORM与运行的SQL语句)</p></li><li><p>拿到SqlSession对象，用于执行SQL</p></li></ol><p>ProductDaoImp.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String NAME_SPACE = <span class="hljs-string">&quot;cn.kongwei_liao.domain.ProductMapper.&quot;</span>;<span class="hljs-comment">//NAME_SPACE怎么写????  最后需要有个点</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function">Product <span class="hljs-title">get</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>    SqlSession sqlSession = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        sqlSession = MyBatisUtils.getSession();<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> sqlSession.<span class="hljs-title">selectOne</span><span class="hljs-params">(NAME_SPACE + <span class="hljs-string">&quot;getById&quot;</span>, id)</span></span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;ProductDaoImpl.get出现异常：&quot;</span> + e.getMessage());<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-keyword">null</span>) &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4、junit测试（有必要的）"><a href="#4、junit测试（有必要的）" class="headerlink" title="4、junit测试（有必要的）"></a>4、junit测试（有必要的）</h5><p>写代码过程中进行测试是一个好习惯。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductDaoTest</span> &#123;</span><br>IProductDao productDao = <span class="hljs-keyword">new</span> ProductDaoImpl();<br>@Test<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGet</span><span class="hljs-params">()</span> </span>&#123;<br>Product product = productDao.<span class="hljs-built_in">get</span>(<span class="hljs-number">1L</span>);<br>System.out.<span class="hljs-built_in">println</span>(product);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5、查询所有数据"><a href="#5、查询所有数据" class="headerlink" title="5、查询所有数据"></a>5、查询所有数据</h5><p>代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-function"><span class="hljs-title">getAll</span>(<span class="hljs-params"></span>)</span> &#123;<br>SqlSession sqlSession = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>sqlSession = MyBatisUtils.getSession();<br><span class="hljs-keyword">return</span> sqlSession.selectList(NAME_SPACE + <span class="hljs-string">&quot;getAll&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;ProductDaoImpl.get出现异常：&quot;</span> + e.getMessage());<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-literal">null</span>) &#123;<br>sqlSession.close();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fortran">@Test<br><span class="hljs-keyword">public</span> void testGetAll() &#123;<br>List&lt;<span class="hljs-built_in">Product</span>&gt; list = productDao.getAll();<br>for (<span class="hljs-built_in">Product</span> <span class="hljs-built_in">product</span> : list) &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">product</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6、添加数据"><a href="#6、添加数据" class="headerlink" title="6、添加数据"></a>6、添加数据</h5><p>注：添加的时候一定要记住提交事务 ( 配置事务、表结构支持事务 );</p><p><code>JDBC的事务是自动提交的，而JPA、Hibernate、MyBatis事务都是需要手动提交的。</code></p><p>代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">save</span>(<span class="hljs-params">Product product</span>)</span> &#123;<br>SqlSession sqlSession = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>sqlSession = MyBatisUtils.getSession();<br>sqlSession.insert(NAME_SPACE + <span class="hljs-string">&quot;save&quot;</span>, product);<br><br><span class="hljs-comment">// JDBC的事务是自动提交的，而JPA、Hibernate、MyBatis事务都是需要手动提交的</span><br>sqlSession.commit();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;ProductDaoImpl.get出现异常：&quot;</span> + e.getMessage());<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-literal">null</span>) &#123;<br>sqlSession.close();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran">@Test<br><span class="hljs-keyword">public</span> void testSave() &#123;<br><span class="hljs-built_in">Product</span> <span class="hljs-built_in">product</span> = new <span class="hljs-built_in">Product</span>();<br><span class="hljs-built_in">product</span>.setBrand(<span class="hljs-string">&quot;大力牌&quot;</span>);<br><span class="hljs-built_in">product</span>.setCostPrice(<span class="hljs-number">30.0</span>);<br><span class="hljs-built_in">product</span>.setCutoff(<span class="hljs-number">0.8</span>);<br><span class="hljs-built_in">product</span>.setDir_id(<span class="hljs-number">1</span>L);<br><span class="hljs-built_in">product</span>.setProductName(<span class="hljs-string">&quot;000000&quot;</span>);<br><span class="hljs-built_in">product</span>.setSalePrice(<span class="hljs-number">60</span>D);<br><span class="hljs-built_in">product</span>.setSupplier(<span class="hljs-string">&quot;东莞供应商&quot;</span>);<br>productDao.<span class="hljs-keyword">save</span>(<span class="hljs-built_in">product</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>添加数据的有时候咱们需要拿到当前数据的主键。咱们先移步到MyBatis细节一章的拿到返回主键部分！下一章</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- 可选择性插入 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSelective&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span></span></span><br><span class="xml">        useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="xml">        insert into product</span><br><span class="xml">        product(productName,salePrice,costPrice,cutoff,supplier,brand,dir_id)</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="xml">                id,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productName != null&quot;</span>&gt;</span></span><br><span class="xml">                vid,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salePrice != null&quot;</span>&gt;</span></span><br><span class="xml">                ntype,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;costPrice != null&quot;</span>&gt;</span></span><br><span class="xml">                canentry,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;supplier != null&quot;</span>&gt;</span></span><br><span class="xml">                title,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand != null&quot;</span>&gt;</span></span><br><span class="xml">                ispush,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dir_id != null&quot;</span>&gt;</span></span><br><span class="xml">                entrycount,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;values (&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;id,jdbcType=INTEGER&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;productName != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;productName,jdbcType=VARCHAR&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salePrice != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;salePrice,jdbcType=TINYINT&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;costPrice != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;costPrice,jdbcType=TINYINT&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;cutoff != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;cutoff,jdbcType=VARCHAR&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;supplier != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;supplier,jdbcType=TINYINT&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;brand,jdbcType=VARCHAR&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dir_id != null&quot;</span>&gt;</span></span><br><span class="xml">                #</span><span class="hljs-template-variable">&#123;dir_id,jdbcType=INTEGER&#125;</span><span class="xml">,</span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="7、修改数据"><a href="#7、修改数据" class="headerlink" title="7、修改数据"></a>7、修改数据</h5><p>代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params">Product product</span>)</span> &#123;<br>SqlSession sqlSession = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>sqlSession = MyBatisUtils.getSession();<br>sqlSession.update(NAME_SPACE + <span class="hljs-string">&quot;update&quot;</span>, product);<br><br><span class="hljs-comment">// JDBC的事务是自动提交的，而JPA、Hibernate、MyBatis事务都是需要手动提交的</span><br>sqlSession.commit();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;ProductDaoImpl.get出现异常：&quot;</span> + e.getMessage());<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-literal">null</span>) &#123;<br>sqlSession.close();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs fortran">@Test<br><span class="hljs-keyword">public</span> void testUpdate() &#123;<br><span class="hljs-built_in">Product</span> <span class="hljs-built_in">product</span> = productDao.get(<span class="hljs-number">1</span>L);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">product</span>);<br><br><span class="hljs-built_in">product</span>.setBrand(<span class="hljs-string">&quot;大力牌&quot;</span>);<br><span class="hljs-built_in">product</span>.setCostPrice(<span class="hljs-number">30.0</span>);<br><span class="hljs-built_in">product</span>.setCutoff(<span class="hljs-number">0.8</span>);<br><span class="hljs-built_in">product</span>.setDir_id(<span class="hljs-number">1</span>L);<br><span class="hljs-built_in">product</span>.setProductName(<span class="hljs-string">&quot;000000&quot;</span>);<br><span class="hljs-built_in">product</span>.setSalePrice(<span class="hljs-number">60</span>D);<br><span class="hljs-built_in">product</span>.setSupplier(<span class="hljs-string">&quot;东莞供应商&quot;</span>);<br>productDao.update(<span class="hljs-built_in">product</span>);<br><br><span class="hljs-built_in">product</span> = productDao.get(<span class="hljs-number">1</span>L);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">product</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8、删除一条数据"><a href="#8、删除一条数据" class="headerlink" title="8、删除一条数据"></a>8、删除一条数据</h5><p>代码：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">delete</span>(Long id) &#123;<br>SqlSession sqlSession = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>sqlSession = MyBatisUtils.getSession();<br>sqlSession.<span class="hljs-keyword">delete</span>(NAME_SPACE + <span class="hljs-string">&quot;delete&quot;</span>, id);<br><span class="hljs-comment">// JDBC的事务是自动提交的，而JPA、Hibernate、MyBatis事务都是需要手动提交的</span><br>sqlSession.commit();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;ProductDaoImpl.delete出现异常：&quot;</span> + e.getMessage());<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-literal">null</span>) &#123;<br>sqlSession.close();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@Test<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>productDao.<span class="hljs-keyword">delete</span>(<span class="hljs-number">1L</span>);<br>Product product = productDao.<span class="hljs-built_in">get</span>(<span class="hljs-number">1L</span>);<br>System.out.<span class="hljs-built_in">println</span>(product);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="9、CRUD注意事项"><a href="#9、CRUD注意事项" class="headerlink" title="9、CRUD注意事项"></a>9、CRUD注意事项</h5><p>下面是在使用MyBatis的时候经常出现的问题，需要引起重视。出现问题的时候过来好好的来找。基本咱们使用MyBatis中出的错都在这里。</p><p>使用框架的时候配置信息变多，在配置里写的都是字符串，而且经常是要对应的。因为，这里希望大家要切记：写的时候细心，出现错误找字符串要耐心，</p><ol><li>主配置中未配置相应的mapper（当然，这个路径也可能写错）；</li><li>在代码中调用Sql的时候路径写错；</li><li>Sql写错，这个应该还好找；</li><li>当我们在配置文件中很多地方如果写错，即便是你还没有使用也可能会报错；</li><li>写Sql的标签不需要全部一致（如添加不一定必需使用insert），但是它的属性会不同；</li><li>在传入与返回参数时全限定类名写错。</li></ol><p>在开发的时候，要边做边测试。 在某一步出现错误后，删除新加的代码看有没有问题，如果删除部分代码后运行成功，就相应的可以缩小排错的范围。</p><h3 id="4、MyBatis三大核心对象介绍，及其生命周期"><a href="#4、MyBatis三大核心对象介绍，及其生命周期" class="headerlink" title="4、MyBatis三大核心对象介绍，及其生命周期"></a>4、MyBatis三大核心对象介绍，及其生命周期</h3><h4 id="4-1、SqlSessionFactoryBuilder"><a href="#4-1、SqlSessionFactoryBuilder" class="headerlink" title="4.1、SqlSessionFactoryBuilder"></a>4.1、SqlSessionFactoryBuilder</h4><p>建造者模式：我们最后拿到的这个对象是非常复杂的。用这个建造者就它先为我们把这些复杂的代码完成。</p><p>这个类可以被实例化，使用和丢弃。<strong>一旦你创建了SqlSessionFactory后，这个SqlSessionFactoryBuilder类就不需要存在了。</strong>因此SqlSessionFactoryBuilder实例的最佳范围是方法范围（也就是本地方法变量）。</p><p>你可以重用SqlSessionFactoryBuilder来创建多个SqlSessionFactory实例，但是最好的方式是</p><p>不需要保持它一直存在来保证所有XML解析资源，因为还有更重要的事情要做。 </p><h4 id="4-2、SqlSessionFactory"><a href="#4-2、SqlSessionFactory" class="headerlink" title="4.2、SqlSessionFactory"></a>4.2、SqlSessionFactory</h4><p>类似于JPA的EntityManagerFactory，Hibernate的SessionFactory</p><p><strong>一旦被创建，SqlSessionFactory应该在你的应用执行期间都存在。</strong>没有理由来处理或重新创建它。使用SqlSessionFactory的最佳实践是在应用运行期间不要重复创建多次。这样的操作将被视为是非常糟糕的，因此SqlSessionFactory的最佳范围是应用范围。</p><p>有很多方法可以做到，最简单的就是<code>使用单例模式</code>或者<code>静态单例模式</code>。然而这两种方法都不认为是最佳实践。这样的话，你可以<strong>考虑依赖注入容器，比如Google Guice或Spring。这样的框架允许你创建支持程序来管理单例SqlSessionFactory的生命周期。</strong> </p><h4 id="4-3、SqlSession"><a href="#4-3、SqlSession" class="headerlink" title="4.3、SqlSession"></a>4.3、SqlSession</h4><p>类似于JPA的EntityManager，Hibernate的Session</p><p><strong>每个线程都应该有它自己的SqlSession实例。SqlSession的实例不能被共享，也是线程不安全的。</strong>因此最佳的范围是请求或方法范围。</p><p>绝对不能将SqlSession实例的引用放在一个类的静态字段甚至是实例字段中。</p><p>也绝不能将SqlSession实例的引用放在任何类型的管理范围中，比如Serlvet架构中的HttpSession。</p><p>如果你现在正用任意的Web框架，要考虑SqlSession放在一个和HTTP请求对象相似的范围内。换句话说，基于收到的HTTP请求，你可以打开了一个SqlSession，然后返回响应，就可以关闭它了。关闭Session很重要！</p><p>为什么在这里我们要先说这三大核心对象呢，因为在我们必需要了解这三个对象的特性。才可以更好的根据这个特性来完成MyBatisUtils工具类代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br>    <span class="hljs-comment">// 保证SqlSessionFactory是单例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-comment">// SqlSessionFactory类似于JPA的EntityManagerFactory，Hibernate的SessionFactory</span><br>    <span class="hljs-comment">// SqlSession 类似于JPA的EntityManager，Hibernate的Session</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;MyBatis-Config.xml&quot;</span>);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(reader);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;解析MyBatis的配置文件或者映射文件出现异常：&quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对外提供一个类</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、MyBatis的使用细节"><a href="#5、MyBatis的使用细节" class="headerlink" title="5、MyBatis的使用细节"></a>5、MyBatis的使用细节</h3><h4 id="5-1、添加时拿到返回的主键"><a href="#5-1、添加时拿到返回的主键" class="headerlink" title="5.1、添加时拿到返回的主键"></a>5.1、添加时拿到返回的主键</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- </span></span><br><span class="xml">parameterType：需要传入我们的对象;</span><br><span class="xml">useGeneratedKeys: 是否需要主键;</span><br><span class="xml">keyColumn:主键所在的表字段（列），可以不用配置;</span><br><span class="xml">keyProperty:Java对象中的属性 (代表主键的那个属性)。</span><br><span class="xml"> --&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span></span></span><br><span class="xml">useGeneratedKeys=&quot;true&quot; </span><br><span class="xml">keyColumn=&quot;id&quot;</span><br><span class="xml">keyProperty=&quot;id&quot;&gt;</span><br><span class="xml">insert into product (productName,dir_id,salePrice,supplier,brand,cutoff,costPrice)</span><br><span class="xml">values (#</span><span class="hljs-template-variable">&#123;productName&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;dir_id&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;salePrice&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;supplier&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;brand&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;cutoff&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;costPrice&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>上述的插入操作，没有进行主键的插入，再插入这条记录时主键以递增的方式插入记录。MyBatis会自动把这个主键set到对象的属性上。</p><h4 id="5-2、Log4j日志框架"><a href="#5-2、Log4j日志框架" class="headerlink" title="5.2、Log4j日志框架"></a>5.2、Log4j日志框架</h4><p>在使用MyBatis的很多时候，我们可能需要把日志打印出来，帮助我们进行分析与排错。</p><p>打开后我们可以看到执行的SQL语句，可以看到我们传递的参数。</p><p>而MyBatis中打印日志使用的是Log4j。</p><p>1、Log4j简介</p><p>Log4j有三个主要的组件：<code>Loggers（记录器）</code>，<code>Appenders（输出源）</code>和 <code>Layouts（布局）</code>。</p><p>可简单理解为<code>日志类别</code>，日志<code>要输出的地方</code>和日志<code>以何种形式输出</code>。综合使用这三个组件可以轻松地记录<code>信息的类型</code>和<code>级别</code>，并可以在运行时<code>控制日志输出的样式和位置</code>。</p><p>2、日志等级</p><blockquote><p>等级从低到高</p><ol><li><p>TRACE：详细</p></li><li><p>DEBUG：调试，类似于System.out.print</p></li><li><p>INFO：信息，类似于JPA打印sql等级</p></li><li><p>WARN：警告，程序可以正常运行，出现提示</p></li><li><p>ERROR：错误，出现异常</p></li></ol></blockquote><p>3、log4j.properties</p><p>要在项目中打开日志，在资源文件根目录下创建一个log4j.properties的文件，并把下面的代码拷备到里面。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log4j.rootLogger</span>=ERROR, STDOUT<br><span class="hljs-comment">#log4j.rootLogger=NONE</span><br><span class="hljs-attr">log4j.logger.cn.kongwei_liao</span>=TRACE   <span class="hljs-comment">#把左边包名改成你自己的包名</span><br><br><span class="hljs-attr">log4j.appender.stdout</span>=org.apache.log4j.ConsoleAppender<br><span class="hljs-attr">log4j.appender.stdout.layout</span>=org.apache.log4j.PatternLayout<br><span class="hljs-attr">log4j.appender.stdout.layout.ConversionPattern</span>=%d %p [%c] - %m%n<br></code></pre></td></tr></table></figure><p>注意：cn.kongwei_liao：一定要根据自己的包名情况进行修改。</p><p>如果配置成功，那么在MyBatis运行操作数据时就可以看到相应的日志了。</p><h4 id="5-3、MyBatis中为一个类取别名"><a href="#5-3、MyBatis中为一个类取别名" class="headerlink" title="5.3、MyBatis中为一个类取别名"></a>5.3、MyBatis中为一个类取别名</h4><p>别名：分两种 –&gt; <code>内置别名</code>和<code>自定义别名</code></p><p><img src="/2021/02/15/MyBatis-%E5%9F%BA%E7%A1%80/image-20191211110636317.png" alt="image-20191211110636317"></p><p>自定义别名：</p><p>在我们前面传参与接收结果的时候，咱们一直是使用的全限定名；</p><p>但是MyBatis自己在使用很多自己的内置类型的时候（如Integer，Boolean）却可以直接使用别名；</p><p>那么，咱们自己的写的类能不能使用别名呢？当然可以，看下面的案例：</p><p>取别名有什么用？我认识一个朋友，他叫做：特雷西 · 麦克格雷迪，我叫他麦迪。</p><p>下面为取别名的代码：</p><p>在MyBatis-Config.xml配置文件中配置别名：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">1、将一个包下面的所有类都取上别名:&lt;package name=&quot;cn.kongwei_liao.domain&quot;，别名就是类名。/&gt;</span><br><span class="hljs-comment">2、单独的为各JavaBean实体类取别名</span><br><span class="hljs-comment">alias:取的别名</span><br><span class="hljs-comment">type：这个别名所对应的Java类</span><br><span class="hljs-comment">3、别名使用的时候与大小写无关</span><br><span class="hljs-comment"> --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置繁琐很少使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;product&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 做项目的时候使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Spring集成项目中的applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>... ...<br><span class="hljs-comment">&lt;!--别名的配置:domain query--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;edu.zzu.domain,edu.zzu.query&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--&lt;property name=&quot;typeAliases&quot;  value=&quot;&quot;/&gt;--&gt;</span><br>... ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：必需在主配置文件中设置别名，其它地方（如映射文件中）才可以使用（切记！切记！）。</p><h4 id="5-4、列名与属性名不对应的解决resultMap"><a href="#5-4、列名与属性名不对应的解决resultMap" class="headerlink" title="5.4、列名与属性名不对应的解决resultMap"></a>5.4、列名与属性名不对应的解决resultMap</h4><p>之前做映射文件的时候，只做了<code>数据库表</code>与<code>Java对象</code>之间的联系。并没有做<code>表字段</code>与<code>Java对象属性</code>之间的联系。它们之间是如何联系的？</p><p><strong>由于之前咱们的  <code>数据库表字段名</code> 与  <code>JavaBean属性名</code> 是一致的，因此MyBatis框架可以对此进行自动识别。</strong></p><p><strong>那么：</strong>如果咱们的  列名  与  Java对象属性名  不一致了 ( 对应不上 )，这时候应该怎么办呢？</p><p>这时候，就需要我们开发人员告诉MyBatis框架，我们需要把哪些字段名与属性名对应上。</p><p>在MyBatis中，提供了一个<code>resultMap的标签</code>，就是让我们来<code>完成返回结果的关系对应</code>的，使用方式如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- </span></span><br><span class="xml">返回的数据映射 </span><br><span class="xml">type：代表是要映射的对象</span><br><span class="xml">id：代表唯一(过会我们要拿到它)</span><br><span class="xml">--&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- </span></span><br><span class="xml">column: 数据库表中的列名</span><br><span class="xml">property: JavaBean中的属性名</span><br><span class="xml"> --&gt;</span><br><span class="xml"> </span><br><span class="xml"><span class="hljs-comment">&lt;!-- product表主键为id，对应Product对象中的id属性 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>  /&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 其他表字段，与Product对象中属性对应 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;productName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryOne&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;long&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="xml">select * from product where id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="6、常见异常"><a href="#6、常见异常" class="headerlink" title="6、常见异常"></a>6、常见异常</h3><ol><li><p>java.lang.ClassNotFoundException: Cannot find class: id</p><p>&lt;delete id=”delete” parameterType=”id”&gt;    应该传入long类型，而不是id；</p></li><li><p>Caused by: org.xml.sax.SAXParseException; lineNumber: 23; columnNumber: 4</p><p>元素类型 “select” 必须由匹配的结束标记 “&lt;/select&gt;” 终止；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- select标签开始，insert标签结束导致的错误 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span><br>select id,productName,salePrice,costPrice,cutoff,supplier,brand,dir_id from<br>product<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Caused by: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for cn.kongwei_liao.domain.ProductMapper.get</p><p>配置文件里面没有匹配的映射关系（错误映射，或未映射）；</p></li><li><p>Caused by: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named ‘productName’ in ‘class cn.kongwei_liao.domain.Product’</p><p>Product 类里面没有 ‘productName’ 这个属性。</p></li></ol><h3 id="7、常见问题"><a href="#7、常见问题" class="headerlink" title="7、常见问题"></a>7、常见问题</h3><ol><li>   没有导入数据库的驱动包；</li><li>   在XML中很多都是字符串，细心，不要写错；</li><li>   在映射文件中全限定类名可能会写错；</li><li>   找不到相应的Statement(sql语句)；</li><li>   找SQL的Statement写错了；</li><li>   在核心XML中没有找相应的映射文件；</li><li>   在我们调用Statement（sql语句）的时候，经常会忘记传参；</li><li>   执行成功后，数据库却没有反映，很有可能是没有提交事务；</li><li>   可能我们忘了写执行的代码了；</li><li>   错误一定要打印出来（执行的时候没效果，但是又不报错）；</li><li>   Mapper中就算一个语句没有使用，它的错也可能会影响到其它正确的语句；</li><li>   框架的错往往从后向前找；</li><li>   使用未定义的别名；</li><li>   Mysql乱码，添加字符编码、设置时区：useUnicode=true&amp;characterEncoding=UTF-8。</li></ol><h3 id="8、JDBC类型与Java类型对照"><a href="#8、JDBC类型与Java类型对照" class="headerlink" title="8、JDBC类型与Java类型对照"></a>8、JDBC类型与Java类型对照</h3><table><thead><tr><th align="left"><strong>JDBC 类型</strong></th><th align="left"><strong>Java 类型</strong></th></tr></thead><tbody><tr><td align="left"><code>CHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>VARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>LONGVARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>NUMERIC</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>DECIMAL</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>BIT</code></td><td align="left"><code>boolean</code></td></tr><tr><td align="left"><code>TINYINT</code></td><td align="left"><code>byte</code></td></tr><tr><td align="left"><code>SMALLINT</code></td><td align="left"><code>short</code></td></tr><tr><td align="left"><code>INTEGER</code></td><td align="left"><code>int</code></td></tr><tr><td align="left"><code>BIGINT</code></td><td align="left"><code>long</code></td></tr><tr><td align="left"><code>REAL</code></td><td align="left"><code>float</code></td></tr><tr><td align="left"><code>FLOAT</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>DOUBLE</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>BINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>VARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>LONGVARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>DATE</code></td><td align="left"><code>java.sql.Date</code>继承了java.util.Date</td></tr><tr><td align="left"><code>TIME</code></td><td align="left"><code>java.sql.Time</code>继承了java.util.Date</td></tr><tr><td align="left"><code>TIMESTAMP</code></td><td align="left"><code>java.sql.Timestamp</code>继承了java.util.Date</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//数据库中Date类型、Java中Date数据类型到前端显示时间问题 的处理</span><br><span class="hljs-keyword">import</span> java.text.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Datetransform</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将Date类日期转为字符串日期</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>date、 <span class="hljs-doctag">@param </span>format、 <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-comment">//String DateFormatStr = &quot;yyyy-MM-dd HH:mm:ss&quot;;//年-月-日 时:分:秒</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">param</span>(<span class="hljs-params"><span class="hljs-built_in">Date</span> date, <span class="hljs-built_in">String</span> format</span>)</span> &#123;<br>SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(format);<br><span class="hljs-built_in">String</span> strDate = sdf.format(date);<span class="hljs-comment">//SimpleDateFormat.format(Date)--&gt;String时间字符串</span><br><span class="hljs-keyword">return</span> strDate;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串日期转化未Date类日期</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>strDate、 <span class="hljs-doctag">@param </span>format、 <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">Date</span> <span class="hljs-function"><span class="hljs-title">parse</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> pStrDate, <span class="hljs-built_in">String</span> pformat</span>)</span> &#123;<br>SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(pformat);<br><span class="hljs-built_in">Date</span> date = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>date = sdf.parse(pStrDate);<span class="hljs-comment">//SimpleDateFormat.parse(String)--&gt;Date类时间对象</span><br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> date;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9、MyBatis-SQL参数传递-…-、-…"><a href="#9、MyBatis-SQL参数传递-…-、-…" class="headerlink" title="9、MyBatis SQL参数传递#{…}、${…}"></a>9、MyBatis SQL参数传递#{…}、${…}</h3><p><code>#&#123;OGNL表达式&#125;</code> 和 <code>$&#123;OGNL表达式&#125;</code> 的区别</p><h4 id="9-1、-OGNL表达式"><a href="#9-1、-OGNL表达式" class="headerlink" title="9.1、#{OGNL表达式}"></a>9.1、#{OGNL表达式}</h4><p>MyBatis会把这个表达式使用   “ ?(占位符) ”   替换，作为<code>一个sql参数</code>使用</p><p>比如name的值为: </p><p>​        定义SQL: <code>select * from t_user where name = #&#123;name&#125;</code></p><p>​        最终SQL: <code>select * from t_user where name = ?</code></p><h4 id="9-2、-OGNL表达式"><a href="#9-2、-OGNL表达式" class="headerlink" title="9.2、${OGNL表达式}"></a>9.2、${OGNL表达式}</h4><p>MyBatis会把这个表达式的值  替换到sql中  ，作为<code>sql的组成部分</code></p><p>该方式主要用于程序拼接SQL</p><p>比如name的值为: ‘<code>1 or 1=1</code>‘</p><p>​        定义SQL: select * from t_user where name = ${id}</p><p>​        最终SQL: select * from t_user where name = <code>1 or 1=1</code> 出现sql注入</p><p>如果sql中使用${OGNL}，并且参数的类型是(Integer，String….)那么OGNL表达式可以写成任意东西;</p><h4 id="9-3、SQL注入"><a href="#9-3、SQL注入" class="headerlink" title="9.3、SQL注入"></a>9.3、SQL注入</h4><p>预防sql注入，使用 占位符(?PrepareStatement) 查询</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> username=? <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=?<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><p>字符串拼接，会导致出现sql注入</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;0000&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="9-4、-OGNL-表达式的应用场景"><a href="#9-4、-OGNL-表达式的应用场景" class="headerlink" title="9.4、${OGNL}表达式的应用场景"></a>9.4、${OGNL}表达式的应用场景</h4><p>不能用在登录场景，会出现sql注入；</p><p>用在 <code>order by的场景</code> 或 <code>复杂的参数传递</code>：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Map&lt;String,Object&gt;  <br><span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;orderBy&quot;</span>,&#x27;name desc&#x27;);<br><span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;begin&quot;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">10</span>);<br><br><span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;minAge&quot;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-built_in">map</span>.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;maxAge&quot;</span>,<span class="hljs-number">90</span>);<br>List&lt;User&gt; users1=session.selectList(<span class="hljs-string">&quot;cn.kongwei_liao.mapper.UserMapper&quot;</span>+<span class="hljs-string">&quot;.selectRange&quot;</span>,<span class="hljs-built_in">map</span>);<br>List&lt;User&gt; users2=session.selectList(<span class="hljs-string">&quot;cn.kongwei_liao.mapper.UserMapper&quot;</span>+<span class="hljs-string">&quot;.findByOrderBy&quot;</span>,<span class="hljs-built_in">map</span>);<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;select id=<span class="hljs-string">&quot;findByOrderBy&quot;</span> parameterType=<span class="hljs-string">&quot;map&quot;</span> resultType=cn.kongwei_liao.domain.Use<span class="hljs-string">r&quot;&gt;</span><br><span class="hljs-string">select * from t_user order by $&#123;orderBy&#125; limit $&#123;begin&#125;,$&#123;end&#125;</span><br><span class="hljs-string">&lt;/select&gt;</span><br><span class="hljs-string">&lt;select id=&quot;</span>selectRange<span class="hljs-string">&quot; parameterType=&quot;</span>map<span class="hljs-string">&quot; resultType=cn.kongwei_liao.domain.User&quot;</span>&gt;<br>select * from t_user where age between <span class="hljs-comment">#&#123;minAge&#125; and #&#123;maxAge&#125;</span><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>在jdbc的sql代码order by后面不能使用占位符?   只能进行字符串的拼接。</p><h3 id="10、关联查询映射（多对一）"><a href="#10、关联查询映射（多对一）" class="headerlink" title="10、关联查询映射（多对一）"></a>10、关联查询映射（多对一）</h3><p>在有多个员工对应有同一个部门的情况，根据用户id查询该用户信息及其所在的部门名称。</p><h4 id="10-1、创建案例数据库"><a href="#10-1、创建案例数据库" class="headerlink" title="10.1、创建案例数据库"></a>10.1、创建案例数据库</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`t_dept`</span> (<br><br><span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br><span class="hljs-symbol">`name`</span> varchar(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br> <br><span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`t_user`</span> (<br><br><span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br> <span class="hljs-symbol">`name`</span> varchar(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`password`</span> varchar(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br> <span class="hljs-symbol">`dept_id`</span> bigint(<span class="hljs-number">20</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br> <br> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`fk1`</span> (<span class="hljs-symbol">`dept_id`</span>),<br> CONSTRAINT <span class="hljs-symbol">`fk1`</span> FOREIGN <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`dept_id`</span>) REFERENCES <span class="hljs-symbol">`t_dept`</span> (<span class="hljs-symbol">`id`</span>)<br> <br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>[^CONSTRAINT]: CONSTRAINT [kənˈstreɪnt]  n. 限制; 限定; 约束; 严管;</p><h4 id="10-2、建立模型层：Dept、User等的JavaBean"><a href="#10-2、建立模型层：Dept、User等的JavaBean" class="headerlink" title="10.2、建立模型层：Dept、User等的JavaBean"></a>10.2、建立模型层：Dept、User等的JavaBean</h4><h4 id="10-3、配置文件MyBatis-Config-xml"><a href="#10-3、配置文件MyBatis-Config-xml" class="headerlink" title="10.3、配置文件MyBatis-Config.xml"></a>10.3、配置文件MyBatis-Config.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 单向多对一 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;cn/kongwei_liao/mapper/DomainMapper.xml&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="10-4、映射文件DomainMapper-xml"><a href="#10-4、映射文件DomainMapper-xml" class="headerlink" title="10.4、映射文件DomainMapper.xml"></a>10.4、映射文件DomainMapper.xml</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.DomainMapper&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 保存部门 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveDept&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.Dept&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="xml">keyProperty=&quot;id&quot;&gt;</span><br><span class="xml">insert into t_dept(name) values(#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="xml">keyProperty=&quot;id&quot;&gt;</span><br><span class="xml">insert into t_user(name,password,dept_id) values(#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;dept.id&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="10-5、保存测试数据"><a href="#10-5、保存测试数据" class="headerlink" title="10.5、保存测试数据"></a>10.5、保存测试数据</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">String NAME_SPACE = &quot;cn.kongwei_liao.mapper.DomainMapper&quot;;<br><br>@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testSave() &#123;<br>SqlSession <span class="hljs-keyword">session</span> = MyBatisUtils.getSession();<br>// 先保存部门<br>Dept dept1 = <span class="hljs-built_in">new</span> Dept();<br>dept1.setName(&quot;部门1&quot;);//未设主键，插入记录主键自增<br>Dept dept2 = <span class="hljs-built_in">new</span> Dept();<br>dept2.setName(&quot;部门2&quot;);<br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">insert</span>(NAME_SPACE + &quot;.saveDept&quot;, dept1);<br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">insert</span>(NAME_SPACE + &quot;.saveDept&quot;, dept2);<br><br>// 在保存用户<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br><span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br><span class="hljs-keyword">user</span>.setName(&quot;user&quot; + i);<br><span class="hljs-keyword">user</span>.setPassword(&quot;admin&quot;);<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">user</span>.setDept(dept1); // <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_user(dept_id) <span class="hljs-keyword">values</span>(#&#123;dept.id&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">user</span>.setDept(dept2);<br>&#125;<br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">insert</span>(NAME_SPACE + &quot;.saveUser&quot;, <span class="hljs-keyword">user</span>);<br>&#125;<br><br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>();<br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-6、多个表关联查询"><a href="#10-6、多个表关联查询" class="headerlink" title="10.6、多个表关联查询"></a>10.6、多个表关联查询</h4><h5 id="10-6-1、单表查询，不能查询部门的名称"><a href="#10-6-1、单表查询，不能查询部门的名称" class="headerlink" title="10.6.1、单表查询，不能查询部门的名称"></a>10.6.1、单表查询，不能查询部门的名称</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.DomainMapper&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 保存部门 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveDept&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.Dept&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="xml">keyProperty=&quot;id&quot;&gt;</span><br><span class="xml">insert into t_dept(name) values(#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="xml">keyProperty=&quot;id&quot;&gt;</span><br><span class="xml">insert into t_user(name,password,dept_id) values(#</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;dept.id&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 查询用户 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resuleType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.User&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span></span><br><span class="xml">select * from t_user</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="10-6-2、等值连接查询"><a href="#10-6-2、等值连接查询" class="headerlink" title="10.6.2、等值连接查询"></a>10.6.2、等值连接查询</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select u.*,d.*<br><span class="hljs-keyword">from</span> t_user u,t_dept d<br><span class="hljs-keyword">where</span> u.dept_id=d.<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h5 id="10-6-3、内连接查询"><a href="#10-6-3、内连接查询" class="headerlink" title="10.6.3、内连接查询"></a>10.6.3、内连接查询</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> u.*,d.*<br><span class="hljs-keyword">from</span> t_user u <br><span class="hljs-keyword">join</span> t_dept d<br><span class="hljs-keyword">on</span> u.dept_id=d.id<br></code></pre></td></tr></table></figure><h5 id="10-6-4、左外连接查询"><a href="#10-6-4、左外连接查询" class="headerlink" title="10.6.4、左外连接查询"></a>10.6.4、左外连接查询</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> u.*,d.*<br><span class="hljs-keyword">from</span> t_user u <br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> t_dept d<br><span class="hljs-keyword">on</span> u.dept_id=d.id<br></code></pre></td></tr></table></figure><h5 id="10-6-5、测试用例"><a href="#10-6-5、测试用例" class="headerlink" title="10.6.5、测试用例"></a>10.6.5、测试用例</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testGetAll() &#123;<br>SqlSession <span class="hljs-keyword">session</span> = MyBatisUtils.getSession();<br>List&lt;<span class="hljs-keyword">User</span>&gt; list = <span class="hljs-keyword">session</span>.selectList(NAME_SPACE + &quot;.getAll&quot;);//NAME_SPACE + &quot;.？&quot;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> : list) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.getDept());<br>&#125;<br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-7、MyBatis提供两种方式处理associate关联对象"><a href="#10-7、MyBatis提供两种方式处理associate关联对象" class="headerlink" title="10.7、MyBatis提供两种方式处理associate关联对象"></a>10.7、MyBatis提供两种方式处理associate关联对象</h4><h5 id="10-7-1、嵌套结果"><a href="#10-7-1、嵌套结果" class="headerlink" title="10.7.1、嵌套结果"></a>10.7.1、嵌套结果</h5><p>发一条左外连接sql解决问题，映射文件Mapper结果的手动封装ResultMap</p><p>使用嵌套结果映射来处理重复的联合结果的子集。这种方式，所有属性映射都要自己来，没办法通过代码生成器生成！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.DomainMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- User:Dept  多对一关系 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.User&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- User表主键id 与 User实体类id属性 对应 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- User表其他字段 与 User实体类其它属性 对应 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 此处associate标签的property属性值应是在User实体类内定义的属性，属性名dept，该属性类型是cn.kongwei_liai.Dept --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.Dept&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Dept表主键id 与 Dept实体类id属性 对应 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- Dept表其它字段 与 Dept实体类其它属性 对应 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dname&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 嵌套结果（发一条左外连接sql解决问题，映射文件Mapper结果的手动封装ResultMap） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span><br>select u.id,u.name,u.password,d.id did,d.name dname<br>from t_user u<br>left join t_dept d<br>on u.dept_id=d.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="10-7-2、嵌套查询"><a href="#10-7-2、嵌套查询" class="headerlink" title="10.7.2、嵌套查询"></a>10.7.2、嵌套查询</h5><p>发  一条查询user  和  n条查询dept   解决问题，映射文件Mapper结果的自动封装userResultMap</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.DomainMapper&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.User&quot;</span> &gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span></span><br><span class="xml">   </span><br><span class="xml"><span class="hljs-comment">&lt;!-- 此处associate标签的</span></span><br><span class="xml">   property属性值：此处应是User实体类的属性，属性名dept； </span><br><span class="xml">   column属性值：传给嵌套查询，做查询条件。</span><br><span class="xml">   --&gt;</span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.DomainMapper.findDeptBydeptId&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!-- 嵌套了column=&quot;dept_id&quot; --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 根据返回来的n条user记录中的dept_id字段，查询dept --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findDeptBydeptId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Dept&quot;</span>&gt;</span></span><br><span class="xml">   select id,name from t_dept where id=#</span><span class="hljs-template-variable">&#123;dept_id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 一条查询user表，返回n条user记录 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="xml">   select u.id,u.username,u.password,u.dept_id</span><br><span class="xml">   from t_user u</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="11、集合查询映射（一对多，多对多）"><a href="#11、集合查询映射（一对多，多对多）" class="headerlink" title="11、集合查询映射（一对多，多对多）"></a>11、集合查询映射（一对多，多对多）</h3><h4 id="11-1、常见关系"><a href="#11-1、常见关系" class="headerlink" title="11.1、常见关系"></a>11.1、常见关系</h4><p>员工和部门：一对多，根据部门查询员工</p><ul><li><p>在部门方，需要查询到当前部门下的所有员工。</p></li><li><p>一个部门  拥有  多个员工</p></li></ul><p>学生和课程：多对多，根据学生查询其选修课程，或根据课程查询查询选修该课程的学生</p><ul><li><p>一个学生  可以学习  多门课程</p></li><li><p>一门课程  可以有   多个学生</p></li></ul><h4 id="11-2、collection"><a href="#11-2、collection" class="headerlink" title="11.2、collection"></a>11.2、collection</h4><p>返回结果 （返回结果对象有一个属性List或Set&lt;关联表对象&gt;）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;集合数据属性名&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;集合中元素类型&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- extends: 集成已有resultMap；--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Department&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DepartmentAndUsersResultMap&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;DepartmentResultMap&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="xml">关联集合：</span><br><span class="xml">property：集合数据</span><br><span class="xml">ofType：集合元素类型****</span><br><span class="xml">select：通过这条SQL查询对应关联集合</span><br><span class="xml">select * from t_user where dept_id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml">column：关联对象表t_dept中的主键id  对应  当前对象表中t_user外键dept_id</span><br><span class="xml">--&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;users&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.User&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.DomainMapper.getByUserDept_Id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="11-3、嵌套结果（使用一条SQL语句）"><a href="#11-3、嵌套结果（使用一条SQL语句）" class="headerlink" title="11.3、嵌套结果（使用一条SQL语句）"></a>11.3、嵌套结果（使用一条SQL语句）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.DomainMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Dept&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DepartmentResultMap&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 处理一方：部门 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 处理多方：员工 --&gt;</span><br><span class="hljs-comment">&lt;!-- // 单向一对多，结果保存再Set或List中 --&gt;</span><br><span class="hljs-comment">&lt;!-- private Set&lt;User&gt; users; --&gt;</span><br><span class="hljs-comment">&lt;!-- private List&lt;User&gt; users; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;users&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.User&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 嵌套结果（发一条左外连接sql解决问题，映射文件Mapper结果的手动封装ResultMap） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DepartmentResultMap&quot;</span>&gt;</span><br>select d.id,d.name,u.id uid,u.name uname,u.password<br>from t_dept d<br>left join t_user u<br>on d.id=u.dept_id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="11-4、嵌套查询"><a href="#11-4、嵌套查询" class="headerlink" title="11.4、嵌套查询"></a>11.4、嵌套查询</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.DomainMapper&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Dept&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DepartmentResultMap&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 处理一方：部门 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 处理多方：员工 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- // 单向一对多，结果保存再Set或List中 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- private Set&lt;User&gt; users; --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- private List&lt;User&gt; users; --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;users&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.User&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.DomainMapper.getByUserDept_Id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByUserDept_Id&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.User&quot;</span> &gt;</span></span><br><span class="xml">select * from t_user where dept_id=$</span><span class="hljs-template-variable">&#123;id&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 嵌套结果（发一条左外连接sql解决问题，映射文件Mapper结果的手动封装ResultMap） --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;DepartmentResultMap&quot;</span>&gt;</span></span><br><span class="xml">select id,name</span><br><span class="xml">from t_dept</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="12、嵌套结果和嵌套查询的使用场景"><a href="#12、嵌套结果和嵌套查询的使用场景" class="headerlink" title="12、嵌套结果和嵌套查询的使用场景"></a>12、嵌套结果和嵌套查询的使用场景</h3><h4 id="12-1、嵌套结果：一条SQL语句"><a href="#12-1、嵌套结果：一条SQL语句" class="headerlink" title="12.1、嵌套结果：一条SQL语句"></a>12.1、嵌套结果：一条SQL语句</h4><ol><li><p>用在多对一的表结构；</p></li><li><p>多个数据字典明细和一个数据字典类型；</p></li><li><p>多个员工属于一个部门；</p></li><li><p>多个部门有一个部门经理。</p></li></ol><h4 id="12-2、嵌套查询：1-n条SQL语句"><a href="#12-2、嵌套查询：1-n条SQL语句" class="headerlink" title="12.2、嵌套查询：1+n条SQL语句"></a>12.2、嵌套查询：1+n条SQL语句</h4><ol><li><p>用在 一对多 或者 多对多 的表结构；</p></li><li><p>展示数据的时候，在一行第一列显示一方，第二列显示多个多方；</p></li><li><p>一对多：（部门1  ：员工1。。。员工n）；</p></li><li><p>多对多：（员工1  ：角色1。。。角色n）。</p></li></ol><h3 id="13、SQL映射器Mapper"><a href="#13、SQL映射器Mapper" class="headerlink" title="13、SQL映射器Mapper"></a>13、SQL映射器Mapper</h3><p>MyBatis框架  <code>基于代理机制</code>，可以让我们<code>无需再编写Dao的实现</code>。</p><h4 id="13-1、传统Dao层接口，现在名称统一以Mapper结尾"><a href="#13-1、传统Dao层接口，现在名称统一以Mapper结尾" class="headerlink" title="13.1、传统Dao层接口，现在名称统一以Mapper结尾"></a>13.1、传统Dao层接口，现在名称统一以Mapper结尾</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">定义MaBatis映射器（映射器其实就是操作数据库的对象，等效于之前的Dao层接口</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">映射器配置于xml配置对应：</span><br><span class="hljs-comment">接口中的方法名于SQL的id对应；</span><br><span class="hljs-comment">接口中的方法返回值于SQL中的resultType/resultMap对应；</span><br><span class="hljs-comment">接口中的方法参数类型于SQL中的parameterType对应。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-built_in">public</span> interface UserMapper&#123;<br><span class="hljs-keyword">User</span> <span class="hljs-keyword">get</span>(Long id);<br>List&lt;<span class="hljs-keyword">User</span>&gt; <span class="hljs-keyword">select</span>(Map&lt;String,<span class="hljs-keyword">Object</span>&gt; paramMap);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-2、接口实现方式一（传统）"><a href="#13-2、接口实现方式一（传统）" class="headerlink" title="13.2、接口实现方式一（传统）"></a>13.2、接口实现方式一（传统）</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function">User <span class="hljs-title">get</span><span class="hljs-params">(Long id)</span></span>&#123;<br>SqlSession sqlSession = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br>sqlSession = MyBatisUtils.getSqlSession();<br><span class="hljs-function"><span class="hljs-keyword">return</span> sqlSession.<span class="hljs-title">selectone</span><span class="hljs-params">(<span class="hljs-string">&quot;cn.kongwei_liao.mapper.UserMapper.get&quot;</span>,id)</span></span>;<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">if</span>(sqlSession!=<span class="hljs-keyword">null</span>)&#123;<br>sqlSession.close();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-3、接口实现方式二（映射器）"><a href="#13-3、接口实现方式二（映射器）" class="headerlink" title="13.3、接口实现方式二（映射器）"></a>13.3、接口实现方式二（映射器）</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*</span><br><span class="hljs-comment">定义一个映射器Mapper接口，使用MyBatis自动为我们创建的代理类；</span><br><span class="hljs-comment">*/</span><br>public <span class="hljs-keyword">class</span> MyBatisMapperTest&#123;<br>@Test<br>public void test<span class="hljs-constructor">Proxy()</span> throws Exception&#123;<br><span class="hljs-comment">//getMapper(Mapper接口)，通过MyBatis为我们创建指定Mapper接口代理对象；</span><br>UserMapper mapper = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MyBatisUtils</span>.</span></span>get<span class="hljs-constructor">SqlSession()</span>.get<span class="hljs-constructor">Mapper(UserMapper.<span class="hljs-params">class</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(mapper.get(<span class="hljs-number">1L</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14、缓存"><a href="#14、缓存" class="headerlink" title="14、缓存"></a>14、缓存</h3><p>默认支持一级缓存，二级缓存需要配置，同JPA一致</p><p>缓存是一种典型的  “以空间换时间”  的策略。</p><h4 id="14-1、一级缓存"><a href="#14-1、一级缓存" class="headerlink" title="14.1、一级缓存"></a>14.1、一级缓存</h4><p>SqlSession级别缓存，缓存对象存储周期为第一次获取，到sqlsession被销毁掉，或是sqlSession().clearCache()；</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testProxy()&#123;<br>    SqlSession <span class="hljs-keyword">session</span> = MyBatisUtils.getSession();<br>    UserMapper mapper = <span class="hljs-keyword">session</span>.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(mapper.<span class="hljs-keyword">get</span>(<span class="hljs-number">8</span>L));//发送一条<span class="hljs-keyword">sql</span><br>    <span class="hljs-keyword">session</span>.clearCache();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(mapper.<span class="hljs-keyword">get</span>(<span class="hljs-number">8</span>L));//清除缓存之后 在发送一条<span class="hljs-keyword">sql</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="14-2、二级缓存"><a href="#14-2、二级缓存" class="headerlink" title="14.2、二级缓存"></a>14.2、二级缓存</h4><p>SqlSessionFactory级别缓存，缓存对象存储周期为第一次获取，到SqlSessionFactory被销毁掉(应用停止了)；</p><p>默认情况下，只开启一级缓存，如果需要开启二级缓存我们需要在Mapper.xml添加一个&lt;cache&gt;标签。</p><ol><li>注意：需要缓存的对象，应该实现java.io.Serializable；</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;mapper <span class="hljs-keyword">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.UserMapper&quot;</span>&gt;<br>   &lt;cache/&gt;<br>…<br>&lt;/mapper&gt;<br>同时类要进行序列化<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">SecondLevel()</span>&#123;<br><br>SqlSession session1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MyBatisUtils</span>.</span></span>get<span class="hljs-constructor">Session()</span>;<br>UserMapper mapper1 = session1.get<span class="hljs-constructor">Mapper(UserMapper.<span class="hljs-params">class</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(mapper1.get(<span class="hljs-number">8L</span>));<span class="hljs-comment">//发送一条sql</span><br>session1.close<span class="hljs-literal">()</span>;<br><br>SqlSession session2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MyBatisUtils</span>.</span></span>get<span class="hljs-constructor">Session()</span>;<br>UserMapper mapper2 = session2.get<span class="hljs-constructor">Mapper(UserMapper.<span class="hljs-params">class</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(mapper2.get(<span class="hljs-number">8L</span>));<br>session2.close<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/"/>
    <url>/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="MyBatis代码生成器"><a href="#MyBatis代码生成器" class="headerlink" title="MyBatis代码生成器"></a>MyBatis代码生成器</h3><p>我们在学习MyBatis的时候，总是要做很多基础的CRUD，这些代码都是比较重复的。</p><p>为了解决这个问题，我们可以使用MyBatis的代码生成器：数据库的表–domain–mapper接口–mapper映射</p><p>需要先导入相应的MyBatis的基本包和MySql的驱动包。另外，还要下载一个mybatis-generator-1.3.5.zip，在官网下载即可:<a href="https://github.com/mybatis/generator/releases">https://github.com/mybatis/generator/releases</a></p><p>中文文档：<a href="http://mbg.cndocs.ml/">http://mbg.cndocs.ml</a></p><h4 id="1、使用MyBatis-Generator生成代码"><a href="#1、使用MyBatis-Generator生成代码" class="headerlink" title="1、使用MyBatis-Generator生成代码"></a>1、使用MyBatis-Generator生成代码</h4><h5 id="1-1、创建一下新的项目"><a href="#1-1、创建一下新的项目" class="headerlink" title="1.1、创建一下新的项目"></a>1.1、创建一下新的项目</h5><p>创建IDEA Maven项目，并且以pom方式导入相应的jar包：</p><p>导入mybatis(核心包和mysql的驱动包,日志包)相关包：因为生成的代码要在mybatis中运行:</p><p>Pom.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- MySql数据库驱动 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--mybatis的jar--&gt;</span><br>  <span class="hljs-comment">&lt;!--mybatis的核心包--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>  <span class="hljs-comment">&lt;!--mybatis集成spring--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--代码生成器的jar包--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 以插件的方式引入代码生成器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-comment">&lt;!-- 不能放到pluginManagement里面 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/image-20191212170325227.png" alt="image-20191212170325227"></p><h5 id="1-2、准备配置文件"><a href="#1-2、准备配置文件" class="headerlink" title="1.2、准备配置文件"></a>1.2、准备配置文件</h5><p>默认是在classpath找generatorConfig.xml文件</p><p>(注:这个文件是代码生成器最重要的一步，大家可以拷备下来进行相应的修改即可)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 自动生成器的配置(根目录，不做过多介绍)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       classPathEntry：可以配置多个，也不配置</span><br><span class="hljs-comment">       数据库驱动:这里找到相应的驱动jar包就可以了(注:不同数据库的jar不一样)</span><br><span class="hljs-comment">          location:里面的是路径(也可以直接写绝对路径 -&gt; 如:E:\mybatis\mysql-connector-java-5.1.26-bin.jar)</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span>   <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;D:\Program Files\apache-maven-3.6.1\repo\mysql\mysql-connector-java\5.1.6\mysql-connector-java-5.1.6.jar&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       context：用于生成一组对象的环境(至少配置1个，可以配置多个)</span><br><span class="hljs-comment">       id:表达唯一的名称</span><br><span class="hljs-comment">       targetRuntime：用于指定生成的代码的运行环境(MyBatis3/MyBatis3Simple)</span><br><span class="hljs-comment">          MyBatis3:默认值</span><br><span class="hljs-comment">          MyBatis3Simple：不会生成与Example(案例)相关的方法</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span>   <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3Simple&quot;</span> &gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            用于配置如果生成注释信息(最多可以配置一下)</span><br><span class="hljs-comment">            suppressAllComments:阻止生成注释 ，默认为false</span><br><span class="hljs-comment">            suppressDate:阻止生成的注释 时间戳，默认为false</span><br><span class="hljs-comment">            addRemarkComments：注释是否添加数据库表的备注信息，默认为false</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           这个应该比较清楚，配置连接数据库的基本信息</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql:///mybatis01&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">                MyBatis Generator 生成器把其他数据库的同名表生成下来的问题</span><br><span class="hljs-comment">                [WARNING] Table Configuration *** matched more than one table </span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           用于指定JDBC类型和Java类型如何转换，最多可以配置一个</span><br><span class="hljs-comment">           forceBigDecimals:控制是否强制将DECIMAL和NUMERIC类型的JDBC字段转换成Java类型的 BigDecimal</span><br><span class="hljs-comment">                        默认为false,一般不需要配置</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           javaModelGenerator:用来控制生成的实体类</span><br><span class="hljs-comment">              targetPackage：生成Model类存放位置(包名)</span><br><span class="hljs-comment">              targetProject：指定目标项目路径(根目录)</span><br><span class="hljs-comment">              对应的子属性:</span><br><span class="hljs-comment">                 trimStrings：判断是否对数据库查询结果进行trim操作(默认false)</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;D:\IdeaProjects\Templet\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           sqlMapGenerator：生成映射文件存放位置(Mapper.xml文件)</span><br><span class="hljs-comment">              targetPackage:生成SQL映射文件(XML文件)在哪个包中</span><br><span class="hljs-comment">              targetProject:指定目标项目路径(根目录)</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;D:\IdeaProjects\Templet\src\main\resources&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           javaClientGenerator：Java客户端生成器(生成Dao/Mapper的接口)</span><br><span class="hljs-comment">                          该 标签可选(最多配置一个)，如果不配置，就不会生成Mapper接口</span><br><span class="hljs-comment">              type:选择客户端代码生成器</span><br><span class="hljs-comment">                 MyBatis3</span><br><span class="hljs-comment">                    ANNOTATEDMAPPER：基于注解的Mapper接口，不会有对应的XML映射文件</span><br><span class="hljs-comment">                    MIXEDMAPPER:XML和注解混合形式</span><br><span class="hljs-comment">                    XMLMAPPER：所有方法都在XML中(接口调用依赖XML)</span><br><span class="hljs-comment">                 MyBatis3Simple</span><br><span class="hljs-comment">                    ANNOTATEDMAPPER：基于注解的Mapper接口，不会有对应的XML映射文件</span><br><span class="hljs-comment">                    XMLMAPPER：所有方法都在XML中(接口调用依赖XML)</span><br><span class="hljs-comment">              targetPackage：生成Mapper接口存放的包名</span><br><span class="hljs-comment">              targetProject：指定目标项目路径</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;D:\IdeaProjects\Templet\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           table：生成对应表及类名</span><br><span class="hljs-comment">              tableName：对应表名(注:%代表所有)</span><br><span class="hljs-comment">              domainObjectName:对应的类名</span><br><span class="hljs-comment">              generatedKey：主键自增的id字段(针对当前 数据库配置MySQL)</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;product&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Product&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">generatedKey</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">sqlStatement</span>=<span class="hljs-string">&quot;MySql&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-3、运行生成代码"><a href="#1-3、运行生成代码" class="headerlink" title="1.3、运行生成代码"></a>1.3、运行生成代码</h5><p><img src="/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/image-20191213151734365.png" alt="image-20191213151734365"></p><p><img src="/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/image-20191213152409343.png" alt="image-20191213152409343"></p><p>Product.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package cn.kongwei_liao.domain;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> productname;<br>    <span class="hljs-keyword">private</span> Long dirId;<br>    <span class="hljs-keyword">private</span> Double saleprice;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> supplier;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> brand;<br>    <span class="hljs-keyword">private</span> Double cutoff;<br>    <span class="hljs-keyword">private</span> Double costprice;<br>    <span class="hljs-keyword">public</span> Long <span class="hljs-function"><span class="hljs-title">getId</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> id;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setId</span>(<span class="hljs-params">Long id</span>)</span> &#123;<span class="hljs-built_in">this</span>.id = id;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getProductname</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> productname;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setProductname</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> productname</span>)</span> &#123;<span class="hljs-built_in">this</span>.productname = productname == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : productname.trim();&#125;<br>    <span class="hljs-keyword">public</span> Long <span class="hljs-function"><span class="hljs-title">getDirId</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> dirId;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setDirId</span>(<span class="hljs-params">Long dirId</span>)</span> &#123;<span class="hljs-built_in">this</span>.dirId = dirId;&#125;<br>    <span class="hljs-keyword">public</span> Double <span class="hljs-function"><span class="hljs-title">getSaleprice</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> saleprice;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setSaleprice</span>(<span class="hljs-params">Double saleprice</span>)</span> &#123;<span class="hljs-built_in">this</span>.saleprice = saleprice;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getSupplier</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> supplier;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setSupplier</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> supplier</span>)</span> &#123;<span class="hljs-built_in">this</span>.supplier = supplier == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : supplier.trim();&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getBrand</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> brand;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setBrand</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> brand</span>)</span> &#123;<span class="hljs-built_in">this</span>.brand = brand == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : brand.trim();&#125;<br>    <span class="hljs-keyword">public</span> Double <span class="hljs-function"><span class="hljs-title">getCutoff</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> cutoff;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setCutoff</span>(<span class="hljs-params">Double cutoff</span>)</span> &#123;<span class="hljs-built_in">this</span>.cutoff = cutoff;&#125;<br>    <span class="hljs-keyword">public</span> Double <span class="hljs-function"><span class="hljs-title">getCostprice</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> costprice;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setCostprice</span>(<span class="hljs-params">Double costprice</span>)</span> &#123;<span class="hljs-built_in">this</span>.costprice = costprice;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ProductMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.mapper;<br><span class="hljs-keyword">import</span> cn.kongwei_liao.domain.Product;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ProductMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByPrimaryKey</span><span class="hljs-params">(Long id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(Product record)</span></span>;<br>    <span class="hljs-function">Product <span class="hljs-title">selectByPrimaryKey</span><span class="hljs-params">(Long id)</span></span>;<br>    <span class="hljs-function">List&lt;Product&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateByPrimaryKey</span><span class="hljs-params">(Product record)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ProductMapper.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.kongwei_liao.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;productName&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productname&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dir_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dirId&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;salePrice&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DOUBLE&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;saleprice&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;supplier&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;supplier&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brand&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cutoff&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DOUBLE&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cutoff&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;costPrice&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DOUBLE&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;costprice&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="xml">    delete from product</span><br><span class="xml">    where id = #</span><span class="hljs-template-variable">&#123;id,jdbcType=BIGINT&#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="xml">      SELECT LAST_INSERT_ID()</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span></span><br><span class="xml">    insert into product (id, productName, dir_id, </span><br><span class="xml">      salePrice, supplier, brand, </span><br><span class="xml">      cutoff, costPrice)</span><br><span class="xml">    values (#</span><span class="hljs-template-variable">&#123;id,jdbcType=BIGINT&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;productname,jdbcType=VARCHAR&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;dirId,jdbcType=BIGINT&#125;</span><span class="xml">, </span><br><span class="xml">      #</span><span class="hljs-template-variable">&#123;saleprice,jdbcType=DOUBLE&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;supplier,jdbcType=VARCHAR&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;brand,jdbcType=VARCHAR&#125;</span><span class="xml">, </span><br><span class="xml">      #</span><span class="hljs-template-variable">&#123;cutoff,jdbcType=DOUBLE&#125;</span><span class="xml">, #</span><span class="hljs-template-variable">&#123;costprice,jdbcType=DOUBLE&#125;</span><span class="xml">)</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Product&quot;</span>&gt;</span></span><br><span class="xml">    update product</span><br><span class="xml">    set productName = #</span><span class="hljs-template-variable">&#123;productname,jdbcType=VARCHAR&#125;</span><span class="xml">,</span><br><span class="xml">      dir_id = #</span><span class="hljs-template-variable">&#123;dirId,jdbcType=BIGINT&#125;</span><span class="xml">,</span><br><span class="xml">      salePrice = #</span><span class="hljs-template-variable">&#123;saleprice,jdbcType=DOUBLE&#125;</span><span class="xml">,</span><br><span class="xml">      supplier = #</span><span class="hljs-template-variable">&#123;supplier,jdbcType=VARCHAR&#125;</span><span class="xml">,</span><br><span class="xml">      brand = #</span><span class="hljs-template-variable">&#123;brand,jdbcType=VARCHAR&#125;</span><span class="xml">,</span><br><span class="xml">      cutoff = #</span><span class="hljs-template-variable">&#123;cutoff,jdbcType=DOUBLE&#125;</span><span class="xml">,</span><br><span class="xml">      costPrice = #</span><span class="hljs-template-variable">&#123;costprice,jdbcType=DOUBLE&#125;</span><br><span class="xml">    where id = #</span><span class="hljs-template-variable">&#123;id,jdbcType=BIGINT&#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByPrimaryKey&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="xml">    select id, productName, dir_id, salePrice, supplier, brand, cutoff, costPrice</span><br><span class="xml">    from product</span><br><span class="xml">    where id = #</span><span class="hljs-template-variable">&#123;id,jdbcType=BIGINT&#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="xml">    select id, productName, dir_id, salePrice, supplier, brand, cutoff, costPrice</span><br><span class="xml">    from product</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>生成代码后正常操作即可(注:测试请加上MyBatis.xml文件)</p><h4 id="2、使用细节"><a href="#2、使用细节" class="headerlink" title="2、使用细节"></a>2、使用细节</h4><h5 id="2-1、配置多个表和所有表"><a href="#2-1、配置多个表和所有表" class="headerlink" title="2.1、配置多个表和所有表"></a>2.1、配置多个表和所有表</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment"> &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;&gt;</span><br><span class="hljs-comment">     &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;MySql&quot; /&gt;</span><br><span class="hljs-comment"> &lt;/table&gt;</span><br><span class="hljs-comment"> &lt;table tableName=&quot;t_employee&quot; domainObjectName=&quot;Employee&quot;&gt;</span><br><span class="hljs-comment">     &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;MySql&quot; /&gt;</span><br><span class="hljs-comment"> &lt;/table&gt;</span><br><span class="hljs-comment">--&gt;</span><br> <span class="hljs-comment">&lt;!--把所有的表全部都生成（不建议的做法）:</span><br><span class="hljs-comment">  注意:domain是根据表名字来的,驼峰式命名,创建表的时候,可能不要写t_user==&gt;user</span><br><span class="hljs-comment"> --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;%&quot;</span> &gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">generatedKey</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">sqlStatement</span>=<span class="hljs-string">&quot;MySql&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2、自定义配置路径（不建议修改）"><a href="#2-2、自定义配置路径（不建议修改）" class="headerlink" title="2.2、自定义配置路径（不建议修改）"></a>2.2、自定义配置路径（不建议修改）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 默认是classpath的generatorConfig.xml --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 自定义配置文件路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>src/main/resources/testGeneratorCofig.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--执行的内容输出到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 重写，有就覆盖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="MyBatis拦截器"><a href="#MyBatis拦截器" class="headerlink" title="MyBatis拦截器"></a>MyBatis拦截器</h3><p>咱们做MyBatis也提供了一种插件机制，实际上是拦截器的机制。MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。对于拦截器，Mybatis为我们提供了一个Interceptor接口，通过实现该接口就可以定义我们自己的拦截器。</p><p>通用拦截器步骤：</p><p>1）创建一个拦截器类：实现接口Interceptor</p><p>2）实现拦截逻辑：复写三个方法</p><p>3）配置拦截器生效：配置到主配置文件</p><h4 id="1、创建并实现拦截器"><a href="#1、创建并实现拦截器" class="headerlink" title="1、创建并实现拦截器"></a>1、创建并实现拦截器</h4><h5 id="1-1、创建拦截器"><a href="#1-1、创建拦截器" class="headerlink" title="1.1、创建拦截器"></a>1.1、创建拦截器</h5><p>MyBatis中创建拦截器必需要有两个元素</p><p>元素1：实现org.apache.ibatis.plugin.Interceptor接口</p><p>元素2：实现拦截器签名(这个签名比较复杂，咱们后面再单独介绍)</p><p>HelloInterceptor.java</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.kongwei_liao.interceptor;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-keyword">Method</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.<span class="hljs-keyword">Statement</span>;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.executor.resultset.ResultSetHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Interceptor;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Intercepts;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Invocation;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Plugin;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Signature;<br><br>//下面配置方法签名(可以是多个)<br>@Intercepts(&#123;<br>@Signature(<br><span class="hljs-keyword">type</span>=ResultSetHandler.<span class="hljs-keyword">class</span>, //一个结果集处理的接口<br><span class="hljs-keyword">method</span> = &quot;handleResultSets&quot;, //除存储过程 及返回值类型为<span class="hljs-keyword">Cursor</span>以外的查询方法中被调用 <br>args=&#123;<span class="hljs-keyword">Statement</span>.<span class="hljs-keyword">class</span>&#125; //这个方法中必需传的值<br>)<br>&#125;)<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> HelloInterceptor implements Interceptor &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个方法就是运行时的拦截方法(invocation中有很多有用的信息)</span><br><span class="hljs-comment"> */</span><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> intercept(Invocation invocation) throws Throwable &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;执行到了intercept...&quot;);<br><span class="hljs-keyword">Object</span> target = invocation.getTarget();//获取当前被拦截的对象 <br><span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span> = invocation.getMethod();//被拦截的方法<br><span class="hljs-keyword">Object</span>[] args = invocation.getArgs(); //方法中的参数<br>//proceed：实际上执行了 <span class="hljs-keyword">method</span>.invoke(target,args);<br><span class="hljs-keyword">Object</span> result = invocation.proceed();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(result);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法中参数target就是拦截器要拦截的对象 </span><br><span class="hljs-comment"> * 调用时机:创建被拦截的接口实现类时被调用</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> plugin(<span class="hljs-keyword">Object</span> target) &#123;<br><span class="hljs-keyword">return</span> Plugin.wrap(target, this);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用来传递插件的参数，可以通过参数改变 插件的行为</span><br><span class="hljs-comment"> * 这个参数需要在 mybatis.xml中进行配置</span><br><span class="hljs-comment"> *  调用 时机:拦截器初始化的时候这里就可以拿到值</span><br><span class="hljs-comment"> */</span><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setProperties(Properties properties) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(properties.getProperty(&quot;prop1&quot;));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2、配置拦截器"><a href="#1-2、配置拦截器" class="headerlink" title="1.2、配置拦截器"></a>1.2、配置拦截器</h5><p>Mybatis.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="xml">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span> /&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 配置插件 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;cn.zhao.interceptor.HelloInterceptor&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 这里配置的就是参数 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prop1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value1&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prop2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value2&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;cn/zhao/mapping/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="1-3、测试"><a href="#1-3、测试" class="headerlink" title="1.3、测试"></a>1.3、测试</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testSearch() throws <span class="hljs-keyword">Exception</span> &#123;<br>SqlSession <span class="hljs-keyword">session</span> = MyBatisUtils.openSession();<br>UserMapper mapper = <span class="hljs-keyword">session</span>.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>List&lt;<span class="hljs-keyword">User</span>&gt; users = mapper.selectAll();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(users);<br><br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>();<br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-4、结果（查询的时候可以找到相应的拦截器了）"><a href="#1-4、结果（查询的时候可以找到相应的拦截器了）" class="headerlink" title="1.4、结果（查询的时候可以找到相应的拦截器了）"></a>1.4、结果（查询的时候可以找到相应的拦截器了）</h5><p><strong>value1</strong></p><p>log4j:WARN No appenders could be found for logger (org.apache.ibatis.logging.LogFactory).</p><p>log4j:WARN Please initialize the log4j system properly.</p><p>log4j:WARN See <a href="http://logging.apache.org/log4j/1.2/faq.html#noconfig">http://logging.apache.org/log4j/1.2/faq.html#noconfig</a> for more info.</p><p><strong>执行到了intercept…</strong></p><p>[User [id=2, name=xxxxxxxx], User [id=3, name=yyyyyyyyyyyyy], User [id=4, name=yyyyyyyyyyyyy], User [id=5, name=yyyyyyyyyyyyy]]</p><h4 id="2、拦截器中的方法"><a href="#2、拦截器中的方法" class="headerlink" title="2、拦截器中的方法"></a>2、拦截器中的方法</h4><h5 id="2-1、setProperties-Properties-properties"><a href="#2-1、setProperties-Properties-properties" class="headerlink" title="2.1、setProperties(Properties properties)"></a>2.1、setProperties(Properties properties)</h5><p>这个方法主要是可以拿到配置文件的参数，我们根据这些参数进行相应的操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;cn.zhao.interceptor.HelloInterceptor&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这里配置的就是参数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prop1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MySql&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prop2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Oracle&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过相应的代码就可以得到上面的参数，当拦截器初始化的时候可以拿到值。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public void ser<span class="hljs-constructor">Properties(Properties <span class="hljs-params">properties</span>)</span>&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(properties.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;prop1&quot;</span>)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2、Object-plugin-Object-target"><a href="#2-2、Object-plugin-Object-target" class="headerlink" title="2.2、Object plugin(Object target)"></a>2.2、Object plugin(Object target)</h5><p>里面的target就是拦截器要拦截的对象，创建被连接的接口实现类时被调用，这个方法实现很简单，直接调用即可。</p><p>Plugin.wrap方法会自动判断拦截器的签名和被拦截对象、接口是否匹配，只有匹配的情况下才会使用动态代理拦截目标对象，这个方法不需要做任何的逻辑判断。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object <span class="hljs-keyword">target</span>)</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> Plugin.<span class="hljs-title">wrap</span><span class="hljs-params">(<span class="hljs-keyword">target</span>,<span class="hljs-keyword">this</span>)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3、Object-intercept-Invocation-invocation-throws-Throwable"><a href="#2-3、Object-intercept-Invocation-invocation-throws-Throwable" class="headerlink" title="2.3、Object intercept(Invocation invocation) throws Throwable"></a>2.3、Object intercept(Invocation invocation) throws Throwable</h5><p>这个算是核心方法，它可以拿到被拦截的对象，方法，参数等等，我们修改结果，创建功能也一般是在这个方法中完成。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing">@Override<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">Object</span> intercept(Invocation invocation)<span class="hljs-keyword">throws</span> Throwable&#123;<br><span class="hljs-keyword">Object</span> target = invocation.getTarget();<span class="hljs-comment">//获得当前被拦截的对象</span><br>Method method = invocation.getMethod();<span class="hljs-comment">//被拦截的方法</span><br><span class="hljs-keyword">Object</span>[] args = invocation.getArgs();<span class="hljs-comment">//方法中的参数</span><br><span class="hljs-comment">//proceed：实际上执行了method.invoke(target, args);</span><br><span class="hljs-keyword">Object</span> result = invocation.proceed();<br>System.out.<span class="hljs-built_in">println</span>(result);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、拦截器的签名配置认识"><a href="#3、拦截器的签名配置认识" class="headerlink" title="3、拦截器的签名配置认识"></a>3、拦截器的签名配置认识</h4><p><img src="/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/image-20191213013118657.png" alt="image-20191213013118657"></p><p>签名指的就是咱们配置拦截器上面的注解，这个注解是写拦截器的时候必需要配置的,其实就是抓住这些拦截器的时机。接下来，我们来介绍一下这个签名：</p><p>基本格式:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Intercepts</span>(&#123;<br><span class="hljs-variable">@Signature</span>(<br>type=签名类型.class,<br>method = <span class="hljs-string">&quot;这个类型对应的方法&quot;</span>,<br>args=&#123;参数&#125;<br>),<br>... <span class="hljs-comment">//注:这个签名是可以直接配置多个的</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>签名类型分别有： <code>Executor.class</code>,<code>ResultSetHandler.class</code>,<code>ParameterHandler.class</code>,<code>StatementHandler.class</code> 这四种方式 ，每种方式对应不同的method方法，每个方法的参数又不一样(这里方法中的参数方法都是对应上的，根据相应的要求加上即可)</p><h5 id="3-1、Executor接口"><a href="#3-1、Executor接口" class="headerlink" title="3.1、Executor接口"></a>3.1、Executor接口</h5><p>对应的Method</p><p>update：会在所有的insert,update,delete执行时被调用</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=Executor.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">update</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;MappedStatement.class,Object.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>query:会在所有select查询方法调用时被执行(这个是最常用的被拦截的方法)</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=Executor.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">query</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;MappedStatement.class,Object.class,RowBounds.class,ResultHandler.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>queryCursor：返回值类型为Cursor时被调用</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=Executor.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">queryCursor</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;MappedStatement.class,Object.class,RowBounds.class,ResultHandler.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>flushStatements:在SqlSession方法调用 flushStatements方法时调用</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=Executor.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">flushStatements</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>后面几个和上面的flushStatements使用方式一样，只是改方法名，调用时机不一样，用得都不多<br>commit：在SqlSession方法调用 commit方法时调用<br>rollback在SqlSession方法调用 rollback方法时调用<br>close：延时加载执行查询方法前被执行</p><h5 id="3-2、ResultSetHandler接口"><a href="#3-2、ResultSetHandler接口" class="headerlink" title="3.2、ResultSetHandler接口"></a>3.2、ResultSetHandler接口</h5><p>对应的Method<br>handleResultSets：除存储过程及返回值类型为Cursor以外的查询方法中被调用<br>对于拦截处理查询结果非常有用(被调用的位置在处理二级缓存之前)</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=ResultSetHandler.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">handleResultSets</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;Statement.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>handleOutputParameters：只在使用存储过程处理出参时被调用(用处不大)</p><h5 id="3-3、ParameterHandler接口"><a href="#3-3、ParameterHandler接口" class="headerlink" title="3.3、ParameterHandler接口"></a>3.3、ParameterHandler接口</h5><p>对应的Method<br>getParameterObject:只在执行存储过程处理参数的时候调用</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=ParameterHandler.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">getParameterObject</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>setParameters：所有数据库方法设置SQL参数时被调用  #{id}   ?</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=ParameterHandler.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">setParameters</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;PreparedStatement.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><h5 id="3-4、StatementHandler"><a href="#3-4、StatementHandler" class="headerlink" title="3.4、StatementHandler"></a>3.4、StatementHandler</h5><p>对应的Method<br>prepare：在数据库执行前被调用  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=StatementHandler.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">prepare</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;Connection.class,Integer.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>Parameterize:在prepare方法之后执行，用于处理参数信息</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=StatementHandler.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">Parameterize</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;Statement.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><p>query:执行select方法时调用 </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">@Signature(<br><span class="hljs-keyword">type</span>=StatementHandler.class,<br><span class="hljs-function"><span class="hljs-keyword">method</span> = &quot;<span class="hljs-title">prepare</span>&quot;,</span><br><span class="hljs-function"><span class="hljs-title">args</span>=<span class="hljs-comment">&#123;Statement.class,ResultHandler.class&#125;</span></span><br><span class="hljs-function">)</span><br></code></pre></td></tr></table></figure><h3 id="MyBatis分页插件的使用"><a href="#MyBatis分页插件的使用" class="headerlink" title="MyBatis分页插件的使用"></a>MyBatis分页插件的使用</h3><h4 id="1、为什么要使用分页插件"><a href="#1、为什么要使用分页插件" class="headerlink" title="1、为什么要使用分页插件"></a>1、为什么要使用分页插件</h4><p>要做分页时，原理必须在sql中写入limit，其实这个过程可以使用拦截器拦截下来动态加入。</p><h4 id="2、引入分页插件"><a href="#2、引入分页插件" class="headerlink" title="2、引入分页插件"></a>2、引入分页插件</h4><p>非Maven项目，需要导入jar包</p><p><img src="/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/image-20191213014541386.png" alt="image-20191213014541386"></p><p>是Maven项目，在pom.xml中添加依赖</p><h4 id="3、配置拦截器插件"><a href="#3、配置拦截器插件" class="headerlink" title="3、配置拦截器插件"></a>3、配置拦截器插件</h4><p>在 MyBatis 配置 xml 中配置拦截器插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Spring 配置文件中配置拦截器插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 注意其他配置 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plugins&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>没有spring环境的时候:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、实现过程"><a href="#4、实现过程" class="headerlink" title="4、实现过程"></a>4、实现过程</h4><p>使用PageHelper.startPage 静态方法调用startPage ：<br>特点：</p><ol><li>静态方法，传递两个参数（当前页码，每页查询条数）</li><li>使用pageHelper 分页的时候，不再关注分页语句，查询全部的语句</li><li>自动的对PageHelper.startPage 方法下的第一个sql 查询进行分页<br>PageHelper.startPage(1,5);<br>//紧跟着的第一个select 方法会被分页<br>List<Country> list = countryMapper.findAll();</Country></li></ol><p>也就是说再Service层PageHelper.startPage(1,5)；语句后一定是紧跟查询语句。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public PageInfo find<span class="hljs-constructor">Page(<span class="hljs-params">int</span> <span class="hljs-params">page</span>,<span class="hljs-params">int</span> <span class="hljs-params">pageSize</span>)</span>&#123;<br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(<span class="hljs-params">page</span>,<span class="hljs-params">pageSize</span>)</span>;<br>  List&lt;Company&gt; List=companyDao.select<span class="hljs-constructor">All()</span>;<br>  PageInfo pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PageInfo(<span class="hljs-params">list</span>)</span>;<br>  return pageInfo;<br> &#125;<br></code></pre></td></tr></table></figure><p>返回的信息就是pageInfo对象，该类是插件里的类，这个类里面的属性还是值得看一看</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> PageInfo&lt;T&gt; <span class="hljs-keyword">implements</span> Serializable &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1</span>L;<br><span class="hljs-comment">//当前页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageNum;<br><span class="hljs-comment">//每页的数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageSize;<br><span class="hljs-comment">//当前页的数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">size</span>;<br><span class="hljs-comment">//由于startRow 和endRow 不常用，这里说个具体的用法</span><br><span class="hljs-comment">//可以在页面中&quot;显示startRow 到endRow 共size 条数据&quot;</span><br><span class="hljs-comment">//当前页面第一个元素在数据库中的行号</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> startRow;<br><span class="hljs-comment">//当前页面最后一个元素在数据库中的行号</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> endRow;<br><span class="hljs-comment">//总记录数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> total;<br><span class="hljs-comment">//总页数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pages;<br><span class="hljs-comment">//结果集</span><br><span class="hljs-keyword">private</span> List&lt;T&gt; list;<br><span class="hljs-comment">//前一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> prePage;<br><span class="hljs-comment">//下一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> nextPage;<br><span class="hljs-comment">//是否为第一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> isFirstPage = <span class="hljs-keyword">false</span>;<br><span class="hljs-comment">//是否为最后一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> isLastPage = <span class="hljs-keyword">false</span>;<br><span class="hljs-comment">//是否有前一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasPreviousPage = <span class="hljs-keyword">false</span>;<br><span class="hljs-comment">//是否有下一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasNextPage = <span class="hljs-keyword">false</span>;<br><span class="hljs-comment">//导航页码数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> navigatePages;<br><span class="hljs-comment">//所有导航页号</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] navigatepageNums;<br><span class="hljs-comment">//导航条上的第一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> navigateFirstPage;<br><span class="hljs-comment">//导航条上的最后一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> navigateLastPage;<br>&#125;<br></code></pre></td></tr></table></figure><p> 在jsp页面中的取值根据PageInfo中的get方法，使用EL表达式取出保存的值。</p><h4 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RunWith(SpringJUnit4ClassRunner.<span class="hljs-params">class</span>)</span><br>@<span class="hljs-constructor">ContextConfiguration( <span class="hljs-params">locations</span> = <span class="hljs-string">&quot;classpath:applicationContext.xml&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> PageHalperTest &#123;<br>    @Autowired<br>    StaffMapper staffMapper;<br><br>    @Test<br>    public void <span class="hljs-constructor">TestPageHelper()</span>&#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(1,5)</span>;<br>        List&lt;Staff&gt; users = staffMapper.select<span class="hljs-constructor">All()</span>;<br>        PageInfo pageInfo=<span class="hljs-keyword">new</span> <span class="hljs-constructor">PageInfo(<span class="hljs-params">users</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(pageInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>//第一种，Mapper接口方式的调用，推荐这种使用方式。<br>PageHelper.startPage(1, 3);<br>List&lt;User&gt; users = userMapper.selectAll();</p><p><img src="/2021/02/15/MyBatis-%E9%AB%98%E7%BA%A7/image-20191213015127810.png" alt="image-20191213015127810"></p><h4 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h4><p>MyBatis中我们可以配置相应的插件，而这个插件是使用MyBatis的拦截器完成的。</p><p>MyBatis插件必需要实现org.apache.ibatis.plugin.Interceptor，并且要去实现拦截器的签名，我们需要清楚接口中几个方法的运行时机。</p><p>对应拦截器的签名配置，就是对于MyBatis内部的一些方法的拦截。大家在以后如果遇到，需要灵活的思考应该用哪一种签名进行拦截。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/JDBC%E7%B1%BB%E5%9E%8B%E4%B8%8EJava%E7%B1%BB%E5%9E%8B%E5%AF%B9%E7%85%A7/"/>
    <url>/2021/02/15/JDBC%E7%B1%BB%E5%9E%8B%E4%B8%8EJava%E7%B1%BB%E5%9E%8B%E5%AF%B9%E7%85%A7/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left"><strong>JDBC 类型</strong></th><th align="left"><strong>Java 类型</strong></th></tr></thead><tbody><tr><td align="left"><code>CHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>VARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>LONGVARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>NUMERIC</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>DECIMAL</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>BIT</code></td><td align="left"><code>boolean</code></td></tr><tr><td align="left"><code>TINYINT</code></td><td align="left"><code>byte</code></td></tr><tr><td align="left"><code>SMALLINT</code></td><td align="left"><code>short</code></td></tr><tr><td align="left"><code>INTEGER</code></td><td align="left"><code>int</code></td></tr><tr><td align="left"><code>BIGINT</code></td><td align="left"><code>long</code></td></tr><tr><td align="left"><code>REAL</code></td><td align="left"><code>float</code></td></tr><tr><td align="left"><code>FLOAT</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>DOUBLE</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>BINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>VARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>LONGVARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>DATE</code></td><td align="left"><code>java.sql.Date</code></td></tr><tr><td align="left"><code>TIME</code></td><td align="left"><code>java.sql.Time</code></td></tr><tr><td align="left"><code>TIMESTAMP</code></td><td align="left"><code>java.sql.Timestamp</code></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/JavaCollectionsFramework/"/>
    <url>/2021/02/15/JavaCollectionsFramework/</url>
    
    <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="一、集合框架图"><a href="#一、集合框架图" class="headerlink" title="一、集合框架图"></a>一、集合框架图</h2><p><img src="/2021/02/15/JavaCollectionsFramework/249993-20161122112853268-1919394058.gif"></p><p><img src="/2021/02/15/JavaCollectionsFramework/249993-20161122113410534-705560500.jpg"></p><blockquote><p>说明：对于以上的框架图有如下几点说明</p><ol><li><p>所有集合类都位于java.util包下。Java的集合类主要由两个接口派生而出：Collection和Map，Collection和Map是Java集合框架的根接口，这两个接口又包含了一些子接口或实现类。</p></li><li><p>集合接口：6个接口（短虚线表示），表示不同集合类型，是集合框架的基础。</p></li><li><p>抽象类：5个抽象类（长虚线表示），对集合接口的部分实现。可扩展为自定义集合类。</p></li><li><p>实现类：8个实现类（实线表示），对接口的具体实现。</p></li><li><p>Collection 接口是一组允许重复的对象。</p></li><li><p>Set 接口继承 Collection，集合元素不重复。</p></li><li><p>List 接口继承 Collection，允许重复，维护元素插入顺序。</p></li><li><p>Map接口是键－值对象，与Collection接口没有什么关系。</p></li><li><p>Set、List和Map可以看做集合的三大类：</p><p>List集合是有序集合，集合中的元素可以重复，访问集合中的元素可以根据元素的索引来访问。<br>Set集合是无序集合，集合中的元素不可以重复，访问集合中的元素只能根据元素本身来访问（也是集合里元素不允许重复的原因）。<br>Map集合中保存Key-value对形式的元素，访问时只能根据每项元素的key来访问其value。</p></li></ol></blockquote><h2 id="二、总体分析"><a href="#二、总体分析" class="headerlink" title="二、总体分析"></a>二、总体分析</h2><p><img src="/2021/02/15/JavaCollectionsFramework/249993-20170119151138921-1550766941.jpg"></p><p>从上面的框架图中很容易看出有两个主干：<code>Collection</code>和<code>Map</code>。</p><ol><li>Collection是一个接口，高度抽象的集合，包含了集合的基本操作和属性。Collection又包含了List和Set两大分支。<ul><li>List是一个有序的队列，每一个元素都有它的索引。第一个元素的索引值是0。List的实现类有LinkedList, ArrayList, Vector, Stack。</li><li>Set是一个不允许有重复元素的集合。Set的实现类有HashSet和TreeSet。HashSet依赖于HashMap，它实际上是通过HashMap实现的；TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。</li></ul></li><li>Map是一个映射接口，即key-value键值对。Map中的每一个元素包含“一个key”和“key对应的value”。AbstractMap是个抽象类，它实现了Map接口中的大部分API。而HashMap，TreeMap，WeakHashMap都是继承于AbstractMap。Hashtable虽然继承于Dictionary，但它实现了Map接口。</li><li>接下来，再看Iterator。它是遍历集合的工具，即我们通常通过Iterator迭代器来遍历集合。我们说Collection依赖于Iterator，是因为Collection的实现类都要实现iterator()函数，返回一个Iterator对象。ListIterator是专门为遍历List而存在的。</li><li>再看Enumeration，它是JDK 1.0引入的抽象类。作用和Iterator一样，也是遍历集合；但是Enumeration的功能要比Iterator少。在上面的框图中，Enumeration只能在Hashtable, Vector, Stack中使用。</li><li>最后，看Arrays和Collections。它们是操作数组、集合的两个工具类。</li></ol><h2 id="三、Collection接口"><a href="#三、Collection接口" class="headerlink" title="三、Collection接口"></a>三、Collection接口</h2><p>Collection接口是处理对象集合的根接口，其中定义了很多对元素进行操作的方法。Collection接口有两个主要的子接口List和Set，注意Map不是Collection的子接口，这个要牢记。</p><p><img src="/2021/02/15/JavaCollectionsFramework/image-20200419221637399.png" alt="image-20200419221637399"></p><p>其中，有几个比较常用的方法，比如方法add()添加一个元素到集合中，addAll()将指定集合中的所有元素添加到集合中，contains()方法检测集合中是否包含指定的元素，toArray()方法返回一个表示集合的数组。</p><p>另外，Collection中有一个iterator()函数，它的作用是返回一个Iterator接口。通常，我们通过Iterator迭代器来遍历集合。ListIterator是List接口所特有的，在List接口中，通过ListIterator()返回一个ListIterator对象。</p><h3 id="1、Collection子接口List"><a href="#1、Collection子接口List" class="headerlink" title="1、Collection子接口List"></a>1、Collection子接口List</h3><p><img src="/2021/02/15/JavaCollectionsFramework/image-20200419222504675.png" alt="image-20200419231037188"></p><p>List集合代表一个有序集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素。</p><p>List接口继承于Collection接口，它可以定义一个允许重复的有序集合。因为List中的元素是有序的，所以我们可以通过使用索引（元素在List中的位置，类似于数组下标）来访问List中的元素，这类似于Java的数组。</p><p>List接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。</p><h4 id="1-1、ArrayList"><a href="#1-1、ArrayList" class="headerlink" title="1.1、ArrayList"></a>1.1、ArrayList</h4><p>ArrayList是一个动态数组，也是我们最常用的集合。它允许任何符合规则的元素插入甚至包括null。每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小。随着容器中的元素不断增加，容器的大小也会随着增加。在每次向容器中增加元素的同时都会进行容量检查，当快溢出时，就会进行扩容操作。所以如果我们明确所插入元素的多少，最好指定一个初始容量值，避免过多的进行扩容操作而浪费时间、效率。</p><p>size、isEmpty、get、set、iterator 和 listIterator 操作都以固定时间运行。add 操作以分摊的固定时间运行，也就是说，添加 n 个元素需要 O(n) 时间（由于要考虑到扩容，所以这不只是添加元素会带来分摊固定时间开销那样简单）。</p><p>ArrayList擅长于随机访问。同时ArrayList是非同步的。</p><h4 id="1-2、LinkedList"><a href="#1-2、LinkedList" class="headerlink" title="1.2、LinkedList"></a>1.2、LinkedList</h4><p>同样实现List接口的LinkedList与ArrayList不同，ArrayList是一个动态数组，而LinkedList是一个双向链表。所以它除了有ArrayList的基本操作方法外还额外提供了get，remove，insert方法在LinkedList的首部或尾部。</p><p>由于实现的方式不同，LinkedList不能随机访问，它所有的操作都是要按照双重链表的需要执行。在列表中索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。这样做的好处就是可以通过较低的代价在List中进行插入和删除操作。</p><p>与ArrayList一样，LinkedList也是非同步的。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List： List list = Collections.synchronizedList(new LinkedList(…));</p><h4 id="1-3、Vector"><a href="#1-3、Vector" class="headerlink" title="1.3、Vector"></a>1.3、Vector</h4><p>与ArrayList相似，但是Vector是同步的。所以说Vector是线程安全的动态数组。它的操作与ArrayList几乎一样。</p><h4 id="1-4、Stack"><a href="#1-4、Stack" class="headerlink" title="1.4、Stack"></a>1.4、Stack</h4><p>Stack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。</p><h3 id="2、Collection子接口Set"><a href="#2、Collection子接口Set" class="headerlink" title="2、Collection子接口Set"></a>2、Collection子接口Set</h3><p>Set是一种不包括重复元素的Collection。它维持它自己的内部排序，所以随机访问没有任何意义。与List一样，它同样允许null的存在但是仅有一个。由于Set接口的特殊性，所有传入Set集合中的元素都必须不同，同时要注意任何可变对象，如果在对集合中元素进行操作时，导致e1.equals(e2)==true，则必定会产生某些问题。Set接口有三个具体实现类，分别是散列集HashSet、链式散列集LinkedHashSet和树形集TreeSet。</p><p>Set是一种不包含重复的元素的Collection，无序，即任意的两个元素e1和e2都有e1.equals(e2)=false，Set最多有一个null元素。需要注意的是:虽然Set中元素没有顺序，但是元素在set中的位置是由该元素的HashCode决定的，其具体位置其实是固定的。</p><p>此外需要说明一点，在set接口中的不重复是有特殊要求的。<br>举一个例子:对象A和对象B，本来是不同的两个对象，正常情况下它们是能够放入到Set里面的，但是如果对象A和B的都重写了hashcode和equals方法，并且重写后的hashcode和equals方法是相同的话。那么A和B是不能同时放入到Set集合中去的，也就是Set集合中的去重和hashcode与equals方法直接相关。 </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> class Test&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123; <br>     Set&lt;<span class="hljs-keyword">String</span>&gt; <span class="hljs-built_in">set</span>=<span class="hljs-keyword">new</span> HashSet&lt;<span class="hljs-keyword">String</span>&gt;(); <br>     <span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Hello&quot;</span>); <br>     <span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;world&quot;</span>); <br>     <span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Hello&quot;</span>); <br>     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;集合的尺寸为:&quot;</span>+<span class="hljs-built_in">set</span>.<span class="hljs-built_in">size</span>()); <span class="hljs-comment">//集合的尺寸为:2</span><br>     System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;集合中的元素为:&quot;</span>+<span class="hljs-built_in">set</span>.toString()); <span class="hljs-comment">//集合中的元素为:[world, Hello]</span><br>     <br>     Set&lt;<span class="hljs-keyword">String</span>&gt; books = <span class="hljs-keyword">new</span> HashSet&lt;<span class="hljs-keyword">String</span>&gt;();<br>     <span class="hljs-comment">//添加一个字符串对象</span><br>     books.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;Struts2权威指南&quot;</span>));<br>     <span class="hljs-comment">//再次添加一个字符串对象，</span><br>     <span class="hljs-comment">//因为两个字符串对象通过equals方法比较相等，所以添加失败，返回false</span><br>     <span class="hljs-built_in">boolean</span> result = books.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;Struts2权威指南&quot;</span>));<br>     System.out.<span class="hljs-built_in">println</span>(result);  <br>     <span class="hljs-comment">//下面输出看到集合只有一个元素</span><br>     System.out.<span class="hljs-built_in">println</span>(books);  <span class="hljs-comment">//[Struts2权威指南]</span><br>  &#125; <br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>分析：</p><p>由于String类中重写了hashcode和equals方法，用来比较指向的字符串对象所存储的字符串是否相等。所以这里的第二个Hello是加不进去的。</p><p>程序中，book集合两次添加的字符串对象明显不是一个对象（程序通过new关键字来创建字符串对象），当使用==运算符判断返回false，使用equals方法比较返回true，所以不能添加到Set集合中，最后只能输出一个元素。</p></blockquote><h4 id="2-1、HashSet"><a href="#2-1、HashSet" class="headerlink" title="2.1、HashSet"></a>2.1、HashSet</h4><p>HashSet 是一个<strong>没有重复</strong>元素的集合。它是由<strong>HashMap实现的</strong>，<strong>不保证元素的顺序(这里所说的没有顺序是指：元素插入的顺序与输出的顺序不一致)，而且HashSet允许使用null 元素</strong>。HashSet是<strong>非同步的，</strong>如果多个线程同时访问一个哈希set，而其中至少一个线程修改了该set，那么它必须保持外部同步。 HashSet按Hash算法来存储集合的元素，因此具有很好的存取和查找性能。</p><p>HashSet的实现方式大致如下，通过一个HashMap存储元素，元素是存放在HashMap的Key中，而Value统一使用一个Object对象。</p><p>HashSet使用和理解中容易出现的误区:</p><ol><li>HashSet中存放null值<br> HashSet中是允许存入null值的，但是在HashSet中仅仅能够存入一个null值。</li><li>HashSet中存储元素的位置是固定的<br> HashSet中存储的元素的是无序的，这个没什么好说的，但是由于HashSet底层是基于Hash算法实现的，使用了hashcode，所以HashSet中相应的元素的位置是固定的。</li><li>必须小心操作可变对象（Mutable Object）。如果一个Set中的可变元素改变了自身状态导致Object.equals(Object)=true将导致一些问题。</li></ol><h4 id="2-2、LinkedHashSet"><a href="#2-2、LinkedHashSet" class="headerlink" title="2.2、LinkedHashSet"></a>2.2、LinkedHashSet</h4><p>LinkedHashSet继承自HashSet，其底层是基于LinkedHashMap来实现的，有序，非同步。LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起来像是以插入顺序保存的，也就是说，当遍历该集合时候，LinkedHashSet将会以元素的添加顺序访问集合的元素。</p><h4 id="2-3、TreeSet"><a href="#2-3、TreeSet" class="headerlink" title="2.3、TreeSet"></a>2.3、TreeSet</h4><p>TreeSet是一个有序集合，其底层是基于TreeMap实现的，非线程安全。TreeSet可以确保集合元素处于排序状态。TreeSet支持两种排序方式，自然排序和定制排序，其中自然排序为默认的排序方式。当我们构造TreeSet时，若使用不带参数的构造函数，则TreeSet的使用自然比较器；若用户需要使用自定义的比较器，则需要使用带比较器的参数。</p><p>注意：TreeSet集合不是通过hashcode和equals函数来比较元素的.它是通过compare或者comparaeTo函数来判断元素是否相等.compare函数通过判断两个对象的id，相同的id判断为重复元素，不会被加入到集合中。</p><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><p>Map与List、Set接口不同，它是由一系列键值对组成的集合，提供了key到Value的映射。同时它也没有继承Collection。在Map中它保证了key与value之间的一一对应关系。也就是说一个key对应一个value，所以它不能存在相同的key值，当然value值可以相同。</p><h3 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h3><p>以哈希表数据结构实现，查找对象时通过哈希函数计算其位置，它是为快速查询而设计的，其内部定义了一个hash表数组（Entry[] table），元素会通过哈希转换函数将元素的哈希地址转换成数组中存放的索引，如果有冲突，则使用散列链表的形式将所有相同哈希地址的元素串起来，可能通过查看HashMap.Entry的源码它是一个单链表结构。</p><h3 id="2-LinkedHashMap"><a href="#2-LinkedHashMap" class="headerlink" title="2.LinkedHashMap"></a>2.LinkedHashMap</h3><p>LinkedHashMap是HashMap的一个子类，它保留插入的顺序，如果需要输出的顺序和输入时的相同，那么就选用LinkedHashMap。</p><p>LinkedHashMap是Map接口的哈希表和链接列表实现，具有可预知的迭代顺序。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p><p>LinkedHashMap实现与HashMap的不同之处在于，后者维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序或者是访问顺序。</p><p>根据链表中元素的顺序可以分为：按插入顺序的链表，和按访问顺序(调用get方法)的链表。默认是按插入顺序排序，如果指定按访问顺序排序，那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表。</p><p>注意，此实现不是同步的。如果多个线程同时访问链接的哈希映射，而其中至少一个线程从结构上修改了该映射，则它必须保持外部同步。</p><p>由于LinkedHashMap需要维护元素的插入顺序，因此性能略低于HashMap的性能，但在迭代访问Map里的全部元素时将有很好的性能，因为它以链表来维护内部顺序。</p><h3 id="3-TreeMap"><a href="#3-TreeMap" class="headerlink" title="3.TreeMap"></a>3.TreeMap</h3><p>TreeMap 是一个有序的key-value集合，非同步，基于红黑树（Red-Black tree）实现，每一个key-value节点作为红黑树的一个节点。TreeMap存储时会进行排序的，会根据key来对key-value键值对进行排序，其中排序方式也是分为两种，一种是自然排序，一种是定制排序，具体取决于使用的构造方法。</p><p>自然排序：TreeMap中所有的key必须实现Comparable接口，并且所有的key都应该是同一个类的对象，否则会报ClassCastException异常。</p><p>定制排序：定义TreeMap时，创建一个comparator对象，该对象对所有的treeMap中所有的key值进行排序，采用定制排序的时候不需要TreeMap中所有的key必须实现Comparable接口。</p><p>TreeMap判断两个元素相等的标准：两个key通过compareTo()方法返回0，则认为这两个key相等。</p><p>如果使用自定义的类来作为TreeMap中的key值，且想让TreeMap能够良好的工作，则必须重写自定义类中的equals()方法，TreeMap中判断相等的标准是：两个key通过equals()方法返回为true，并且通过compareTo()方法比较应该返回为0。</p><p><img src="/2021/02/15/JavaCollectionsFramework/image-20200419223344332.png" alt="image-20200419223344332"></p><h2 id="Iterator与ListIterator"><a href="#Iterator与ListIterator" class="headerlink" title="Iterator与ListIterator"></a>Iterator与ListIterator</h2><h3 id="1-Iterator"><a href="#1-Iterator" class="headerlink" title="1.Iterator"></a>1.Iterator</h3><p>Iterator的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口如下：</p><p>boolean hasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回 true。<br>Object next()：返回集合里下一个元素。<br>void remove()：删除集合里上一次next方法返回的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IteratorExample</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; a = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        a.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        a.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        a.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Before iterate : &quot;</span> + a);<br>        Iterator&lt;String&gt; it = a.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            String t = it.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;bbb&quot;</span>.equals(t)) &#123;<br>                it.remove();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;After iterate : &quot;</span> + a);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Before iterate : [aaa, bbb, ccc]</span><br><span class="hljs-comment">//After iterate : [aaa, ccc] </span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>（1）Iterator只能单向移动。</p><p>（2）Iterator.remove()是唯一安全的方式来在迭代过程中修改集合；如果在迭代过程中以任何其它的方式修改了基本集合将会产生未知的行为。而且每调用一次next()方法，remove()方法只能被调用一次，如果违反这个规则将抛出一个异常。</p></blockquote><h3 id="2-ListIterator"><a href="#2-ListIterator" class="headerlink" title="2.ListIterator"></a><strong>2.ListIterator</strong></h3><p>ListIterator是一个功能更加强大的迭代器, 它继承于Iterator接口,只能用于各种List类型的访问。可以通过调用listIterator()方法产生一个指向List开始处的ListIterator, 还可以调用listIterator(n)方法创建一个一开始就指向列表索引为n的元素处的ListIterator.</p><p>ListIterator接口定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ListIterator</span>&lt;<span class="hljs-title">E</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">E <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPrevious</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">E <span class="hljs-title">previous</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nextIndex</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">previousIndex</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(E e)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由以上定义我们可以推出ListIterator可以:</p><ol><li>双向移动（向前/向后遍历）；</li><li>产生相对于迭代器在列表中指向的当前位置的前一个和后一个元素的索引；</li><li>可以使用set()方法替换它访问过的最后一个元素；</li><li>可以使用add()方法在next()方法返回的元素之前或previous()方法返回的元素之后插入一个元素。</li></ol><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListIteratorExample</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; a = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        a.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        a.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>        a.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Before iterate : &quot;</span> + a);<br>        ListIterator&lt;String&gt; it = a.listIterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            System.out.println(it.next() + <span class="hljs-string">&quot;, &quot;</span> + it.previousIndex() + <span class="hljs-string">&quot;, &quot;</span> + it.nextIndex());<br>        &#125;<br>        <span class="hljs-keyword">while</span> (it.hasPrevious()) &#123;<br>            System.out.print(it.previous() + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        it = a.listIterator(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            String t = it.next();<br>            System.out.println(t);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ccc&quot;</span>.equals(t)) &#123;<br>                it.set(<span class="hljs-string">&quot;nnn&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                it.add(<span class="hljs-string">&quot;kkk&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;After iterate : &quot;</span> + a);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Before iterate : [aaa, bbb, ccc]</span><br><span class="hljs-comment">aaa, 0, 1</span><br><span class="hljs-comment">bbb, 1, 2</span><br><span class="hljs-comment">ccc, 2, 3</span><br><span class="hljs-comment">ccc bbb aaa </span><br><span class="hljs-comment">bbb</span><br><span class="hljs-comment">ccc</span><br><span class="hljs-comment">After iterate : [aaa, bbb, kkk, nnn]*/</span><br></code></pre></td></tr></table></figure><h2 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h2><h3 id="1-ArrayList和LinkedList"><a href="#1-ArrayList和LinkedList" class="headerlink" title="1.ArrayList和LinkedList"></a>1.ArrayList和LinkedList</h3><p>（1）ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>（2）对于随机访问get和set，ArrayList绝对优于LinkedList，因为LinkedList要移动指针。<br>（3）对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。<br>这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。</p><h3 id="2-HashTable与HashMap"><a href="#2-HashTable与HashMap" class="headerlink" title="2.HashTable与HashMap"></a>2.HashTable与HashMap</h3><p><strong>相同点：</strong></p><ol><li>都实现了Map、Cloneable、java.io.Serializable接口。</li><li>都是存储”键值对(key-value)”的散列表，而且都是采用拉链法实现的。</li></ol><p><strong>不同点：</strong></p><ol><li><p>历史原因:HashTable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现 。</p></li><li><p>同步性:HashTable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的 。</p></li><li><p>对null值的处理：HashMap的key、value都可为null，HashTable的key、value都不可为null 。</p></li><li><p>基类不同：HashMap继承于AbstractMap，而Hashtable继承于Dictionary。</p><blockquote><p>Dictionary是一个抽象类，它直接继承于Object类，没有实现任何接口。Dictionary类是JDK 1.0的引入的。虽然Dictionary也支持“添加key-value键值对”、“获取value”、“获取大小”等基本操作，但它的API函数比Map少；而且Dictionary一般是通过Enumeration(枚举类)去遍历，Map则是通过Iterator(迭代M器)去遍历。 然而由于Hashtable也实现了Map接口，所以，它即支持Enumeration遍历，也支持Iterator遍历。</p><p>AbstractMap是一个抽象类，它实现了Map接口的绝大部分API函数；为Map的具体实现类提供了极大的便利。它是JDK 1.2新增的类。</p></blockquote></li><li><p>支持的遍历种类不同：HashMap只支持Iterator(迭代器)遍历。而Hashtable支持Iterator(迭代器)和Enumeration(枚举器)两种方式遍历。 </p></li></ol><h3 id="3-HashMap、Hashtable、LinkedHashMap和TreeMap比较"><a href="#3-HashMap、Hashtable、LinkedHashMap和TreeMap比较" class="headerlink" title="3.HashMap、Hashtable、LinkedHashMap和TreeMap比较"></a>3.HashMap、Hashtable、LinkedHashMap和TreeMap比较</h3><p>Hashmap 是一个最常用的Map，它根据键的HashCode 值存储数据，根据键可以直接获取它的值，具有很快的访问速度。遍历时，取得数据的顺序是完全随机的。HashMap最多只允许一条记录的键为Null;允许多条记录的值为Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用Collections的synchronizedMap方法使HashMap具有同步的能力。</p><p>Hashtable 与 HashMap类似，不同的是:它不允许记录的键或者值为空;它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtale在写入时会比较慢。</p><p>LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。如果需要输出的顺序和输入的相同，那么用LinkedHashMap可以实现，它还可以按读取顺序来排列，像连接池中可以应用。LinkedHashMap实现与HashMap的不同之处在于，后者维护着一个运行于所有条目的双重链表。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序或者是访问顺序。对于LinkedHashMap而言，它继承与HashMap、底层使用哈希表与双向链表来保存所有元素。其基本操作与父类HashMap相似，它通过重写父类相关的方法，来实现自己的链接列表特性。</p><p>TreeMap实现SortMap接口，内部实现是红黑树。能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。</p><p>一般情况下，我们用的最多的是HashMap，HashMap里面存入的键值对在取出的时候是随机的，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。在Map 中插入、删除和定位元素，HashMap 是最好的选择。</p><p>TreeMap取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。</p><p>LinkedHashMap 是HashMap的一个子类，如果需要输出的顺序和输入的相同，那么用LinkedHashMap可以实现，它还可以按读取顺序来排列，像连接池中可以应用。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//HashMap</span><br>        HashMap&lt;String,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap();<br>        hashMap.put(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><br>        Iterator&lt;String&gt; iteratorHashMap = hashMap.keySet().iterator();<br><br>        System.out.println(<span class="hljs-string">&quot;HashMap--&gt;&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (iteratorHashMap.hasNext())&#123;<br>            Object key1 = iteratorHashMap.next();<br>            System.out.println(key1 + <span class="hljs-string">&quot;--&quot;</span> + hashMap.get(key1));<br>        &#125;<br><br>        <span class="hljs-comment">//LinkedHashMap</span><br>        LinkedHashMap&lt;String,String&gt; linkedHashMap = <span class="hljs-keyword">new</span> LinkedHashMap();<br>        linkedHashMap.put(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        linkedHashMap.put(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>        linkedHashMap.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>        linkedHashMap.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><br>        Iterator&lt;String&gt; iteratorLinkedHashMap = linkedHashMap.keySet().iterator();<br>        System.out.println(<span class="hljs-string">&quot;LinkedHashMap--&gt;&quot;</span>);<br>        <span class="hljs-keyword">while</span> (iteratorLinkedHashMap.hasNext())&#123;<br>            Object key2 = iteratorLinkedHashMap.next();<br>            System.out.println(key2 + <span class="hljs-string">&quot;--&quot;</span> + linkedHashMap.get(key2));<br>        &#125;<br><br>        <span class="hljs-comment">//TreeMap</span><br>        TreeMap&lt;String,String&gt; treeMap = <span class="hljs-keyword">new</span> TreeMap();<br>        treeMap.put(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        <br>        Iterator&lt;String&gt; iteratorTreeMap = treeMap.keySet().iterator();<br>        System.out.println(<span class="hljs-string">&quot;TreeMap--&gt;&quot;</span>);<br>        <span class="hljs-keyword">while</span> (iteratorTreeMap.hasNext())&#123;<br>            Object key3 = iteratorTreeMap.next();<br>            System.out.println(key3 + <span class="hljs-string">&quot;--&quot;</span> + treeMap.get(key3));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*HashMap--&gt;</span><br><span class="hljs-comment">3--c</span><br><span class="hljs-comment">2--b</span><br><span class="hljs-comment">1--a</span><br><span class="hljs-comment">4--d</span><br><span class="hljs-comment">LinkedHashMap--&gt;</span><br><span class="hljs-comment">4--d</span><br><span class="hljs-comment">3--c</span><br><span class="hljs-comment">2--b</span><br><span class="hljs-comment">1--a</span><br><span class="hljs-comment">TreeMap--&gt;</span><br><span class="hljs-comment">1--a</span><br><span class="hljs-comment">2--b</span><br><span class="hljs-comment">3--c</span><br><span class="hljs-comment">4--d*/</span><br></code></pre></td></tr></table></figure><h3 id="4-HashSet、LinkedHashSet、TreeSet比较"><a href="#4-HashSet、LinkedHashSet、TreeSet比较" class="headerlink" title="4.HashSet、LinkedHashSet、TreeSet比较"></a><strong>4.HashSet、LinkedHashSet、TreeSet比较</strong></h3><p><strong>1、Set接口</strong><br>Set<strong>不允许包含相同的元素</strong>，如果试图把两个相同元素加入同一个集合中，add方法返回false。<br>Set判断两个对象相同不是使用==运算符，而是<strong>根据equals方法</strong>。也就是说，只要两个对象用equals方法比较返回true，Set就不会接受这两个对象。</p><p><strong>2、HashSet</strong><br>HashSet有以下特点：<br>-&gt; 不能保证元素的排列顺序，顺序有可能发生变化。<br>-&gt; 不是同步的。<br>-&gt; 集合元素可以是null，但只能放入一个null。<br>  当向HashSet结合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据 hashCode值来决定该对象在HashSet中存储位置。简单的说，HashSet集合判断两个元素相等的标准是两个对象通过equals方法比较相等，并且两个对象的hashCode()方法返回值也相等。<br>  注意，如果要把一个对象放入HashSet中，重写该对象对应类的equals方法，也应该重写其hashCode()方法。其规则是如果两个对象通过equals方法比较返回true时，其hashCode也应该相同。另外，对象中用作equals比较标准的属性，都应该用来计算 hashCode的值。</p><p><strong>3、LinkedHashSet</strong><br>  LinkedHashSet集合同样是<strong>根据元素的hashCode值来决定元素的存储位置</strong>，但是它同时使用链表维护元素的次序。这样使得元素看起来像是以插入顺序保存的，也就是说，当遍历该集合时候，LinkedHashSet将会以元素的添加顺序访问集合的元素。<br>  LinkedHashSet在迭代访问Set中的全部元素时，<strong>性能比HashSet好，但是插入时性能稍微逊色于HashSet。</strong></p><p><strong>4、TreeSet类</strong><br>  TreeSet是SortedSet接口的唯一实现类，TreeSet可以确保集合元素处于排序状态。TreeSet支持两种排序方式，自然排序和定制排序，其中自然排序为默认的排序方式。向TreeSet中加入的应该是同一个类的对象。<br>  TreeSet判断两个对象不相等的方式是两个对象通过equals方法返回false，或者通过CompareTo方法比较没有返回0。<br>自然排序<br>  自然排序使用要排序元素的CompareTo（Object obj）方法来比较元素之间大小关系，然后将元素按照升序排列。<br>  Java提供了一个Comparable接口，该接口里定义了一个compareTo(Object obj)方法，该方法返回一个整数值，实现了该接口的对象就可以比较大小。obj1.compareTo(obj2)方法如果返回0，则说明被比较的两个对象相等，如果返回一个正数，则表明obj1大于obj2，如果是负数，则表明obj1小于obj2。如果我们将两个对象的equals方法总是返回true，则这两个对象的compareTo方法返回应该返回0。<br>定制排序<br>  自然排序是根据集合元素的大小，以升序排列，如果要定制排序，应该使用Comparator接口，实现 int compare(T o1,T o2)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test;  <br>  <br><span class="hljs-keyword">import</span> java.util.HashSet;  <br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;  <br><span class="hljs-keyword">import</span> java.util.TreeSet;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 几个set的比较  </span><br><span class="hljs-comment"> *    HashSet：哈希表是通过使用称为散列法的机制来存储信息的，元素并没有以某种特定顺序来存放；  </span><br><span class="hljs-comment"> *    LinkedHashSet：以元素插入的顺序来维护集合的链接表，允许以插入的顺序在集合中迭代；  </span><br><span class="hljs-comment"> *    TreeSet：提供一个使用树结构存储Set接口的实现，对象以升序顺序存储，访问和遍历的时间很快。  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Zhou-Jingxian  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetDemo</span> </span>&#123;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;  <br>  <br>        HashSet&lt;String&gt; hs = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();  <br>        hs.add(<span class="hljs-string">&quot;B&quot;</span>);  <br>        hs.add(<span class="hljs-string">&quot;A&quot;</span>);  <br>        hs.add(<span class="hljs-string">&quot;D&quot;</span>);  <br>        hs.add(<span class="hljs-string">&quot;E&quot;</span>);  <br>        hs.add(<span class="hljs-string">&quot;C&quot;</span>);  <br>        hs.add(<span class="hljs-string">&quot;F&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;HashSet 顺序:\n&quot;</span>+hs);  <br>          <br>        LinkedHashSet&lt;String&gt; lhs = <span class="hljs-keyword">new</span> LinkedHashSet&lt;String&gt;();  <br>        lhs.add(<span class="hljs-string">&quot;B&quot;</span>);  <br>        lhs.add(<span class="hljs-string">&quot;A&quot;</span>);  <br>        lhs.add(<span class="hljs-string">&quot;D&quot;</span>);  <br>        lhs.add(<span class="hljs-string">&quot;E&quot;</span>);  <br>        lhs.add(<span class="hljs-string">&quot;C&quot;</span>);  <br>        lhs.add(<span class="hljs-string">&quot;F&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;LinkedHashSet 顺序:\n&quot;</span>+lhs);  <br>          <br>        TreeSet&lt;String&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;String&gt;();  <br>        ts.add(<span class="hljs-string">&quot;B&quot;</span>);  <br>        ts.add(<span class="hljs-string">&quot;A&quot;</span>);  <br>        ts.add(<span class="hljs-string">&quot;D&quot;</span>);  <br>        ts.add(<span class="hljs-string">&quot;E&quot;</span>);  <br>        ts.add(<span class="hljs-string">&quot;C&quot;</span>);  <br>        ts.add(<span class="hljs-string">&quot;F&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;TreeSet 顺序:\n&quot;</span>+ts);  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">HashSet 顺序:[D, E, F, A, B, C]</span><br><span class="hljs-comment">LinkedHashSet 顺序:[B, A, D, E, C, F]</span><br><span class="hljs-comment">TreeSet 顺序:[A, B, C, D, E, F]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="5、Iterator和ListIterator区别"><a href="#5、Iterator和ListIterator区别" class="headerlink" title="5、Iterator和ListIterator区别"></a><strong>5、Iterator和ListIterator区别</strong></h3><p>我们在使用List，Set的时候，为了实现对其数据的遍历，我们经常使用到了Iterator(迭代器)。使用迭代器，你不需要干涉其遍历的过程，只需要每次取出一个你想要的数据进行处理就可以了。但是在使用的时候也是有不同的。List和Set都有iterator()来取得其迭代器。对List来说，你也可以通过listIterator()取得其迭代器，两种迭代器在有些时候是不能通用的，Iterator和ListIterator主要区别在以下方面：</p><p>（1）ListIterator有add()方法，可以向List中添加对象，而Iterator不能</p><p>（2）ListIterator和Iterator都有hasNext()和next()方法，可以实现顺序向后遍历，但是ListIterator有hasPrevious()和previous()方法，可以实现逆向（顺序向前）遍历。Iterator就不可以。</p><p>（3）ListIterator可以定位当前的索引位置，nextIndex()和previousIndex()可以实现。Iterator没有此功能。</p><p>（4）都可实现删除对象，但是ListIterator可以实现对象的修改，set()方法可以实现。Iierator仅能遍历，不能修改。</p><p>因为ListIterator的这些功能，可以实现对LinkedList等List数据结构的操作。其实，数组对象也可以用迭代器来实现。</p><h3 id="6、Collection-和-Collections区别"><a href="#6、Collection-和-Collections区别" class="headerlink" title="6、Collection 和 Collections区别"></a>6、Collection 和 Collections区别</h3><p>（1）java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</p><blockquote><p> Collection<br>        ├——List<br>        │├——LinkedList<br>        │├——ArrayList<br>        │└——Vector<br>        │　└—Stack<br>        └——Set </p></blockquote><p>（2）java.util.Collections 是一个包装类（工具类/帮助类）。它包含有各种有关集合操作的<strong>静态多态方法</strong>。此类<strong>不能实例化</strong>，就像一个工具类，用于对集合中元素进行排序、搜索以及线程安全等各种操作，服务于Java的Collection框架。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList; <br><span class="hljs-keyword">import</span> java.util.Collections; <br><span class="hljs-keyword">import</span> java.util.List; <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCollections</span> </span>&#123; <br>      <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123; <br>        <span class="hljs-comment">//注意List是实现Collection接口的 </span><br>        List list = <span class="hljs-keyword">new</span> ArrayList(); <br>        <span class="hljs-keyword">double</span> array[] = &#123; <span class="hljs-number">112</span>, <span class="hljs-number">111</span>, <span class="hljs-number">23</span>, <span class="hljs-number">456</span>, <span class="hljs-number">231</span> &#125;; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123; <br>            list.add(<span class="hljs-keyword">new</span> Double(array[i])); <br>        &#125; <br>        Collections.sort(list); <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123; <br>            System.out.println(list.get(i)); <br>        &#125; <br>        <span class="hljs-comment">// 结果：23.0 111.0 112.0 231.0 456.0 </span><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Map跟collection应该是平级，没有依赖关系</p><p>并且少了QUEUE这个数据结构、</p><p>这个图对吗？我看从jdk1.5开始，源代码就是这样了：<br>public interface Collection<E> extends Iterable<E> {<br>}<br>大家可以看一下。<br>jdk1.4的源代码如下，1.4还琐有引入iterable<br>public interface Collection {<br>}</E></E></p><p>其他内容可以参考，学习一下。但类图觉得有问题的。</p><p>Map中的values 是以Collection类型存储的</p><p>类图的实线三角是泛化关系，虚线三角是实现接口关系，类图有点问题</p><p>LinkedList还有insert方法？</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>问题及描述：<br> –1.学生表<br> Student(SID,Sname,Sage,Ssex) –SID 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别<br> –2.课程表<br> Course(CID,Cname,TID) –CID –课程编号,Cname 课程名称,TID 教师编号<br> –3.教师表<br> Teacher(TID,Tname) –TID 教师编号,Tname 教师姓名<br> –4.成绩表<br> SC(SID,CID,score) –SID 学生编号,CID 课程编号,score 分数</p><p> –创建测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Student(SID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),Sname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),Sage <span class="hljs-type">date</span>,Ssex <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-string">&#x27;赵雷&#x27;</span> , <span class="hljs-string">&#x27;1990-01-01&#x27;</span> , <span class="hljs-string">&#x27;男&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-string">&#x27;钱电&#x27;</span> , <span class="hljs-string">&#x27;1990-12-21&#x27;</span> , <span class="hljs-string">&#x27;男&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-string">&#x27;孙风&#x27;</span> , <span class="hljs-string">&#x27;1990-05-20&#x27;</span> , <span class="hljs-string">&#x27;男&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;04&#x27;</span> , <span class="hljs-string">&#x27;李云&#x27;</span> , <span class="hljs-string">&#x27;1990-08-06&#x27;</span> , <span class="hljs-string">&#x27;男&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;05&#x27;</span> , <span class="hljs-string">&#x27;周梅&#x27;</span> , <span class="hljs-string">&#x27;1991-12-01&#x27;</span> , <span class="hljs-string">&#x27;女&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;06&#x27;</span> , <span class="hljs-string">&#x27;吴兰&#x27;</span> , <span class="hljs-string">&#x27;1992-03-01&#x27;</span> , <span class="hljs-string">&#x27;女&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;07&#x27;</span> , <span class="hljs-string">&#x27;郑竹&#x27;</span> , <span class="hljs-string">&#x27;1989-07-01&#x27;</span> , <span class="hljs-string">&#x27;女&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Student <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;08&#x27;</span> , <span class="hljs-string">&#x27;王菊&#x27;</span> , <span class="hljs-string">&#x27;1990-01-20&#x27;</span> , <span class="hljs-string">&#x27;女&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Course(CID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),Cname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),TID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-string">&#x27;语文&#x27;</span> , <span class="hljs-string">&#x27;02&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-string">&#x27;数学&#x27;</span> , <span class="hljs-string">&#x27;01&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-string">&#x27;英语&#x27;</span> , <span class="hljs-string">&#x27;03&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Teacher(TID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),Tname <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teacher <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-string">&#x27;张三&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teacher <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-string">&#x27;李四&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teacher <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-string">&#x27;王五&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> SC(SID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),CID <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),score <span class="hljs-type">decimal</span>(<span class="hljs-number">18</span>,<span class="hljs-number">1</span>));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-number">80</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-number">90</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-number">99</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-number">70</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-number">60</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-number">80</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-number">80</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-number">80</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-number">80</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;04&#x27;</span> , <span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-number">50</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;04&#x27;</span> , <span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-number">30</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;04&#x27;</span> , <span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-number">20</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;05&#x27;</span> , <span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-number">76</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;05&#x27;</span> , <span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-number">87</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;06&#x27;</span> , <span class="hljs-string">&#x27;01&#x27;</span> , <span class="hljs-number">31</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;06&#x27;</span> , <span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-number">34</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;07&#x27;</span> , <span class="hljs-string">&#x27;02&#x27;</span> , <span class="hljs-number">89</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;07&#x27;</span> , <span class="hljs-string">&#x27;03&#x27;</span> , <span class="hljs-number">98</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <url>/2021/02/15/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="200、岛屿数量"><a href="#200、岛屿数量" class="headerlink" title="200、岛屿数量"></a>200、岛屿数量</h1><p><code>广度优先搜索</code>、<code>深度优先搜索</code>、<code>并查集</code></p><h2 id="深度优先搜索求解"><a href="#深度优先搜索求解" class="headerlink" title="深度优先搜索求解"></a>深度优先搜索求解</h2><p>我们可以将二维网格看成一个无向图，竖直或水平相邻的 11 之间有边相连。</p><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 11，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的 11 都会被重新标记为 00。</p><p>最终岛屿的数量就是我们进行深度优先搜索的次数。</p><p><img src="/2021/02/15/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/DFS.gif" alt="CYhQBcBWPF"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> nr = grid.length;<br>        <span class="hljs-keyword">int</span> nc = grid[<span class="hljs-number">0</span>].length;<br><br>        <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span> || c &lt; <span class="hljs-number">0</span> || r &gt;= nr || c &gt;= nc || grid[r][c] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        grid[r][c] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        dfs(grid, r - <span class="hljs-number">1</span>, c);<br>        dfs(grid, r + <span class="hljs-number">1</span>, c);<br>        dfs(grid, r, c - <span class="hljs-number">1</span>);<br>        dfs(grid, r, c + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (grid == <span class="hljs-keyword">null</span> || grid.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> nr = grid.length;<br>        <span class="hljs-keyword">int</span> nc = grid[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">int</span> num_islands = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; nr; ++r) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; nc; ++c) &#123;<br>                <span class="hljs-keyword">if</span> (grid[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                    ++num_islands;<br>                    dfs(grid, r, c);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> num_islands;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(MN)，其中 M 和 N 分别为行数和列数。</p></li><li><p>空间复杂度：O(MN)，在最坏情况下，整个网格均为陆地，深度优先搜索的深度达到 MN。</p></li></ul><h2 id="广度优先搜索求解"><a href="#广度优先搜索求解" class="headerlink" title="广度优先搜索求解"></a>广度优先搜索求解</h2><p>同样地，我们也可以使用广度优先搜索代替深度优先搜索。</p><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 11，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的 11 都会被重新标记为 00。直到队列为空，搜索结束。</p><p>最终岛屿的数量就是我们进行广度优先搜索的次数。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs maxima">class Solution &#123;<br>    public int numIslands(char[][] <span class="hljs-built_in">grid</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">grid</span> == null || <span class="hljs-built_in">grid</span>.<span class="hljs-built_in">length</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        int nr = <span class="hljs-built_in">grid</span>.<span class="hljs-built_in">length</span>;<br>        int nc = <span class="hljs-built_in">grid</span>[<span class="hljs-number">0</span>].<span class="hljs-built_in">length</span>;<br>        int num_islands = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (int r = <span class="hljs-number">0</span>; r &lt; nr; ++r) &#123;<br>            <span class="hljs-keyword">for</span> (int c = <span class="hljs-number">0</span>; c &lt; nc; ++c) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">grid</span>[r][c] == &#x27;<span class="hljs-number">1</span>&#x27;) &#123;<br>                    ++num_islands;<br>                    <span class="hljs-built_in">grid</span>[r][c] = &#x27;<span class="hljs-number">0</span>&#x27;;<br>                    Queue&lt;Integer&gt; <span class="hljs-built_in">neighbors</span> = <span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>                    <span class="hljs-built_in">neighbors</span>.add(r * nc + c);<br>                    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">neighbors</span>.isEmpty()) &#123;<br>                        int id = <span class="hljs-built_in">neighbors</span>.<span class="hljs-built_in">remove</span>();<br>                        int <span class="hljs-built_in">row</span> = id / nc;<br>                        int <span class="hljs-built_in">col</span> = id <span class="hljs-symbol">%</span> nc;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">row</span> - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>-<span class="hljs-number">1</span>][<span class="hljs-built_in">col</span>] == &#x27;<span class="hljs-number">1</span>&#x27;) &#123;<br>                            <span class="hljs-built_in">neighbors</span>.add((<span class="hljs-built_in">row</span>-<span class="hljs-number">1</span>) * nc + <span class="hljs-built_in">col</span>);<br>                            <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>-<span class="hljs-number">1</span>][<span class="hljs-built_in">col</span>] = &#x27;<span class="hljs-number">0</span>&#x27;;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">row</span> + <span class="hljs-number">1</span> &lt; nr &amp;&amp; <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>+<span class="hljs-number">1</span>][<span class="hljs-built_in">col</span>] == &#x27;<span class="hljs-number">1</span>&#x27;) &#123;<br>                            <span class="hljs-built_in">neighbors</span>.add((<span class="hljs-built_in">row</span>+<span class="hljs-number">1</span>) * nc + <span class="hljs-built_in">col</span>);<br>                            <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>+<span class="hljs-number">1</span>][<span class="hljs-built_in">col</span>] = &#x27;<span class="hljs-number">0</span>&#x27;;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">col</span> - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>-<span class="hljs-number">1</span>] == &#x27;<span class="hljs-number">1</span>&#x27;) &#123;<br>                            <span class="hljs-built_in">neighbors</span>.add(<span class="hljs-built_in">row</span> * nc + <span class="hljs-built_in">col</span>-<span class="hljs-number">1</span>);<br>                            <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>-<span class="hljs-number">1</span>] = &#x27;<span class="hljs-number">0</span>&#x27;;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">col</span> + <span class="hljs-number">1</span> &lt; nc &amp;&amp; <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>+<span class="hljs-number">1</span>] == &#x27;<span class="hljs-number">1</span>&#x27;) &#123;<br>                            <span class="hljs-built_in">neighbors</span>.add(<span class="hljs-built_in">row</span> * nc + <span class="hljs-built_in">col</span>+<span class="hljs-number">1</span>);<br>                            <span class="hljs-built_in">grid</span>[<span class="hljs-built_in">row</span>][<span class="hljs-built_in">col</span>+<span class="hljs-number">1</span>] = &#x27;<span class="hljs-number">0</span>&#x27;;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">return</span> num_islands;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(MN)，其中 M 和 N 分别为行数和列数。</p></li><li><p>空间复杂度：O(min(M,N))，在最坏情况下，整个网格均为陆地，队列的大小可以达到 min(M,N)。</p></li></ul><h2 id="并查集求解"><a href="#并查集求解" class="headerlink" title="并查集求解"></a>并查集求解</h2><p>同样地，我们也可以使用并查集代替搜索。</p><p>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 11，则将其与相邻四个方向上的 11 在并查集中进行合并。</p><p>最终岛屿的数量就是并查集中连通分量的数目。</p><p><img src="/2021/02/15/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/ddmxKaScd6.gif" alt="ddmxKaScd6"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFind</span> &#123;</span><br>        <span class="hljs-keyword">int</span> count;<br>        <span class="hljs-keyword">int</span>[] parent;<br>        <span class="hljs-keyword">int</span>[] rank;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UnionFind</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid)</span> </span>&#123;<br>            count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> m = grid.length;<br>            <span class="hljs-keyword">int</span> n = grid[<span class="hljs-number">0</span>].length;<br>            parent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m * n];<br>            rank = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m * n];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>                    <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                        parent[i * n + j] = i * n + j;<br>                        ++count;<br>                    &#125;<br>                    rank[i * n + j] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (parent[i] != i) parent[i] = <span class="hljs-built_in">find</span>(parent[i]);<br>            <span class="hljs-keyword">return</span> parent[i];<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>            <span class="hljs-keyword">int</span> rootx = <span class="hljs-built_in">find</span>(x);<br>            <span class="hljs-keyword">int</span> rooty = <span class="hljs-built_in">find</span>(y);<br>            <span class="hljs-keyword">if</span> (rootx != rooty) &#123;<br>                <span class="hljs-keyword">if</span> (rank[rootx] &gt; rank[rooty]) &#123;<br>                    parent[rooty] = rootx;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank[rootx] &lt; rank[rooty]) &#123;<br>                    parent[rootx] = rooty;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    parent[rooty] = rootx;<br>                    rank[rootx] += <span class="hljs-number">1</span>;<br>                &#125;<br>                --count;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> count;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (grid == null || grid.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> nr = grid.length;<br>        <span class="hljs-keyword">int</span> nc = grid[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">int</span> num_islands = <span class="hljs-number">0</span>;<br>        UnionFind uf = <span class="hljs-keyword">new</span> UnionFind(grid);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>; r &lt; nr; ++r) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>; c &lt; nc; ++c) &#123;<br>                <span class="hljs-keyword">if</span> (grid[r][c] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                    grid[r][c] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    <span class="hljs-keyword">if</span> (r - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[r<span class="hljs-number">-1</span>][c] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                        uf.<span class="hljs-keyword">union</span>(r * nc + c, (r<span class="hljs-number">-1</span>) * nc + c);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (r + <span class="hljs-number">1</span> &lt; nr &amp;&amp; grid[r+<span class="hljs-number">1</span>][c] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                        uf.<span class="hljs-keyword">union</span>(r * nc + c, (r+<span class="hljs-number">1</span>) * nc + c);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (c - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[r][c<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                        uf.<span class="hljs-keyword">union</span>(r * nc + c, r * nc + c - <span class="hljs-number">1</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (c + <span class="hljs-number">1</span> &lt; nc &amp;&amp; grid[r][c+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                        uf.<span class="hljs-keyword">union</span>(r * nc + c, r * nc + c + <span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> uf.getCount();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>时间复杂度：O(MN∗α(MN))，其中 M 和 N 分别为行数和列数。注意当使用路径压缩（见 find 函数）和按秩合并（见数组 rank）实现并查集时，单次操作的时间复杂度为 α(MN)，其中α(x) 为反阿克曼函数，当自变量 x 的值在人类可观测的范围内（宇宙中粒子的数量）时，函数 α(x) 的值不会超过 5，因此也可以看成是常数时间复杂度。</p><p>空间复杂度：O(MN)，这是并查集需要使用的空间。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/15/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <url>/2021/02/15/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="unicode、codepoint、UTF"><a href="#unicode、codepoint、UTF" class="headerlink" title="unicode、codepoint、UTF"></a>unicode、codepoint、UTF</h1><h2 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h2><blockquote><p>unicode是计算机科学领域里的一项业界标准，包括字符集、编码方案等。计算机采用八比特一个字节，一个字节最大整数是255，还要表示中文一个字节也是不够的，至少需要两个字节，为了统一所有的文字编码，unicode为每种语言中的每个字符设定了统一并且唯一的二进制编码，通常用两个字节表示一个字符，所以unicode每个平面可以组合出65535种不同的字符，一共17个平面。</p></blockquote><p>由于英文符号只需要用到低8位，所以其高8位永远是0，因此保存英文文本时会多浪费一倍的空间。</p><p>比如汉子“汉”的unicode，在java中输出</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;\u5B57&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>unicode在计算机中如何存储呢，就是用unicode字符集转换格式，即我们常见的UTF-8、UTF-16等。</p><p>UTF-8就是以字节为单位对unicode进行编码，对不同范围的字符使用不同长度的编码。</p><table><thead><tr><th>Unicode</th><th>Utf-8</th></tr></thead><tbody><tr><td>000000-00007F</td><td>0xxxxxxx</td></tr><tr><td>000080-0007FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>000800-00FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>010000-10FFFF</td><td>11110xxx10xxxxxx10xxxxxx10xxxxxx</td></tr></tbody></table><p>Java中的String对象就是一个unicode编码的字符串。</p><p>java中想知道一个字符的unicode编码我们可以通过Integer.toHexString()方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">String</span> str = <span class="hljs-string">&quot;a&quot;</span>;<span class="hljs-comment">//String str = &quot;编&quot;;</span><br><span class="hljs-built_in">StringBuffer</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-built_in">StringBuffer</span>();<br>char [] source_char = str.toCharArray();<br>System.out.println(source_char.length);<span class="hljs-comment">//1</span><br>System.out.println(source_char[<span class="hljs-number">0</span>]);<span class="hljs-comment">//a    编</span><br><span class="hljs-built_in">String</span> unicode = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;source_char.length;i++) &#123;<br>    unicode = Integer.toHexString(source_char[i]);<br>    System.out.println(unicode);<span class="hljs-comment">//a:61   编：7f16</span><br>    <span class="hljs-keyword">if</span> (unicode.length() &lt;= <span class="hljs-number">2</span>) &#123;<br>        unicode = <span class="hljs-string">&quot;00&quot;</span> + unicode;<br>    &#125;<br>    sb.append(<span class="hljs-string">&quot;\\u&quot;</span> + unicode);<br>&#125;<br>System.out.println(sb);<span class="hljs-comment">//a:\u0061  编：\u7f16</span><br></code></pre></td></tr></table></figure><p>对应的utf-8编码是什么呢?</p><p>7f16在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。<br>7f16写成二进制是：0111 1111 0001 0110<br>按三字节模板分段方法分为0111 111100 010110，代替模板中的x，得到11100111 10111100 10010110，即“编”对应的utf-8的编码是e7 bc 96，占3个字节</p><h2 id="codepoint"><a href="#codepoint" class="headerlink" title="codepoint"></a>codepoint</h2><p>unicode的范围从000000 - 10FFFF，char的范围只能是在\u0000到\uffff，也就是标准的 2 字节形式通常称作 UCS-2，在Java中，char类型用UTF-16编码描述一个代码单元，但unicode大于0x10000的部分如何用char表示呢，比如一些emoji：😀</p><p>java的char类型占两个字节，想要表示😀这个表情就需要2个char，看如下代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">String</span> testCode = <span class="hljs-string">&quot;ab\uD83D\uDE03cd&quot;</span>;<br><span class="hljs-built_in">int</span> length = testCode.length();<span class="hljs-comment">//length=6</span><br><span class="hljs-built_in">int</span> count = testCode.codePointCount(<span class="hljs-number">0</span>, testCode.length());<span class="hljs-comment">//count=5</span><br></code></pre></td></tr></table></figure><p>第三个和第四个字符合起来代表😀，是一个代码点，如果我们想取到每个代码点做一些判断可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">String testCode = <span class="hljs-string">&quot;ab\uD83D\uDE03cd&quot;</span>;<br><span class="hljs-keyword">int</span> length = testCode.length();<span class="hljs-comment">//length=6</span><br><br>System.out.println(testCode);<span class="hljs-comment">//ab😃cd</span><br><span class="hljs-keyword">int</span> cpCount = testCode.codePointCount(<span class="hljs-number">0</span>, testCode.length());<span class="hljs-comment">//cpCount=5</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; cpCount; ++index) &#123;<br>    <span class="hljs-comment">//这里的i是字符的位置</span><br>    <span class="hljs-keyword">int</span> i = testCode.offsetByCodePoints(<span class="hljs-number">0</span>, index);<br>    <span class="hljs-keyword">int</span> codepoint = testCode.codePointAt(i);<br>    System.out.println(<span class="hljs-string">&quot;i: &quot;</span>+i+<span class="hljs-string">&quot; index: &quot;</span>+index+<span class="hljs-string">&quot; codePoint: &quot;</span>+codepoint);<br>    <span class="hljs-comment">/*输出</span><br><span class="hljs-comment">        i:0 index: 0 codePoint: 97</span><br><span class="hljs-comment">        i:1 index: 1 codePoint: 98</span><br><span class="hljs-comment">        i:2 index: 2 codePoint: 128515</span><br><span class="hljs-comment">        i:4 index: 3 codePoint: 99</span><br><span class="hljs-comment">        i:5 index: 4 codePoint: 100*/</span><br>&#125;<br><br><span class="hljs-keyword">int</span>[] abc = testCode.chars().toArray();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;abc.length;i++)&#123;<br>System.out.println(abc[i]);<span class="hljs-comment">//[97,98,55357,56835,99,100]</span><br>&#125;<br>abc = testCode.codePoints().toArray();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;abc.length;i++)&#123;<br>System.out.println(abc[i]);<span class="hljs-comment">//[97,98,128515,99,100]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>codePointIndex和char的index的区别:</p><p>按照codePointindex取字符，0取到a，1取到b，2取到\uD83D\uDE03也就是😀，3取到c，4取到d；<br>按照String的index取字符，0取到a，1取到b，2取到\uD83D，3取到\uDE03，4取到c，5取到d。</p><p>取到codePoint就可以按照unicode值进行字符的过滤等操作。</p><p>如果有个需求是既可以按照unicode值过滤字符，也能按照正则表达式过滤字符，并且还有白名单，应该如何实现呢。</p><p>其实unicode过滤和正则表达式过滤并不冲突，自己实现自己的过滤就好了，如果需求加入了过滤白名单就会复杂一些，不能直接过滤，需要先检验是否是白名单的index。</p><p>我的思路是记录白名单char的index，正则表达式或其他过滤方式可以获得违规char的index，unicode黑名单的codepointIndex可以转换成char的index，在获取codePont的index时可以判断当前字符是单char字符还是双char字符，双char字符需要添加2个下标，方法如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//取到unicode值           </span><br><span class="hljs-built_in">int</span> codepoint = testCode.codePointAt(i);<br><span class="hljs-comment">//将unicode值转换成char数组</span><br><span class="hljs-built_in">char</span>[] chars = Character.toChars(codepoint);<br>charIndexs.<span class="hljs-keyword">add</span>(pointIndex);<br><span class="hljs-keyword">if</span> (chars.length &gt; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//表示不是单char字符，记录index时同时添加i+1</span><br>charIndexs.<span class="hljs-keyword">add</span>(pointIndex + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>//例<br>String str = “ab\uD83D\uDE03汉字”;<br>想处理emoji，那记录的下标就是2、3，最后和白名单下标比较后统一删除</p><h4 id="如何区别char是一对还是单个"><a href="#如何区别char是一对还是单个" class="headerlink" title="如何区别char是一对还是单个"></a>如何区别char是一对还是单个</h4><p>就之前的例子ab\uD83D\uDE03cd，换种写法\u0061\u0062\uD83D\uDE0\u0063\u0064<br>程序是如何将\uD83D\uDE03解析成一个字符的呢。这就需要Surrogate这个概念，来自UTF-16。</p><p>UTF-16是16bit最多编码65536，那大于65536如何编码？Unicode 标准制定组想出的办法是，从这65536个编码里，拿出2048个，规定他们是「Surrogates」，让他们两个为一组，来代表编号大于65536的那些字符。<br>编号为 U+D800 至 U+DBFF 的规定为「High Surrogates」，共1024个。<br>编号为 U+DC00 至 U+DFFF 的规定为「Low Surrogates」，也是1024个。<br>他们组合出现，就又可以多表示1048576中字符。</p><p>看一下String.codePointAt这个方法，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">codePointAtImpl</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] a, <span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c1 = a[index];<br>    <span class="hljs-keyword">if</span> (isHighSurrogate(c1) &amp;&amp; ++index &lt; limit) &#123;<br>        <span class="hljs-keyword">char</span> c2 = a[index];<br>        <span class="hljs-keyword">if</span> (isLowSurrogate(c2)) &#123;<br>            <span class="hljs-keyword">return</span> toCodePoint(c1, c2);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c1;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中有两个方法isHighSurrogate、isLowSurrogate。<br>第一个方法判断是否为高代理项代码单元，即在’\uD800’与’\uDBFF’之间，<br>第二个方法判断是否为低代理项代码单元，即在’\uDC00’与’\uDFFF’之间。</p><p>codePointAtImpl方法判断当前char是高代理项代码单元，下一个是低代理项代码单元，则这两个char是一个codepoint。</p><p>再来看一下unicode转UTF-16的方法</p><blockquote><p>如果U&lt;0x10000，U的UTF-16编码就是U对应的16位无符号整数（为书写简便，下文将16位无符号整数记作WORD）。<br>如果U≥0x10000，我们先计算U’=U-0x10000，然后将U’写成二进制形式：yyyy yyyy yyxx xxxx xxxx，U的UTF-16编码（二进制）就是：110110yyyyyyyyyy 110111xxxxxxxxxx。</p></blockquote><p>还是以U+1F603这个😃为例子，U’=U-0x10000=F603<br>写成2进制就是1111011000000011，不足20位前面补0，<br>变成0000111101-1000000011，替换y和x就是1101100000111101，1101111000000011，最后UTF-16编码就是[d83d，de03] 和上面一样。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/15/hello-world/"/>
    <url>/2021/02/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows技巧:笔记本的电池状态</title>
    <link href="/2020/01/05/Windows%E6%8A%80%E5%B7%A7-%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E7%94%B5%E6%B1%A0%E7%8A%B6%E6%80%81/"/>
    <url>/2020/01/05/Windows%E6%8A%80%E5%B7%A7-%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E7%94%B5%E6%B1%A0%E7%8A%B6%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h4 id="使用powercfg查询笔记本电脑电池状态"><a href="#使用powercfg查询笔记本电脑电池状态" class="headerlink" title="使用powercfg查询笔记本电脑电池状态"></a>使用powercfg查询笔记本电脑电池状态</h4><p>管理员身份运行cmd</p><p>1、键入powercfg -energy，程序将会自动开始对系统的60秒状态跟踪，并分析所获得的数据然后给出报告，这个过程最好不要操作电脑</p><p><img src="/2020/01/05/Windows%E6%8A%80%E5%B7%A7-%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E7%94%B5%E6%B1%A0%E7%8A%B6%E6%80%81/image-20200105183628739.png" alt="image-20200105183628739"></p><p>完成分析后，生成HTML报告，提示报告位置，找到报告位置打开查看：</p><p><img src="/2020/01/05/Windows%E6%8A%80%E5%B7%A7-%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E7%94%B5%E6%B1%A0%E7%8A%B6%E6%80%81/image-20200105184023940.png" alt="image-20200105184023940"></p><p>2、键入powercfg /batteryreport，系统会在指定路径形成电池使用报告，打开查看电池使用报告：</p><p><img src="/2020/01/05/Windows%E6%8A%80%E5%B7%A7-%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E7%94%B5%E6%B1%A0%E7%8A%B6%E6%80%81/image-20200105184403519.png" alt="image-20200105184403519"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用技巧</tag>
      
      <tag>电池状态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSP</title>
    <link href="/2020/01/04/JSP/"/>
    <url>/2020/01/04/JSP/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SVN</title>
    <link href="/2019/12/10/SVN/"/>
    <url>/2019/12/10/SVN/</url>
    
    <content type="html"><![CDATA[<h3 id="1、SVN版本控制"><a href="#1、SVN版本控制" class="headerlink" title="1、SVN版本控制"></a>1、SVN版本控制</h3><p>Subversion(SVN) 是一个开源的版本控制系統, 也就是说 Subversion 管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 或是浏览文件的变动历史。</p><h4 id="1-1、引入：为什么需要引入版本控制"><a href="#1-1、引入：为什么需要引入版本控制" class="headerlink" title="1.1、引入：为什么需要引入版本控制"></a>1.1、引入：为什么需要引入版本控制</h4><h5 id="1-1-1、问题"><a href="#1-1-1、问题" class="headerlink" title="1.1.1、问题"></a>1.1.1、问题</h5><p>在软件开发中, 经常会有下面这些问题</p><ol><li><p>如何确保电脑故障或开发人员离职的情况下, 资料不会丢失?</p></li><li><p>多人开发同一个项目, 代码如何合并到一起?</p></li><li><p>如何追溯代码的历史状态? 将每一个版本压缩放到网盘上吗?</p></li><li><p>如何控制代码的访问权限? 例如项目核心算法不能让新程序员修改, 如何做?</p></li></ol><p>版本控制系统就是解决这些问题的答案</p><h5 id="1-1-2、常用的版本控制系统"><a href="#1-1-2、常用的版本控制系统" class="headerlink" title="1.1.2、常用的版本控制系统"></a>1.1.2、常用的版本控制系统</h5><p>有 SVN, Git等</p><h5 id="1-1-3、SVN-的一些概念："><a href="#1-1-3、SVN-的一些概念：" class="headerlink" title="1.1.3、SVN 的一些概念："></a>1.1.3、SVN 的一些概念：</h5><ul><li>**repository（源代码库）:**源代码统一存放的地方</li><li>**Checkout（提取）:**当你手上没有源代码的时候，你需要从repository checkout一份</li><li>**Commit（提交）:**当你已经修改了代码，你就需要Commit到repository</li><li>**Update (更新):**当你已经Checkout了一份源代码， Update一下你就可以和Repository上的源代码同步，你手上的代码就会有最新的变更</li></ul><p>日常开发过程其实就是这样的（假设你已经Checkout并且已经工作了几天）：Update(获得最新的代码) –&gt;作出自己的修改并调试成功 –&gt; Commit(大家就可以看到你的修改了) 。</p><p>如果两个程序员同时修改了同一个文件呢, SVN 可以合并这两个程序员的改动，实际上SVN管理源代码是以行为单位的，就是说两个程序员只要不是修改了同一行程序，SVN都会自动合并两种修改。如果是同一行，SVN 会提示文件 Conflict, 冲突，需要手动确认。</p><h4 id="1-2、SVN-的主要功能"><a href="#1-2、SVN-的主要功能" class="headerlink" title="1.2、SVN 的主要功能"></a>1.2、SVN 的主要功能</h4><p>（1）目录版本控制</p><p>CVS 只能跟踪单个文件的历史, 不过 Subversion 实作了一个 “虚拟” 的版本控管文件系统, 能够依时间跟踪整个目录的变动。 目录和文件都能进行版本控制。</p><p>（2）真实的版本历史</p><p>自从CVS限制了文件的版本记录，CVS并不支持那些可能发生在文件上，但会影响所在目录内容的操作，如同复制和重命名。除此之外，在CVS里你不能用拥有同样名字但是没有继承老版本历史或者根本没有关系的文件替换一个已经纳入系统的文件。在Subversion中，你可以增加（add）、删除（delete）、复制（copy）和重命名（rename），无论是文件还是目录。所有的新加的文件都从一个新的、干净的版本开始。</p><p>（3）自动提交</p><p>一个提交动作，不是全部更新到了档案库中，就是不完全更新。这允许开发人员以逻辑区间建立并提交变动，以防止当部分提交成功时出现的问题。</p><p>（4）纳入版本控管的元数据</p><p>每一个文件与目录都附有一組属性关键字并和属性值相关联。你可以创建, 并儲存任何你想要的Key/Value对。 属性是随着时间来作版本控管的,就像文件內容一样。</p><p>（5）选择不同的网络层</p><p>Subversion 有抽象的档案库存取概念, 可以让人很容易地实作新的网络机制。 Subversion 可以作为一个扩展模块嵌入到Apache HTTP 服务器中。这个为Subversion提供了非常先进的稳定性和协同工作能力，除此之外还提供了许多重要功能: 举例来说, 有身份认证, 授权, 在线压缩, 以及文件库浏览等等。还有一个轻量级的独立Subversion服务器， 使用的是自定义的通信协议, 可以很容易地通过 ssh 以 tunnel 方式使用。</p><p>（6）一致的数据处理方式</p><p>Subversion 使用二进制差异算法来异表示文件的差异, 它对文字(人类可理解的)与二进制文件(人类无法理解的) 两类的文件都一视同仁。 这两类的文件都同样地以压缩形式储存在档案库中, 而且文件差异是以两个方向在网络上传输的。</p><p>（7）有效的分支(branch)与标签(tag)</p><p>在分支与标签上的消耗并不必一定要与项目大小成正比。 Subversion 建立分支与标签的方法, 就只是复制该项目, 使用的方法就类似于硬连接（hard-link）。 所以这些操作只会花费很小, 而且是固定的时间。</p><p>（8）Hackability</p><p>Subversion没有任何的历史包袱; 它主要是一群共用的 C 程序库, 具有定义完善的API。这使得 Subversion 便于维护, 并且可被其它应用程序与程序语言使用。</p><h4 id="1-3、安装SVN仓库"><a href="#1-3、安装SVN仓库" class="headerlink" title="1.3、安装SVN仓库"></a>1.3、安装SVN仓库</h4><h5 id="1-3-1、安装SVN服务器"><a href="#1-3-1、安装SVN服务器" class="headerlink" title="1.3.1、安装SVN服务器"></a>1.3.1、安装SVN服务器</h5><p>安装VisualSVN Server<a href="https://www.visualsvn.com/server/download/">下载地址</a></p><p><img src="/2019/12/10/SVN/image-20191210163958278.png" alt="image-20191210163958278"></p><p>下载完毕后点击安装，同意用户协议</p><p><img src="/2019/12/10/SVN/image-20191210164356133.png" alt="image-20191210164356133"></p><p><img src="/2019/12/10/SVN/image-20191210164554790.png" alt="image-20191210164554790"></p><p><img src="/2019/12/10/SVN/image-20191210164635265.png" alt="image-20191210164635265"></p><p>点击下一步可能出现如下状况，原因是：由于各种原因导致HTTPS协议默认使用的443端口被占用，可以换用其它端口、解决443端口的争用或者换用其它如HTTP协议等。这里直接使用HTTPS协议换用8443端口。</p><p><img src="/2019/12/10/SVN/image-20191210165143514.png" alt="image-20191210165143514"></p><p><img src="/2019/12/10/SVN/image-20191210165416069.png" alt="image-20191210165416069"></p><p><img src="/2019/12/10/SVN/image-20191210165507110.png" alt="image-20191210165507110"></p><p><img src="/2019/12/10/SVN/image-20191210165547214.png" alt="image-20191210165547214"></p><h5 id="1-3-2、新建仓库"><a href="#1-3-2、新建仓库" class="headerlink" title="1.3.2、新建仓库"></a>1.3.2、新建仓库</h5><p><code>Trunk：</code> 存放开发的主线，团队成员在开发的时候一直要用这个库中的内容</p><p><code>Branches：</code>存放支线副本：当项目稳定以后，先发布到tags下，如果发现了bug，再从tags下检出到branches下。在该版本下进行bug的修复，把修复完毕的稳定的版本重新发布到tags下。</p><p><code>Tags：</code>存放标签副本，也就是存放稳定版本</p><p><img src="/2019/12/10/SVN/image-20191210091559139.png" alt="image-20191210091559139"></p><h5 id="1-3-3、新建用户-amp-组"><a href="#1-3-3、新建用户-amp-组" class="headerlink" title="1.3.3、新建用户&amp;组"></a>1.3.3、新建用户&amp;组</h5><p><img src="/2019/12/10/SVN/image-20191210165818343.png" alt="image-20191210165818343"></p><p><img src="/2019/12/10/SVN/image-20191210165916450.png" alt="image-20191210165916450"></p><h5 id="1-3-4、配置权限"><a href="#1-3-4、配置权限" class="headerlink" title="1.3.4、配置权限"></a>1.3.4、配置权限</h5><p><img src="/2019/12/10/SVN/image-20191210170115155.png" alt="image-20191210170115155"></p><h5 id="1-3-5、访问仓库简单测试"><a href="#1-3-5、访问仓库简单测试" class="headerlink" title="1.3.5、访问仓库简单测试"></a>1.3.5、访问仓库简单测试</h5><p><img src="/2019/12/10/SVN/image-20191210170602059.png" alt="image-20191210170602059"></p><p>访问结果如下：</p><p><img src="/2019/12/10/SVN/image-20191210170652117.png" alt="image-20191210170652117"></p><h5 id="1-3-6、Linux系统版本安装配置"><a href="#1-3-6、Linux系统版本安装配置" class="headerlink" title="1.3.6、Linux系统版本安装配置"></a><a href="https://www.runoob.com/svn/svn-tutorial.html">1.3.6、Linux系统版本安装配置</a></h5><p>大多数 GNU/Linux 发行版系统自带了Subversion ，所以它很有可能已经安装在你的系统上了。可以使用下面命令检查是否安装了。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">svn <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>如果 Subversion 客户端没有安装，命令将报告svn命令找不到的错误。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d">[kongwei<span class="hljs-keyword">@centos6</span> ~]$ svn --<span class="hljs-keyword">version</span><br>bash: svn: command not found<br></code></pre></td></tr></table></figure><p>我们可以使用 <code>yum install subversion 命令</code>或<code>apt-get install subversion命令</code>进行安装。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">kongwei@centos6 root</span>]$ su -<br>密码：<br>[<span class="hljs-meta">root@centos6 ~</span>]<span class="hljs-meta"># yum install subversion</span><br>已加载插件：fastestmirror, security<br>设置安装进程<br>Loading mirror speeds <span class="hljs-keyword">from</span> cached hostfile<br> * <span class="hljs-keyword">base</span>: mirrors.aliyun.com<br> * epel: mirrors.neusoft.edu.cn<br> * extras: mirrors.zju.edu.cn<br> * updates: mirrors.aliyun.com<br>解决依赖关系<br>--&amp;gt; 执行事务检查<br>...<br></code></pre></td></tr></table></figure><p>安装成功之后，执行 svn –version 命令。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">[root@ce<span class="hljs-symbol">ntos6</span> ~]<span class="hljs-attr"># svn --version</span><br><span class="hljs-attr">svn，版本 1</span><span class="hljs-number">.6</span><span class="hljs-number">.11</span> <span class="hljs-comment">(r934486)</span><br>   编译于 Aug <span class="hljs-number">17</span> <span class="hljs-number">2015</span>，<span class="hljs-number">08</span>:<span class="hljs-number">37</span>:<span class="hljs-number">43</span><br></code></pre></td></tr></table></figure><p>至此，centos下的SVN安装完成。</p><p>首先，在服务端进行SVN版本库的相关配置</p><p>手动新建版本库目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/opt/</span>svn<br></code></pre></td></tr></table></figure><p>利用svn命令创建版本库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">svnadmin create <span class="hljs-regexp">/opt/</span>svn/kongwei<br></code></pre></td></tr></table></figure><p>创建完版本库后会在/opt/svn/kongwei/conf目录 建立默认配置文件，包括svnserve.conf、passwd、authz 配置相关用户和权限。</p><p>使用命令svnserve启动服务</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">svnserve -d -r 目录 <span class="hljs-comment">--listen-port 端口号</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>-r:</strong> 配置方式决定了版本库访问方式。</p></li><li><p><strong>–listen-port:</strong> 指定SVN监听端口，不加此参数，<code>SVN默认监听3690</code></p></li><li><p>由于-r 配置方式的不一样，SVN启动就可以有两种不同的访问方式</p></li><li><p>方式一：-r直接指定到版本库(称之为<code>单库svnserve方式</code>)</p></li><li><p>```<br>svnserve -d -r /opt/svn/kongwei</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>- 在这种情况下，一个svnserve只能为一个版本库工作。<br><br>- authz配置文件中对版本库权限的配置应这样写：<br><br>- ```<br>  [groups]<br>  <span class="hljs-attribute">admin</span>=user1<br>  <span class="hljs-attribute">dev</span>=user2<br>  [/]<br>  @<span class="hljs-attribute">admin</span>=rw<br>  <span class="hljs-attribute">user2</span>=r<br></code></pre></td></tr></table></figure></li><li><p>使用类似这样的URL：svn://192.168.0.1/　即可访问runoob版本库</p></li><li><p>方式二：指定到版本库的上级目录(称之为<code>多库svnserve方式</code>)</p></li><li><p>```<br>svnserve -d -r /opt/svn</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>- 这种情况，一个svnserve可以为多个版本库工作<br><br>- 配置文件：<br><br>- 进入/opt/svn/kongwei/conf目录 修改默认配置文件配置，包括svnserve.conf、passwd、authz 配置相关用户和权限。<br><br>- authz配置文件中对版本库权限的配置应这样写：<br><br>- ```<br>  [groups]<br>  <span class="hljs-attribute">admin</span>=user1<br>  <span class="hljs-attribute">dev</span>=user2<br>  [runoob:/]<br>  @<span class="hljs-attribute">admin</span>=rw<br>  <span class="hljs-attribute">user2</span>=r<br>  <br>  [kongwei01:/]<br>  @<span class="hljs-attribute">admin</span>=rw<br>  <span class="hljs-attribute">user2</span>=r<br></code></pre></td></tr></table></figure></li><li><p>如果此时你还用[/]，则表示所有库的根目录，同理，[/src]表示所有库的根目录下的src目录。</p></li><li><p>使用类似这样的URL：svn://192.168.0.1/kongwei即可访问kongwei版本库。</p></li></ul><h4 id="1-4、SVN客户端-Tortoisesvn的使用"><a href="#1-4、SVN客户端-Tortoisesvn的使用" class="headerlink" title="1.4、SVN客户端-Tortoisesvn的使用"></a>1.4、SVN客户端-Tortoisesvn的使用</h4><p><a href="https://www.runoob.com/svn/svn-life-cycle.html">生命周期</a>：</p><p>创建版本库–》检出–》更新–》执行变更–》复查变化–》修复错误–》解决冲突–》提交更改。</p><p>这里有几个概念要必须掌握：</p><p><code>checkout</code>—&gt;将SVN仓库的代码拷贝到本地，比如你现在参与一个团队项目，项目代码在你之前肯定已经写了很多了，你可以通过checkout项目代码，获得整个项目。</p><p><code>update</code>—&gt;在你写代码的过程中，同事很可能已经提交过代码到SVN服务器，而你本地项目显然没有同事新提交的代码，你可以通过update SVN获得SVN最新的代码。即更新本地代码与SVN服务器上最新的版本一致，只要在需要更新的文件夹上点击右键或者在文件下空白处点击右键，选择”SVN Update” (获取指定版本中的内容，点击右键执行SVN菜单中的“Update to reversion“)，就可以了。</p><p><code>commit</code>—&gt;当你完成一部分开发后，你可以通过commit提交代码到SVN服务器，这样别人就可以获得你写的代码，记得先update再commit。</p><h5 id="1-4-1、安装svn客户端"><a href="#1-4-1、安装svn客户端" class="headerlink" title="1.4.1、安装svn客户端"></a>1.4.1、安装svn客户端</h5><p><a href="https://tortoisesvn.net/downloads.zh.html">TortoiseSVN及其中文语言包的下载路径</a></p><p><img src="/2019/12/10/SVN/image-20191210171050514.png" alt="image-20191210171050514"></p><p>TortoiseSVN 是通过右键菜单与 Windows 资源管理器集成，没有自己的窗口界面</p><h5 id="1-4-2、安装TortoiseSVN中文语言包"><a href="#1-4-2、安装TortoiseSVN中文语言包" class="headerlink" title="1.4.2、安装TortoiseSVN中文语言包"></a>1.4.2、安装TortoiseSVN中文语言包</h5><p>运行LanguagePack_1.6.16.21511-x64-zh_CN.msi汉化</p><p>桌面空白的地方点击右键，svn，设置</p><p><img src="/2019/12/10/SVN/image-20191210092535433.png" alt="image-20191210092535433"></p><h5 id="1-4-3、文件导入"><a href="#1-4-3、文件导入" class="headerlink" title="1.4.3、文件导入"></a>1.4.3、文件导入</h5><p>进入欲导入文件的文件夹右键</p><p><img src="/2019/12/10/SVN/image-20191210200520012.png" alt="image-20191210200520012"></p><p>键入要访问的仓库地址：</p><p><img src="/2019/12/10/SVN/image-20191210200656780.png" alt="image-20191210200656780"></p><p>把文件添加到SVN库中进行管理：</p><p><img src="/2019/12/10/SVN/image-20191210200827528.png" alt="image-20191210200827528"></p><h5 id="1-4-4、检出文件"><a href="#1-4-4、检出文件" class="headerlink" title="1.4.4、检出文件"></a>1.4.4、检出文件</h5><p><code>checkout</code>—&gt;将SVN仓库的代码拷贝到本地，比如你现在参与一个团队项目，项目代码在你之前肯定已经写了很多了，你可以通过checkout项目代码，获得整个项目。</p><p>在某个文件夹位置，直接右键检出</p><p><img src="/2019/12/10/SVN/image-20191210173332323.png" alt="image-20191210173332323"></p><p><img src="/2019/12/10/SVN/image-20191210173447183.png" alt="image-20191210173447183"></p><p><img src="/2019/12/10/SVN/image-20191210093213531.png" alt="image-20191210173537683"></p><p>执行完上述操作以后demo仓库里的内容就被下载到了user1中。</p><p>注意：**.svn**这个隐藏目录记录着两项关键的信息: 工作文件的基准版本和一个本地副本最后更新的时间戳。千万不要手工修改或删除这个 .svn隐藏目录和里面的文件！！！ </p><p>否则将会导致你本地的工作拷贝 （静态视图）被破坏，无法再进行操作。</p><h5 id="1-4-5、创建新文件"><a href="#1-4-5、创建新文件" class="headerlink" title="1.4.5、创建新文件"></a>1.4.5、创建新文件</h5><p>新建一个txt文件，“新建文本文档.txt”</p><p>我们利用svn把 ”新建文本文档.txt “ 添加到版本控制</p><p>先要标记文件状态：</p><p><img src="/2019/12/10/SVN/image-20191210174443095.png" alt="image-20191210174443095"></p><p>添加完毕后</p><p><img src="/2019/12/10/SVN/image-20191210192304365.png" alt="image-20191210192304365"></p><p>利用svn Commit上传到服务器</p><p><img src="/2019/12/10/SVN/image-20191210192450630.png" alt="image-20191210192450630"></p><p><img src="/2019/12/10/SVN/image-20191210192622829.png" alt="image-20191210192622829"></p><h5 id="1-4-6、修改-“新建文本文档-txt文件”"><a href="#1-4-6、修改-“新建文本文档-txt文件”" class="headerlink" title="1.4.6、修改  “新建文本文档.txt文件”"></a>1.4.6、修改  “新建文本文档.txt文件”</h5><p>在user2中利用上面的知识，创建仓库检出文件。这样，user2的本地仓库中也有 “新建文本文档.txt文件”了。</p><p><img src="/2019/12/10/SVN/image-20191210193009385.png" alt="image-20191210193009385"></p><p>我们在User2中修改 “新建文本文档.txt文件”</p><p>这时我们发现 user2中的a.txt 文件的图标发生了变化：</p><p><img src="/2019/12/10/SVN/image-20191210193217711.png" alt="image-20191210193217711"></p><p>我们在user2再执行commit操作：</p><p><img src="/2019/12/10/SVN/image-20191210193442560.png" alt="image-20191210193442560"></p><p>我们在user1执行update操作：</p><p><img src="/2019/12/10/SVN/image-20191210193730368.png" alt="image-20191210193730368"></p><p>我们可以在user1文件夹看到修改后的   ”新建文本文档.txt“   文件了。</p><p><img src="/2019/12/10/SVN/image-20191210193848021.png" alt="image-20191210193848021"></p><h5 id="1-4-7、删除文件"><a href="#1-4-7、删除文件" class="headerlink" title="1.4.7、删除文件"></a>1.4.7、删除文件</h5><p>不仅仅是本地删除文件，而是让服务器上的文件同步删除。</p><p>我们先把user1 中的   ”新建文本文档.txt“   删除，然后执行commit操作。</p><p><img src="/2019/12/10/SVN/image-20191210194238244.png" alt="image-20191210194238244"></p><p>注意操作状态是<strong>missing</strong>，和新增一样我们需要<strong>修改它的状态</strong></p><p><img src="/2019/12/10/SVN/image-20191210194426104.png" alt="image-20191210194426104"></p><p><img src="/2019/12/10/SVN/image-20191210194714364.png" alt="image-20191210194714364"></p><p>然后再进行确认提交。</p><p>此时我们在回到user2中更新项目：</p><p><img src="/2019/12/10/SVN/image-20191210194946765.png" alt="image-20191210194946765"></p><p>”新建文本文档.txt“    文件一同被删除。</p><h5 id="1-4-8、恢复被删除的文件"><a href="#1-4-8、恢复被删除的文件" class="headerlink" title="1.4.8、恢复被删除的文件"></a>1.4.8、恢复被删除的文件</h5><p>使用版本控制工具，我们可以轻易的恢复被误删的文件</p><p>在User1 中选择<strong>更新至版本</strong>…</p><p><img src="/2019/12/10/SVN/image-20191210195258450.png" alt="image-20191210195258450"></p><p>如果我们记不清版本，可以通过<strong>日志进行查询</strong>，找到需要恢复历史版本：</p><p><img src="/2019/12/10/SVN/image-20191210195513070.png" alt="image-20191210195513070"></p><p><img src="/2019/12/10/SVN/image-20191210195723374.png" alt="image-20191210195723374"></p><h5 id="1-4-9、分支"><a href="#1-4-9、分支" class="headerlink" title="1.4.9、分支"></a>1.4.9、分支</h5><p>项目中为何要创建分支，及合并？</p><p>比如我现在项目所有的文件放在主干上(trunk)中，由于需求的变更，需要增加新的需求，但是我们主干上还要继续往下开发，在此我们可以新建一个分支，来做增加新的需求那一块，主干上继续开发，等分支上代码没有问题的时候，再合并到主干上来。</p><p>创建分支的最大的目的就是跟主线进行并行开发时候不影响主线的开发。</p><p><strong>如何操作？</strong></p><p>假如我本地新建一个文件夹SVNDemo下有2个文件夹trunk(存放主干上的代码)和branch(存放分支上的代码)，如下所示：</p><p><img src="/2019/12/10/SVN/image-20191210210727941.png" alt="image-20191210210727941"></p><p><strong>1、先提取主干代码到trunk文件夹</strong></p><p><img src="/2019/12/10/SVN/image-20191210211058403.png" alt="image-20191210211058403"></p><p><img src="/2019/12/10/SVN/image-20191210211203767.png" alt="image-20191210211203767"></p><p><strong>2、新建分支</strong></p><p> 从trunk（主干上）创建分支(branch)步骤如下：</p><p>右键trunk –&gt; branch/Tag 如下图：</p><p><img src="/2019/12/10/SVN/image-20191210211522739.png" alt="image-20191210211522739"></p><p>弹出对话框，填入新分支路径：</p><p><img src="/2019/12/10/SVN/image-20191210211712652.png" alt="image-20191210211712652"></p><p>确认：</p><p><img src="/2019/12/10/SVN/image-20191210211828529.png" alt="image-20191210211828529"></p><p>查看：</p><p>在VisualSVN Serval服务器上新增NewBranch，是从如上服务器Ant_Nest上的文件拷贝一份的</p><p><img src="/2019/12/10/SVN/image-20191210212044298.png" alt="image-20191210212044298"></p><p><strong>3、现在我们可以再来看看本地branch文件夹了，我现在直接进入branch文件下</strong></p><p>右键 –&gt; Chenckout下，就可以把NewBranch下的所有文件提取出来了，如下所示：</p><p><img src="/2019/12/10/SVN/image-20191210212502331.png" alt="image-20191210212502331"></p><p><img src="/2019/12/10/SVN/image-20191210212635660.png" alt="image-20191210212635660"></p><p>对本地branch文件夹 右键–&gt; update即可，就可以更新到分支代码</p><p><strong>4、合并分支到主干</strong></p><p>比如我现在对branch分支上新增    “新建文本文档.txt”   文件，然后提交上去，如下所示：</p><p><img src="/2019/12/10/SVN/image-20191210213302464.png" alt="image-20191210213302464"></p><p>我现在想把分支上的代码   “新建文本文档.txt”   合并到主干上trunk，现在要怎么合并呢？步骤如下：</p><p>回到我们刚刚的主干（trunk）文件夹下，鼠标右键该文件夹 –&gt; TortoiseSVN –&gt; Merge 如下图所示：</p><p><img src="/2019/12/10/SVN/image-20191210213501736.png" alt="image-20191210213501736"></p><p>弹窗：</p><p><img src="/2019/12/10/SVN/image-20191210213814603.png" alt="image-20191210213814603"></p><p><img src="/2019/12/10/SVN/image-20191210214037444.png" alt="image-20191210214037444"></p><p><img src="/2019/12/10/SVN/image-20191210214129993.png" alt="image-20191210214129993"></p><p>因为服务端的<strong>历史创建主干和分支不当，二者产生上下级关系</strong>，在修改分支内容并提交后，如果没有更新主干就进行合并操作就会产生如下的树冲突：</p><p><img src="/2019/12/10/SVN/image-20191210214902189.png" alt="image-20191210214902189"></p><p><img src="/2019/12/10/SVN/image-20191210215345663.png" alt="image-20191210215345663"></p><p><strong>6、合并主干到分支</strong></p><p>如果主干上有一些更新，比如说jar包更新等等，那么这些要更新到分支上去，如何操作呢？比如我现在在主干上新建一个  ”新建文本文档(2).txt“  文件，比如如下：</p><p>trunk添加并提交文件    ”新建文本文档(2).txt“  </p><p><img src="/2019/12/10/SVN/image-20191210215614630.png" alt="image-20191210215614630"></p><p>当前分支目录内容如下：</p><p><img src="/2019/12/10/SVN/image-20191210215853622.png" alt="image-20191210215853622"></p><p>在分支点击branch –&gt; 右键TortoiseSVN –&gt; Merge 如下图所示：</p><p><img src="/2019/12/10/SVN/image-20191210220049308.png" alt="image-20191210220049308"></p><p><img src="/2019/12/10/SVN/image-20191210220527393.png" alt="image-20191210220527393"></p><h5 id="1-4-10、解决冲突"><a href="#1-4-10、解决冲突" class="headerlink" title="1.4.10、解决冲突"></a>1.4.10、解决冲突</h5><p>为什么会产生冲突代码呢？原因很简单就是因为不同的人，同时修改了同一个文件的同一个地方，这时候，他提交了，我没有提交，我就提交不了，这个时候我们要进行先更新，然后在进行提交即可，那如果产生冲突，会生成如上3个文件。 </p><p>案例：</p><p>产生冲突SVNDemo文件夹下创建user1和user2文件夹，两个文件夹<strong>检出（checkout）</strong>同一项目，各自修改同一文件的内容，各自提交前都不更新内容：</p><p><img src="/2019/12/10/SVN/image-20191210223120590.png" alt="image-20191210223120590"></p><p>user1先提交：</p><p><img src="/2019/12/10/SVN/image-20191210223416362.png" alt="image-20191210223416362"></p><p>user2在提交：产生冲突</p><p><img src="/2019/12/10/SVN/image-20191210223513139.png" alt="image-20191210223513139"></p><p><img src="/2019/12/10/SVN/image-20191210224145486.png" alt="image-20191210224145486"></p><p><img src="/2019/12/10/SVN/image-20191210224550424.png" alt="image-20191210224550424"></p><p>对于每个冲突的文件Subversion在你的目录下放置了三个文件内容如下：<strong>（后缀.r14和.r15为版本区别）</strong></p><p><img src="/2019/12/10/SVN/image-20191210225655087.png" alt="image-20191210225655087"></p><p>解决方案：</p><p>1、使用revert(回滚)操作，该操作表示用户放弃自己的更新代码，然后直接提交，这个时候你的代码就会使服务器上最新的代码，即A用户提交的新代码，你的代码不会被提交，如下所示：</p><p><img src="/2019/12/10/SVN/image-20191210230932749.png" alt="image-20191210230932749"></p><p><img src="/2019/12/10/SVN/image-20191210231033429.png" alt="image-20191210231033429"></p><p>2、选择文件-&gt;右键Editconficts：这种方法需要<strong>冲突双方经过协商</strong>之后将代码更改统一之后再提交。不仅解决了冲突而且还保证了代码是正确的，因为只有一方的代码被提交：</p><p><img src="/2019/12/10/SVN/image-20191210232141891.png" alt="image-20191210232141891"></p><p><img src="/2019/12/10/SVN/image-20191210232352963.png" alt="image-20191210232352963"></p><p>状态由<strong>冲突</strong>变成<strong>修改：</strong></p><p><img src="/2019/12/10/SVN/image-20191210232538468.png" alt="image-20191210232538468"></p><h5 id="1-4-11、小结"><a href="#1-4-11、小结" class="headerlink" title="1.4.11、小结"></a>1.4.11、小结</h5><p>SVN简单使用: SVN基本操作</p><p>工作中最常用的 SVN 操作</p><ul><li>​    检出 – SVN Checkout : 第一次从 SVN 服务器下载版本库数据</li><li>​    更新 – SVN Update : 客户端从 SVN 服务器下载最新的版本</li><li>​    提交 – SVN Commit : 客户端将改劢上传到 SVN 服务器</li><li>​    增加 – Add : 将新文件戒文件夹纳入 SVN 控制之下</li><li>​    还原 – Revert : 放弃本地修改, 将数据恢复到之前的版本状态</li></ul><h3 id="2、Eclipse中使用SVN"><a href="#2、Eclipse中使用SVN" class="headerlink" title="2、Eclipse中使用SVN"></a>2、Eclipse中使用SVN</h3><p>在Eclipse中通过插件使用SVN</p><p><strong>插件安装：</strong></p><p>把文件添加到Eclipse的dropins文件夹中，重启Eclipse即可</p><p><img src="/2019/12/10/SVN/image-20191210095204957.png" alt="image-20191210095204957"></p><p><strong>在线安装：</strong></p><p>也可使用在线安装的方式为Eclipse添加SVN插件</p><p>打开Eclipse-&gt;Help-&gt;Install New Software…</p><p><img src="/2019/12/10/SVN/image-20191210095441246.png" alt="image-20191210095441246"></p><p>其中<strong><a href="http://subclipse.tigris.org/update_1.10.x">http://subclipse.tigris.org/update_1.10.x</a></strong>是最新版本的SVN插件的下载站点【subclipse是Eclipse的SVN插件】。</p><p><img src="/2019/12/10/SVN/image-20191210095540977.png" alt="image-20191210095540977"></p><p>下一步</p><p><img src="/2019/12/10/SVN/image-20191210095618932.png" alt="image-20191210095618932"></p><p>下一步 选择同意安装</p><p><img src="/2019/12/10/SVN/image-20191210095746998.png" alt="image-20191210095746998"></p><p>点击【Finish】按钮开始安装SVN插件</p><p>安装过程中弹出警告框，不用理会，直接点击【OK】按钮继续安装</p><p>安装完成之后需要重启Eclipse，点击【Yes】按钮重启Eclipse即可。</p><p><strong>查看安装好的SVN插件</strong></p><p><img src="/2019/12/10/SVN/image-20191210100828986.png" alt="image-20191210100828986"></p><h4 id="2-1、项目添加到SVN中"><a href="#2-1、项目添加到SVN中" class="headerlink" title="2.1、项目添加到SVN中"></a>2.1、项目添加到SVN中</h4><h5 id="2-1-1、新建项目，如下操作："><a href="#2-1-1、新建项目，如下操作：" class="headerlink" title="2.1.1、新建项目，如下操作："></a>2.1.1、新建项目，如下操作：</h5><p><img src="/2019/12/10/SVN/image-20191210101011113.png" alt="image-20191210101011113"></p><h5 id="2-1-2、选择SVN"><a href="#2-1-2、选择SVN" class="headerlink" title="2.1.2、选择SVN"></a>2.1.2、选择SVN</h5><p><img src="/2019/12/10/SVN/image-20191210101134344.png" alt="image-20191210101134344"></p><h5 id="2-1-3、选择SVN仓库地址的位置："><a href="#2-1-3、选择SVN仓库地址的位置：" class="headerlink" title="2.1.3、选择SVN仓库地址的位置："></a>2.1.3、选择SVN仓库地址的位置：</h5><p><img src="/2019/12/10/SVN/image-20191210101228328.png" alt="image-20191210101228328"></p><p><img src="/2019/12/10/SVN/image-20191210101303735.png" alt="image-20191210101303735"></p><p><img src="/2019/12/10/SVN/image-20191210101339503.png" alt="image-20191210101339503"></p><p>输入用户名密码，确定导入完成。</p><h4 id="2-2、提交代码到SVN项目"><a href="#2-2、提交代码到SVN项目" class="headerlink" title="2.2、提交代码到SVN项目"></a>2.2、提交代码到SVN项目</h4><p>现在我们只是把项目和SVN进行了关联，所有的项目文件并没有上传到服务器。</p><p><img src="/2019/12/10/SVN/image-20191210101503691.png" alt="image-20191210101503691"></p><p>忽略.class文件和classes文件夹不提交</p><p><img src="/2019/12/10/SVN/image-20191210101537605.png" alt="image-20191210101537605"></p><p>提交项目，可以看到classes文件并不在其</p><p><img src="/2019/12/10/SVN/image-20191210101634177.png" alt="image-20191210101634177"></p><p>提交之后，可以到项目图标已经发生了变化</p><p><img src="/2019/12/10/SVN/image-20191210101739951.png" alt="image-20191210101739951"></p><h4 id="2-3、把SVN项目检出到Eclipse"><a href="#2-3、把SVN项目检出到Eclipse" class="headerlink" title="2.3、把SVN项目检出到Eclipse"></a>2.3、把SVN项目检出到Eclipse</h4><p>我们新到公司，往往已经有开发好了的项目，我们要加入，就需要用<strong>项目的检出的方式来新建项目</strong>。<br>操作如下：在创建项目的时候，选择从svn上检出项目</p><p><img src="/2019/12/10/SVN/image-20191210102113334.png" alt="image-20191210102113334"></p><p>现有资源库的位置</p><p><img src="/2019/12/10/SVN/image-20191210102145794.png" alt="image-20191210102145794"></p><p>选择之前提交的项目路径</p><p><img src="/2019/12/10/SVN/image-20191210102230164.png" alt="image-20191210102230164"></p><p>指定项目名：</p><p><img src="/2019/12/10/SVN/image-20191210102303893.png" alt="image-20191210102303893"></p><p>检出项目到Eclipse中</p><p><img src="/2019/12/10/SVN/image-20191210102340569.png" alt="image-20191210102340569"></p><h4 id="2-4、小结"><a href="#2-4、小结" class="headerlink" title="2.4、小结"></a>2.4、小结</h4><p>了解项目管理项目构建和版本控制这些工程软件</p><p>理解 SVN 的基本功能, 掌握 Tortoise SVN 的使用，掌握Eclipse的SVN插件使用</p><p>在企业中应用：项目经理会发一个word文档</p><p>​    1、 svn的仓库的地址</p><p>​    2、 使用svn的用户名和密码</p><p>​    3、 把svn上的项目导入到Elicpse中</p><p>​    4、 做自己的模块，把自己写的东西上传到svn上</p><p>​    5、 版本的对比，合并版本</p><h3 id="3、IDEA中使用SVN"><a href="#3、IDEA中使用SVN" class="headerlink" title="3、IDEA中使用SVN"></a>3、IDEA中使用SVN</h3><p>确保已经建立了SVN服务和安装了SVN客户端，然后做如下配置：</p><p><img src="/2019/12/10/SVN/image-20191210205848204.png" alt="image-20191210205848204"></p>]]></content>
    
    
    
    <tags>
      
      <tag>版本控制</tag>
      
      <tag>SVN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2019/12/10/JavaScript/"/>
    <url>/2019/12/10/JavaScript/</url>
    
    <content type="html"><![CDATA[<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript 作用：被数百万计的网页用来<code>改进设计</code>、<code>验证表单</code>、<code>检测浏览器</code>、<code>创建cookies</code>（js也可创建cookie，在浏览器里面创建)，以及更多的其它应用。前身是Livescript，是<code>基于对象</code>和<code>事件驱动</code>，并<code>具安全性</code>的<code>网络脚本语言</code>。</p><p>基于<strong>对象</strong>，<strong>解释</strong>执行，无需<strong>编译</strong>的<strong>动态</strong>语言。</p><h3 id="JavaScript脚本在页面中的引入："><a href="#JavaScript脚本在页面中的引入：" class="headerlink" title="JavaScript脚本在页面中的引入："></a>JavaScript脚本在页面中的引入：</h3><h4 id="1、标签内部使用："><a href="#1、标签内部使用：" class="headerlink" title="1、标签内部使用："></a>1、标签内部使用：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 下面代码&quot;javascript:alert&quot;中javascript不区分大小写也能够执行成功，而alert必须小写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Javascript的alert弹窗&#x27;)&quot;</span>&gt;</span>点击href=&quot;javascript:alert()&quot;弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200104170131949.png" alt="image-20200104170131949"></p><h4 id="2、HTML页面内嵌入js脚本"><a href="#2、HTML页面内嵌入js脚本" class="headerlink" title="2、HTML页面内嵌入js脚本:"></a>2、HTML页面内嵌入js脚本:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">//script标签之间编写JavaScript代码</span></span><br><span class="javascript">alert(<span class="hljs-string">&quot;JavaScript内部引入&quot;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200104170634796.png" alt="image-20200104170634796"></p><h4 id="3、在页面中引入外部的js脚本文件："><a href="#3、在页面中引入外部的js脚本文件：" class="headerlink" title="3、在页面中引入外部的js脚本文件："></a>3、在页面中引入外部的js脚本文件：</h4><p>责任分离，可以让很多页面都能够使用这个js文件：</p><p>HelloJS.js文件：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">alert(<span class="hljs-string">&quot;在HTML页面中引入外部JavaScript文件&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>index.html文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/HelloJS.js&quot;</span>&gt;</span><br>/*<br> * 注意：在一个script标签里“内部编写JavaScript代码”或“引入外部JavaScript文件”<br> * 两种方式只能择其一，若两种方式同时存在的话，仅外部引入的JavaScript文件有效。<br> * 在HBuilder中很人性化的给开发人员做出提示：<br> * 引入外部js文件后，该标签内编写的js代码没有关键字提示及关键字颜色<br> */<br><span class="javascript">alert(<span class="hljs-string">&quot;JavaScript内部引入&quot;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200104192358313.png" alt="image-20200104192358313"></p><h3 id="引入JavaScript在HTML页面代码位置的案例分析："><a href="#引入JavaScript在HTML页面代码位置的案例分析：" class="headerlink" title="引入JavaScript在HTML页面代码位置的案例分析："></a>引入JavaScript在HTML页面代码位置的案例分析：</h3><h4 id="1、在-lt-div-id-”mydiv”-gt-前后引入js文件"><a href="#1、在-lt-div-id-”mydiv”-gt-前后引入js文件" class="headerlink" title="1、在&lt;div id=”mydiv”&gt;前后引入js文件"></a>1、在&lt;div id=”mydiv”&gt;前后引入js文件</h4><p>在之前引入效果：</p><p><img src="/2019/12/10/JavaScript/image-20200104201128074.png" alt="image-20200104201128074"></p><p>在之后引入js文件的效果：</p><p><img src="/2019/12/10/JavaScript/image-20200104201221225.png" alt="image-20200104201221225"></p><p>总结：</p><p>。。。</p><h4 id="2、把js代码放到window-onload函数里"><a href="#2、把js代码放到window-onload函数里" class="headerlink" title="2、把js代码放到window.onload函数里"></a>2、把js代码放到window.onload函数里</h4><p><img src="/2019/12/10/JavaScript/image-20200104200928485.png" alt="image-20200104200928485"></p><p>总结：window.onload函数是浏览器加载完整个页面后调用的函数，function(){}是匿名函数。</p><h3 id="JavaScript变量"><a href="#JavaScript变量" class="headerlink" title="JavaScript变量"></a>JavaScript变量</h3><p>1、大小写敏感，变量名字母下划线开头；</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 变量名=变量值；<br></code></pre></td></tr></table></figure><p>2、声明的变量类型：Number数字类型，Boolean 布尔类型，String 字符串类型等；</p><blockquote><ol><li>Number：<ol><li>整型：10进制、8进制(0…)、16进制(0x…)；</li><li>特殊数值：NaN、Infinity(除数为0)，其对应的判断函数为isNaN()和isFinite()。</li></ol></li><li>Boolean: true 或 false<ul><li>“”、null、undefined和0等，表示false。</li></ul></li><li>String：js中没有char型<ul><li>“a book of JavaScript” 、 ‘a’ 、 “a” 和 “” 等都表示字符串。</li></ul></li></ol></blockquote><p>3、typeof 变量名：取到变量的类型；</p><p><img src="/2019/12/10/JavaScript/image-20200104203115668.png" alt="image-20200104203115668"></p><p>4、全局变量与局部变量：</p><table><thead><tr><th>全局变量</th><th>局部变量</th></tr></thead><tbody><tr><td>&lt;script language=”javascript”&gt;<br>       var msg = “全局变量”;<br>       function show()<br>       {<br>              msg = “非局部变量”;<br>       }<br>       show();<br>       alert(msg);//打印输出”非局部变量“<br>&lt;/script&gt;</td><td>&lt;script language=”javascript”&gt;<br>       var msg = “全局变量”;<br>       function show()<br>       {<br>              var msg; <br>              msg = “局部变量”;<br>       }<br>       show();<br>       alert(msg);//打印输出”全局变量“<br>&lt;/script&gt;</td></tr></tbody></table><h3 id="JavaScript运算符"><a href="#JavaScript运算符" class="headerlink" title="JavaScript运算符"></a>JavaScript运算符</h3><table><thead><tr><th>运算符分类</th><th></th></tr></thead><tbody><tr><td>算数运算符</td><td>+、-、*、/、%、++、–</td></tr><tr><td>赋值运算符</td><td>=、+=、-=、*=、/=、%=</td></tr><tr><td>比较运算符</td><td>&gt;、&lt;、&gt;=、&lt;=、==、!=</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp;、||、!</td></tr><tr><td>流程控制</td><td>if、while、for</td></tr></tbody></table><table><thead><tr><th>==和===的区别</th><th></th></tr></thead><tbody><tr><td>==</td><td>只比较两个变量的值</td></tr><tr><td>===</td><td>先比较两个变量的类型，再比较两个变量的值</td></tr></tbody></table><table><thead><tr><th>||  运算符</th><th></th></tr></thead><tbody><tr><td>||</td><td>返回第一个为true的值(0,null,undefined,””等表示的是false)</td></tr></tbody></table><h3 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h3><p>将脚本编写为函数，就可以避免页面载入时执行该脚本，实现代码复用。</p><h4 id="1、函数定义格式："><a href="#1、函数定义格式：" class="headerlink" title="1、函数定义格式："></a>1、函数定义格式：</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">函数名（[参数列表]）</span><br>&#123;<br>程序代码<br>[<span class="hljs-keyword">return</span> <span class="hljs-type">表达式</span>;]//没有返回值得话，默认返回undefined<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、函数调用格式："><a href="#2、函数调用格式：" class="headerlink" title="2、函数调用格式："></a>2、函数调用格式：</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">函数名<span class="hljs-comment">(参数1,参数2...)</span>;<br>var 变量名=函数名<span class="hljs-comment">(参数1,参数2...)</span>;<br></code></pre></td></tr></table></figure><h4 id="3、匿名函数："><a href="#3、匿名函数：" class="headerlink" title="3、匿名函数："></a>3、匿名函数：</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var say = function()&#123;<br>alert(<span class="hljs-string">&quot;hello 你好!&quot;</span>)<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br>var hello = say<span class="hljs-comment">;</span><br>hello()<span class="hljs-comment">;</span><br>say()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="4、系统函数-global-："><a href="#4、系统函数-global-：" class="headerlink" title="4、系统函数(global)："></a>4、系统函数(global)：</h4><p>系统函数：就是javascript中为我们内置的一系列函数，我们找到这些函数，不需要定义就可就可以直接使用，系统函数就是这个global对象的方法。</p><p><img src="/2019/12/10/JavaScript/Snipaste_2019-11-26_17-17-57.png"></p><p>全局函数的使用：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs perl">//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/encodeURI()--编码 decodeURI()--解码/</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>/<br>var url = <span class="hljs-string">&quot;http://百度.com&quot;</span>;<br>var urlEncode = encodeURI(url);<br><br>console.debug(urlEncode);<br>// http:<span class="hljs-regexp">//</span>%E7%99%BE%E5%BA%A6.com<br><br>console.debug(decodeURI(urlEncode));<br>// http:<span class="hljs-regexp">//</span>百度.com<br><br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>encodeURIComponent()编码 decodeURIComponent()解码，一般用不到//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>/<br>var url = <span class="hljs-string">&quot;http://百度.com&quot;</span>;<br>var urlEncode = encodeURIComponent(url);<br><br>console.debug(urlEncode);<br>// http%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>F%E7%99%BE%E5%BA%A6.com<br><br>console.debug(decodeURIComponent(urlEncode));<br>// http:<span class="hljs-regexp">//</span>百度.com<br><br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//is</span>NaN()//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>console.debug(isNaN(<span class="hljs-string">&quot;45&quot;</span>));<span class="hljs-regexp">//</span>false<br>console.debug(isNaN(<span class="hljs-number">45</span>));<span class="hljs-regexp">//</span>false<br>console.debug(isNaN(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-regexp">//</span>true<br><br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/parseInt(var)/</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>var num = <span class="hljs-string">&quot;45.6&quot;</span>;<br>console.debug(typeof num); <span class="hljs-regexp">//s</span>tring<br>num = parseInt(num); <span class="hljs-regexp">//</span>把string 转换成num<br>console.debug(typeof num); <span class="hljs-regexp">//num</span>ber<br>console.debug(num);<span class="hljs-regexp">//</span><span class="hljs-number">45</span><br><br>var num = <span class="hljs-string">&quot;45abc.6&quot;</span>;<br>num = parseInt(num); <span class="hljs-regexp">//</span>把string 转换成num<br>console.debug(num);<span class="hljs-regexp">//</span><span class="hljs-number">45</span><br><br>var num = <span class="hljs-string">&quot;n45abc.6&quot;</span>;<br>num = parseInt(num); <span class="hljs-regexp">//</span>把string 转换成<br>console.debug(num);<span class="hljs-regexp">//</span>NAN<br><br>//<span class="hljs-keyword">eval</span>()计算JavaScript字符串，并将其作为脚本执行<br>/*<br> *强大之处：里面是一个字符串，放到<span class="hljs-keyword">eval</span>可以直接运行；<br> *用途：以后我们在后台传一个数据过来，这个数据很多时候是特殊的格式，json格式，需要使用<span class="hljs-keyword">eval</span>这个函数去解析一下(后面学习)<br> */<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;alert(2+1)&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>全局属性：</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th><th><strong>FF</strong></th><th><strong>IE</strong></th></tr></thead><tbody><tr><td>Infinity</td><td>代表正的无穷大的数值。</td><td>1</td><td>4</td></tr><tr><td>NaN（Not A Number）</td><td>指示某个值是不是数字值。</td><td>1</td><td>4</td></tr><tr><td>undefined</td><td>指示未定义的值。</td><td>1</td><td>5.5</td></tr></tbody></table><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> t<span class="hljs-number">1</span>=<span class="hljs-number">1</span>.<span class="hljs-number">18531825858153872539188692653618536</span>E+<span class="hljs-number">10308</span>;<br><span class="hljs-attribute">console</span>.debug(t<span class="hljs-number">1</span>);//Infinity<br><br><span class="hljs-attribute">var</span> t<span class="hljs-number">2</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-attribute">console</span>.debug(t<span class="hljs-number">2</span>);//NaN<br><br><span class="hljs-attribute">var</span> t<span class="hljs-number">3</span>;<br><span class="hljs-attribute">console</span>.debug(t<span class="hljs-number">3</span>);//undefined<br></code></pre></td></tr></table></figure><h3 id="JavaScript简单对象"><a href="#JavaScript简单对象" class="headerlink" title="JavaScript简单对象"></a>JavaScript简单对象</h3><p>一般将对象名的首字母大写，而函数名的首字母一般小写。这并非是强制的，而是为区分JS对象和JS函数的建议。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> Person()&#123;<span class="hljs-regexp">//</span>一个名为Person的对象&#125;<br><span class="hljs-regexp">//</span>对象添加属性<br>var person=new Person();<br>person.name=<span class="hljs-string">&quot;张三&quot;</span>;<br>person.age=<span class="hljs-number">18</span>;<br>console.debug(person);<span class="hljs-regexp">//</span>Person&#123;name=<span class="hljs-string">&quot;张三&quot;</span>,age=<span class="hljs-number">18</span>&#125;<br><span class="hljs-regexp">//</span>给对象添加方法<br>person.hello=<span class="hljs-keyword">function</span>()&#123;<br>alert(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br>person.hello();<span class="hljs-regexp">//</span>执行<br><br><span class="hljs-keyword">function</span> person()&#123;<span class="hljs-regexp">//</span>一个名为person的函数&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200104205646103.png" alt="image-20200104205646103"></p><p>构造函数与this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>)</span>&#123;<span class="hljs-comment">//对象</span><br><span class="hljs-comment">//对象添加属性</span><br><span class="hljs-built_in">this</span>.name=<span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-built_in">this</span>.age=<span class="hljs-number">18</span>;<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//Person&#123;name=&quot;张三&quot;,age=18&#125;</span><br><span class="hljs-comment">//给对象添加方法</span><br><span class="hljs-built_in">this</span>.hello=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br><span class="hljs-built_in">this</span>.hello();<span class="hljs-comment">//执行</span><br>&#125;<br><span class="hljs-keyword">var</span> person=<span class="hljs-keyword">new</span> Person();<br>person.hello();<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200104210924900.png" alt="image-20200104210924900"></p><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><h4 id="1、值传递："><a href="#1、值传递：" class="headerlink" title="1、值传递："></a>1、值传递：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeValue</span>(<span class="hljs-params">x</span>)</span>&#123;</span><br>x = 5;<br>&#125;<br><span class="javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">3</span>;</span><br>changeValue(x);<br><span class="javascript">alert(x);<span class="hljs-comment">//3值传递</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、引用传递："><a href="#2、引用传递：" class="headerlink" title="2、引用传递："></a>2、引用传递：</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span></span><br><span class="xml">function Person(name,age)</span><span class="xquery">&#123;</span><br><span class="xquery">this.age = age;</span><br><span class="xquery">this<span class="hljs-built_in">.name</span> =<span class="hljs-built_in"> name</span>;</span><br><span class="xquery">&#125;</span><br><span class="xml">function change(p1)</span><span class="xquery">&#123;</span><br><span class="xquery">p1<span class="hljs-built_in">.name</span> = <span class="hljs-string">&quot;李四&quot;</span>;</span><br><span class="xquery">&#125;</span><span class="xml"> </span><br><span class="xml">var person1 = new Person(&quot;张三&quot;,18);</span><br><span class="xml">change(person1); //传递地址</span><br><span class="xml">    console.debug(person1);//Person </span><span class="xquery">&#123; age=<span class="hljs-number">18</span>,<span class="hljs-built_in"> name</span>=<span class="hljs-string">&quot;李四&quot;</span>&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="JavaScript继承"><a href="#JavaScript继承" class="headerlink" title="JavaScript继承"></a>JavaScript继承</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ClassA</span></span>(name)&#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span></span>()&#123;<br>alert(<span class="hljs-string">&quot;hello,&quot;</span>+name);<br>&#125;;<br>&#125;<br><br><span class="hljs-comment">//继承</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ClassB</span></span>(name)&#123;<br><span class="hljs-built_in">this</span>.<span class="hljs-keyword">new</span><span class="hljs-type">Method</span> = ClassA;<br><span class="hljs-built_in">this</span>.<span class="hljs-keyword">new</span><span class="hljs-type">Method</span>(name);<span class="hljs-comment">//相等于 ClassA(name)</span><br>&#125;<br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-type">ClassA</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br>obj.sayHello();<br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-type">ClassB</span>(<span class="hljs-string">&quot;小张&quot;</span>);<br>obj.sayHello();<br></code></pre></td></tr></table></figure><h3 id="Java-Script本地对象"><a href="#Java-Script本地对象" class="headerlink" title="Java Script本地对象"></a>Java Script本地对象</h3><p>详查API文档：Array，Boolean，Date，Math，Number，String，Global(内置函数)；</p><p>JS和Java一样，有一个顶层对象Object；</p><h4 id="Object："><a href="#Object：" class="headerlink" title="Object："></a>Object：</h4><p>主要属性：</p><ul><li>constructor-对象的构造函数</li><li>prototype-使您有能力向对象添加属性和方法（原类型）</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Person(<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span>&#123;<br>this.name=name;<br>this.age=age;<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>prototype.say=<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>alert(<span class="hljs-string">&quot;prototype&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运用：有一个Date类，但是Date打印的效果不是我们想要的想要的效果，但是Date类里面 没有format方法，那我们就可以给他添加一个原型的方法:</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-built_in">Date</span>.prototype.format=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getFullYear()+<span class="hljs-string">&quot;-&quot;</span>+(<span class="hljs-keyword">this</span>.getMonth()+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-keyword">this</span>.getDate()<br>+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-keyword">this</span>.getHours()+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-keyword">this</span>.getMinutes()+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-keyword">this</span>.getSeconds();<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">date</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">date</span>.format());<br></code></pre></td></tr></table></figure><h4 id="Boolean："><a href="#Boolean：" class="headerlink" title="Boolean："></a>Boolean：</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">//不用</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-literal">true</span>;<span class="hljs-comment">//推荐的使用</span><br></code></pre></td></tr></table></figure><h4 id="Date："><a href="#Date：" class="headerlink" title="Date："></a>Date：</h4><table><thead><tr><th>方法</th><th>描述</th><th>FF</th><th>IE</th></tr></thead><tbody><tr><td>Date()</td><td>（礼拜年月日时分秒）返回当日的日期和时间。</td><td>1</td><td>3</td></tr><tr><td>getDate()</td><td>（日）从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td><td>1</td><td>3</td></tr><tr><td>getDay()</td><td>（礼拜）从 Date 对象返回一周中的某一天 (0 ~ 6)。</td><td>1</td><td>3</td></tr><tr><td>getMonth()</td><td>（月）从 Date 对象返回月份 (0 ~ 11)。</td><td>1</td><td>3</td></tr><tr><td>getFullYear()</td><td>（年）从 Date 对象以四位数字返回年份。</td><td>1</td><td>4</td></tr><tr><td>getYear()</td><td>（年）请使用 getFullYear() 方法代替。</td><td>1</td><td>3</td></tr><tr><td>getHours()</td><td>（时）返回 Date 对象的小时 (0 ~ 23)。</td><td>1</td><td>3</td></tr><tr><td>getMinutes()</td><td>（分）返回 Date 对象的分钟 (0 ~ 59)。</td><td>1</td><td>3</td></tr><tr><td>getSeconds()</td><td>（秒）返回 Date 对象的秒数 (0 ~ 59)。</td><td>1</td><td>3</td></tr><tr><td>getMilliseconds()</td><td>（毫秒）返回 Date 对象的毫秒(0 ~ 999)。</td><td>1</td><td>4</td></tr><tr><td>getTime()</td><td>返回（Unix纪元时间）1970 年 1 月 1 日至今的毫秒数。</td><td>1</td><td>3</td></tr><tr><td>parse()</td><td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td><td>1</td><td>3</td></tr><tr><td>setDate()</td><td>设置 Date 对象中月的某一天 (1 ~ 31)。</td><td>1</td><td>3</td></tr><tr><td>setMonth()</td><td>设置 Date 对象中月份 (0 ~ 11)。</td><td>1</td><td>3</td></tr><tr><td>setFullYear()</td><td>设置 Date 对象中的年份（四位数字）。</td><td>1</td><td>4</td></tr><tr><td>setYear()</td><td>请使用 setFullYear() 方法代替。</td><td>1</td><td>3</td></tr><tr><td>setHours()</td><td>设置 Date 对象中的小时 (0 ~ 23)。</td><td>1</td><td>3</td></tr><tr><td>setMinutes()</td><td>设置 Date 对象中的分钟 (0 ~ 59)。</td><td>1</td><td>3</td></tr><tr><td>setSeconds()</td><td>设置 Date 对象中的秒钟 (0 ~ 59)。</td><td>1</td><td>3</td></tr><tr><td>setMilliseconds()</td><td>设置 Date 对象中的毫秒 (0 ~ 999)。</td><td>1</td><td>4</td></tr><tr><td>setTime()</td><td>以毫秒设置 Date 对象。</td><td>1</td><td>3</td></tr></tbody></table><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">var</span> myDate = new <span class="hljs-built_in">Date</span>();<br>console.debug(myDate);<br><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">year</span> = myDate.getFullYear(); //年<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">month</span> = myDate.getMonth() + <span class="hljs-number">1</span>;//月 <span class="hljs-number">0</span>-<span class="hljs-number">11</span><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">date</span> = myDate.getDate();//日<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">day</span> = myDate.getDay() + <span class="hljs-number">1</span>;//礼拜 <span class="hljs-number">0</span>-<span class="hljs-number">6</span><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">hour</span> = myDate.getHours(); //时<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">minute</span> = myDate.getMinutes();//分<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">second</span> = myDate.getSeconds();//毫秒<br><span class="hljs-built_in">var</span> milliseconds = mydate.getMilliseconds();<br>console.debug(<span class="hljs-built_in">year</span>+<span class="hljs-string">&quot;-&quot;</span> +<span class="hljs-built_in">month</span> +<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-built_in">date</span>+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">hour</span>+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">minute</span>+<span class="hljs-string">&quot;:&quot;</span>+<span class="hljs-built_in">second</span>);<br></code></pre></td></tr></table></figure><h4 id="Math："><a href="#Math：" class="headerlink" title="Math："></a>Math：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//ceil 向上舍入(下面的值都是6)</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">5.1</span>));<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">5.01</span>));<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">5.8</span>));<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br><br><span class="hljs-comment">//ceil 向下舍入(下面的值都是5)</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">5.1</span>));<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">5.01</span>));<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">5.8</span>));<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br><br><span class="hljs-comment">//把数四舍五入为最接近的整数</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.round(<span class="hljs-number">5.1</span>));  <span class="hljs-comment">//5</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.round(<span class="hljs-number">5.01</span>)); <span class="hljs-comment">//5</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.round(<span class="hljs-number">5.8</span>));  <span class="hljs-comment">//6</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br><br><span class="hljs-comment">//得到最大的值</span><br><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Math</span>.max(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>));  <span class="hljs-comment">//7</span><br><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Math</span>.max(-<span class="hljs-number">3</span>,<span class="hljs-number">5</span>));  <span class="hljs-comment">//5</span><br><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Math</span>.max(-<span class="hljs-number">3</span>,-<span class="hljs-number">5</span>));  <span class="hljs-comment">//-3</span><br><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Math</span>.max(<span class="hljs-number">7.25</span>,<span class="hljs-number">7.30</span>)); <span class="hljs-comment">//7.3</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.max(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">56</span>,-<span class="hljs-number">4</span>)); <span class="hljs-comment">//56</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br><br><span class="hljs-comment">//得到最小的值</span><br><span class="hljs-built_in">Math</span>.min(<span class="hljs-number">4</span>,<span class="hljs-number">56</span>); <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br><br><span class="hljs-comment">//产生随机数 0.0 ~ 1.0 之间的一个伪随机数。</span><br><span class="hljs-built_in">Math</span>.random();<br></code></pre></td></tr></table></figure><p>Number：</p><blockquote><p>MIN_VALVE                      可表示的最小值</p><p>NaN                                  非数值</p><p>NEGATIVE_INFINITY        负无穷大，溢出时返回该值</p><p>POSITIVE_INFINITY          正无穷大，溢出时返回改制</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> myNumber1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">var</span> myNumber2=<span class="hljs-number">123</span>;<span class="hljs-comment">//推荐</span><br></code></pre></td></tr></table></figure><p>String：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;abcde&quot;</span>;<br>console.debug(<span class="hljs-built_in">str</span>.length);<span class="hljs-comment">//5</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * substr(begin,length)</span><br><span class="hljs-comment"> * substr:截取字符串(返回这截取后的字符串，原来的不变)</span><br><span class="hljs-comment"> *  第一个参数：从哪开始(从0开始算)</span><br><span class="hljs-comment"> *  第二个参数：截取多少个(如果没有这个参数，就全部截取)</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;Hello world!&quot;</span>;<br>console.debug(<span class="hljs-built_in">str</span>.substr(<span class="hljs-number">3</span>));  <span class="hljs-comment">// lo world!</span><br>console.debug(<span class="hljs-built_in">str</span>.substr(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//lo</span><br><br>substring(begin,end)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * substring:截取字符串(返回这截取后的字符串，原来的不变)</span><br><span class="hljs-comment"> *  第一个参数：从哪开始(从0开始算)</span><br><span class="hljs-comment"> *  第二个参数：从哪结束(如果没有这个参数，就使用截取)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;Hello world!&quot;</span>;<br>console.debug(<span class="hljs-built_in">str</span>.substring(<span class="hljs-number">3</span>));  <span class="hljs-comment">// lo world!</span><br>console.debug(<span class="hljs-built_in">str</span>.substring(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)); <span class="hljs-comment">//el</span><br><br><span class="hljs-comment">//concat(str1,str2)</span><br><span class="hljs-built_in">var</span> str1 = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">var</span> str2 = <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-built_in">var</span> str3 = str1.concat(str2);<br>console.debug(str3);<span class="hljs-comment">//helloworld</span><br><br><span class="hljs-comment">//split(&quot;分隔符&quot;)</span><br><span class="hljs-built_in">var</span> str1 = <span class="hljs-string">&quot;张三,李四,后帝&quot;</span>;<br>console.debug(str1.split(<span class="hljs-string">&quot;,&quot;</span>));<span class="hljs-comment">// [&quot;张三&quot;, &quot;李四&quot;, &quot;后帝&quot;]</span><br><br><span class="hljs-comment">//charCodeAt(index)返回指定位置的unicode码</span><br><span class="hljs-built_in">var</span> str1 = <span class="hljs-string">&quot;abcde&quot;</span>;<br>console.debug(str1.charCodeAt(<span class="hljs-number">0</span>));<span class="hljs-comment">//取到对应索引处的unicode码</span><br></code></pre></td></tr></table></figure><p>Global（全局对象）</p><h4 id="Array："><a href="#Array：" class="headerlink" title="Array："></a>Array：</h4><h5 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h5><p>注意：JS同一个数组里面，什么都可以装，没有数据类型限制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一种声明方法</span><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;大娃&quot;</span>;<br>arr1[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;二娃&quot;</span>;<br>arr1[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;三娃&quot;</span>;<br>arr1[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;四娃&quot;</span>;<br>arr1[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;葫芦妹&quot;</span>;<br><span class="hljs-built_in">console</span>.debug(arr1);<br><br><span class="hljs-comment">//第二种声明方法(先确定数组的长度)</span><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">5</span>);<br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;大力娃&quot;</span>;<br>arr2[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;葫芦妹&quot;</span>;<br><span class="hljs-built_in">console</span>.debug(arr2);<br><br><span class="hljs-comment">//第三种声明方法(直接在里要先加上数据)</span><br><span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;大娃&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;三娃&quot;</span>,<span class="hljs-number">8</span>);<br><span class="hljs-built_in">console</span>.debug(arr3);<br><br><span class="hljs-comment">//第四种声明方法(建议)</span><br><span class="hljs-keyword">var</span> arr4 = [<span class="hljs-string">&quot;大娃&quot;</span>,<span class="hljs-string">&quot;二娃&quot;</span>,<span class="hljs-string">&quot;三娃&quot;</span>,<span class="hljs-string">&quot;七娃&quot;</span>];<br><span class="hljs-built_in">console</span>.debug(arr4);<br></code></pre></td></tr></table></figure><h5 id="数组的类与方法"><a href="#数组的类与方法" class="headerlink" title="数组的类与方法"></a>数组的类与方法</h5><p>var arr = new Aarry();通过构造方法 创建对象;</p><p>length : 拿到数组的长度;</p><p>join(“$”) : 将数组转化成字符串;   </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">var arr = [<span class="hljs-string">&quot;大娃&quot;</span>,<span class="hljs-string">&quot;二娃&quot;</span>,<span class="hljs-string">&quot;三娃&quot;</span>,<span class="hljs-string">&quot;七娃&quot;</span>];<br>console.debug(arr.join(<span class="hljs-string">&quot;$&quot;</span>));  <span class="hljs-regexp">//</span>大娃<span class="hljs-variable">$二</span>娃<span class="hljs-variable">$三</span>娃<span class="hljs-variable">$七</span>娃(默认用，隔开)<br></code></pre></td></tr></table></figure><p>splice() 方法用于插入、删除或替换数组的元素;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">var arr = [<span class="hljs-string">&quot;大娃&quot;</span>,<span class="hljs-string">&quot;二娃&quot;</span>,<span class="hljs-string">&quot;三娃&quot;</span>,<span class="hljs-string">&quot;四娃&quot;</span>,<span class="hljs-string">&quot;七娃&quot;</span>];<br>/**<br> *splice()参数介绍<br> * <span class="hljs-number">1</span>.start:从哪个位置开始(必需)<br> * <span class="hljs-number">2</span>.deletecount:删除几个元素(必需)<br> * <span class="hljs-number">3</span>.items：添加的元素<br> */<br><span class="hljs-regexp">//</span>arr.splice(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>); <span class="hljs-regexp">//</span>删除了四娃<br><span class="hljs-regexp">//</span>arr.splice(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;五娃&quot;</span>,<span class="hljs-string">&quot;六娃&quot;</span>); <span class="hljs-regexp">//</span>添加<br>arr.splice(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;水娃&quot;</span>); <span class="hljs-regexp">//</span>修改<br>console.debug(arr);<br></code></pre></td></tr></table></figure><h5 id="for…in…：Array数组遍历"><a href="#for…in…：Array数组遍历" class="headerlink" title="for…in…：Array数组遍历"></a>for…in…：Array数组遍历</h5><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs inform7">var <span class="hljs-keyword">person</span> = &#123;&#125;;<br><span class="hljs-keyword">person</span>.name = <span class="hljs-string">&quot;张山&quot;</span>;<br><span class="hljs-keyword">person</span>.age = 34;<br><span class="hljs-keyword">person</span>.<span class="hljs-keyword">say</span> = function()&#123;&#125;;<br><span class="hljs-keyword">person</span><span class="hljs-comment">[&quot;sex&quot;]</span> = &#x27;男&#x27;;<br>// <span class="hljs-keyword">person</span>.name 与 <span class="hljs-keyword">person</span><span class="hljs-comment">[&quot;name&quot;]</span> 是一回事<br><br>console.debug(<span class="hljs-keyword">person</span>);<br><br>//key的值是属性<br>for(var key in <span class="hljs-keyword">person</span>)&#123;<br>console.debug(key);<br>console.debug(<span class="hljs-keyword">person</span><span class="hljs-comment">[key]</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200104221037046.png" alt="image-20200104221037046"></p><h3 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h3><p>BOM是browser object model的缩写，简称浏览器对象模型，这个BOM有如下内容:</p><ul><li>使用面向对象的思想来抽象浏览器相关组件</li><li>打开一个window代表一个窗口<ul><li>​    窗口里面使用location表示地址栏</li><li>​    窗口的历史记录使用history来表示</li><li>​    浏览器的信息使用navigator来表示</li><li>​    窗口里面的内容使用document来表示</li></ul></li><li>窗口中的框架使用frames来表示</li></ul><p>①、document和window有没有关系？</p><p>有关系，应该先找到window，在能找到document，而window是顶级对象，可以默认不写</p><p>代码如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">document</span>);<span class="hljs-regexp">//</span>可以拿到<span class="hljs-built_in">document</span>对象<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">window</span>.<span class="hljs-built_in">document</span>);<span class="hljs-regexp">//</span>和前面一样，<span class="hljs-built_in">window</span>是顶级对象，默认不写<br></code></pre></td></tr></table></figure><p>②、链接对象 document.links</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">window</span>.<span class="hljs-built_in">document</span>.links);<span class="hljs-regexp">//</span>链接对象<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">window</span>.<span class="hljs-built_in">document</span>.links[<span class="hljs-number">0</span>]);<span class="hljs-regexp">//</span>取到第一个对象<br></code></pre></td></tr></table></figure><p>代码如下：</p><p><img src="/2019/12/10/JavaScript/image-20200104223935479.png" alt="image-20200104223935479"></p><p>③、锚记链接对象 document.anchors</p><p>代码如下：</p><p><img src="/2019/12/10/JavaScript/image-20200104224427016.png" alt="image-20200104224427016"></p><p>④表单对象 document.forms</p><p>代码如下：</p><p><img src="/2019/12/10/JavaScript/image-20200104224807906.png" alt="image-20200104224807906"></p><h3 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h3><h4 id="1、消息机制"><a href="#1、消息机制" class="headerlink" title="1、消息机制"></a>1、消息机制</h4><p>JavaScript三大消息交互机制：</p><p>①alert(‘信息’)：消息框</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">alert(<span class="hljs-string">&quot;Hello！&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>②prompt(‘提示信息’,默认值)： 显示可提示的用户输入框，让用户输入</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> inputText = prompt(<span class="hljs-string">&quot;请输入你的名字&quot;</span>,<span class="hljs-string">&quot;如:孙悟空&quot;</span>);<br><span class="hljs-built_in">Console</span>.debug(inputText);<br></code></pre></td></tr></table></figure><p>③confirm( ) ： 确认框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> flag = <span class="hljs-built_in">window</span>.confirm(<span class="hljs-string">&quot;你确定要删除数据&quot;</span>);<br><span class="hljs-built_in">console</span>.debug(flag);<br>&lt;a href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> onclick=<span class="hljs-string">&quot;javascript: return confirm(&#x27;亲,你确定删除吗?&#x27;)&quot;</span>&gt;删除&lt;/a&gt;<br></code></pre></td></tr></table></figure><h4 id="2、打开与关闭窗口"><a href="#2、打开与关闭窗口" class="headerlink" title="2、打开与关闭窗口"></a>2、打开与关闭窗口</h4><p>window.open()方法：打开一个新窗口</p><hr><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">open</span>(&quot;http://kongwei-liao.cn/&quot;);<br></code></pre></td></tr></table></figure><p>调用示例：</p><p><img src="/2019/12/10/JavaScript/image-20200105102501714.png" alt="image-20200105102501714"></p><hr><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">open</span>(&quot;http://kongwei-liao.cn/&quot;, &quot;_blank&quot;,&quot;&quot;);<br></code></pre></td></tr></table></figure><p>第一个参数：要打开的网页url，可以是相对路径;</p><p>第二个参数：打开窗口的目标，除了自定义名称以外，还包括 <strong>_self</strong>, <strong>_parent</strong>, <strong>_top</strong>以及 <strong>_blank</strong>几个特殊值，默认值是<strong>_blank</strong>;</p><p>第三个参数：是一个使用,组成的字符串，用于描述打开窗口的特性，比如大小、是否有工具栏等。</p><p>调用示例：</p><p><img src="/2019/12/10/JavaScript/image-20200105103522659.png" alt="image-20200105103522659"></p><p><img src="/2019/12/10/JavaScript/image-20200105103704575.png" alt="image-20200105103704575"></p><hr><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">window.open<span class="hljs-params">(&quot;http://www.baidu.com&quot;,&quot;_blank&quot;,&quot;<span class="hljs-attr">toolbar</span>=yes, <span class="hljs-attr">location</span>=yes, <span class="hljs-attr">directories</span>=no, <span class="hljs-attr">status</span>=no, <span class="hljs-attr">menubar</span>=yes, <span class="hljs-attr">scrollbars</span>=yes, <span class="hljs-attr">resizable</span>=no, <span class="hljs-attr">copyhistory</span>=yes, <span class="hljs-attr">width</span>=400, <span class="hljs-attr">height</span>=400&quot;)</span>;<br></code></pre></td></tr></table></figure><p>①、可以修改参数 toolbar / width /height的值：</p><p>调用示例：</p><p><img src="/2019/12/10/JavaScript/image-20200105104308765.png" alt="image-20200105104308765"></p><p>②、把参数全部改成 no ，没有回退功能，无法调整窗口大小，没有滚动条：‘</p><p>注意：部分浏览器可能并不严格按照参数的设置执行，如Chrome等。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">window.open<span class="hljs-params">(&quot;http://www.baidu.com&quot;,&quot;_blank&quot;,&quot;<span class="hljs-attr">toolbar</span>=no, <span class="hljs-attr">location</span>=no, <span class="hljs-attr">directories</span>=no, <span class="hljs-attr">status</span>=no,<span class="hljs-attr">menubar</span>=no, <span class="hljs-attr">scrollbars</span>=no, <span class="hljs-attr">resizable</span>=no, <span class="hljs-attr">copyhistory</span>=no, <span class="hljs-attr">width</span>=400, <span class="hljs-attr">height</span>=400&quot;)</span>;<br></code></pre></td></tr></table></figure><p>调用示例：</p><p><img src="/2019/12/10/JavaScript/image-20200105104858431.png" alt="image-20200105104858431"></p><h4 id="3、窗口大小与位置（了解）"><a href="#3、窗口大小与位置（了解）" class="headerlink" title="3、窗口大小与位置（了解）"></a>3、窗口大小与位置（了解）</h4><p>只有IE支持，用处不大仅作了解内容</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">move<span class="hljs-constructor">By(<span class="hljs-params">dx</span>, <span class="hljs-params">dy</span>)</span>;<span class="hljs-comment">//移动偏移量</span><br>move<span class="hljs-constructor">To(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>)</span>;<span class="hljs-comment">//移动到指定座标</span><br>resize<span class="hljs-constructor">By(<span class="hljs-params">dw</span>, <span class="hljs-params">dh</span>)</span>;<span class="hljs-comment">//窗口大小改变</span><br>resize<span class="hljs-constructor">To(<span class="hljs-params">w</span>, <span class="hljs-params">h</span>)</span>;<span class="hljs-comment">//窗口大小改变</span><br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;body&gt;</span><br><span class="hljs-section">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="hljs-attribute">window</span>.moveBy(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);//往右移<span class="hljs-number">10</span>个像素，往下移<span class="hljs-number">20</span>个像素<br><span class="hljs-attribute">window</span>.resizeTo(<span class="hljs-number">800</span>, <span class="hljs-number">500</span>);//把窗口大小变成宽<span class="hljs-number">150</span>，高<span class="hljs-number">300</span>像素<br><span class="hljs-attribute">window</span>.resizeBy(<span class="hljs-number">150</span>, <span class="hljs-number">0</span>);//改变窗口的宽变为<span class="hljs-number">150</span>，高度不变<br><span class="hljs-attribute">window</span>.moveTo(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>);//称到屏幕左上角，屏幕坐标 (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-attribute">window</span>.open(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>,<span class="hljs-string">&quot;_blank&quot;</span>,<span class="hljs-string">&quot;toolbar=no, location=no, directories=no, status=no,menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=400, height=400&quot;</span>);<br><span class="hljs-section">&lt;/script&gt;</span><br><span class="hljs-section">&lt;/body&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105110159145.png" alt="image-20200105110159145"></p><p>IE浏览器获取窗口坐标：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">screenLeft </span>-获得窗口所在X坐标值<br><span class="hljs-keyword">screenTop </span>-获得窗口Y坐标值<br></code></pre></td></tr></table></figure><p>Mozilla等其它浏览器获取窗口坐标：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">screenX </span>-获得窗口所在X坐标值<br><span class="hljs-keyword">screenY </span>-获得窗口Y坐标值<br></code></pre></td></tr></table></figure><p>//兼容浏览器最佳方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">window</span>.screenX || <span class="hljs-built_in">window</span>.screenLeft;<br><span class="hljs-keyword">var</span> y = <span class="hljs-built_in">window</span>.screenY || <span class="hljs-built_in">window</span>.screenTop;<br>alert(<span class="hljs-string">&quot;X坐标=&quot;</span> + x + <span class="hljs-string">&quot;, Y坐标=&quot;</span> + y);<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105110538770.png" alt="image-20200105110538770"></p><h4 id="4、history历史对象（了解）"><a href="#4、history历史对象（了解）" class="headerlink" title="4、history历史对象（了解）"></a>4、history历史对象（了解）</h4><p>①、history.back()函数，后跳;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:window.history.back()&quot;</span>&gt;</span>向后跳<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运用场景：</p><p><img src="/2019/12/10/JavaScript/clip_image010.png"></p><p>②、history.forward()函数，前跳;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:window.history.forward()&quot;</span>&gt;</span>向前跳<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/hucnO3g2Ks.gif" alt="gif"></p><p>③、history.go(index)函数，在浏览器历史记录中跳转，正数为前跳，负数为后跳</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">history.go(<span class="hljs-number">1</span>);<span class="hljs-regexp">//</span>向前跳一个页面，go(<span class="hljs-number">2</span>)向前跳两个页面<br>history.go(-<span class="hljs-number">1</span>);<span class="hljs-regexp">//</span>向后跳一个页面<br></code></pre></td></tr></table></figure><h4 id="5、location位置对象"><a href="#5、location位置对象" class="headerlink" title="5、location位置对象"></a>5、location位置对象</h4><p>window对象的location属性，保护了该窗口所装载文档的地址:location包含的常用属性:</p><ol><li><p>hostname: 文档所在地址的主机名(现在看不到，是静态页面，如果在服务器上运行，就可以看到)</p></li><li><p>href: 文档所在地址的URL地址(使用最多)</p></li><li><p>host: 文档所在地址的主机地址(如果在服务器上运行，就可以看到)</p></li><li><p>port: 文档所在地址的服务端端口(如果在服务器上运行，就可以看到)</p></li><li><p>pathname: 文档所在地址的文件地址</p></li><li><p>protocol: 装载该文档使用的协议</p></li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> <span class="hljs-keyword">loc</span> = <span class="hljs-keyword">window</span>.location;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> name <span class="hljs-keyword">in</span> <span class="hljs-keyword">loc</span>)&#123;<br>  console.debug(name,<span class="hljs-keyword">loc</span>[name]);<span class="hljs-comment">//查看对象信息(了解内容)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105114339798.png" alt="image-20200105114339798"></p><p>//跳转到某一个页面</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>JS代码<br><span class="hljs-keyword">function</span> jump()&#123;<br>window.location.href = <span class="hljs-string">&quot;www.baidu.com&quot;</span>; <br>&#125;<br><span class="hljs-regexp">//</span>HTML代码<br>&lt;button onclick=<span class="hljs-string">&quot;jump()&quot;</span>&gt;跳转到百度&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/NMlmArjNdm.gif" alt="as"></p><h4 id="6、navigator浏览器的信息对象（了解）"><a href="#6、navigator浏览器的信息对象（了解）" class="headerlink" title="6、navigator浏览器的信息对象（了解）"></a>6、navigator浏览器的信息对象（了解）</h4><p>navigator浏览器的信息对象，会拿到浏览器的一些信息，如下</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">var</span> <span class="hljs-built_in">key</span> <span class="hljs-keyword">in</span> navigator)&#123;<br>console.debug(<span class="hljs-built_in">key</span>.navigator[<span class="hljs-built_in">key</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>appCodeName</td><td>产品名称</td></tr><tr><td>appName</td><td>应用名称</td></tr><tr><td>appVersion</td><td>版本号</td></tr><tr><td>cookieEnabled</td><td>是否允许使用cookie</td></tr><tr><td>language</td><td>语言</td></tr><tr><td>oscpu</td><td>操作系统名称</td></tr><tr><td>platform</td><td>操作系统平台</td></tr><tr><td>product</td><td>产品代号或名称，比如Gecko</td></tr><tr><td>productSub</td><td>产品发布日期20100701</td></tr><tr><td></td><td>客户端详细信息</td></tr></tbody></table><p>比如，userAgent：Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36</p><p><img src="/2019/12/10/JavaScript/image-20200105115750159.png" alt="image-20200105115750159"></p><h4 id="7、documet对象"><a href="#7、documet对象" class="headerlink" title="7、documet对象"></a>7、documet对象</h4><p><img src="/2019/12/10/JavaScript/clip_image007.png" alt="img"></p><p>document对象刚才上面我们学习了几个 ：</p><ul><li><p>document.forms 表单对象 </p></li><li><p>document.links 连接对象</p></li><li><p>document.anchors描点对象</p></li><li><p>document.images 图片对象</p></li></ul><p>除了上面这些，还有其他属性，我们需要了解一下：</p><p>①、document.title：显示或修改页面标题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ZhanSan<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.title=<span class="hljs-string">&quot;Kongwei_Liao&quot;</span>;<span class="hljs-comment">//修改页面标题</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105164259759.png" alt="image-20200105164259759"></p><p>②、document.bgColor：改变页面背景色 </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">document.bgColor</span>=<span class="hljs-string">&quot;darkcyan&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105164916091.png" alt="image-20200105164916091"></p><p>③、document.write()：显示到页面上</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">document.write(<span class="hljs-string">&quot;Kongwei_Liao&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105165805894.png" alt="image-20200105165805894"></p><p>document.write()：原文写入HTML文档，即写入HTML标签亦可。如下面&lt;br/&gt;换行标签：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">document.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;1*1&lt;br/&gt;&quot;</span>) document.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;1*1&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="定时器-掌握"><a href="#定时器-掌握" class="headerlink" title="定时器(掌握)"></a>定时器(掌握)</h3><p>定时器在js是很重要的功能，js里面很多动画效果都离不开定时器；</p><p>定时器分两种：</p><h4 id="1、第一种，一次性定时器"><a href="#1、第一种，一次性定时器" class="headerlink" title="1、第一种，一次性定时器"></a>1、第一种，一次性定时器</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setTimeout</span><span class="hljs-params">()</span></span>:设置定时器，到了多少时间后执行(只执行一次)--定时炸弹<br><span class="hljs-function"><span class="hljs-title">clearTimeout</span><span class="hljs-params">()</span></span>:取消定时器<br></code></pre></td></tr></table></figure><p>//设置定时器</p><p><strong>第一种写法:5秒钟调整到一个页面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//5秒钟跳转到百度</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>&#125;,<span class="hljs-number">5000</span>);<br><br><span class="hljs-comment">//清除定时器</span><br><span class="hljs-built_in">clearTimeout</span>(timer);<br></code></pre></td></tr></table></figure><p><strong>第二种写法:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(jump,<span class="hljs-number">5000</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jump</span>(<span class="hljs-params"></span>)</span>&#123;<br>  location.href = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/o2u6xl2deg.gif"></p><p><img src="/2019/12/10/JavaScript/qPOt4QLAqY.gif"></p><h4 id="2、第二种，周期性定时器"><a href="#2、第二种，周期性定时器" class="headerlink" title="2、第二种，周期性定时器"></a>2、第二种，周期性定时器</h4><p>setInterval()：周期性定时器，每隔多长时间执行(不断执行)</p><p>clearInterval() ：取消定时器</p><p>//每隔多长时间执行(不断执行)            //第一个参数：执行的方法            //第二参数：时间(毫秒)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timerSpan&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: burlywood;&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>秒钟后跳转到另外一个页面<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;定时器清除&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clearTime()&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/HelloJS.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">timeVal</span>=5;<br>var <span class="hljs-attribute">timer</span>=setInterval(function()&#123;<br><span class="hljs-attribute">timeVal</span>=timeVal-1;<br><span class="hljs-keyword">if</span>(timeVal%<span class="hljs-attribute">5</span>==0)&#123;<br>window.open(<span class="hljs-string">&quot;http://www.baidu.com/&quot;</span>);<br><span class="hljs-attribute">timeVal</span>=5;<br>document.getElementById(<span class="hljs-string">&quot;timerSpan&quot;</span>).<span class="hljs-attribute">innerHTML</span>=timeVal;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>document.getElementById(<span class="hljs-string">&quot;timerSpan&quot;</span>).<span class="hljs-attribute">innerHTML</span>=timeVal;<br>&#125;<br>&#125;,1000);<br>function clearTime()&#123;<br>clearInterval(timer);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/pdjXclhnT9.gif"></p><h3 id="DOM文档对象模型"><a href="#DOM文档对象模型" class="headerlink" title="DOM文档对象模型"></a>DOM文档对象模型</h3><p>DOM(Document Object Model)：文档对象模型。</p><p>直白的讲就是Java程序解析结构化文档的时候，在内存中生成的包含当前结构化文档所有内容的一个对象模型。所以说DOM并不是一门技术，而是一门思想，或者更明确的讲是一门访问结构化文档的一种方式。</p><p>HTML就是一个文档，我们可以通过Java语言去解析它，Java是面向对象的语言，可以把HTML里面的每一个元素解析成一个一个的对象；因为只要封装成对象，在程序里面就可以拿到这些内容;</p><ul><li>D   Document  文档(HTML文档)</li><li>O  Object  对象(Java对象)</li><li>M  Model  模型（读取文档元素，封装成个个对象，这每个对象就相当于该文档的一个模型）</li></ul><p>直白的讲，一个实体文件要在内存中形成这么一个对象，这中间肯定需要一些代码的转换操作，而在此我们称呼为<code>DOM解析器</code>。DOM解析器的作用就是完成<code>结构化文档</code>和<code>DOM树之间的转换关系</code>。</p><p><img src="/2019/12/10/JavaScript/image-20200105191450615.png" alt="image-20200105191450615"></p><h4 id="1、结点、元素和解析"><a href="#1、结点、元素和解析" class="headerlink" title="1、结点、元素和解析"></a>1、结点、元素和解析</h4><p>1.节点</p><ul><li>由结构图中我们可以看到，整个文档就是一个文档节点。 <strong>Document</strong></li><li>而每一个HTML标签都是一个元素节点。 Element</li><li>标签中的文字则是文本节点。 Text</li><li>标签的属性是属性节点。 Attribute</li><li>一切都是节点…… Node</li></ul><p>元素一定是节点，但节点不一定是元素，通过元素可以很方便的得到属性集合而使用Node则需要去遍历</p><p>注意：最新的规范中属性节点已被移除，不再作为节点出现，具体参考《MDN_NodeType》</p><p>2.解析</p><p>XML解析：我们以前解析xml的时候，第一步拿到document对象。</p><p>HTML解析：它构建了一个document对象，并且让它被window对象的属性引用所指向，html已经帮我们封装好了，我直接使用就是。—-window.document(简写就是document)</p><p>整个文档就是Document，整个文档都是节点，文档中的标签就是元素节点（Element），标签的内容就是文本节点（Text），标签的属性就是属性节点（Attribute）<strong>。</strong>Dom的核心就是操作这三种节点，以及元素节点之间层次关系。</p><h4 id="2、Document对象"><a href="#2、Document对象" class="headerlink" title="2、Document对象"></a>2、Document对象</h4><p>每个载入浏览器的HTML文档都会成为Document对象，使用Document对象使我们可以从脚本中对HTML页面内的所有元素进行访问</p><p>API：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getElementById</span><span class="hljs-params">()</span></span><span class="hljs-comment">//通过标签元素的ID获取到标签对象</span><br><span class="hljs-function"><span class="hljs-title">getElementsByName</span><span class="hljs-params">()</span></span><span class="hljs-comment">//通过标签元素的name属性获取到标签对象，返回的是数组</span><br><span class="hljs-function"><span class="hljs-title">getElementsByTagName</span><span class="hljs-params">()</span></span><span class="hljs-comment">//通过标签名称获取到标签对象，返回的是数组</span><br><br>属性：<br>document<span class="hljs-selector-class">.body</span><span class="hljs-comment">//获取document标签的body元素</span><br>document<span class="hljs-selector-class">.body</span><span class="hljs-selector-class">.clientWidth</span><span class="hljs-comment">//获取页面的宽度</span><br>document<span class="hljs-selector-class">.body</span><span class="hljs-selector-class">.heightWidth</span><span class="hljs-comment">//获取body元素的高度，页面内容决定高度</span><br>document<span class="hljs-selector-class">.documentElement</span><span class="hljs-comment">//获取文档元素</span><br>document<span class="hljs-selector-class">.documentElement</span>.clientWidth<span class="hljs-comment">//获取文档元素的宽度</span><br>document<span class="hljs-selector-class">.documentElement</span>.heightWidth<span class="hljs-comment">//获取文档元素的高度，当前页面高度</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105202324290.png" alt="image-20200105202324290"></p><p><img src="/2019/12/10/JavaScript/image-20200105202219644.png" alt="image-20200105202219644"></p><p><img src="/2019/12/10/JavaScript/image-20200105202253052.png" alt="image-20200105202253052"></p><h4 id="3、元素节点"><a href="#3、元素节点" class="headerlink" title="3、元素节点"></a>3、元素节点</h4><p>HTML DOM Element对象即节点，Element是对Node扩展</p><p>API：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">hasChildNodes()<span class="hljs-regexp">//</span>当childNodes包含一个或多个节点时，返回Boolean<br>insertBefore(newnode, refnode)<span class="hljs-regexp">//</span>在childNodes中的refnode之前插入newnode，返回Node<br>createElement()<span class="hljs-regexp">//</span>创建新的元素<br><br>属性：<br>parentNode<span class="hljs-regexp">//</span>父节点，返回Node<br>firstChild<span class="hljs-regexp">//</span>列表中的第一个节点，返回Node<br>lastChild<span class="hljs-regexp">//</span>列表中的最后一个节点，返回Node<br>childNodes<span class="hljs-regexp">//</span>所有子节点的列表，返回NodeList<br>previousSibling<span class="hljs-regexp">//</span>上一个兄弟节点，返回Node<br>nextSibling<span class="hljs-regexp">//</span>下一个兄弟节点，返回Node<br>nodeName<span class="hljs-regexp">//</span>节点名称，返回String<br>nodeValue<span class="hljs-regexp">//</span>节点值，返回String<br>nodeType<span class="hljs-regexp">//</span>节点类型，返回Number<br></code></pre></td></tr></table></figure><p>代码实例：</p><p>需求1：节点层级关系操作，节点中空格和换行被认为是文本元素；</p><p>需求2：获取节点信息；</p><p><img src="/2019/12/10/JavaScript/image-20200105204018249.png" alt="image-20200105204018249"></p><h4 id="4、属性结点"><a href="#4、属性结点" class="headerlink" title="4、属性结点"></a>4、属性结点</h4><p>API：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getAttributeNode</span><span class="hljs-params">()</span></span><span class="hljs-comment">//获取指定名称的属性</span><br><span class="hljs-function"><span class="hljs-title">setAttribute</span><span class="hljs-params">()</span></span><span class="hljs-comment">//设置属性</span><br><span class="hljs-function"><span class="hljs-title">getAttribute</span><span class="hljs-params">()</span></span><span class="hljs-comment">//获取属性值</span><br>attributes<span class="hljs-comment">//一个元素的属性对象，返回NamedNodeMap</span><br></code></pre></td></tr></table></figure><p>代码示例：</p><p>需求1：获取属性节点信息</p><p>需求2：获取属性值、添加或者修改属性值，可以通过：对象.value、对象[属性名]、getAttribute或者setAttribute</p><p>需求3：自定义属性</p><p>需求4：添加其他样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span>老子<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d2&quot;</span>&gt;</span>老大<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d3&quot;</span>&gt;</span>老大家的<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d22&quot;</span>&gt;</span>老二<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d31&quot;</span>&gt;</span>老二的老大<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d32&quot;</span>&gt;</span>老二的老小<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aa&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aa&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">//需求1：获取属性结点信息。getAttributeNode获取属性节点</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn1&quot;</span>).getAttributeNode(<span class="hljs-string">&quot;id&quot;</span>).nodeName); <span class="hljs-comment">//id</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn1&quot;</span>).getAttributeNode(<span class="hljs-string">&quot;id&quot;</span>).nodeValue); <span class="hljs-comment">//btn1</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn1&quot;</span>).getAttributeNode(<span class="hljs-string">&quot;id&quot;</span>).nodeType); <span class="hljs-comment">//2</span></span><br><br><span class="javascript"><span class="hljs-comment">//需求2：获取属性值、添加或者修改属性值</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn1&quot;</span>);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.value);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn[<span class="hljs-string">&#x27;value&#x27;</span>]);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.getAttribute(<span class="hljs-string">&#x27;value&#x27;</span>));</span><br><span class="javascript"><span class="hljs-comment">//自带属性修改修改</span></span><br><span class="javascript">$btn.value = <span class="hljs-string">&#x27;bb&#x27;</span>;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.value);</span><br><span class="javascript">$btn[<span class="hljs-string">&#x27;value&#x27;</span>] = <span class="hljs-string">&#x27;cc&#x27;</span>;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.value);<span class="hljs-comment">//获取属性</span></span><br><span class="javascript">$btn.setAttribute(<span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;dd&#x27;</span>);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.getAttribute(<span class="hljs-string">&#x27;value&#x27;</span>));</span><br><br><span class="javascript"><span class="hljs-comment">//需求3：自定义属性</span></span><br><span class="javascript">$btn.value1 = <span class="hljs-string">&#x27;ee&#x27;</span>;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.value1);</span><br><span class="javascript">$btn[<span class="hljs-string">&#x27;value1&#x27;</span>]=<span class="hljs-string">&#x27;ff&#x27;</span>;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.value1);</span><br><span class="javascript">$btn.setAttribute(<span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;自定义属性&#x27;</span>);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($btn.getAttribute(<span class="hljs-string">&#x27;value1&#x27;</span>));</span><br><br><span class="javascript"><span class="hljs-comment">//需求4：添加其他样式</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;d1&#x27;</span>).className = <span class="hljs-string">&#x27;className&#x27;</span>; <span class="hljs-comment">//添加样式</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;d1&#x27;</span>).style.backgroundColor = <span class="hljs-string">&#x27;green&#x27;</span>;</span><br><span class="javascript"><span class="hljs-comment">//同样针对readonly...之类的都可以这样操作</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;chk&quot;</span>).checked = <span class="hljs-literal">false</span>; </span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105205937175.png" alt="image-20200105205937175"></p><h4 id="5、文本结点"><a href="#5、文本结点" class="headerlink" title="5、文本结点"></a>5、文本结点</h4><p>API：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">appendChild(<span class="hljs-keyword">node</span><span class="hljs-title">)//将node</span>添加到childNodes的末尾，返回<span class="hljs-keyword">Node</span><span class="hljs-title"></span><br><span class="hljs-title">replaceChild</span>(newnode, oldnode)//将childNodes中的oldnode替换成newnode，返回<span class="hljs-keyword">Node</span><span class="hljs-title"></span><br><span class="hljs-title">removeChild</span>(<span class="hljs-keyword">node</span><span class="hljs-title">)//从childNodes</span>中删除<span class="hljs-keyword">node</span><span class="hljs-title">，返回Node</span><br><br>innerHTML//设置或者获取带有标签的元素<br>innerText//设置或者获取标签中的纯文本<br></code></pre></td></tr></table></figure><p>代码示例：</p><p>需求1：获取文本节点信息</p><p>需求2：针对文本节点的CRUD</p><p>需求3：添加一个新元素</p><p>需求4：替换元素，移除元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span>老子<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d2&quot;</span>&gt;</span>老大<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d3&quot;</span>&gt;</span>老大家的<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d22&quot;</span>&gt;</span>老二<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d31&quot;</span>&gt;</span>老二的老大<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d32&quot;</span>&gt;</span>老二的老小<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aa&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;aa&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">//需求1： 获取文本节点信息</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;d1&quot;</span>).firstChild.nodeName); <span class="hljs-comment">//#text</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;d1&quot;</span>).firstChild.nodeValue); <span class="hljs-comment">//老子</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;d1&quot;</span>).firstChild.nodeType); <span class="hljs-comment">//3</span></span><br><br><span class="javascript"><span class="hljs-comment">//需求2： 针对文本节点的CRUD</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $txtNode = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;d1&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">//1、innerHTML</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($txtNode.innerHTML);</span><br><span class="handlebars"><span class="xml">$txtNode.innerHTML = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;d3&#x27;</span>&gt;</span>修改文本节点<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;;</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($txtNode.innerHTML);</span><br><span class="javascript"><span class="hljs-comment">//2、innerText</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($txtNode.innerText);</span><br><span class="handlebars"><span class="xml">$txtNode.innerText = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;d3&#x27;</span>&gt;</span>修改文本节点<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;;</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug($txtNode.innerText);</span><br><br><span class="javascript"><span class="hljs-comment">//需求3： 添加一个新元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $d1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;d1&#x27;</span>); <span class="hljs-comment">//父节点</span></span><br><span class="javascript"><span class="hljs-comment">//创建新节点并完善新的元素节点中的内容</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $newNode = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="javascript">$newNode.setAttribute(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;d2&quot;</span>)</span><br><span class="javascript">$newNode.innerText = <span class="hljs-string">&#x27;新节点&#x27;</span>;</span><br><span class="javascript">$d1.appendChild($newNode); <span class="hljs-comment">//将新节点添加进父节点中</span></span><br><br><span class="javascript"><span class="hljs-comment">//需求4： 替换元素， 移除元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $d2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;d2&#x27;</span>);</span><br><span class="javascript"><span class="hljs-keyword">var</span> $s1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="javascript">$s1.innerHTML = <span class="hljs-string">&#x27;我是span标签&#x27;</span>;</span><br>$d1.replaceChild($s1,$d2);<br><br><span class="javascript"><span class="hljs-comment">//移除元素</span></span><br>$d1.removeChild($s1);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200105211842944.png" alt="image-20200105211842944"></p><h3 id="Event对象"><a href="#Event对象" class="headerlink" title="Event对象"></a>Event对象</h3><p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p><p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p><p>注册事件通常有三种方式：</p><ol><li>元素上直接注册</li><li>元素.事件名称</li><li>addEventListener和attachEvent</li></ol><p>API</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">onabort<span class="hljs-regexp">//</span>用户终止页面加载。<br>onblur<span class="hljs-regexp">//</span>用户离开对象。失去焦点<br>onchange<span class="hljs-regexp">//</span>用户改变对象的值。<br>onclick<span class="hljs-regexp">//</span>用户点击对象。<br>ondblclick<span class="hljs-regexp">//</span>用户双击对象。<br>onfocus（和onblur相反）<span class="hljs-regexp">//</span>用户激活对象。<br>onkeydown<span class="hljs-regexp">//</span>按下键盘。<br>onkeypress<span class="hljs-regexp">//</span>按压键盘。<br>onkeyup<span class="hljs-regexp">//</span>松开键盘。<br>onload<span class="hljs-regexp">//</span>页面完成加载。注释：在 Netscape 中，当页面加载时会发生该事件。<br>onmousedown<span class="hljs-regexp">//</span>用户按鼠标按钮。<br>onmousemove<span class="hljs-regexp">//</span>鼠标指针在对象上移动。<br>onmouseover<span class="hljs-regexp">//</span>鼠标指针移动到对象上。<br>onmouseout<span class="hljs-regexp">//</span>鼠标指针移出对象。<br>onmouseup<span class="hljs-regexp">//</span>用户释放鼠标按钮。<br>onreset<span class="hljs-regexp">//</span>用户重置表单。<br>onselect<span class="hljs-regexp">//</span>用户选取页面上的内容。<br>onsubmit<span class="hljs-regexp">//</span>用户提交表单。<br>onunload<span class="hljs-regexp">//</span>用户关闭页面。<br></code></pre></td></tr></table></figure><p>代码示例：</p><p>1、直接在元素上绑定对应方法</p><p>缺点：不能被移除，不能绑定多个</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">function <span class="hljs-variable">$btn1</span>() &#123;<br>console.<span class="hljs-builtin-name">debug</span>(<span class="hljs-string">&#x27;按钮点击事件&#x27;</span>);<br>&#125;<br><br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$btn1</span>();&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200107211137322.png" alt="image-20200107211137322"></p><p>2、通过元素.事件名称动态绑定</p><p>缺点：不能绑定多个</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-variable">$btn2</span> = document.getElementById(<span class="hljs-string">&quot;btn2&quot;</span>);<br><span class="hljs-variable">$btn2</span>.onclick = function() &#123;<br>console.<span class="hljs-builtin-name">debug</span>(<span class="hljs-string">&#x27;按钮点击事件绑定&#x27;</span>);<br>&#125;<br><br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/image-20200107203613786.png" alt="image-20200107203613786"></p><p>3、使用addEventListener和attachEvent注册事件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">element.add<span class="hljs-constructor">EventListener(<span class="hljs-params">event</span>,<span class="hljs-params">function</span>,<span class="hljs-params">useCapture</span>)</span>;<br>element.remove<span class="hljs-constructor">EventListener(<span class="hljs-params">event</span>,<span class="hljs-params">function</span>,<span class="hljs-params">useCapture</span>)</span>;<br><span class="hljs-comment">//第一个参数是事件类型（如&quot;click&quot;或&quot;mousedown&quot;）；注意，不能有如&quot;onclick&quot;的&quot;on&quot;前缀</span><br><span class="hljs-comment">//第二个参数是事件触发后调用的函数；</span><br><span class="hljs-comment">//第三个参数是个布尔值用于描述事件是 冒泡 还是 捕获 ，该参数是可选的。</span><br><br><span class="hljs-comment">//IE8以及IE更早的版本，Opera7.0以及其早期版本不支持上面的方法。但是，对于这类浏览器版本可以使用</span><br>element.attach<span class="hljs-constructor">Event(<span class="hljs-params">event</span>,<span class="hljs-params">function</span>)</span>;<br>element.detach<span class="hljs-constructor">Event(<span class="hljs-params">event</span>,<span class="hljs-params">function</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>事件冒泡或事件捕获？</strong></p><p>事件传递有两种方式：冒泡和捕获。</p><p>事件传递定义了元素事件触发顺序，如果将&lt;p&gt;元素插入到&lt;div&gt;元素中，用户点击&lt;p&gt;元素，哪一个元素的”click”事件先被触发呢？</p><p>在<code>冒泡</code>中，内部元素的事件会先被触发，然后再触发外部元素，即:&lt;p&gt;元素的点击事件先被触发，然后会触发&lt;div&gt;元素的点击事件；</p><p>在<code>捕获</code>中，外部元素的事件会先被触发，然后再触发外部元素，即:&lt;div&gt;元素的点击事件先被触发，然后会触发&lt;p&gt;元素的点击事件；</p><p>addEventListener()方法可以指定”useCapture”参数来设置传递类型：默认值false即冒泡方式，值为ture时，事件使用捕获传递。</p><p>代码示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mydiv&quot;</span>&gt;</span><br>mydiv<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myp&quot;</span>&gt;</span><br>myp<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$btn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;按钮点击事件绑定&quot;</span>);</span><br>&#125;<br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myp&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>,$btn1());</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/12/10/JavaScript/y1T5rk2mk1.gif"></p><p>跨浏览器的解决：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var x=document.get<span class="hljs-constructor">ElementById(<span class="hljs-string">&quot;myBtn&quot;</span>)</span>;<br><span class="hljs-keyword">if</span>(x.addEventListener)&#123;<span class="hljs-comment">//所有主流浏览器，除IE8及其早期版本</span><br>x.add<span class="hljs-constructor">EventListener(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-params">myFunction</span>)</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x.attachEvent)&#123;<span class="hljs-comment">//IE8及更早版本</span><br>x.attach<span class="hljs-constructor">Event(<span class="hljs-string">&quot;onclick&quot;</span>,<span class="hljs-params">myFunction</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$btn2</span>.addEventListener) &#123; <br><span class="hljs-comment">//非IE的操作</span><br><span class="hljs-variable">$btn2</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>console.debug(<span class="hljs-string">&#x27;所有浏览器&#x27;</span>);<br>&#125;)<br><span class="hljs-variable">$btn2</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>console.debug(<span class="hljs-string">&#x27;所有浏览器2&#x27;</span>);<br>&#125;)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$btn2</span>.attachEvent) &#123;<br><span class="hljs-variable">$btn2</span>.attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <br><span class="hljs-comment">//如果是针对IE浏览器的，那么需要使用onclick</span><br>console.debug(<span class="hljs-string">&#x27;IE8之前&#x27;</span>);<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JavaScript小游戏"><a href="#JavaScript小游戏" class="headerlink" title="JavaScript小游戏"></a>JavaScript小游戏</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>.game &#123;<br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: red;</span><br><span class="css"><span class="hljs-attribute">color</span>: white;</span><br><span class="css"><span class="hljs-comment">/* 水平居中*/</span></span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css"><span class="hljs-comment">/*垂直居中*/</span></span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开始&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;startGame()&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;结束&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;stopGame()&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;score&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>分<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> $newDivs = []; <span class="hljs-comment">//使用这个数组管理已经生成的新的元素</span></span><br><br><span class="javascript"><span class="hljs-comment">//1.页面上生成随机字符块</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createEle</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.1 创建新的元素添加进页面</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $root = <span class="hljs-built_in">document</span>.body;</span><br><span class="javascript"><span class="hljs-comment">//1.2 创建新元素</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $newDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">//1.3 A-Z键盘码的范围在65-90 随机生成这个区间中的值，添加到新元素中</span></span><br><span class="javascript"><span class="hljs-comment">// 取整（随机数*取值范围）+起始值</span></span><br><span class="javascript">$newDiv.innerHTML = <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">26</span>) + <span class="hljs-number">65</span>);</span><br><span class="javascript">$newDiv.className = <span class="hljs-string">&#x27;game&#x27;</span>;</span><br><span class="javascript">$newDiv.style.top = <span class="hljs-string">&quot;0px&quot;</span>;</span><br><span class="javascript"><span class="hljs-keyword">var</span> $width = <span class="hljs-built_in">document</span>.documentElement.clientWidth - <span class="hljs-number">120</span> * <span class="hljs-number">2</span>;</span><br><span class="javascript">$newDiv.style.left = <span class="hljs-built_in">Math</span>.random() * $width + <span class="hljs-number">120</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.debug(<span class="hljs-built_in">Math</span>.random() * $width + <span class="hljs-number">120</span> + <span class="hljs-string">&quot;px&quot;</span>);</span><br><br><span class="javascript"><span class="hljs-comment">//1.4 将新元素添加到父节点中</span></span><br>$root.appendChild($newDiv);<br><span class="javascript">$newDivs.push($newDiv); <span class="hljs-comment">//添加进数组</span></span><br>&#125;<br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startGame</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$timer1 = <span class="hljs-built_in">setInterval</span>(createEle, <span class="hljs-number">800</span>);</span><br>&#125;<br><br><span class="javascript"><span class="hljs-comment">//3.移动字符块  问题：当字符块消失在可见范围之内的时候，仍然在修改top值</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">moveDiv</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.获取字符块对象</span></span><br><span class="javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; $newDivs.length; i++) &#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> $newDiv = $newDivs[i]; <span class="hljs-comment">//新生对象</span></span><br><span class="javascript"><span class="hljs-comment">//为新生对象递增top值</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $top = <span class="hljs-built_in">parseInt</span>($newDiv.style.top) + <span class="hljs-number">5</span>;</span><br><span class="javascript"><span class="hljs-keyword">var</span> $height = <span class="hljs-built_in">document</span>.documentElement.clientHeight;</span><br>if ($top &gt;= $height) &#123;<br><span class="javascript"><span class="hljs-built_in">document</span>.body.removeChild($newDiv); <span class="hljs-comment">//移除新生元素</span></span><br>$newDivs.splice(i, 1);<br><span class="javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">$newDiv.style.top = $top + <span class="hljs-string">&quot;px&quot;</span>;</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startGame</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$timer1 = <span class="hljs-built_in">setInterval</span>(createEle, <span class="hljs-number">800</span>);</span><br><span class="javascript">$timer2 = <span class="hljs-built_in">setInterval</span>(moveDiv, <span class="hljs-number">100</span>);</span><br>&#125;<br><br><span class="javascript"><span class="hljs-comment">//4.消除字符</span></span><br><span class="javascript"><span class="hljs-built_in">document</span>.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.获取当前按下的键盘码</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> $code = <span class="hljs-built_in">String</span>.fromCharCode(e.keyCode);</span><br><span class="javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; $newDivs.length; i++) &#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> $res = $newDivs[i].innerHTML;</span><br>if ($code == $res) &#123;<br><span class="javascript"><span class="hljs-built_in">document</span>.body.removeChild($newDivs[i]); <span class="hljs-comment">//移除新生元素</span></span><br>$newDivs.splice(i, 1);<br><span class="javascript"><span class="hljs-keyword">break</span>;</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="javascript"><span class="hljs-comment">//5.停止</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopGame</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">clearInterval</span>($timer1);</span><br><span class="javascript"><span class="hljs-built_in">clearInterval</span>($timer2);</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2019/11/28/Spring/"/>
    <url>/2019/11/28/Spring/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring4"><a href="#Spring4" class="headerlink" title="Spring4"></a>Spring4</h3><p>Spring框架简化JavaEE的开发流程，解决企业级应用开发开发复杂性难题，提升JavaEE软件开发效率。Spring对大部分常用功能进行了封装，比如管理JavaBean，包含创建及销毁，还提供了基于Web的SpringMVC分层架构，支持数据库操作，安全验证等功能。这些功能的实现要依赖<code>DI(Dependency Injection)</code>和<code>AOP(Aspect Oriented Programming)</code>两员大将，我们需掌握Spring中的这两个核心技术，并在实际的软件开发中得以运用。</p><p>Spring框架就是实现了AOP功能的DI容器，在DI容器基础上加入AOP就可以不仅做到松耦合开发，还具有面向切面编程的功能。</p><h5 id="1-2、三层架构的理解"><a href="#1-2、三层架构的理解" class="headerlink" title="1.2、三层架构的理解"></a>1.2、三层架构的理解</h5><p>表现层 &gt;&gt; 业务层 &gt;&gt; 持久层</p><table><thead><tr><th>层</th><th>作用</th></tr></thead><tbody><tr><td>表现层(Web)</td><td>jsp/servlet等就是表现层</td></tr><tr><td>业务层(service)</td><td>处理相应的业务，由表现层调用</td></tr><tr><td>持久层(dao)</td><td>做数据的持久化(现在咱们操作数据库就是完成持久化的功能)  JDBC，SpringJDBC,Hibernate,MyBatis</td></tr></tbody></table><p><img src="/2019/11/28/Spring/Spring.png"></p><p>命名规范：</p><ol><li>dao层：<ul><li>dao接口(dao包.): IXxxDAO         IEmployeeDAO</li><li>dao实现(dao.impl包.): XxxDAOImpl      EmployeeDAOImpl</li></ul></li><li>service层：<ul><li>service的包与dao的包应该在同一层</li><li>service接口(service包.): IXxxService     IEmployeeService</li><li>service实现(service.impl包.): XxxServiceImpl  EmployeeServiceImpl</li></ul></li></ol><p>一般项目的目录结构：一个domain包，一个dao包，一个service包，一个controller包。</p><p>controller调用service，service调用dao</p><h5 id><a href="#" class="headerlink" title></a></h5><p>模拟完成过去的从Servlet向下调用的过程，通过main方法创建Servlet进行测试</p><p>步骤:  新建JavaWeb项目、创建包结构、写代码、访问测试</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//Controller层</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><span class="hljs-comment">// 需要调用service业务层方法</span><br><span class="hljs-type">IUserService</span> userService = <span class="hljs-keyword">new</span> <span class="hljs-type">UserServiceImpl</span>();<br><span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) &#123;<br><span class="hljs-comment">//调用Service层方法</span><br><span class="hljs-type">List</span>&lt;<span class="hljs-type">User</span>&gt; list = userService.listUser();<br>        ... ...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//Service层</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">IUserService</span></span> </span>&#123;<br><span class="hljs-comment">// 需要调用dao层方法</span><br>    <span class="hljs-keyword">private</span> IUserDao userDao = <span class="hljs-keyword">new</span> <span class="hljs-type">UserDaoImp</span>();<br><span class="hljs-keyword">public</span> List&lt;User&gt; listUser() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userDao.listUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Dao层</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">listUser</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 由dao层数据库访问操作</span><br>    System.out.println(<span class="hljs-string">&quot;模拟数据库查询得到数据 &quot;</span>);<br>... ...<br><span class="hljs-keyword">return</span> list;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Spring进入正题"><a href="#Spring进入正题" class="headerlink" title="Spring进入正题"></a>Spring进入正题</h4><h5 id="在没有Spring框架之前，Java开发中会遇到的难题："><a href="#在没有Spring框架之前，Java开发中会遇到的难题：" class="headerlink" title="在没有Spring框架之前，Java开发中会遇到的难题："></a>在没有Spring框架之前，Java开发中会遇到的难题：</h5><p>1、代码耦合度高</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> </span>&#123;<br><span class="hljs-comment">//如果接口和实现类在同一地方存在，那么就是高耦合。</span><br><span class="hljs-keyword">private</span> IUserDao userDao = <span class="hljs-keyword">new</span> <span class="hljs-type">UserDaoImpl</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>UserService除了完成业务逻辑功能的实现，还需要把数据通过UserDao进行持久化，所以称UserService依赖于UserDao来完成她的工作，如果UserService离开了UserDao便无法工作；</p><p>2、对象间依赖关系繁琐</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">UserServlet</span> &#123;<br>  <span class="hljs-keyword">private</span> IUserService service;<span class="hljs-comment">//依赖UserService</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">UserService</span>&#123;<br>   <span class="hljs-keyword">private</span> IUserDao dao;<span class="hljs-comment">//依赖UserDao</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过代码来<code>创建对象</code>及<code>管理这些对象之间的依赖关系</code>是相当麻烦的一件事。  </p><p>3、事务控制繁琐</p><p>实际开发中，某一个业务逻辑可能会牵涉多个操作（多个sql），事务开启在 service 层，是极好的。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lasso">UserService&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> save(<span class="hljs-params">...</span>)&#123;<br>  开启事务<span class="hljs-params">...</span><br>      dao.save(<span class="hljs-params">...</span>);<br>      关闭事务<span class="hljs-params">...</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> update(<span class="hljs-params">...</span>)&#123;<br>  开启事务<span class="hljs-params">...</span><br>      dao.update(<span class="hljs-params">...</span>);<br>      关闭事务<span class="hljs-params">...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>涉及到事务处理的地方，每次通过代码来实现这些事务的开启和关闭，导致代码重复开发效率低下。  </p><h5 id="2-2、Spring框架的出现解决了上述问题"><a href="#2-2、Spring框架的出现解决了上述问题" class="headerlink" title="2.2、Spring框架的出现解决了上述问题"></a>2.2、Spring框架的出现解决了上述问题</h5><p><code>降低耦合度</code>，<code>提高程序的可重用性</code>，<code>提高开发的效率</code>，<code>简化臃肿的代码</code></p><img src="/2019/11/28/Spring/image-20191228163850907.png" alt="image-20191228163850907" style="zoom:150%;"><h4 id="3、Spring是什么？"><a href="#3、Spring是什么？" class="headerlink" title="3、Spring是什么？"></a>3、Spring是什么？</h4><p>框架，通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。</p><p>框架就是制定一套规范或者规则（思想），大家（程序员）在该规范下工作。或者说使用别人搭好的舞台来做编剧和表演。</p><p>Spring是一个开放源代码的设计层面框架，他解决的是业务逻辑层和其他各层的松耦合问题，任何Java应用都可以从Spring中受益。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式) 轻量级开源框架。</p><p>Spring是全面的和模块化的。Spring有分层的体系结构，你可以选择使用Spring来简单化JDBC的使用，或用来管理所有的业务对象。</p><h4 id="4、Spring核心"><a href="#4、Spring核心" class="headerlink" title="4、Spring核心"></a>4、Spring核心</h4><h5 id="4-1、IOC控制反转"><a href="#4-1、IOC控制反转" class="headerlink" title="4.1、IOC控制反转"></a>4.1、IOC控制反转</h5><p><code>IOC(Inverse Of Control)控制反转</code>：</p><p>所谓控制反转就是把对象（bean）创建和维护对象（bean）之间的关系的权利转移到Spring容器中去了（applicationContext.xml）而程序本身不在维护了。</p><p>目的是将调用者和被调用者分离，将类与类之间的关系解耦，是一种设计思想。  </p><p><code>DI(Dependency Injection)依赖注入</code>：</p><p><strong>实际上DI和IOC是同一个概念</strong>，依赖注入和控制反转是对同一件事情的不同描述<strong>。</strong>因为在applicationContext.xml配置文件中bean和bean之间通过ref来维护的时候是相互依赖的，所以又叫做依赖注入，也就是控制反转。  </p><p>在没有Spring框架时，如果在A.java类中使用B.java类，则必须在A.java类中实例化出B.java类对象，如此便造成了A和B类的紧耦合，A类完全依赖于B类的功能实现，这样的情况就是典型的“侵入式开发”。随着软件业务复杂度的提升，当原有的B类不能满足A的功能实现时，就需要创建更为高级的BExt.java类，结果就造成了需要把A中所有实例化B.java类的代码替换成new BExt() 代码。产生的源代码的大幅改动，不利于软件运行的稳定，并不符合商业软件的开发流程，Spring的DI就可以解决这样的情况。</p><p>其解决办法就是使用<code>反射技术</code>，来动态的对一个类中的属性进行反射复制。这样的功能Spring形成了一个模块，模块的功能非常强大，并且Spring把这种机制进行命名，叫做依赖注入。</p><p>DI侧重于实现，A类依赖于B类，B类的对象由容器创建，容器在对A类中的B类属性进行对象值的注入。DI在Java底层技术原理就是“反射”，使用反射技术对某一个类中的属性进行动态赋值，来达到A类与B类之间的解耦。</p><p>Spring的DI其实就是对JavaBean的属性使用反射技术进行赋值。当有许多JavaBean需要这样操作时，这些JavaBean的管理就成了问题，有的需要关联有的不需要关联，但所有的这些JavaBean的创建，销毁都要同一调度，由Spring框架处理他们的生命周期。为了方便这种管理，Spring框架提供了DI容器，对JavaBean统一组织，便于后期维护。</p><p>总结：对象的关系依赖于容器注入，由容器管理，而对象自己不需要管理。</p><img src="/2019/11/28/Spring/image-20191228164413418.png" alt="image-20191228164413418" style="zoom:200%;"><h5 id="4-2、AOP面向切面"><a href="#4-2、AOP面向切面" class="headerlink" title="4.2、AOP面向切面"></a>4.2、AOP面向切面</h5><p><code>AOP为Aspect Oriented Programming的缩写</code>，意为：</p><p><strong>面向切面编程</strong>，通过<code>预编译方式</code>和<code>运行期动态代理</code>实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>AOP采取<code>横向抽取</code>机制，取代了传统<code>纵向继承</code>体系重复性代码；</p><p>AOP可以用于：日志记录，性能统计，安全控制，事务处理，异常处理和缓存等等；</p><p>Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过代理方式向目标类织入增强代码</p><p>AspectJ是一个基于Java语言的AOP框架，Spring2.0开始，Spring AOP引入对Aspect的支持，AspectJ扩展了Java语言，提供了一个专门的编译器，在编译时提供横向代码的织入</p><p>总结：Spring使用AOP的功能完成各种共用的模板功能<strong>，</strong>使得我们的业务代码与其它代码分开，Spring是一个轻量级控制反转(IoC)和面向切面(AOP)的<code>容器框架</code>。</p><h4 id="5、Spring入门案例"><a href="#5、Spring入门案例" class="headerlink" title="5、Spring入门案例"></a>5、Spring入门案例</h4><h5 id="5-1、引入步骤"><a href="#5-1、引入步骤" class="headerlink" title="5.1、引入步骤"></a>5.1、引入步骤</h5><ol><li><p>创建一个工程，用来演示Spring的入门案例；</p></li><li><p>使用Spring的功能，需要导入Spring相关的包；</p></li><li><p>创建由Spring管理的类对象；</p></li><li><p>创建配置文件，配置bean对象，Spring通过解析配置文件，获取对象信息；</p></li><li><p>这里我们先通过单元测试的方法运行，之后我们会学习Spring的测试模块。</p></li></ol><h5 id="5-2、导包"><a href="#5-2、导包" class="headerlink" title="5.2、导包"></a>5.2、导包</h5><p>spring-framework-4.1.2.RELEASE</p><p><img src="/2019/11/28/Spring/Snipaste_2019-11-27_09-40-42.png"></p><p><strong>1、核心基础包：</strong></p><p><img src="/2019/11/28/Spring/image-20191213221515169.png" alt="image-20191213221515169"></p><p><strong>2、日志包</strong></p><p><img src="/2019/11/28/Spring/Snipaste_2019-11-27_09-42-35.png"></p><p>目前就先导入核心包(core)和beans包【最小配置包】</p><p><img src="/2019/11/28/Spring/Snipaste_2019-11-27_09-44-16.png"></p><p>导包的时候注意，现在使用Spring，要完成最小导包，即：需要什么jar包，我们就导入哪一个jar包，这个对咱们认识框架的包是非常有帮助的。不然以后由于出现问题自己都不知道应该怎么解决。</p><h5 id="5-3、准备对象类"><a href="#5-3、准备对象类" class="headerlink" title="5.3、准备对象类"></a>5.3、准备对象类</h5><p>在domain包中创建新的实体类，亦即Javabean，如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//User.java</span><br><span class="hljs-keyword">package</span> cn.kongwei_liao.spring.Domain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><span class="hljs-comment">//省略了getter和setter方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-4、XML配置文件"><a href="#5-4、XML配置文件" class="headerlink" title="5.4、XML配置文件"></a>5.4、XML配置文件</h5><p>Spring通过这个配置文件解析对象信息，此Spring配置文件的名称和放置的位置没有固定要求。</p><p>但是,建议配置文件命为: <strong>applicationContext.xml</strong>， 放到<code>Resources属性的目录</code>下。</p><p>该配置文件的基本信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--目前现在上面基本配置里加入如下一条，在&lt;beans&gt;中--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.Domain.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或使用英文文档中的配置：</p><p><img src="/2019/11/28/Spring/app.xml.png"></p><p>引入约束：XMLcatalog，位置：spring-framework-3.2.0.RELEASE\schema\beans目录下</p><h5 id="5-5、代码测试"><a href="#5-5、代码测试" class="headerlink" title="5.5、代码测试"></a>5.5、代码测试</h5><p>我们第一步是要启动框架，而启动框架则需要拿到Spring的核心对象；</p><p>第一个核心对象是<strong>BeanFactory</strong> : 顾名思义，这是一个创建Bean的工厂</p><p>因此：我们的第一步读取配置文件，拿到BeanFactory工厂</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> testHelloSpring &#123;<br>    @Test<br>    public void test<span class="hljs-constructor">Hello()</span>&#123;<br>    <br>        <span class="hljs-comment">//第一步：读取资源文件</span><br>        <span class="hljs-comment">//String xmlPath=&quot;...&quot;;</span><br>        Resource resource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathResource(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>)</span>;<br>        <br>        <span class="hljs-comment">//第二步：拿到核心对象 BeanFactory</span><br>        <span class="hljs-comment">//BeanFactory factory = new XmlBeanFactory(xmlPath);</span><br>        BeanFactory factory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XmlBeanFactory(<span class="hljs-params">resource</span>)</span>;<br>        <br>        <span class="hljs-comment">//第三步：从工厂中拿到一个Bean对象</span><br>        User user = (User)factory.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;user&quot;</span>)</span>;<br>        <br>        user.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;工厂财源广进&quot;</span>)</span>;<br>        user.set<span class="hljs-constructor">Age(8)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-6、案例小结"><a href="#5-6、案例小结" class="headerlink" title="5.6、案例小结"></a>5.6、案例小结</h5><ol><li><p>利用 Spring容器，帮助我们创建管理对象；</p></li><li><p>需要导入 Spring 相关的jar包；</p></li><li><p>需要创建并配置applicationContext.xml文件；</p></li><li><p>Spring通过解析配置文件，拿到核心对象BeanFactory，帮我们创建管理对象。</p></li></ol><h4 id="6、Spring原理分析"><a href="#6、Spring原理分析" class="headerlink" title="6、Spring原理分析"></a>6、Spring原理分析</h4><p>通过之前的Spring入门案例，知道的Spring的核心就是一个容器，它会根据配置创建相应的bean(对象)，那它的具体实现原理是怎样的呢？就需要我们来在学习一下<code>Spring的核心接口BeanFactory</code>和<code>ApplicationContext</code>，并了解一下Spring创建对象的原理。</p><p><img src="/2019/11/28/Spring/image-20191228165021684.png" alt="image-20191228165021684"></p><h5 id="6-1、核心接口BeanFactory"><a href="#6-1、核心接口BeanFactory" class="headerlink" title="6.1、核心接口BeanFactory"></a>6.1、核心接口BeanFactory</h5><p>SpringIoC容器：<strong>BeanFactory(com.springframework.beans.factory.BeanFactory)是Spring框架最核心的一个接口</strong>，spring使用BeanFactory来<strong>实例化、配置和管理Bean对象</strong>，但是它只是一个接口，里面有一个getBean()方法。</p><h6 id="6-1-1、使用BeanFactory"><a href="#6-1-1、使用BeanFactory" class="headerlink" title="6.1.1、使用BeanFactory"></a>6.1.1、使用BeanFactory</h6><p>方式一：通过id直接拿到相应的Bean对象（常见方法）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//通过applicationContext.xml配置文件中配置的bean的id拿到对象</span><br>MyBean bean = (MyBean)factory.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;myBean&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bean);<br></code></pre></td></tr></table></figure><p>方式二：通过id与对象的class拿到Bean对象，好处：不需要强转</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//通过id与对象的class拿到bean对象</span><br>MyBean bean = factory.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;myBean&quot;</span>,MyBean.<span class="hljs-params">class</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bean);<br></code></pre></td></tr></table></figure><p>方式三：通过class拿到Bean对象  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//通过id与对象的class拿到bean对象</span><br>MyBean bean = factory.get<span class="hljs-constructor">Bean(MyBean.<span class="hljs-params">class</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bean);<br><span class="hljs-comment">//限制：这个class类在配置中只能出现一次</span><br><span class="hljs-comment">//异常：org.springframework.beans.factory.NoUniqueBeanDefinitionException</span><br></code></pre></td></tr></table></figure><h6 id="6-1-2、通过class拿到Bean对象的限制"><a href="#6-1-2、通过class拿到Bean对象的限制" class="headerlink" title="6.1.2、通过class拿到Bean对象的限制"></a>6.1.2、通过class拿到Bean对象的限制</h6><p>如果是以下情况，方式三会出错，而方式一与方式二不会出错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 不同的bean配置中不能存在class相同的情况 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.domain.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;User1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.domain.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>思考一下，为什么会这样？</p><p>方式三的错误提示：Spring找到两个对象User和User1，两者都属于UserInfo.class的对象。Spring并<code>不确定</code>应该获取哪一个，所以出现了异常。</p><ul><li><p>方式一：根据id拿，可以<code>确定</code></p></li><li><p>方式二：也是根据id拿，可以<code>确定</code>(不需要强转)</p></li><li><p>方式三：根据类型，现在有两个类型相等，无法确定(报错)</p></li></ul><p>以后大家会发现，包括BeanFactory这个对象都是Spring自己创建的，而不需要我们自己使用这三种方式手动创建，但是在Spring内部是通过这些方式去拿到Bean的。</p><h5 id="6-2、ApplicationContext"><a href="#6-2、ApplicationContext" class="headerlink" title="6.2、ApplicationContext"></a>6.2、ApplicationContext</h5><p>应用上下文：ApplicationContext(com.springframework.context.ApplicationContext)</p><p>建立在BeanFactory基础之上，提供了更多面向应用的功能，它提供了国际化支持和框架事件体系，更易于创建实际应用。</p><p>对于二者的用途，我们可以进行简单的划分:</p><ul><li><p>BeanFactory是Spring框架的基础设施，<code>面向Spring本身</code>；</p></li><li><p>ApplicationContext<code>面向使用Spring框架的开发者</code>。</p></li></ul><p>应用上下文ApplicationContext是建立在BeanFactory基础上的一种更高层次的Spring IoC容器，其除了具有普通BeanFactory的全部功能以外，还加入了以下功能：</p><ul><li><p>提供了I18N的支持；</p></li><li><p>提供了资源访问；</p></li><li><p>提供了载入文件资源的通用方法；</p></li><li><p>提供了发送事件的功能。</p></li></ul><p>几乎所有的应用场合都可以直接使用ApplicationContext，而非底层的BcanFactory。</p><h6 id="6-2-1、使用ApplicationContext"><a href="#6-2-1、使用ApplicationContext" class="headerlink" title="6.2.1、使用ApplicationContext"></a>6.2.1、使用ApplicationContext</h6><p>使用一个ApplicationContext来完成拿到Bean的功能：</p><p>要使用ApplicationContext的功能，必需要导入相应的jar包</p><p><code>spring-context-4.1.2.RELEASE.jar</code> 与 <code>spring-expression-4.1.2.RELEASE.jar</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">//拿到核心对象 ApplicationContext<br>//ClassPathXmlApplicationContext 用于加载classpath（类路径、src）下的xml<br>//FileSystemXmlApplicationContext 用于加载指定盘符下的xml<br>ApplicationContext context = new ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br><span class="hljs-keyword">User</span> <span class="hljs-title">bean</span> = (User) context.getBean(<span class="hljs-string">&quot;User&quot;</span>);<br>System.out.println(bean);<br></code></pre></td></tr></table></figure><h5 id="6-3、ApplicationContext与BeanFactory的区别-面试题"><a href="#6-3、ApplicationContext与BeanFactory的区别-面试题" class="headerlink" title="6.3、ApplicationContext与BeanFactory的区别 ( 面试题 )"></a>6.3、ApplicationContext与BeanFactory的区别 ( 面试题 )</h5><p>解释：ApplicationContext是BeanFactory的子接口，拥有更多的功能与方法；</p><p>重点：ApplicationContext对bean是在读取的时候就创建Bean对象；</p><p>而BeanFactory是在使用的时候才进行对象的创建 ( 懒加载 )</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//这句代码已经创建Bean（ApplicationContext即时加载）</span><br>ApplicationContext context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>)</span>; <br><br><span class="hljs-comment">//下面这句还没有创建（BeanFactory懒加载） 使用的时候才加载</span><br><span class="hljs-comment">//读取资源文件</span><br>ClassPathResource resource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathResource(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>)</span>;<br><span class="hljs-comment">//创建BeanFactory</span><br>BeanFactory beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XmlBeanFactory(<span class="hljs-params">resource</span>)</span>;<br>UserDao userDao1 = (UserDao)beanFactory.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;userDao&quot;</span>)</span>;<span class="hljs-comment">//需要时才加载</span><br></code></pre></td></tr></table></figure><p><strong>扩展</strong>：我们在使用ApplicationContext的时候，可以通过配置让它也变成与BeanFactory一样的懒加载：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 让其中一个Bean变成懒加载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.MyBean&quot;</span> <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7、BeanFactory模拟实现"><a href="#7、BeanFactory模拟实现" class="headerlink" title="7、BeanFactory模拟实现"></a>7、BeanFactory模拟实现</h4><p>模拟步骤：</p><ol><li>使用简单工厂模式来处理bean容器。</li><li>解析xml文件，获取配置中的元素信息。</li><li>利用反射获实例化配置信息中的对象。</li><li>如果有对象注入，使用invoke()方法。</li><li>实例化的对象放入bean容器中，并提供getBean方法。</li></ol><p>简化版的BeanFactory代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> BeanFactory &#123;<br>     <br>    <span class="hljs-comment">//bean容器</span><br><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; contianer = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;<span class="hljs-literal">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;p&gt;Discription:通过bean的id在容器中获取bean对象&lt;/p&gt;</span><br><span class="hljs-comment">     * @param beanName bean的唯一标识id</span><br><span class="hljs-comment">     */</span><br>    public Object get<span class="hljs-constructor">Bean(String <span class="hljs-params">beanName</span>)</span> &#123;<br>        Object obj = contianer.get(beanName);<br>        return obj;<br>    &#125;<br>     <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;p&gt;Discription:bean工厂的初始化&lt;/p&gt;</span><br><span class="hljs-comment">     * @param xml xml配置文件路径</span><br><span class="hljs-comment">     */</span><br>    public void init(String xml) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 读取指定的配置文件</span><br>            SAXReader reader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SAXReader()</span>;<br>            ClassLoader classLoader = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">ContextClassLoader()</span>;<br>            <span class="hljs-comment">// 从class目录下获取指定的xml文件</span><br>            Document doc = reader.read(classLoader.get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-params">xml</span>)</span>);<br>            Element root = doc.get<span class="hljs-constructor">RootElement()</span>;<br>            Iterator iter = root.element<span class="hljs-constructor">Iterator()</span>;<br><br>            <span class="hljs-keyword">while</span> (iter.has<span class="hljs-constructor">Next()</span>) &#123;<br>                Element ele = (Element) iter.next<span class="hljs-literal">()</span>;<br>                <span class="hljs-comment">// 获取bean的属性id和class</span><br>                String id = ele.attribute<span class="hljs-constructor">Value(<span class="hljs-string">&quot;id&quot;</span>)</span>;<br>                String beanClassName = ele.attribute<span class="hljs-constructor">Value(<span class="hljs-string">&quot;class&quot;</span>)</span>;<br>                <span class="hljs-comment">// 利用Java反射机制，通过class的名称获取Class对象</span><br>                Class&lt;?&gt; bean = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-params">beanClassName</span>)</span>;<br>                <span class="hljs-comment">// 获取对应class的信息</span><br>                java.beans.BeanInfo info = java.beans.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Introspector</span>.</span></span>get<span class="hljs-constructor">BeanInfo(<span class="hljs-params">bean</span>)</span>;<br>                <span class="hljs-comment">// 获取其属性描述</span><br>                java.beans.PropertyDescriptor pds<span class="hljs-literal">[]</span> = info.get<span class="hljs-constructor">PropertyDescriptors()</span>;<br>                <span class="hljs-comment">// 创建一个对象</span><br>                Object obj = bean.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>                <span class="hljs-comment">// 遍历该bean的property属性</span><br>                Iterator&lt;Element&gt; iterator = ele.element<span class="hljs-constructor">Iterator(<span class="hljs-string">&quot;property&quot;</span>)</span>;<br>                <span class="hljs-keyword">while</span>(iterator.has<span class="hljs-constructor">Next()</span>)&#123;<br>                    Element propElem = iterator.next<span class="hljs-literal">()</span>;<br>                    String propertyName = propElem.attribute<span class="hljs-constructor">Value(<span class="hljs-string">&quot;name&quot;</span>)</span>;<br>                    <span class="hljs-comment">// 获取该property的子元素value的值</span><br>                    String value = propElem.attribute<span class="hljs-constructor">Value(<span class="hljs-string">&quot;value&quot;</span>)</span>;<br>                    <span class="hljs-comment">// 利用Java的反射机制调用对象的某个set方法，并将值设进去</span><br>                    <span class="hljs-keyword">for</span> (PropertyDescriptor pd : pds) &#123;<br>                        <span class="hljs-keyword">if</span> (pd.get<span class="hljs-constructor">Name()</span>.equals(propertyName)) &#123;<br>                            pd.get<span class="hljs-constructor">WriteMethod()</span>.invoke(obj, value);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 将对象放入beanMap中，其中key为id值，value为对象</span><br>                contianer.put(id, obj);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>        &#125;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码简单的模拟实现了BeanFactory的功能，Spring框架里面的代码要比我们这个复杂的多，因为要考虑到安全性、稳定性、异常等等因素，但是原理都一样。</p><p><strong>模拟案例总结：</strong></p><ul><li>Spring通过 xml配置文件 + dom解析 + 反射 + 工厂方法 实现对象的创建。</li><li>BeanFactory 的本质就是一个Bean工厂，内部维护了一个对象容器。</li><li>Applicationcontext 继承了BeanFactory 接口对外开放（推荐使用）。</li></ul><h4 id="8、配置文件详解"><a href="#8、配置文件详解" class="headerlink" title="8、配置文件详解"></a>8、配置文件详解</h4><h5 id="8-1、基本配置"><a href="#8-1、基本配置" class="headerlink" title="8.1、基本配置"></a>8.1、基本配置</h5><p>我们已经演示了Spring框架管理对象的基本配置，并了解到<code>Spring的原理是一个解析xml配置标签的容器工厂</code>，现在我们来详细了解一下常用的标签。</p><p>他们包括bean标签、作用域标签和声明周期标签等：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 最基本的配置 id/name class --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>bean标签用于描述需要被Spring的DI容器管理的对象：</p><ul><li><p>id属性：标识配置的bean，唯一且不能有特殊符号【Spring3.2前】；</p></li><li><p>name属性：由于历史遗留和id功能相同，建议使用id，可以使用特殊符号，Spring3.2后不区分id，name；</p></li><li><p>class属性：配置bean的完全限定名，虽是全限定名但是没有后缀；</p></li><li><p>scope属性：<br>通过scope属性，指定Bean的作用范围，取值通常有一下几种:</p><ul><li><p><code>singleton</code>：默认值，单例</p><p>singleton 对象在容器起动的时候创建，并且只创建一次，容器中只有一个该对象；</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.itsource.spring.domain.User&quot;</span> <span class="hljs-attribute">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;&lt;/bean&gt; <br></code></pre></td></tr></table></figure></li><li><p><code>prototype</code>：多实例</p><p>prototype 对象在每次从容器中调用时才创建，每次都是返回一个新的实例（相当于new XxxBean()）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.domain.User&quot;</span> <span class="hljs-attribute">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;&lt;/bean&gt; <br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> fun4() throws <span class="hljs-keyword">Exception</span> &#123;<br>ApplicationContext ac = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);<br>  <span class="hljs-keyword">User</span> user1 = (<span class="hljs-keyword">User</span>) ac.getBean(&quot;user&quot;);<br>  <span class="hljs-keyword">User</span> user2 = (<span class="hljs-keyword">User</span>) ac.getBean(&quot;user&quot;);<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(user1==user2);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>request</code>：Web应用上下文中，创建一个对象，存放到request域中</p></li><li><p><code>session</code>：Web应用上下文中，创建一个对象，存放到session域中</p></li><li><p><code>globalSession</code>：Web应用上下文中，一般用于Portlet应用环境</p></li></ul></li></ul><h5 id="8-2、Bean的种类"><a href="#8-2、Bean的种类" class="headerlink" title="8.2、Bean的种类"></a>8.2、Bean的种类</h5><p>l 普通bean：之前操作的都是普通bean。&lt;bean id=”” class=”A”&gt; ，spring直接创建A实例，并返回</p><p>l FactoryBean：是一个特殊的bean，具有工厂生成对象能力，只能生成特定的对象。</p><p>​    bean必须使用 FactoryBean接口，此接口提供方法 getObject() 用于获得特定bean。</p><p>​    &lt;bean id=”” class=”FB”&gt; 先创建FB实例，使用调用getObject()方法，并返回方法的返回值</p><p>​        FB fb = new FB();</p><p>​        return fb.getObject();</p><p>l BeanFactory 和 FactoryBean 对比？</p><p>​    BeanFactory：工厂，用于生成任意bean。</p><p>​    FactoryBean：特殊bean，用于生成另一个特定的bean。例如：ProxyFactoryBean ，此工厂bean用于生产代理。&lt;bean id=”” class=”….ProxyFactoryBean”&gt; 获得代理对象实例。AOP使用</p><h5 id="8-2、生命周期配置"><a href="#8-2、生命周期配置" class="headerlink" title="8.2、生命周期配置"></a>8.2、生命周期配置</h5><p>生命周期：构造 -&gt; 初始化-&gt; 运行-&gt; 销毁</p><p><strong>注：配置多例的情况下，不会执行销毁</strong></p><p><strong>1、修改User类：添加init 和 destroy 方法</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">User</span> &#123;<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init()&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;初始化方法&quot;);<br>&#125;<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> destroy()&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;销毁&quot;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、配置信息</strong></p><p>singleton 单例模式（默认是单例模式）：</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ocaml">&lt;bean id=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.domain.User&quot;</span> init-<span class="hljs-keyword">method</span>=<span class="hljs-string">&quot;init&quot;</span> destroy-<span class="hljs-keyword">method</span>=<span class="hljs-string">&quot;destroy&quot;</span> &gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>prototype 多实例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.Domain.User&quot;</span> <span class="hljs-attribute">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attribute">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span> <span class="hljs-attribute">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p><strong>3、测试方法</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">GetBean()</span> throws Exception &#123;<br>ApplicationContext context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>)</span>;<br>User bean = (User) context.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;User&quot;</span>)</span>;<br>bean.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;Kongwei_Liao&quot;</span>)</span>;<br>    bean.set<span class="hljs-constructor">Age(22)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bean.get<span class="hljs-constructor">Name()</span>);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bean);<br>    <br><span class="hljs-comment">//ApplicationContext接口没有定义registerShutdownHook方法</span><br>context.register<span class="hljs-constructor">ShutdownHook()</span>;<span class="hljs-comment">//关闭spring容器</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;?&quot;</span>+bean.get<span class="hljs-constructor">Name()</span>);<br>User bean1 = (User)context.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;User&quot;</span>)</span>;<br>    bean1.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;Jie_Liu&quot;</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bean1.get<span class="hljs-constructor">Name()</span>);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(bean.get<span class="hljs-constructor">Name()</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4、结果</strong></p><p>注：打印的包路径名，因为文档的内容后期改动ant_nest为kongwei_liao。</p><p>singleton 单例模式结果：</p><p><img src="/2019/11/28/Spring/Snipaste_2019-11-27_16-37-51.png"></p><p>prototype 多实例：</p><p><img src="/2019/11/28/Spring/Snipaste_2019-11-27_17-16-15.png"></p><p>小结:</p><ul><li>加载容器 -&gt; 创建对象 -&gt; 初始化-&gt; 运行-&gt; 销毁；</li><li>初始化又分BeanFactory和ApplicationContext两类；</li><li>init-method=”init” 初始化对象后调用的方法；</li><li>destroy-method=”destroy” 关闭容器前调用的方法。</li></ul><h5 id="8-4、BeanPostProcessor-后处理Bean"><a href="#8-4、BeanPostProcessor-后处理Bean" class="headerlink" title="8.4、BeanPostProcessor 后处理Bean"></a>8.4、BeanPostProcessor 后处理Bean</h5><p>spring 提供一种机制，只要实现此接口BeanPostProcessor，并将实现类提供给spring容器，spring容器将自动执行，在初始化方法前执行before()，在初始化方法后执行after() 。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MyBeanPostProcessor implements BeanPostProcessor &#123;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> postProcessBeforeInitialization(<span class="hljs-keyword">Object</span> bean, String beanName) throws BeansException &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;前方法 ： &quot; + beanName);<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> postProcessAfterInitialization(final <span class="hljs-keyword">Object</span> bean, String beanName) throws BeansException &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;后方法 ： &quot; + beanName);<br>// bean 目标对象<br>// 生成 jdk 代理<br><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>MyBeanPostProcessor.<span class="hljs-keyword">class</span>.getClassLoader(), <br>bean.getClass().getInterfaces(), <br><span class="hljs-built_in">new</span> InvocationHandler()&#123;<br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> invoke(<span class="hljs-keyword">Object</span> proxy, <span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-keyword">Object</span>[] args) throws Throwable &#123;<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;------开启事务&quot;);<br><br>//执行目标方法<br><span class="hljs-keyword">Object</span> obj = <span class="hljs-keyword">method</span>.invoke(bean, args);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;------提交事务&quot;);<br><span class="hljs-keyword">return</span> obj;<br>&#125;&#125;);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将后处理的实现类注册给spring --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.e_lifecycle.MyBeanPostProcessor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">问题1：后处理bean作用某一个目标类，还是所有目标类？所有</span><br><span class="hljs-comment">问题2：如何只作用一个？通过“参数2”beanName进行控制</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h5 id="8-3、配置文件总结"><a href="#8-3、配置文件总结" class="headerlink" title="8.3、配置文件总结"></a>8.3、配置文件总结</h5><p>bean标签用于描述需要被spring容器管理的对象；</p><p><strong>一般我们自己不会来配置scope和 生命周期，而这个基本上由Spring自身来使用；</strong></p><p>例如在Spring操作连接池的时候，它会在DateSource销毁的时候执行。</p><h4 id="9、Spring单元测试"><a href="#9、Spring单元测试" class="headerlink" title="9、Spring单元测试"></a>9、Spring单元测试</h4><p>之前的测试，我们是通过Junit或者main方法，其实在使用Spring框架的时候，我们经常使用的是Spring提供的测试模块。可以简化很多操作。</p><h5 id="9-1、Spring-Test测试原理"><a href="#9-1、Spring-Test测试原理" class="headerlink" title="9.1、Spring Test测试原理"></a>9.1、Spring Test测试原理</h5><p>Spring测试主要是Spring-junit，这个是Spring自己专门写的一套测试框架功能。</p><p><img src="/2019/11/28/Spring/Snipaste_2019-11-27_15-25-56.png"></p><h5 id="9-2、使用步骤"><a href="#9-2、使用步骤" class="headerlink" title="9.2、使用步骤"></a>9.2、使用步骤</h5><p>1、导入Spring-Test依赖包 </p><p>2、添加注解</p><p>@RunWith()、@ContextConfiguration 和 @Autowired</p><p>在测试类上打 @RunWith() 注解<strong>，</strong>创建容器;</p><p>在打上@ContextConfiguration()注解，指定创建容器的时候使用哪个配置文件；</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RunWith</span>(SpringJUnit4ClassRunner.class)<br><span class="hljs-variable">@ContextConfiguration</span>(<span class="hljs-string">&quot;classpath:applicationContext.xml&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//加载Spring的配置文件，有以下写法：</span><br><span class="hljs-variable">@ContextConfiguration</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>)  会加载当前包下的bean.xml文件<br><span class="hljs-variable">@ContextConfiguration</span>(<span class="hljs-string">&quot;classpath:bean.xml&quot;</span>)  加载当前src下的bean.xml文件 【推荐使用】<br><span class="hljs-variable">@ContextConfiguration</span>(<span class="hljs-string">&quot;/bean.xml&quot;</span>)  加载当前src下的bean.xml文件<br><span class="hljs-variable">@ContextConfiguration</span>  加载当前测试类下的配置文件，文件命名必须是【类名-Context.xml】<br></code></pre></td></tr></table></figure><p>通过成员变量的方式，指定要测试的对象。</p><p><strong>打上@Autowired 注解，将会在Spring容器里查找该对象，并将Spring里的对象注入到指定的位置。</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">@Autowired<br>private <span class="hljs-keyword">User</span> <span class="hljs-title">user</span>;<br></code></pre></td></tr></table></figure><p>3、运行测试</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RunWith</span>(SpringJUnit4ClassRunner.class)<br><span class="hljs-variable">@ContextConfiguration</span>(<span class="hljs-string">&quot;classpath:spring-context.xml&quot;</span>)<br>public class Spring4Test &#123;<br><br><span class="hljs-variable">@Autowired</span><br>private User user;<br><br><span class="hljs-variable">@Test</span><br>public void springTest() throws Exception &#123;<br><span class="hljs-selector-tag">user</span><span class="hljs-selector-class">.setName</span>(<span class="hljs-string">&quot;Spring 测试&quot;</span>);<br><span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(user.getName());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果配置文件中，配置了两个同一class类型的bean，用@Qualifier(“User”)限定</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.ant_nest.spring.Domain.User&quot;</span> <span class="hljs-attribute">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attribute">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span>&gt;&lt;/bean&gt;<br>&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;User1&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.ant_nest.spring.Domain.User&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/28/Spring/Snipaste_2019-11-27_16-56-30.png"></p><p>小结：</p><ol><li>通过 @RunWith和 @ContextConfiguration， 我们可以指定Spring管理测试类，自动加载配置文件，执行相关的测试。</li><li>框架整合的时候如果Spring的配置文件不能读取，那么整个项目是跑不起来的，而Spring的测试可以让我们在不启动服务器的情况下，自动读取相应的配置文件。</li></ol><h4 id="10、依赖注入"><a href="#10、依赖注入" class="headerlink" title="10、依赖注入"></a>10、依赖注入</h4><p>现在，我们模拟使用Spring完成Service调用dao的过程。</p><p>这里涉及到了一个思维的转变（即将创建交给Spring）</p><p>Spring中的对象都是由Spring来统一管理，但是在对象中还存在属性，这些属性实际上引用的也是别的对象，那么这些对象也是由Spring来管理的。</p><p>我们通过Spring给对象的属性赋值，这称为属性依赖注入。</p><h5 id="10-1、简单实现"><a href="#10-1、简单实现" class="headerlink" title="10.1、简单实现"></a>10.1、简单实现</h5><p>步骤分析：</p><p>Spring Junit Test — UserServiceImpl(IUserService) —- UserDaoImpl(IUserDao)</p><ul><li>把UserServiceImp，UserDaoImpl交给Spring管理</li><li>给UserServiceImpl注入dao</li><li>提供setter方法</li><li>做配置<ul><li>name -&gt; 类中的属性名称(setName)</li><li>ref -&gt; 引用的哪一个Bean的id</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//dao层</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">listUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//由dao层数据库查询</span><br>        System.out.println(<span class="hljs-string">&quot;模拟数据库查询数据&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        System.out.println(user.getName());<br>        System.out.println(user.getAge());<br>        System.out.println(<span class="hljs-string">&quot;模拟数据库插入数据&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//service层</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserService</span></span>&#123;<br><br><span class="hljs-keyword">private</span> IUserDao userDao;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(IUserDao userDao)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.userDao = userDao;<br>&#125; <br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(User user)</span> </span>&#123;<br><span class="hljs-comment">// 调用dao层方法 添加用户</span><br>userDao.add(user);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//test：</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Spring4Test</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> IUserService userService;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testName</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>userService.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 持久层  --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.dao.impl.UserDaoImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 业务层 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.spring.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span></span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> 后面的内容</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>bean属性的依赖注入—-手动装配和自动装配</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua">&lt;!<span class="hljs-comment">-- 构造方法注入 </span><br>* &lt;constructor-<span class="hljs-built_in">arg</span>&gt; 用于配置构造方法一个参数argument<br>name ：参数的名称<br>value：设置普通数据<br>ref：引用数据，一般是另一个bean id值<br><br>index ：参数的索引号，从<span class="hljs-number">0</span>开始 。如果只有索引，匹配到了多个构造方法时，默认使用第一个。<br><span class="hljs-built_in">type</span> ：确定参数类型<br>例如：使用名称name<br>&lt;constructor-<span class="hljs-built_in">arg</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;jack&quot;</span>&gt;&lt;/constructor-<span class="hljs-built_in">arg</span>&gt;<br>&lt;constructor-<span class="hljs-built_in">arg</span> name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;18&quot;</span>&gt;&lt;/constructor-<span class="hljs-built_in">arg</span>&gt;<br>例如<span class="hljs-number">2</span>：【类型<span class="hljs-built_in">type</span> 和  索引 index】<br>&lt;constructor-<span class="hljs-built_in">arg</span> index=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;&lt;/constructor-<span class="hljs-built_in">arg</span>&gt;<br>&lt;constructor-<span class="hljs-built_in">arg</span> index=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> value=<span class="hljs-string">&quot;2&quot;</span>&gt;&lt;/constructor-<span class="hljs-built_in">arg</span>&gt;<br><span class="hljs-comment">--&gt;</span><br>&lt;bean id=<span class="hljs-string">&quot;userId&quot;</span> class=<span class="hljs-string">&quot;com.kongwei_liao.domain.User&quot;</span> &gt;<br>&lt;constructor-<span class="hljs-built_in">arg</span> index=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;&lt;/constructor-<span class="hljs-built_in">arg</span>&gt;<br>&lt;constructor-<span class="hljs-built_in">arg</span> index=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> value=<span class="hljs-string">&quot;2&quot;</span>&gt;&lt;/constructor-<span class="hljs-built_in">arg</span>&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;!<span class="hljs-comment">-- setter方法注入 </span><br>* 普通数据 <br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;&quot;</span> value=<span class="hljs-string">&quot;值&quot;</span>&gt;<br>等效<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;value&gt;值<br>* 引用数据<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;另一个bean&quot;</span>&gt;<br>等效<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;<span class="hljs-keyword">ref</span> bean=<span class="hljs-string">&quot;另一个bean&quot;</span>/&gt;<br><br><span class="hljs-comment">--&gt;</span><br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;personId&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Person&quot;</span>&gt;<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;pname&quot;</span> value=<span class="hljs-string">&quot;阳志&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;<br>&lt;value&gt;<span class="hljs-number">1234</span>&lt;/value&gt;<br>&lt;/<span class="hljs-keyword">property</span>&gt;<br><br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;homeAddr&quot;</span> <span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;homeAddrId&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;companyAddr&quot;</span>&gt;<br>&lt;<span class="hljs-keyword">ref</span> bean=<span class="hljs-string">&quot;companyAddrId&quot;</span>/&gt;<br>&lt;/<span class="hljs-keyword">property</span>&gt;<br>&lt;/bean&gt;<br><br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;homeAddrId&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Address&quot;</span>&gt;<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;addr&quot;</span> value=<span class="hljs-string">&quot;阜南&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;tel&quot;</span> value=<span class="hljs-string">&quot;911&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;<br>&lt;/bean&gt;<br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;companyAddrId&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Address&quot;</span>&gt;<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;addr&quot;</span> value=<span class="hljs-string">&quot;北京八宝山&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;<br>&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;tel&quot;</span> value=<span class="hljs-string">&quot;120&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;!<span class="hljs-comment">-- 了解内容：P命名空间，对“setter方法注入”进行简化</span><br>替换&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;属性名&quot;</span>&gt;，而是在&lt;bean p:属性名-<span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;引用值&quot;</span>&gt;<br>p命名空间使用前提，必须添加命名空间：xmlns:p=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="hljs-comment">--&gt;</span><br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;personId&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;com.itheima.f_xml.c_p.Person&quot;</span> <br>p:pname=<span class="hljs-string">&quot;禹太璞&quot;</span> p:age=<span class="hljs-string">&quot;22&quot;</span> <br>p:homeAddr-<span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;homeAddrId&quot;</span> p:companyAddr-<span class="hljs-keyword">ref</span>=<span class="hljs-string">&quot;companyAddrId&quot;</span>&gt;<br>&lt;/bean&gt;<br><br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;homeAddrId&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Address&quot;</span><br>p:addr=<span class="hljs-string">&quot;DG&quot;</span> p:tel=<span class="hljs-string">&quot;东莞&quot;</span>&gt;<br>&lt;/bean&gt;<br>&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;companyAddrId&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Address&quot;</span><br>p:addr=<span class="hljs-string">&quot;DG&quot;</span> p:tel=<span class="hljs-string">&quot;岛国&quot;</span>&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- 了解内容：Spring EL表达式</span></span><br><span class="xml">对<span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>进行统一编程，所有的内容都使用value</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;表达式&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">#</span><span class="hljs-template-variable">&#123;123&#125;</span><span class="xml">、#</span><span class="hljs-template-variable">&#123;&#x27;jack&#x27;&#125;</span><span class="xml"> ： 数字、字符串</span><br><span class="xml">#</span><span class="hljs-template-variable">&#123;beanId&#125;</span><span class="xml">：另一个bean引用</span><br><span class="xml">#</span><span class="hljs-template-variable">&#123;beanId.propName&#125;</span><span class="xml">：操作数据</span><br><span class="xml">#</span><span class="hljs-template-variable">&#123;beanId.toString()&#125;</span><span class="xml">：执行方法</span><br><span class="xml">#</span><span class="hljs-template-variable">&#123;T(类).字段|方法&#125;</span><span class="xml">：静态方法或字段</span><br><span class="xml">--&gt;</span><br><span class="xml"><span class="hljs-comment">&lt;!-- </span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;&#x27;jack&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;customerId.cname.toUpperCase()&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">通过另一个bean，获得属性，调用的方法</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;customerId.cname?.toUpperCase()&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">?.  如果对象不为null，将调用方法</span><br><span class="xml">--&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;customerId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.Customer&quot;</span> &gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;customerId.cname?.toUpperCase()&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pi&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;T(java.lang.<span class="hljs-keyword">Math</span>).PI&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&lt;!-- <br>集合的注入都是给<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>添加子标签</span><br><span class="xml">数组：</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="xml">List：</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml">Set：</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><br><span class="xml">Map：</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span> ，map存放k/v 键值对，使用</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span>描述</span><br><span class="xml">Properties：</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span></span><span class="xml">  【】</span><br><span class="xml"></span><br><span class="xml">普通数据：</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml">引用数据：</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ref</span>&gt;</span></span><br><span class="xml">--&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;collDataId&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.domain.CollData&quot;</span> &gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;arrayData&quot;</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>DS<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>DZD<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>屌丝<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>屌中屌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;listData&quot;</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>于嵩楠<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>曾卫<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>杨煜<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>曾小贤<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;setData&quot;</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>停封<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>薄纸<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>关系<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapData&quot;</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;jack&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;杰克&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rose<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>肉丝<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;propsData&quot;</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;高富帅&quot;</span>&gt;</span>嫐<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;白富美&quot;</span>&gt;</span>嬲<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span></span><br><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;男屌丝&quot;</span>&gt;</span>挊<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="10-2、小结"><a href="#10-2、小结" class="headerlink" title="10.2、小结"></a>10.2、小结</h5><p>Spring 依赖注入，是通过反射获取对象的setter方法实现的。所以我们通过xml配置实现依赖注入，必须为我们的类添加依赖类的提供setter方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setUserDao</span>(<span class="hljs-params">IUserDao userDao</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.userDao = userDao;<br>&#125; <br></code></pre></td></tr></table></figure><p>后面我们还会学习其他的 依赖注入复杂对象的方法。</p><h4 id="11、Spring全注解实现三层依赖注入"><a href="#11、Spring全注解实现三层依赖注入" class="headerlink" title="11、Spring全注解实现三层依赖注入"></a>11、Spring全注解实现三层依赖注入</h4><p>在Java中写Xml配置Bean还是比较麻烦，因此，Spring还提供了使用注解来配置的文件。我们可以来看一下，注解是怎么来配置这个Xml的</p><ol><li>修改xml文件，引入新的约束</li><li>指定需要扫描的包，里面有要交给Spring管理的类</li><li>修改类，在类上面加上注解，让Spring 可以扫描到</li></ol><p>1、修改XML配置context命名空间，让Spring扫描类与支持注解</p><p><img src="/2019/11/28/Spring/image-20191228191254644.png" alt="image-20191228191254644"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置让Spring扫描类与支持注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.kongwei_liao.*&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在类里面加上注解</p><blockquote><p>@Component  普通仓库（domain层）取代&lt;bean class=””&gt;</p><p>@Component(“id”) 取代 &lt;bean id=”” class=””&gt;</p><p>WEB开发，提供了3个@Component注解衍生注解（功能一样），&lt;bean class=””&gt;</p><ol><li>@Repository  仓库（其实就是dao层）</li><li>@Service    （service层）</li><li>@Controller  控制层(servlet、action)</li></ol></blockquote><p>3、依赖注入</p><blockquote><p>依赖注入，给私有字段设置，也可以给setter方法设置</p><p>​    普通值：@Value(“”)</p><p>​    引用值：</p><p>​        方式1：按照【类型】注入</p><p>​            @Autowired</p><p>​        方式2：按照【名称】注入1</p><p>​            @Autowired</p><p>​            @Qualifier(“名称”)</p><p>​        方式3：按照【名称】注入2</p><p>​            @Resource(“名称”)</p></blockquote><p>4、生命周期</p><blockquote><p>初始化：@PostConstruct</p><p>销毁：@PreDestroy</p></blockquote><p>5、作用域</p><blockquote><p>@Scope(“prototype”) 多例</p></blockquote><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs perl">//普通仓库，应该就是（实体类）那一层了<br><span class="hljs-keyword">package</span> cn.kongwei_liao.spring.domain;<br><br>import org.springframework.stereotype.Component;<br><br>@Component<br>public class User &#123;<br>    private String name;<br>    private Integer age;<br><br>    public User()&#123;&#125;;<br>    public User(String name, <span class="hljs-keyword">int</span> age) &#123;<br>        setName(name);<br>        setAge(age);<br>    &#125;<br><br>    public String getName() &#123;<span class="hljs-keyword">return</span> name;&#125;<br>    public void setName(String name) &#123;this.name = name;&#125;<br>    public Integer getAge() &#123;<span class="hljs-keyword">return</span> age;&#125;<br>    public void setAge(Integer age) &#123;this.age = age;&#125;<br><br>    public void init()&#123;System.out.println(<span class="hljs-string">&quot;初始化方法&quot;</span>);&#125;<br>    public void destroy()&#123;System.out.println(<span class="hljs-string">&quot;销毁&quot;</span>);&#125;<br>&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>@Repository<br>public class UserDaoImpl implements IUserDao&#123;<br>@Override<br>public void add(User user) &#123;<br>System.out.println(<span class="hljs-string">&quot;成功添加&quot;</span>+user.getName()+<span class="hljs-string">&quot;到数据库...&quot;</span>);<br>&#125;<br>&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>@Service<br>public class UserServiceImpl implements IUserService&#123;<br>@Autowired<br>private IUserDao userDao;<br><br>@Override<br>public void add(User user) &#123;<br>// 调用dao层方法 添加用户<br>userDao.add(user);<br>&#125;<br>&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>@Controller<br>public class UserServlet extends HttpServlet&#123;<br>@Autowired<br>private IUserService userService;<br><br>public void addUser() &#123;<br>User user = new User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">22</span>);<br>// 需要调用Service方法 新增用户到库<br>userService.add(user);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RunWith</span>(SpringJUnit4ClassRunner.class)<br><span class="hljs-variable">@ContextConfiguration</span>(<span class="hljs-string">&quot;classpath:applicationContext.xml&quot;</span>)<br>public class Spring4Test &#123;<br><br><span class="hljs-variable">@Autowired</span><br>private UserServlet userServlet;<br><br><span class="hljs-variable">@Test</span><br>public void testName() throws Exception &#123;<br><span class="hljs-selector-tag">userServlet</span><span class="hljs-selector-class">.addUser</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>小结:</p><p>初学使用xml版手动注入，熟练之后可以使用xml自动注入</p><p>以后趋势：注解版</p><p>如果是注解版，就全部使用注解（自己写类），不要混用，其它框架已经写好的类仍然使用xml进行配置，如果是xml版，在测试的使用必须使用注解注入（因为测试框架使用注解版）</p><p>只有自己写的类，才可以全部用注解，别人写的类使用注解必须去修改别人的源码，添加响应的注解标志。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2019/11/28/SpringMVC/"/>
    <url>/2019/11/28/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h3 id="1、SpringMVC概述"><a href="#1、SpringMVC概述" class="headerlink" title="1、SpringMVC概述"></a>1、SpringMVC概述</h3><h4 id="1-1、为什么引入SpringMVC？"><a href="#1-1、为什么引入SpringMVC？" class="headerlink" title="1.1、为什么引入SpringMVC？"></a>1.1、为什么引入SpringMVC？</h4><h5 id="1-1-1、传统MVC模式的问题"><a href="#1-1-1、传统MVC模式的问题" class="headerlink" title="1.1.1、传统MVC模式的问题"></a>1.1.1、传统MVC模式的问题</h5><p><strong>1、回顾JSP中所讲的MVC</strong></p><p>数据模型（Model）：负责封装应用的状态，并实现应用的功能。</p><p>视图展现（View）：界面，视图从模型获得要展示的数据，然后用自己的方式展现给用户。</p><p>控制器（Controller）：用来控制应用程序的流程和处理视图所发出的请求。当控制器接收到用户的请求后，会将用户的数据和模型的更新相映射，也就是调用模型来实现用户请求的功能；然后控制器会选择用于响应的视图，把模型更新后的数据展示给用户。</p><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_09-21-37.png"></p><p>最典型的MVC：JSP(view)+Servlet(controller)+JavaBean(dao model)模式</p><p><strong>2、 Jsp + Servlet + JavaBean存在问题：</strong></p><ol><li><p>web.xml 很臃肿</p></li><li><p>Servlet：</p></li></ol><p>接收参数：接收参数过程非常麻烦</p><p>调用业务逻辑：service</p><p>跳转页面：实现forward和redirect不方便</p><ol start="3"><li>Servlet职责不单一：（文件上传下载、令牌、字符编码等等）</li></ol><p>Servlet应只做核心功能，其他的功能交给框架做</p><h5 id="1-1-2、解决方案"><a href="#1-1-2、解决方案" class="headerlink" title="1.1.2、解决方案"></a>1.1.2、解决方案</h5><p>针对以上问题，我们现在选择SpringMVC 框架解决。  </p><h4 id="1-2、SpringMVC是什么？"><a href="#1-2、SpringMVC是什么？" class="headerlink" title="1.2、SpringMVC是什么？"></a>1.2、SpringMVC是什么？</h4><h5 id="1-2-1、基本概念"><a href="#1-2-1、基本概念" class="headerlink" title="1.2.1、基本概念"></a>1.2.1、基本概念</h5><p>SpringMVC是一个基于MVC模式的WEB表现层框架，它解决WEB开发中常见的问题(参数接收、文件上传/下载、表单验证、国际化等等)，使用非常简单，SpringMVC作为Spring中的一个模块,可以与Spring无缝集成。</p><p>目前很多公司都使用SpringMVC，90%的招聘单位要求熟悉使用SpringMVC。</p><p>它是一个典型的mvc构架，它是<code>一个纯正的servlet系统</code>，这也是它相比其他MVC框架所具有的优势。</p><h5 id="1-2-2、核心前端控制器"><a href="#1-2-2、核心前端控制器" class="headerlink" title="1.2.2、核心前端控制器"></a>1.2.2、核心前端控制器</h5><p>顾名思义核心控制器用于Web层核心功能的处理以及在所有控制器执行之前，所有的WebMvc框架都采用了这种方式，<code>在SpringMVC中使用的是DispatcherServlet为核心控制器</code>。</p><p>DispatcherServlet核心控制器会拦截匹配的请求，把拦截下来的请求，依据相应的规则【映射（url=控制器）】分发到目标Controller来处理。</p><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_09-30-21.png"></p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_09-30-58.png" style="zoom:80%;"><h3 id="2、SpringMVC入门案例"><a href="#2、SpringMVC入门案例" class="headerlink" title="2、SpringMVC入门案例"></a>2、SpringMVC入门案例</h3><h4 id="2-1、实现步骤"><a href="#2-1、实现步骤" class="headerlink" title="2.1、实现步骤"></a>2.1、实现步骤</h4><p>我们要用SpringMVC，需要先准备些什么事:</p><ol><li><p>使用SpringMVC必须先保证，你的项目拥有Spring的运行环境。</p></li><li><p>在添加SpringMVC相关jar包</p><ul><li>spring-webmvc-4.1.2.RELEASE.jar SpringMVC的jar文件。</li><li>spring-web-4.1.2.RELEASE.jar   Spring对Web项目运行的支持。</li></ul></li><li><p>在web.xml，配置核心控制器</p><p>SpringMVC框架的心脏就是核心控制器，负责所有请求的公共功能,他和我们之前的普通Servlet一样需要在web.xml中配置&lt;servlet-mapping&gt;</p></li><li><p>新建Controller控制器，处理请求，进行响应</p><p>SpringMVC中的控制器有一定规范，要求实现Controller接口或子接口</p></li><li><p>配置我们的Controller控制器</p><p>SpringMVC是基于Spring，Spring中的核心就是Ioc容器。SpringMVC中的控制器也是一个一个&lt;bean&gt;，需要在applicationContext.xml中进行配置</p></li><li><p>测试访问</p></li></ol><h4 id="2-2、具体实现"><a href="#2-2、具体实现" class="headerlink" title="2.2、具体实现"></a>2.2、具体实现</h4><h5 id="2-2-1、创建Web工程"><a href="#2-2-1、创建Web工程" class="headerlink" title="2.2.1、创建Web工程"></a>2.2.1、创建Web工程</h5><h5 id="2-2-2、导入Jar包"><a href="#2-2-2、导入Jar包" class="headerlink" title="2.2.2、导入Jar包"></a>2.2.2、导入Jar包</h5><p>从资料中导入springMVC独立运行的jar包</p><p>不要使用spring 3.x的jar和4.x的jar文件混用，危险的很</p><ul><li><p>   com.springsource.org.apache.commons.logging-1.1.1.jar</p></li><li><p>   spring-beans-4.1.2.RELEASE.jar</p></li><li><p>   spring-context-4.1.2.RELEASE.jar</p></li><li><p>   spring-core-4.1.2.RELEASE.jar</p></li><li><p>   spring-expression-4.1.2.RELEASE.jar</p></li><li><p>   spring-aop-4.1.2.RELEASE.jar</p></li><li><p>   spring orm、jdbc、tx相关jar根据项目使用自行添加;</p></li></ul><p>加入相关SpringMVC相关jar包。</p><ul><li><p>   spring-web-4.1.2.RELEASE.jar      spring 对web项目的支持。</p></li><li><p>   spring-webmvc-4.1.2.RELEASE.jar     SpringMVC核心包。</p></li></ul><h5 id="2-3-3、加入配置文件"><a href="#2-3-3、加入配置文件" class="headerlink" title="2.3.3、加入配置文件"></a>2.3.3、加入配置文件</h5><p><strong>1、创建ApplicationContext.xml</strong></p><p>SpringMVC本身就是Spring的子项目，对Spring兼容性很好，不需要做很多配置。</p><p>这里只配置一个Controller扫描就可以了，让Spring对页面控制层Controller进行管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置controller包扫描器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.kongwei_liao.springmvc.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2、配置前端控制器</strong></p><p>Webmvc框架的心脏就是<strong>核心控制器</strong>，负责所有请求的公共功能，然后在分发给具体的控制器（我们编写的控制器），完成业务逻辑，响应视图。</p><p>在web.xml中配置SpringMVC的<strong>前端控制器DispatcherServlet</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置sringmvc前端控制器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-comment">&lt;!--若不止一个&lt;init-param&gt;标签，第一个优先--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">1. /* :拦截所有.包括静态资源 (不建议使用)</span><br><span class="hljs-comment">2. .action .do : 拦截以action和do结尾的请求 (主要用于后台系统.)</span><br><span class="hljs-comment">3. / :拦截所有,但是不包含jsp...</span><br><span class="hljs-comment">其他静态资源如:.css,.js等       需要用例外的配置进行放行 (主要用于前台系统)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-4、创建MyController"><a href="#2-3-4、创建MyController" class="headerlink" title="2.3.4、创建MyController"></a>2.3.4、创建MyController</h5><p>SpringMVC中的控制器与以前我们以前学习的servlet作用一样，处理用户请求，调用业务逻辑，返回结果视图。</p><p>SpringMVC中的控制器有一定规范，要么实现接口，要么使用POJO对象与注解配合使用。</p><table><thead><tr><th>规范要求</th><th>说明</th></tr></thead><tbody><tr><td><code>实现Controller接口或子接口。</code>  注意：子接口很多已经过时了。</td><td>核心方法为handleRequest(req,resp)，处理用户请求</td></tr><tr><td>普通的类(常用的哦)</td><td>使用一个普通的类作为我们的控制器，每一个方法就是一个处理器，这种方式需要配合注解标签才能使用。</td></tr></tbody></table><p>这里作为演示案例：</p><p>MyController需要<code>实现Controller接口</code>，<code>重写handleRquest方法</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-5、创建ModelAndView"><a href="#2-3-5、创建ModelAndView" class="headerlink" title="2.3.5、创建ModelAndView"></a>2.3.5、创建ModelAndView</h5><p>handleRequest方法的两个参数与我们以前的Servlet中service方法一样，request和response对象，我们可以使用这个两个对象完成一次请求的所有工作，比如你可以使用request接受参数，或者使用response重定向等等，<strong>注意该方法还有一个返回值ModelAndView</strong>。</p><p>ModelAndView是SpringMVC控制器中特有一个对象，<strong>描述一次请求响应的 数据（Model）和 视图（View）</strong>。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public ModelAndView handle<span class="hljs-constructor">Request(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span> throws Exception &#123;<br><span class="hljs-comment">// 处理请求： 接收参数  业务调用  页面跳转</span><br><br><span class="hljs-comment">// 创建 ModelAndView 对象</span><br>ModelAndView mav = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ModelAndView()</span>;<br><br><span class="hljs-comment">// 添加模型数据</span><br>mav.add<span class="hljs-constructor">Object(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;&lt;h2&gt;Hello SpringMVC!&lt;/h2&gt;&quot;</span>)</span>;<br><br><span class="hljs-comment">// 设置视图路径</span><br>mav.set<span class="hljs-constructor">ViewName(<span class="hljs-string">&quot;index.jsp&quot;</span>)</span>;<br><br>return mav;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-6、配置我们的控制器"><a href="#2-3-6、配置我们的控制器" class="headerlink" title="2.3.6、配置我们的控制器"></a>2.3.6、配置我们的控制器</h5><p>**name: ** /hello.do 为<code>控制器的访问路径</code></p><p><strong>class:</strong>  cn.kongwei_liao.springmvc.controller.MyController<code>控制器类的全限定名</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;/index.do&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.springmvc.controller.MyController&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><h5 id="2-3-7、JSP页面"><a href="#2-3-7、JSP页面" class="headerlink" title="2.3.7、JSP页面"></a>2.3.7、JSP页面</h5><p>和我们之前的jsp页面一样，里面接收一下Controller 传递过来的数据</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">$</span><span class="hljs-template-variable">&#123;message&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2-3-8、启动项目"><a href="#2-3-8、启动项目" class="headerlink" title="2.3.8、启动项目"></a>2.3.8、启动项目</h5><ol><li>启动Tomcat报错（？？？是否是Tomcat报错存疑）</li></ol><p>错误信息如下：</p><p><img src="/2019/11/28/SpringMVC/clip_image002.jpg" alt="img"></p><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_15-40-56.png"></p><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_15-31-47.png"></p><p>没找到<code>/WEB-INF/springmvc-servlet.xml</code>文件OR没找到<code>/WEB-INF/DispatcherServlet-servlet.xml</code>文件，因为在启动Tomcat服务器的时候会初始化SpringMVC中的DispatcherServlet，而这个DispatcherServlet会根据配置文件初始化Spring容器，默认配置文件路径为：**/WEB-INF/&lt;servlet-name&gt;-servlet.xml**（？？？解释存疑）</p><p><img src="/2019/11/28/SpringMVC/clip_image004.jpg" alt="img"></p><ol start="2"><li>解决问题方式：</li></ol><p>1.可以把我们的配置文件更名为DispatcherServlet-servlet.xml，然后拷贝到WEB-INF中。</p><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_15-43-48.png" alt="img"></p><p>2.一般spring的配置文件都在放在src中或者Resources文件夹中，我们可以通过以下配置告诉SpringMVC我们的配置文件路径。<strong>（常见做法）</strong></p><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_15-48-33.png" alt="img"></p><h5 id="2-3-9、测试"><a href="#2-3-9、测试" class="headerlink" title="2.3.9、测试"></a>2.3.9、测试</h5><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_15-50-54.png"></p><h4 id="2-4、小结"><a href="#2-4、小结" class="headerlink" title="2.4、小结"></a>2.4、小结</h4><p>以上我们，实现了一个使用SpringMVC请求响应过程。</p><p>我们自己<strong>创建了MyController用于接收请求并处理</strong>，通过<strong>ModelAndView传递了数据到我们的index.jsp</strong>，</p><p>这个<strong>jsp将视图页面响应给用户</strong>。</p><p>另外，需要注意的事：配置文件时一定要细心</p><p>我们在web.xml 中配置了前端控制器，并指定了Spring的applicationContext.xml 配置文件的位置。</p><p><strong>在applicationContext.xml，通过&lt;bean&gt;标签，配置了我们的Controller。</strong></p><h3 id="3、SpringMVC执行流程"><a href="#3、SpringMVC执行流程" class="headerlink" title="3、SpringMVC执行流程"></a>3、SpringMVC执行流程</h3><h4 id="3-1、引入"><a href="#3-1、引入" class="headerlink" title="3.1、引入"></a>3.1、引入</h4><p>刚刚我们实现了一个使用SpringMVC请求响应过程。那为什么可以这样用呢？SpringMVC的实现原理又是怎样的呢？我们需要分析一下springMVC的架构图</p><h4 id="3-2、SpringMVC框架结构"><a href="#3-2、SpringMVC框架结构" class="headerlink" title="3.2、SpringMVC框架结构***"></a>3.2、SpringMVC框架结构***</h4><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_10-29-33.png"></p><p><code>控制器(Controller) = 处理器(Handler)</code></p><h4 id="3-3、SpringMVC工作流程"><a href="#3-3、SpringMVC工作流程" class="headerlink" title="3.3、SpringMVC工作流程"></a>3.3、SpringMVC工作流程</h4><h5 id="3-3-1、详细描述"><a href="#3-3-1、详细描述" class="headerlink" title="3.3.1、详细描述"></a>3.3.1、详细描述</h5><p>1.用户发送请求至<code>前端控制器DispatcherServlet</code></p><p>2.DispatcherServlet收到请求调用<code>HandlerMapping处理器映射器</code>。</p><p>3.处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p><p>4.DispatcherServlet通过<code>HandlerAdapter处理器适配器</code>调用处理器</p><p>5.执行处理器(Controller，也叫后端控制器)。</p><p>6.Controller执行完成返回<code>ModelAndView</code></p><p>7.HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet</p><p>8.DispatcherServlet将ModelAndView传给<code>ViewReslover视图解析器</code></p><p>9.ViewReslover解析后返回具体View</p><p>10.DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。</p><p>11.DispatcherServlet响应用户。</p><h5 id="3-3-2、简易版本–面试回答"><a href="#3-3-2、简易版本–面试回答" class="headerlink" title="3.3.2、简易版本–面试回答"></a>3.3.2、简易版本–面试回答</h5><ol><li><p>客户端请求提交到DispatcherServlet</p></li><li><p>由DispatcherServlet控制器查询HandlerMapping，找到处理请求的Controller。</p></li><li><p>DispatcherServlet将请求转发给到Controller。</p></li><li><p>Controller调用业务逻辑处理后，返回ModelAndView</p></li><li><p>DispatcherServlet查询ViewResolver视图解析器，找到ModelAndView指定的视图。</p></li><li><p>视图负责将填充了数据的结果响应到客户端。</p></li></ol><h4 id="3-4、SpringMVC核心对象"><a href="#3-4、SpringMVC核心对象" class="headerlink" title="3.4、SpringMVC核心对象"></a>3.4、SpringMVC核心对象</h4><h5 id="3-4-1、DispatcherServlet：前端控制器"><a href="#3-4-1、DispatcherServlet：前端控制器" class="headerlink" title="3.4.1、DispatcherServlet：前端控制器"></a>3.4.1、DispatcherServlet：前端控制器</h5><p>用户请求到达前端控制器，它就相当于mvc模式中的C，<code>DispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求</code>，DispatcherServlet的存在降低了组件之间的耦合性。</p><h5 id="3-4-2、HandlerMapping：处理器映射器"><a href="#3-4-2、HandlerMapping：处理器映射器" class="headerlink" title="3.4.2、HandlerMapping：处理器映射器"></a>3.4.2、HandlerMapping：处理器映射器</h5><p><code>HandlerMapping负责根据用户请求url找到最合适的处理器Handler.</code><br>我们刚才是通过<strong>配置文件的方式</strong>：<br>处理器映射器通过&lt;bean name=”/xxx”&gt;注册的控制器。控制器需要实现Controller接口。<br>也可以通过<strong>注解的方式</strong>去实现，<br>等一下我们介绍完SpringMVC的核心对象后，会带着大家通过全注解的方式实现一个Controller。</p><h5 id="3-4-3、HandlerAdapter：处理器适配器"><a href="#3-4-3、HandlerAdapter：处理器适配器" class="headerlink" title="3.4.3、HandlerAdapter：处理器适配器"></a>3.4.3、HandlerAdapter：处理器适配器</h5><p>支持多种类型的处理器，如何执行我们的控制器（Controller有多种不同实现方式）。<br>SpringMVC的常用的处理器适配器有：<br><code>HttpRequestHandlerAdapter</code> 处理实现了<code>HttpRequestHandler接口</code>对应的处理器。<br><code>SimpleControllerHandlerAdapter</code> 处理实现了<code>Controller接口</code>对应的控制器。<br>说明：<br>直接配置处理器映射器和处理器适配器比较麻烦，SpringMVC 3.2以上会自动加载默认的映射器RequestMappingHandlerMapping和 默认的适配器RequestMappingHandlerAdapter。</p><h5 id="3-4-4、Handler：处理器"><a href="#3-4-4、Handler：处理器" class="headerlink" title="3.4.4、Handler：处理器"></a>3.4.4、Handler：处理器</h5><p><code>Handler是继DispatcherServlet前端控制器的后端控制器</code>，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。<br>由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。<br>我们刚才创建的 MyController 就是一个处理器。</p><h5 id="3-4-5、ViewResolver：视图解析器"><a href="#3-4-5、ViewResolver：视图解析器" class="headerlink" title="3.4.5、ViewResolver：视图解析器"></a>3.4.5、ViewResolver：视图解析器</h5><p>View Resolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。<br>视图解析器使用SpringMVC框架默认的<code>InternalResourceViewResolver</code>，这个视图解析器支持JSP视图解析。通常我们会配置前后缀来减少代码的重复。可以修改我们的入门案例来看一下：<br>在applicationContext.xml配置文件中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定视图的前缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 指定视图的后缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>逻辑视图名需要在Controller中返回ModelAndView指定</code>，比如逻辑视图名为hello，则最终返回的jsp视图地址是：<code>前缀+逻辑视图名+后缀</code>、即</p><p>“WEB-INF/jsp/hello.jsp”</p><h5 id="3-4-6、View：视图"><a href="#3-4-6、View：视图" class="headerlink" title="3.4.6、View：视图"></a>3.4.6、View：视图</h5><p>SpringMVC框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView等。目前我们最常用的视图就是jsp。</p><p>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p><h4 id="3-5、小结"><a href="#3-5、小结" class="headerlink" title="3.5、小结"></a>3.5、小结</h4><p>1、在SpringMVC 的六个核心组件中，DispatcherServlet前端控制器是整个流程控制的中心<br>2、一般我们称：处理器映射器、处理器适配器、视图解析器 为SpringMVC的三大组件。<br>3、需要用户开发的组件有处理器(Controller)、视图view</p><h3 id="4、Controller实现方式"><a href="#4、Controller实现方式" class="headerlink" title="4、Controller实现方式"></a>4、Controller实现方式</h3><h4 id="4-1、引入"><a href="#4-1、引入" class="headerlink" title="4.1、引入"></a>4.1、引入</h4><p>我们刚刚在介绍的SpringMVC的核心时有提到，处理器适配器可以执行的Controller其实是有不同的实现方式，在入门案例中我们也演示了通过实现Controller接口的方式。接下来我们在看看其他实现控制器的方式，并重点掌握也是Spring推荐使用的方式–全注解去实现自己的Controller。</p><h4 id="4-2、三种实现方式"><a href="#4-2、三种实现方式" class="headerlink" title="4.2、三种实现方式"></a>4.2、三种实现方式</h4><h5 id="4-2-1、实现Controller接口"><a href="#4-2-1、实现Controller接口" class="headerlink" title="4.2.1、实现Controller接口"></a>4.2.1、实现Controller接口</h5><p>就是我们刚才入门案例演示的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现Controller接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>System.out.println(<span class="hljs-keyword">this</span>.getClass());<br><span class="hljs-comment">//模型数据和视图对象</span><br>ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>modelAndView.setViewName(<span class="hljs-string">&quot;/WEB-INF/controller.jsp&quot;</span>);<br><span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;/controller01.do&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.kongwei_liao.springmvc.controller.ControllerDemo1&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><h5 id="4-2-2、实现HttpRequestHandler接口"><a href="#4-2-2、实现HttpRequestHandler接口" class="headerlink" title="4.2.2、实现HttpRequestHandler接口"></a>4.2.2、实现HttpRequestHandler接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现了HttpRequestHandler接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpRequestHandler</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>System.out.println(<span class="hljs-keyword">this</span>.getClass());<br>request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/controller.jsp&quot;</span>).forward(request, response);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;/controller02.do&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.itsource.springmvc.controller.ControllerDemo2&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><h5 id="4-2-3、普通类和注解（建议使用）"><a href="#4-2-3、普通类和注解（建议使用）" class="headerlink" title="4.2.3、普通类和注解（建议使用）***"></a>4.2.3、普通类和注解（建议使用）***</h5><p>SpringMVC中控制器建议使用注解方式，是官方推荐的，外面公司也是多使用此方式。<br>这种方式只要配置SpringMVC开启注解支持，然后在类上添加注解即可。</p><p>具体步骤如下：</p><p>第一步：SpringMVC开启支持注解</p><p>只要在 Spring 配置文件中添加如下标签即可实现：处理通过注解方式实现的控制器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 支持注解 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置controller包扫描器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.ant_nest.springmvc.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>说明：<br>在Spring中一般采用<code>@RequestMapping</code>注解来完成映射关系，要想使@RequestMapping注解生效必须向上下文中注册<code>DefaultAnnotationHandlerMapping</code>和一个<code>AnnotationMethodHandlerAdapter</code>实例，这两个实例分别在类级别和方法级别处理。</p><p>而<code>&lt;mvc:annotation-driven/&gt;</code>配置帮助我们自动完成上述两个实例的注入。</p><p>第二步：创建一个普通Java类<code>不需要实现任何接口</code></p><p>只需要在类上添加@Controller注解，把Controller交由Spring管理。</p><p>在方法上面添加@RequestMapping注解，里面指定请求的url。使处理器映射器可以找到它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnController</span> </span>&#123;<br><br><span class="hljs-meta">@RequestMapping(&quot;/anncon.do&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m01</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;AnnController!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@RequestMapping</strong> <strong>注解说明：</strong></p><p>@RequestMapping 中常用的属性有以下几个:</p><ol><li><p>value: 默认属性，请求的实际路径，可以配置多路径映射</p></li><li><p>method:请求方法的限定。可以限定 GET,POST,DELETE,PUT 请求方式</p></li></ol><p>value 的使用：</p><p>①使用在方法上，可以将 url 映射到指定的方法</p><p>②使用在类上，如果该 controller 的映射路径都有固定的前缀</p><p>/user/addUser.do</p><p>/user/deleteUser.do</p><p>/user/updateUser.do</p><p>修改一下 AnnController 测试一下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Controller</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/anncon&quot;</span>)<br>public class AnnController &#123;<br><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/m01.do&quot;</span>)<br>public void m01()&#123;<br><span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;Method01 !&quot;</span>);<br>&#125;<br><br>@<span class="hljs-selector-tag">RequestMapping</span>(<span class="hljs-string">&quot;/m02.do&quot;</span>)<br><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">m02</span>()&#123;<br><span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;Method2 !&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后访问路径：<a href="http://localhost:8080/demo/anncon/m01.do">http://localhost:8080/demo/anncon/m01.do</a></p><h4 id="4-3、小结"><a href="#4-3、小结" class="headerlink" title="4.3、小结"></a>4.3、小结</h4><p>常见的Controller实现方式有三种，我们<code>一般采用全注解的方式</code>：</p><p>需要在Spring配置文件中开启全注解支持，怎么开启？</p><p>然后在我们自己的Controller类上添加@Controller和@RequestMapping注解</p><h3 id="5、接收参数，页面跳转，传递对象（Servlet原来做的事情）"><a href="#5、接收参数，页面跳转，传递对象（Servlet原来做的事情）" class="headerlink" title="5、接收参数，页面跳转，传递对象（Servlet原来做的事情）"></a>5、接收参数，页面跳转，传递对象（Servlet原来做的事情）</h3><h4 id="5-1、引入"><a href="#5-1、引入" class="headerlink" title="5.1、引入"></a>5.1、引入</h4><p>我们用过注解实现了一个Controller，但是这样一个Controller又如何才能实现原来Servlet的作用呢? 要怎样才能接收参数，实现页面跳转并且传递数据的呢? 下面我们来一一介绍。  </p><h4 id="5-2、接收参数的四种方式"><a href="#5-2、接收参数的四种方式" class="headerlink" title="5.2、接收参数的四种方式"></a>5.2、接收参数的四种方式</h4><h5 id="5-2-1、接收普通参数"><a href="#5-2-1、接收普通参数" class="headerlink" title="5.2.1、接收普通参数"></a>5.2.1、接收普通参数</h5><p>1、形参名称与传递参数一致</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Controller<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> DataController &#123;<br>// 普通数据接收<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * http://localhost:8080/demo/params01.do?name=admin&amp;age=24</span><br><span class="hljs-comment"> */</span><br>@RequestMapping(&quot;/params01.do&quot;)<br><span class="hljs-built_in">public</span> ModelAndView params01(String <span class="hljs-type">name</span>, <span class="hljs-type">Integer</span> age) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;name:&quot; + <span class="hljs-type">name</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;age:&quot; + age);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、形参名称与传递参数不一致</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果传过来的名称与接收的名称不一致</span><br><span class="hljs-comment"> * http://localhost:8080/demo/params02?name=admin&amp;age=24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/params02.do&quot;</span>)<br>public ModelAndView params02(<span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;name&quot;</span>) String username,Integer age)&#123;<br><span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;username:&quot;</span>+username);<br><span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;age:&quot;</span>+age);<br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-2-2、使用对象接收参数"><a href="#5-2-2、使用对象接收参数" class="headerlink" title="5.2.2、使用对象接收参数"></a>5.2.2、使用对象接收参数</h5><p>准备对象</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> class User &#123;<br><span class="hljs-keyword">private</span> Long id;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> age;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">Date</span> <span class="hljs-built_in">date</span>;<br><span class="hljs-comment">// 其它的getter,setter省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * http://localhost:8080/anncon/params03.do?name=admin&amp;age=24&amp;date=2018-12-09</span><br><span class="hljs-comment"> * 注意：接收日期必需在</span><br><span class="hljs-comment"> * set时间前配置：@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-comment"> */</span><br>@RequestMapping(&quot;/params03.do&quot;)<br><span class="hljs-built_in">public</span> ModelAndView params03(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;name:&quot; + <span class="hljs-keyword">user</span>.getName());<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;age:&quot; + <span class="hljs-keyword">user</span>.getAge());<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;date:&quot; + <span class="hljs-keyword">user</span>.getDate());<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>特别注意：在对象部分咱们加了一个日期，而日期格式的数据接收需要加相应的注解:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@DateTimeFormat</span>(pattern = <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setDate</span>(<span class="hljs-params"><span class="hljs-built_in">Date</span> date</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.date = date;<br>&#125;<br></code></pre></td></tr></table></figure><p>注: @DateTimeFormat要生效，则applicationContext.xml 中一定要配置<strong>支持注解</strong>的适配器和映射器</p><h5 id="5-2-3、HttpServletRequest接收参数（不建议使用）"><a href="#5-2-3、HttpServletRequest接收参数（不建议使用）" class="headerlink" title="5.2.3、HttpServletRequest接收参数（不建议使用）"></a>5.2.3、HttpServletRequest接收参数（不建议使用）</h5><p>SpringMVC想要拿Request，Session，Response直接在参数中写即可(它很强大)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 使用HttpServletRequest接收(不建议使用)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * http://localhost:8080/demo/params04?name=admin&amp;age=24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;/params04&quot;</span>)</span><br><span class="hljs-keyword">public</span> ModelAndView params04(HttpServletRequest request) &#123;<br>System.<span class="hljs-keyword">out</span>.println(request.getParameter(<span class="hljs-string">&quot;name&quot;</span>));<br>System.<span class="hljs-keyword">out</span>.println(request.getParameter(<span class="hljs-string">&quot;age&quot;</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-2-4、URL地址提取数据，RESTful风格"><a href="#5-2-4、URL地址提取数据，RESTful风格" class="headerlink" title="5.2.4、URL地址提取数据，RESTful风格"></a>5.2.4、URL地址提取数据，RESTful风格</h5><p>什么是 RESTful</p><p><img src="/2019/11/28/SpringMVC/clip_image001.jpg" alt="img"></p><p>当你到公司被要求写一个接口时，很有可能就需要提供一个符合Restful风格的方法实现。</p><p>我们来对比传统开发和 RESTful 开发 url 的对比.</p><p>功能           传统开发                                                          RESTful 风格开发</p><p>​                    url                                        提交方式            url                      提交方式</p><p>添加用户    /ems/addUser.do                 POST              /ems/user          POST</p><p>删除用户    /ems/deleteUser.do?id=1   GET/POST      /ems/user/1      DELETE</p><p>修改用户    /ems/updateUser.do           POST              /ems/user          PUT</p><p>查询用户    /ems/getUser.do?id=1         GET                /ems/user/1       GET</p><p>代码实现</p><p>根据 RESTful 风格.我们请求的 url 是: <a href="http://localhost/params05/user/10">http://localhost/params05/user/10</a></p><p><strong>controller</strong> <strong>代码</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收url中参数的请求,接收用户请求参数值 </span><br><span class="hljs-comment"> * http://localhost:8080/demo/params05/user/10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/params05/user/&#123;id&#125;&quot;</span>)<br>public ModelAndView params05(<span class="hljs-variable">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>)Long id)&#123;<br><span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(id);<br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><p>将动态的 id 用 { } 括起来.</p><p>在方法的形参前,使用**@PathVariable** 注解, 将 url 上的参数封装到形参上；</p><p>如果是使用domain对象接收参数这里无需 @pathVariable注解；</p><p>如果是<code>多参数 url</code> 应为: /user/{name}/{id}, 多个参数使用 / 隔开；</p><p>对于多参数的 url，在方法的形参上使用多个参数接收, 每个参数前都要添@PathVariable 。</p><p><strong>web.xml</strong> <strong>修改</strong></p><p>因为之前我们配置的前端控制器拦截规则是*.do，所以 RESTful 风格的请求无法进入 controller，因此我们将拦截规则修改为 / </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>说明：</p><p>&lt;url-pattern&gt; 配置的3种方式 </p><table><thead><tr><th>&lt;url-pattern&gt;</th><th>配置说明</th></tr></thead><tbody><tr><td>/*</td><td>不用，所有都会拦截，包括jsp</td></tr><tr><td>*.do</td><td>配置简单,可以访问静态资源(不支持RESTful风格)</td></tr><tr><td>/</td><td>配置复杂一点，支持RESTful风格</td></tr></tbody></table><p><strong>Spring配置：对静态资源放行</strong></p><p>当拦截规则修改之后，静态资源（.html, .css, .js…）也会被拦截，所以我们需要对静态资源放行. </p><p>在 applicationContext.xml 文件中 映射器和适配器的后面 进行放行配置.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动加载推荐的处理器映射器和适配器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 静态资源放行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们就可以正常访问静态资源了，再次访问<a href="http://localhost:8080/anncon/data.html%E8%AF%95%E8%AF%95">http://localhost:8080/anncon/data.html试试</a></p><h5 id="5-2-5、小结"><a href="#5-2-5、小结" class="headerlink" title="5.2.5、小结"></a>5.2.5、小结</h5><p>1.接收参数常用方式（普通参数，对象接收，URL地址提取）</p><p>2.形参名称不一致使用@RequestParam(“name”)String username </p><p>3.日期接收参数添加标签@DateTimeFormat(setXxx)</p><p>4.URL地址提取 /路径/{id} @PathVariable(“id”)Long id</p><h4 id="5-3、页面跳转"><a href="#5-3、页面跳转" class="headerlink" title="5.3、页面跳转"></a>5.3、页面跳转</h4><h5 id="5-3-1、跳转方式"><a href="#5-3-1、跳转方式" class="headerlink" title="5.3.1、跳转方式"></a>5.3.1、跳转方式</h5><p>咱们学习的跳转方式有两种: 重定向与请求转发</p><table><thead><tr><th></th><th>请求转发(forward)</th><th>重定向(redirect)</th></tr></thead><tbody><tr><td>访问WEB-INF</td><td><strong>√</strong></td><td><strong>X</strong></td></tr><tr><td>request传参</td><td><strong>√</strong></td><td><strong>X</strong></td></tr><tr><td>全新请求(URL变化)</td><td><strong>X</strong></td><td><strong>√</strong></td></tr><tr><td>访问外网</td><td><strong>X</strong></td><td><strong>√</strong></td></tr></tbody></table><p><strong>请求转发(forward)</strong></p><p>上面4个案例都是转发，转发的值都是放到request请求作用域，下一个页面可以取出，Url地址不会改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用请求转发</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/path06&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">data5</span>(<span class="hljs-params">Model model,HttpSession session</span>)</span>&#123;<br>model.addAttribute(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<span class="hljs-comment">//可以取出数据</span><br>session.setAttribute(<span class="hljs-string">&quot;testsession&quot;</span>, <span class="hljs-string">&quot;张三session&quot;</span>);<span class="hljs-comment">//可以取出数据</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/data.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重定向(redirect)</strong></p><p>重定向就是发出一个全新的请求，如果把值放到request请求，下一个页面不能取出</p><p>如果把值放到session会话请求，下一个页面可以取出</p><p>Url地址会改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用重定向</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/path07&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">data6</span>(<span class="hljs-params">Model model,HttpSession session</span>)</span>&#123;<br>model.addAttribute(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<span class="hljs-comment">//不可以取出数据</span><br>session.setAttribute(<span class="hljs-string">&quot;testsession&quot;</span>, <span class="hljs-string">&quot;张三session&quot;</span>);<span class="hljs-comment">//可以取出数据</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/data.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-2、前缀使用"><a href="#5-3-2、前缀使用" class="headerlink" title="5.3.2、前缀使用"></a>5.3.2、前缀使用</h5><p>视图名规则</p><p>​    不写前缀默认为 “转发” </p><p>​    视图名字符串前缀:</p><p>​        forward:/xxx.jsp 采用转发。</p><p>​        redirect:/xxx.jsp 采用重定向。</p><p>我们之前已经配置了视图解析器，我们再次看一下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 指定视图的前缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 指定视图的后缀 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>有没有发现什么样的问题？</p><p>说明：</p><p><code>使用了forword 或 redirect跳转页面通过视图解析器时是不会添加前缀和后缀的。</code></p><p>用于跳转到一些特殊的路径，比如：</p><p>页面不在前缀路径中的情况（或者页面路径不是以.jsp为后缀）</p><h4 id="5-4、传递参数的四种方式"><a href="#5-4、传递参数的四种方式" class="headerlink" title="5.4、传递参数的四种方式"></a>5.4、传递参数的四种方式</h4><h5 id="5-4-1、通用ModelAndView方式"><a href="#5-4-1、通用ModelAndView方式" class="headerlink" title="5.4.1、通用ModelAndView方式"></a>5.4.1、通用ModelAndView方式</h5><p>在之前的入门案例里我们就看到过了ModelAndView，使用ModelAndView 可以传递参数到指定视图路径。我们再来试一下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">/**<br> * 通过ModelAndView 传递普通参数<br> * http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/demo/</span>data01<br> * @return<br> */<br>@RequestMapping(<span class="hljs-string">&quot;/data01&quot;</span>)<br>public ModelAndView data01()&#123;<br><span class="hljs-regexp">//</span>创建ModelAndView.用于保存数据和视图<br>ModelAndView mav = new ModelAndView();<br><span class="hljs-regexp">//</span>设置数据到模型中<br>mav.addObject(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;ModelAndView 传递数据&quot;</span>);<br><span class="hljs-regexp">//</span>设置jsp视图<br>mav.setViewName(<span class="hljs-string">&quot;view&quot;</span>);<br><span class="hljs-regexp">//</span>返回模型视图<br>return mav;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以传递JavaBean 对象：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过ModelAndView 传递对象参数</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/data02&quot;</span>)</span><br>public ModelAndView data02<span class="hljs-literal">()</span>&#123;<br><span class="hljs-comment">//创建ModelAndView.用于保存数据和视图</span><br>ModelAndView mav = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ModelAndView()</span>;<br><span class="hljs-comment">//设置数据到模型中</span><br>User user = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>user.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;李四&quot;</span>)</span>;<br>mav.add<span class="hljs-constructor">Object(<span class="hljs-params">user</span>)</span>;<br><br><span class="hljs-comment">//设置jsp视图</span><br>mav.set<span class="hljs-constructor">ViewName(<span class="hljs-string">&quot;view&quot;</span>)</span>;<br><span class="hljs-comment">//返回模型视图</span><br>return mav;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：<br>我们<code>使用addObject（String attributeName,Object attributeValue）方法添加返回的数据</code>。<br>当使用Object类型的对象的时候，必须指定一个名字。<code>ModelAndView，也可以接收没有明显名字的对象</code>，原因在于ModelAndView，将调用<code>spring自己定义的方法Conventions.getVariableName()来为这个model生成一个名字</code>。显然，<code>对model而言，名字是必须的</code>。<br>Conventions.getVariableName()生成名字的规则是<code>（使用对象的类名的小写模式来作model名字，能够由EL表达式访问）</code>。当这个model是集合或数组的时候，使用集合的第一个元素的类名加s来作model的名字。</p><h5 id="5-4-2、使用Model方式（强烈建议使用）"><a href="#5-4-2、使用Model方式（强烈建议使用）" class="headerlink" title="5.4.2、使用Model方式（强烈建议使用）"></a>5.4.2、使用Model方式（强烈建议使用）</h5><p>使用ModelAndView 需要我们自己创建对象，其实体贴的SpringMVC框架已经为我们的参数传递准备了专门的对象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过Model 传递参数</span><br><span class="hljs-comment"> * SpringMVC会自动创建模型对象传到方法中，我们只需要往这个模型对象中添加数据即可</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return </span>返回值为字符串,我们可以理解为就是一个视图的名称(写路径即可)</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/data03&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">data03</span>(<span class="hljs-params">Model model</span>)</span>&#123;<br><span class="hljs-comment">//添加数据</span><br>model.addAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;Model 传递数据&quot;</span>);<br><br>    <span class="hljs-comment">//指定要返回的视图路径</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;view&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ModelAndView与 Model的区别：</p><p>Model是每次请求中都存在的默认参数；</p><p>利用其addAttribute()方法即可将服务器的值传递到jsp页面中</p><p>ModelAndView包含model和view两部分</p><p>使用时需要自己实例化，利用ModelMap用来传值，也可以设置view的名称</p><p><code>无论是ModelAndView还是Model传递的对象是存放在request Scope中的</code>，如果需要在session域中传值，可以像Model一样在方法的参数里添加Session 即可使用。</p><h5 id="5-4-3、HttpServletRequest方式（不建议使用）"><a href="#5-4-3、HttpServletRequest方式（不建议使用）" class="headerlink" title="5.4.3、HttpServletRequest方式（不建议使用）"></a>5.4.3、HttpServletRequest方式（不建议使用）</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//通过request对象进行数据传递(不建议使用)</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/data04&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> data04(HttpServletRequest request,HttpServletResponse response) <br><span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br>request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;HttpServletRequest&quot;</span>);<br><span class="hljs-comment">//需要自己指定跳转页面的全路径</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/view.jsp&quot;</span>).forward(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-4-4、返回值传参（不建议使用）"><a href="#5-4-4、返回值传参（不建议使用）" class="headerlink" title="5.4.4、返回值传参（不建议使用）"></a>5.4.4、返回值传参（不建议使用）</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回值就是模型数据</span><br><span class="hljs-comment"> * SpringMVC会自动创建一个ModelAndView对象，并且调用添加模型 mdv.addObject(&quot;user&quot;, user);</span><br><span class="hljs-comment"> * 并且访问路径就是视图的名称 /data05  mdv.setViewName(&quot;/data05&quot;);</span><br><span class="hljs-comment"> * 在这里我们的视图肯定没有data05的视图，所以会报一个错</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@RequestMapping(&quot;/data05&quot;)<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> data05()&#123;<br><span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br><span class="hljs-keyword">user</span>.setName(&quot;张三&quot;);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">user</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不要使用这种方式直接返回对象，<code>这种方式只用在我们需要把返回的对象转换为Json数据时</code>。</p><h4 id="5-5、小结"><a href="#5-5、小结" class="headerlink" title="5.5、小结"></a>5.5、小结</h4><ol><li><p>接收和传参的4种方式，建议使用Model方式</p></li><li><p>跳转时可以配置视图解析器ViewResolver，简化咱们的跳转</p></li><li><p>怎么使用不同的方式(forward/redirect)进行跳转 ?</p></li></ol><h3 id="6、SpringMVC返回JSON"><a href="#6、SpringMVC返回JSON" class="headerlink" title="6、SpringMVC返回JSON"></a>6、SpringMVC返回JSON</h3><h4 id="6-1、引入"><a href="#6-1、引入" class="headerlink" title="6.1、引入"></a>6.1、引入</h4><h5 id="6-1-1-什么是json？"><a href="#6-1-1-什么是json？" class="headerlink" title="6.1.1.  什么是json？"></a>6.1.1.  什么是json？</h5><p>json是一种轻量级的前端后端以及网络传输的数据交换格式，就是一串字符串。也就是说在后端可以把一个复杂对象，通过json来转换成特定的字符串传到前端去。</p><p>简单的：var json = ‘{“name”:”张三” , “age”:18 }’;</p><h5 id="6-1-2-为什么要用json？"><a href="#6-1-2-为什么要用json？" class="headerlink" title="6.1.2.  为什么要用json？"></a>6.1.2.  为什么要用json？</h5><p>json本来是javascript里的内容，有时后端要传各种各样的数据格式来适应前端，所以需要用到json来转换，用它来表示各种各样复杂的数据。 </p><p>数据格式比较简单, 易于读写, 能够直接为服务器端代码使用, 大大简化了服务器端和客户端的代码开发量, 且易于维护，语言无关。</p><h4 id="6-2、实现"><a href="#6-2、实现" class="headerlink" title="6.2、实现"></a>6.2、实现</h4><h5 id="6-2-1、步骤分析"><a href="#6-2-1、步骤分析" class="headerlink" title="6.2.1、步骤分析"></a>6.2.1、步骤分析</h5><p>要我们的Controller返回一个Json字符串非常简单，只需要添加相关jar包，并在我们的方法上添加@ResponseBody注解即可。</p><h5 id="6-2-2、添加jackson的jar包"><a href="#6-2-2、添加jackson的jar包" class="headerlink" title="6.2.2、添加jackson的jar包"></a>6.2.2、添加jackson的jar包</h5><p>如果需要 springMVC 支持 json，必须加入 json 的处理 jar 包。</p><p>springmvc 官方使用 Jackson 这个 jar 包：</p><blockquote><p>jackson-annotations-2.5.0.jar</p><p>jackson-core-2.5.0.jar</p><p>jackson-databind-2.5.0.jar</p></blockquote><h5 id="6-2-3、JsonController"><a href="#6-2-3、JsonController" class="headerlink" title="6.2.3、JsonController"></a>6.2.3、JsonController</h5><p>在方法上添加 @ResponseBody  注解，方法返回的字符串不在被ViewResolver解析为视图，而是直接返回字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonController</span> </span>&#123;<br><span class="hljs-meta">@RequestMapping(&quot;/json1&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxx&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果方法的返回值是复杂对象，@ResponseBody注解，会将 java 对象解析为 json 格式的字符串返回</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/json2&quot;</span>)<br><span class="hljs-variable">@ResponseBody</span><br>public User json3() throws Exception &#123;<br><span class="hljs-comment">//返回一个javaBean 对象</span><br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当返回的对象有Date日期格式的属性：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/json03&quot;</span>)<br><span class="hljs-variable">@ResponseBody</span><br>public User json4() throws Exception &#123;<br><span class="hljs-comment">// 返回一个javaBean 对象</span><br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">User</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">20</span>, new Date());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/28/SpringMVC/Snipaste_2019-11-28_14-28-37.png"></p><p>默认返回的日期格式为时间戳，而在前台我们希望显示出指定规则的日期字符串。</p><p>解决：在日期get属性字段上，添加一个格式化注解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@JsonFormat</span>(pattern=<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>,timezone=<span class="hljs-string">&quot;GMT+8&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">Date</span> <span class="hljs-function"><span class="hljs-title">getDate</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> date;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-3、注意事项"><a href="#6-3、注意事项" class="headerlink" title="6.3、注意事项"></a>6.3、注意事项</h4><h5 id="6-3-1、处理有乱码的问题"><a href="#6-3-1、处理有乱码的问题" class="headerlink" title="6.3.1、处理有乱码的问题"></a>6.3.1、处理有乱码的问题</h5><p>当返回的Json字符串对像中有中文，会出现乱码问题：这时我们可以为SpringMVC的适配器配置一个字符转换器，设置支持的媒体类型：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 注册一个转换器 解决返回的json乱码问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json;charset=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：如果不使用注解驱动&lt;mvc:annotation-driven /&gt;，配置媒体类型的话，就需要给处理器适配器配置json转换器：</p><p>在springmvc.xml配置文件中，需要给处理器适配器注入json转换器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--处理器适配器 --&gt;</span><br>&lt;bean<br>class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;messageConverters&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.</span></span><br><span class="hljs-tag"><span class="hljs-string">MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-4、小结"><a href="#6-4、小结" class="headerlink" title="6.4、小结"></a>6.4、小结</h4><p>Json格式的数据，是一种非常常见且有用的数据格式，今天我们只是简单的学习了通过@ResponseBody 注解返回Json格式的数据，并解决了响应类型不匹配，中文乱码，日期转换的问题。后面我们学习了Ajax后还会学习如果接收Json格式的数据，希望大家多多重视。</p><h3 id="7、SpringMVC拦截器-放到项目中做登录拦截"><a href="#7、SpringMVC拦截器-放到项目中做登录拦截" class="headerlink" title="7、SpringMVC拦截器-放到项目中做登录拦截"></a>7、SpringMVC拦截器-放到项目中做登录拦截</h3><h4 id="7-1、引入"><a href="#7-1、引入" class="headerlink" title="7.1、引入"></a>7.1、引入</h4><p>我们的项目需要实现登录拦截的功能，之前我们学习Servlet的时候，也使用过Filter拦截器，SpringMVC 提供了处理器拦截器类，它的使用比Filter更方便，更强大，用于对处理器进行预处理和后处理。</p><h4 id="7-2、实现"><a href="#7-2、实现" class="headerlink" title="7.2、实现"></a>7.2、实现</h4><p>实现SpringMVC拦截器非常简单，我们只需要实现拦截器接口，并把他配置到SpringMVC的配置文件中即可。</p><h5 id="7-2-1、定义拦截器"><a href="#7-2-1、定义拦截器" class="headerlink" title="7.2.1、定义拦截器"></a>7.2.1、定义拦截器</h5><p>自定义类实现 <strong>HandlerInterceptor</strong> 接口.返回值决定是否放行.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Interceptor1 implements HandlerInterceptor &#123;<br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> preHandle(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>)<br>throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;拦截器 1----方法执行之前&quot;);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> postHandle(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>,<br>ModelAndView modelAndView) throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;拦截器 1----方法执行之后&quot;);<br>&#125;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterCompletion(HttpServletRequest request, HttpServletResponse response, <span class="hljs-keyword">Object</span> <span class="hljs-keyword">handler</span>, <span class="hljs-keyword">Exception</span> ex)<br>throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;拦截器 1----页面渲染完成&quot;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>复制一份,命名为 HandlerInterceptor2,输出内容做相应的修改.</p><h5 id="7-2-2、拦截器配置"><a href="#7-2-2、拦截器配置" class="headerlink" title="7.2.2、拦截器配置"></a>7.2.2、拦截器配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.istourec.interceptor.Interceptor1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.istourec.interceptor.Interceptor2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="7-2-3、拦截器拦截流程"><a href="#7-2-3、拦截器拦截流程" class="headerlink" title="7.2.3、拦截器拦截流程"></a>7.2.3、拦截器拦截流程</h5><ol><li>拦截器 1 放行</li></ol><p><img src="/2019/11/28/SpringMVC/clip_image003.jpg" alt="img"></p><ol start="2"><li>拦截器 1 不放行</li></ol><p><img src="/2019/11/28/SpringMVC/clip_image005.jpg" alt="img"></p><ol start="3"><li>拦截器 2 不放行</li></ol><p><img src="/2019/11/28/SpringMVC/clip_image007.jpg" alt="img"></p><p>说明：</p><ol><li><p>preHandle 按拦截器定义顺序调用</p></li><li><p>postHandler 按拦截器定义逆序调用</p></li><li><p>afterCompletion 按拦截器定义逆序调用</p></li><li><p>postHandler 在拦截器链内所有拦截器返成功调用</p></li><li><p>afterCompletion 只有 preHandle 返回 true 才调用</p></li></ol><h5 id="7-2-4、指定不拦截方法"><a href="#7-2-4、指定不拦截方法" class="headerlink" title="7.2.4、指定不拦截方法"></a>7.2.4、指定不拦截方法</h5><p>通过&lt;mvc:exclude-mapping/&gt;标签指定不拦截的方法.但是配置这个标签之前,必须配置&lt;mvc:mapping /&gt;标签.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/userList&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.istourec.interceptor.Interceptor1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.istourec.interceptor.Interceptor2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们访问 localhost:8082/userList.观察拦截器执行效果.</p><p><img src="/2019/11/28/SpringMVC/clip_image009.jpg" alt="img"></p><p>仅有拦截器 2 执行了.</p><h4 id="7-3、小结"><a href="#7-3、小结" class="headerlink" title="7.3、小结"></a>7.3、小结</h4><p>以上，我们学习了拦截器的配置与放行方式，所以我们的登录拦截可以这样来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/toLogin&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/loginUser&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.itsourece.ems.interceptor.MyLogInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8、文件上传-放到项目中去做"><a href="#8、文件上传-放到项目中去做" class="headerlink" title="8、文件上传-放到项目中去做"></a>8、文件上传-放到项目中去做</h3><h4 id="8-1、引入"><a href="#8-1、引入" class="headerlink" title="8.1、引入"></a>8.1、引入</h4><p>原始的Servlet文件上传，需要对提交的流对象进行复制的解析，SpringMVC 为我们提供了一个方便的解析器可以方便的实现文件上传。如果要实现文件的上传,只要在 spring-mvc.xml 中注册相应的 MultipartResolver 即可。</p><h4 id="8-2、实现步骤"><a href="#8-2、实现步骤" class="headerlink" title="8.2、实现步骤"></a>8.2、实现步骤</h4><h5 id="8-2-1、加入文件上传所需依赖的jar包"><a href="#8-2-1、加入文件上传所需依赖的jar包" class="headerlink" title="8.2.1、加入文件上传所需依赖的jar包"></a>8.2.1、加入文件上传所需依赖的jar包</h5><p><img src="/2019/11/28/SpringMVC/image-20191128144118730.png" alt="image-20191128144118730"></p><h5 id="8-2-2、配置上传解析器"><a href="#8-2-2、配置上传解析器" class="headerlink" title="8.2.2、配置上传解析器"></a>8.2.2、配置上传解析器</h5><p>在 springmvc.xml 中配置上传文件的解析器CommonsMultipartResolver</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 文件上传解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 设置文件大小限制,单位 B --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5242880&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="8-2-3、页面调整"><a href="#8-2-3、页面调整" class="headerlink" title="8.2.3、页面调整"></a>8.2.3、页面调整</h5><p>修改表单提交的 enctype 为 multipart/form-data 多部分表单.</p><p><img src="/2019/11/28/SpringMVC/image-20191128144301227.png" alt="image-20191128144301227"></p><h5 id="8-2-4、上传文件"><a href="#8-2-4、上传文件" class="headerlink" title="8.2.4、上传文件"></a>8.2.4、上传文件</h5><p>在 Controller 方法的形参中,使用 MultipartFile 来接收上传的文件.注意方法形参的名称要与表单提交的 name 保持一致</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改用户信息</span><br><span class="hljs-comment"> */</span><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/update&quot;</span>)</span><br>public String update(User user, MultipartFile file, Model model) throws Exception &#123;<br><span class="hljs-comment">// ----------------------- 准备上传图片 ----------------------</span><br><span class="hljs-comment">// 1. 准备上传的文件名</span><br>String uuid = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UUID</span>.</span></span>random<span class="hljs-constructor">UUID()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.replace<span class="hljs-constructor">All(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)</span>;<br>String extension = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FilenameUtils</span>.</span></span>get<span class="hljs-constructor">Extension(<span class="hljs-params">file</span>.<span class="hljs-params">getOriginalFilename</span>()</span>);<br>String newFileName = uuid + <span class="hljs-string">&quot;.&quot;</span> + extension;<br><span class="hljs-comment">// 2. 上传文件</span><br>String webapp = request.get<span class="hljs-constructor">ServletContext()</span>.get<span class="hljs-constructor">RealPath(<span class="hljs-string">&quot;/uploads/&quot;</span>)</span>;<br>file.transfer<span class="hljs-constructor">To(<span class="hljs-params">new</span> File(<span class="hljs-params">webapp</span> + <span class="hljs-string">&quot;\\&quot;</span> + <span class="hljs-params">newFileName</span>)</span>);<br><span class="hljs-comment">// 3. 给 user 赋值</span><br>user.set<span class="hljs-constructor">Img(<span class="hljs-params">newFileName</span>)</span>;<br>us.update(user);<br><span class="hljs-comment">// 4. 获取修改后的用户信息,保存到 model 中</span><br>User queryUser = us.select<span class="hljs-constructor">ById(<span class="hljs-params">user</span>.<span class="hljs-params">getUid</span>()</span>);<br>model.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-params">queryUser</span>)</span>;<br>return <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-2-5、准备显示页面"><a href="#8-2-5、准备显示页面" class="headerlink" title="8.2.5、准备显示页面"></a>8.2.5、准备显示页面</h5><p>通过el表达式取出查询的值</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="ruby">    pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span></span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 上传成功！~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;上传的图片&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:8080/img/ems/$&#123;user.img&#125;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">100</span> <span class="hljs-attr">height</span>=<span class="hljs-string">100</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="8-3、小结"><a href="#8-3、小结" class="headerlink" title="8.3、小结"></a>8.3、小结</h4><p>通过配置上传解析器CommonsMultipartResolver实现文件上传。</p><h3 id="9、SpringMVC小结"><a href="#9、SpringMVC小结" class="headerlink" title="9、SpringMVC小结"></a>9、SpringMVC小结</h3><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><ol><li><p>SpringMVC的执行流程。</p></li><li><p>配置核心组件</p></li><li><p>接收参数、页面跳转、响应数据</p></li></ol><h4 id="400-类型不匹配"><a href="#400-类型不匹配" class="headerlink" title="400(类型不匹配)"></a>400(类型不匹配)</h4><p>如果传参类型不匹配，则会报400错误。大家在传参的时候一定要小心注意，特别咱们以后都是使用ajax操作，那么这个报错需要在前端调试工具(如firebug)中去查看。</p><h4 id="DateTimeFormat-接收日期格式（分清楚）"><a href="#DateTimeFormat-接收日期格式（分清楚）" class="headerlink" title="@DateTimeFormat 接收日期格式（分清楚）"></a>@DateTimeFormat 接收日期格式（分清楚）</h4><ol><li><p>接收日期格式使用**@DateTimeFormat(yyyy-MM-dd)**,特别注意千万不要把后台传参与前台接收参数搞混淆：</p></li><li><p>后台-&gt;前台:@JsonFormat(pattern=”yyyy-MM-dd hh:mm:ssS”,timezone=”GMT+8”)</p></li><li><p>前台-&gt;后台:@DateTimeFormat(pattern=”yyyy-MM-dd”)</p></li></ol><h4 id="tomcat6-x，7-x中文编码问题"><a href="#tomcat6-x，7-x中文编码问题" class="headerlink" title="tomcat6.x，7.x中文编码问题"></a>tomcat6.x，7.x中文编码问题</h4><p>Get请求：</p><p>/conf/server.xml </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Connector <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;80&quot;</span> <span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attribute">URIEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span><br><span class="hljs-attribute">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span><br><span class="hljs-attribute">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>Post请求：</p><p>注意：SpringMVC框架本身没有处理请求编码，需要配置一个spring内置请求编码过滤器。</p><p><img src="/2019/11/28/SpringMVC/clip_image0022.jpg" alt="img"></p><p>web.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Post请求编码过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>org.springframework.web.filter.CharacterEncodingFilter<br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.1.5.  出现406状态异常，加入jackson json工具包</p><p><img src="/2019/11/28/SpringMVC/clip_image0021.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解HTML</title>
    <link href="/2019/11/26/%E4%BA%86%E8%A7%A3HTML/"/>
    <url>/2019/11/26/%E4%BA%86%E8%A7%A3HTML/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--1、声明文档类型--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-comment">&lt;!--2、HTML页面根元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-comment">&lt;!--3、包含文档元(mate)数据等--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--4、中文网页需要使用 &lt;meta charset=&quot;utf-8&quot;&gt; 声明编码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>浏览器抬头<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>     <span class="hljs-comment">&lt;!--5、描述文档标题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">base</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-comment">&lt;!--3的结束标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!--6、包含可见的页面内容--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>   <span class="hljs-comment">&lt;!--7、页面标题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>   <span class="hljs-comment">&lt;!--8、页面段落--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!--6的结束标签--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><span class="hljs-comment">&lt;!--2的结束标签--&gt;</span><br></code></pre></td></tr></table></figure><p>在一个以.html或.htm后缀的文件中写入上面的代码都是可行的，没有区别。</p><p>HTML不是编程语言，是标记语言，是一套标签(markup tag)，用来描述网页。</p><p>HTML文档包含HTML标签及文本内容，又称WEB页面。</p><p><img src="/2019/11/26/%E4%BA%86%E8%A7%A3HTML/HDS.png"></p><p>1、文档类型声明</p><p>HTML5</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>HTML 4.01</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XHTML 1.0</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 查看完整网页声明类型 <a href="https://www.runoob.com/tags/tag-doctype.html">DOCTYPE 参考手册</a>。 </p><p>2、标签</p><p>HTML标签大小写不敏感，但推荐全部小写，因未来的XHTML强制全部小写。</p><p>文档标题：&lt;title&gt;&lt;/title&gt;</p><p>页面标题：&lt;h1<del>h6&gt;&lt;/h1</del>h6&gt;</p><p>段落：&lt;p&gt;&lt;/p&gt;</p><p>链接：&lt;a href=””&gt;&lt;/a&gt;</p><p>图像：&lt;img src=”” width=”” height=””&gt;&lt;/img&gt;</p><p>空标签：没有内容的标签，如&lt;br&gt;换行，&lt;hr&gt;水平线标签</p><p>注释：&lt;!–注释内容–&gt;</p><p>粗体“bold”：&lt;b&gt;&lt;/b&gt;</p><p>斜体“italic”：&lt;i&gt;&lt;/i&gt;</p><p>&lt;strong&gt; 替换&lt;b&gt;或者 &lt;em&gt;替换&lt;i&gt;意味着你要呈现的文本是重要的，所以要突出显示。 </p><p>小号字：&lt;small&gt;&lt;/small&gt;</p><p>上下标字：&lt;sup&gt;&lt;\sup&gt;  &lt;sub&gt;&lt;/sub&gt;</p><p>插入字：&lt;ins&gt;&lt;/ins&gt;</p><p>删除字：&lt;del&gt;&lt;/del&gt;</p><p>预定义格式文本：&lt;pre&gt;&lt;/pre&gt;</p><p>3、属性</p><p>给HTML标签提供属性，为标签添加附加信息，在<code>开始标签</code>中描述这些属性。</p><p>属性值始终用引号引起，双引号是最常用的，特殊情况下需要单双引号一起使用。</p><p>推荐属性和属性值小写，XHTML强制要求小写。</p><p>下面列出了适用于大多数 HTML 元素的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td></tr><tr><td align="left">id</td><td align="left">定义元素的唯一id</td></tr><tr><td align="left">style</td><td align="left">规定元素的行内样式（inline style）</td></tr><tr><td align="left">title</td><td align="left">描述了元素的额外信息 (作为工具条使用)</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tips&quot;</span>&gt;</span>有用的提示部分<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#tips&quot;</span>&gt;</span>访问有用的提示部分<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.runoob.com/html/html-links.html#tips&quot;</span>&gt;</span>访问有用的提示部分<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、&lt;head&gt;标签，定义文档信息</p><p>可以添加在头部区域的元素标签为: &lt;title&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;link&gt;, &lt;script&gt;, &lt;noscript&gt;, and &lt;base&gt;. </p><p>&lt;base&gt; 标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接 </p><p>&lt;link&gt; 标签定义了文档与外部资源之间的关系。 </p><p>&lt;style&gt; 标签定义了HTML文档的样式文件引用地址. </p><p>&lt;mate&gt; META 元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。 </p><p>&lt;script&gt;标签用于加载脚本文件，如： JavaScript。  </p><p>5、CSS样式</p><p>内联样式-HTML标签中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:blue;margin-left:20px;&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>内部样式-&lt;style&gt;标签中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css"><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>:yellow;&#125;</span><br><span class="css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:blue;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>外部样式-使用外部CSS文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mystyle.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标题很重要</p><p>请确保将 HTML 标题 标签只用于标题。不要仅仅是为了生成<strong>粗体</strong>或<strong>大号</strong>的文本而使用标题。</p><p>搜索引擎使用标题为您的网页的结构和内容编制索引。</p><p>因为用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。</p><p>应该将 h1 用作主标题（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推。</p><p>请始终将正斜杠添加到子文件夹。假如这样书写链接：href=”<a href="https://www.runoob.com/html&quot;%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%A7%E7%94%9F%E4%B8%A4%E6%AC%A1">https://www.runoob.com/html&quot;，就会向服务器产生两次</a> HTTP 请求。这是因为服务器会添加正斜杠到这个地址，然后创建一个新的请求，就像这样：href=”<a href="https://www.runoob.com/html/&quot;%E3%80%82">https://www.runoob.com/html/&quot;。</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2019/11/25/Ajax/"/>
    <url>/2019/11/25/Ajax/</url>
    
    <content type="html"><![CDATA[<h3 id="1、浏览器-lt-–请求-响应–-gt-服务器"><a href="#1、浏览器-lt-–请求-响应–-gt-服务器" class="headerlink" title="1、浏览器&lt;–请求/响应–&gt;服务器"></a>1、浏览器&lt;–请求/响应–&gt;服务器</h3><p>是传统交互方式：</p><p>客户端（浏览器）从服务器加载网页完毕后，网页中的内容如果需要更改，那么就必须让浏览器重新发送一次请求到服务器，服务器接收请求并处理完毕后会把一个完整的网页返回给客户端（浏览器），浏览器把网页直接显示给用户;</p><p>传统交互方式的问题：</p><p>每次操作都必须返回整个页面，带宽，响应速度都有影响的</p><h3 id="2、Ajax-lt-–请求-响应–-gt-服务器"><a href="#2、Ajax-lt-–请求-响应–-gt-服务器" class="headerlink" title="2、Ajax&lt;–请求/响应–&gt;服务器"></a>2、Ajax&lt;–请求/响应–&gt;服务器</h3><p>Ajax交互方式：</p><p>客户端（浏览器）从服务器加载网页完毕后，网页中的内容如果需要更改，不使用浏览器发送请求，而是使用JavaScript中的XMLHttpRequest（及Ajax对象）对象发送请求到服务器，服务器接收请求并处理完毕后只返回页面需要的内容，XMLHttpRequest对象接收服务器返回的内容，程序员需要手动(javascript)的把内容更新到页面中；</p><p>Ajax交互方式的优点：</p><p>只是部分数据更新，就成功和服务器进行了交互，可以提高用户的使用体验。</p><p>Ajax技术常见的场景（需要局部刷新）：</p><ol><li>自动提示和浏览器地图搜索</li></ol><p>在2005年，Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p><ol start="3"><li>   用户名重复检查：</li></ol><p>用户注册时，检查用户名是否存在，及时给用户反馈；</p><ol start="4"><li>邮箱提示：</li></ol><p>WEB版邮箱系统，当有新邮件到底服务器，浏览器不用刷新页面也知道是否有新邮件；</p><ol start="5"><li>无刷新分页：</li></ol><p>显示数据列表，用户点击下一页数据，整个页面不会刷新，只把下一页的数据更新到页面中；</p><ol start="6"><li>   购物车：</li></ol><p>用户点击添加到购物车后，能继续进行其他操作，而购物车的数据存储服务器端；</p><ol start="7"><li>   用户登录：</li></ol><p>用户登录的数据通过AJAX传输到后台，如果登录失败直接在当前登录页面提示用户，而不用刷新整个页面；</p><p>如果应用中的页面需要局部刷新并且需要与服务器交互，那么就可以使用AJAX；</p><ol start="8"><li><p>   视频网站</p></li><li><p>   股票网站(轮询)</p></li></ol><p>浏览器网站的时候，留心观察很多页面未刷新，但是页面中的内容被更改了，这些都是AJAX使用场景； 99%的网站都会用到Ajax</p><h3 id="3、Ajax技术概述"><a href="#3、Ajax技术概述" class="headerlink" title="3、Ajax技术概述"></a>3、Ajax技术概述</h3><h4 id="3-1、新瓶装旧水-js-xml-json"><a href="#3-1、新瓶装旧水-js-xml-json" class="headerlink" title="3.1、新瓶装旧水(js,xml,json)"></a>3.1、新瓶装旧水(js,xml,json)</h4><p>AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。</p><p>JavaScript是一门前端语言，而AJAX是一种用于创建快速动态网页的技术。</p><p>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p><p>Ajax是一门技术，它提供了异步更新的机制，使用客户端与服务器间交换数据而非整个页面文档，实现页面的局部更新。</p><p><img src="/2019/11/25/Ajax/work.png"></p><p>AJAX是基于现有的Internet标准，并且联合使用它们：</p><ul><li>XMLHttpRequest 对象 (异步的与服务器交换数据)</li><li>JavaScript/DOM (信息显示/交互)</li><li>CSS (给数据定义样式)</li><li>XML (作为转换数据的格式)</li></ul><h4 id="3-3、AJAX核心"><a href="#3-3、AJAX核心" class="headerlink" title="3.3、AJAX核心"></a>3.3、AJAX核心</h4><p>Ajax 的核心是 JavaScript 对象 XMLHttpRequest。简而言之，XMLHttpRequest 使您可以使用 JavaScript 向服务器进行请求并处理响应。</p><h4 id="3-4、同步交互和异步交互"><a href="#3-4、同步交互和异步交互" class="headerlink" title="3.4、同步交互和异步交互"></a>3.4、同步交互和异步交互</h4><p>举个例子：普通B/S模式(同步)    AJAX技术(异步)—-</p><p>* 同步：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事</p><p>* 异步: 请求通过事件触发-&gt;服务器处理（这时浏览器仍然可以作其他事情）-&gt;处理完毕</p><p>同步是指：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式。</p><p>异步是指：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式 </p><p>易懂的理解:</p><p>异步传输:  你传输吧，我去做我的事了，传输完了告诉我一声  </p><p>同步传输:  你现在传输，我要亲眼看你传输完成，才去做别的事  </p><h3 id="4、Ajax技术内容"><a href="#4、Ajax技术内容" class="headerlink" title="4、Ajax技术内容"></a>4、Ajax技术内容</h3><p>   1：一个事件监听 onreadystatechange </p><p>   2：2个状态 status readyState</p><p>   3：三个方法 open、send、setRequestHeader</p><p>通过获取服务器时间案例探索Ajax</p><h4 id="4-1、创建web动态工程"><a href="#4-1、创建web动态工程" class="headerlink" title="4.1、创建web动态工程"></a>4.1、创建web动态工程</h4><h4 id="4-2、搭建初步JS代码"><a href="#4-2、搭建初步JS代码" class="headerlink" title="4.2、搭建初步JS代码"></a>4.2、搭建初步JS代码</h4><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby">@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> </span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="xml">        function getTime()&#123;</span><br><span class="xml">            alert(1);</span><br><span class="xml">            console.debug(1);</span><br><span class="xml">        &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mytime&quot;</span>&gt;</span>Ajax Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getTime()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;显示服务器时间&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="4-3、初步的Servlet代码"><a href="#4-3、初步的Servlet代码" class="headerlink" title="4.3、初步的Servlet代码"></a>4.3、初步的Servlet代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/getTime&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetTimeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp)<br><span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br><span class="hljs-comment">//System.out.println(1/0);</span><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;进来没有哟....&quot;</span>);<br><span class="hljs-type">Date</span> date = <span class="hljs-keyword">new</span> <span class="hljs-type">Date</span>();<br><span class="hljs-comment">//得到响应对象</span><br><span class="hljs-type">PrintWriter</span> writer = resp.getWriter();<br>writer.print(date.toLocaleString());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4、创建XMLHttpRequest对象"><a href="#4-4、创建XMLHttpRequest对象" class="headerlink" title="4.4、创建XMLHttpRequest对象"></a>4.4、创建XMLHttpRequest对象</h4><p><strong>JavaScript严格区分大小写，并且有浏览器的兼容问题</strong></p><p>1、所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。</p><p>创建 XMLHttpRequest 对象的语法：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> ajax=<span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure><p>2、老版本浏览器 Internet Explorer （IE6）使用 ActiveX 对象：  </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> ajax=<span class="hljs-keyword">new</span> <span class="hljs-type">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br></code></pre></td></tr></table></figure><p>3、为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：</p><blockquote><p>方法一、功能判断</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> xmlhttp;<br><span class="hljs-keyword">if</span> (window.XMLHttpRequest)<span class="hljs-comment">//判断当前浏览器是否有XMLHttpRequest</span><br>&#123;<br><span class="hljs-comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span><br>xmlhttp=<span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<span class="hljs-comment">// code for IE6, IE5</span><br>xmlhttp=<span class="hljs-keyword">new</span> <span class="hljs-type">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二、try-catch</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> ajax;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//如果是其它浏览器，这句代码可以成功,ajax对象就拿到了</span><br>ajax  = <span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>(); <br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-comment">//如果是IE，上面肯定会报错，被抓取,就执行下面这句代码(IE支持)</span><br>ajax = <span class="hljs-keyword">new</span> <span class="hljs-type">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>); <br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="4-5、Ajax的方法"><a href="#4-5、Ajax的方法" class="headerlink" title="4.5、Ajax的方法"></a>4.5、Ajax的方法</h4><h5 id="1、open-method-url-async"><a href="#1、open-method-url-async" class="headerlink" title="1、open(method,url,async)"></a><strong>1、open(method,url,async)</strong></h5><blockquote><p>创建请求，并且规定请求的类型、URL 以及是否异步处理请求。</p><ul><li><p>method：请求的类型；GET 或 POST</p></li><li><p>url：文件在服务器上的位置，文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php（在传回响应之前，能够在服务器上执行任务）。</p></li><li><p>async：true（异步），一定要选择true。 false（同步）XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true</p></li></ul></blockquote><p>对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</p><p>通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p><ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理</li></ul><blockquote><p>Async=true</p><p>当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数</p></blockquote><blockquote><p>Async = false</p><p>如需使用 async=false，请将 open() 方法中的第三个参数改为 false</p><p>我们不推荐使用 async=false，但是对于一些小型的请求，也是可以的。</p><p>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</p><p><strong>注意：</strong>当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">xmlhttp.open(<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>,<span class="hljs-string">&quot;/try/ajax/ajax_info.txt&quot;</span>,false);<br>xmlhttp.send();<br>document.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;<br></code></pre></td></tr></table></figure></blockquote><h5 id="2、send-string"><a href="#2、send-string" class="headerlink" title="2、send(string)"></a>2、send(string)</h5><blockquote><p>将请求发送到服务器。</p><p><code>string参数</code>：仅用于 POST 请求，字符串必须是服务器URL编码格式</p><p>例如：”param1=value1&amp;param2=value2”</p></blockquote><h5 id="3、setRequestHeader-header-value"><a href="#3、setRequestHeader-header-value" class="headerlink" title="3、setRequestHeader(header,value)"></a><strong>3、setRequestHeader(header,value)</strong></h5><p>向请求添加额外的 HTTP 请求头信息，post提交必须使用。</p><ul><li><p>header: 规定头的名称</p></li><li><p>value: 规定头的值</p></li></ul><p>注意：该方法必须在open与send之间调用； </p><p>原因：</p><blockquote><p>1、open之后，open是创建一个请求，或者理解为请求的基本准备，如果没有请求，何来设置请求头信息；</p><p>2、send之前，send是发送一个请求，请求会把当前请求的头信息进行发送，发送后设置头信息无效；</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">xhr</span><span class="hljs-selector-class">.setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="4-6、Ajax属性"><a href="#4-6、Ajax属性" class="headerlink" title="4.6、Ajax属性"></a>4.6、Ajax属性</h4><h5 id="4-6-1、readyState"><a href="#4-6-1、readyState" class="headerlink" title="4.6.1、readyState"></a>4.6.1、readyState</h5><p>存有 XMLHttpRequest对象的请求状态。从 0 到 4 发生变化。</p><blockquote><ul><li><p>0: 请求未初始化      未创建</p></li><li><p>1: 服务器连接已建立   open()方法</p></li><li><p>2: 请求已接收      send()方法</p></li><li><p>3: 请求处理中      服务器处理中</p></li><li><p>4: 请求已完成，且响应已就绪  响应完毕</p></li></ul></blockquote><h5 id="4-6-2、HTTP响应状态-status"><a href="#4-6-2、HTTP响应状态-status" class="headerlink" title="4.6.2、HTTP响应状态 status "></a>4.6.2、HTTP响应状态 <code>status </code></h5><blockquote><ul><li><p>200: “OK” 请求成功</p></li><li><p>404: “NOT FOUND” 没有找到对应资源</p></li><li><p>500:”Server Error” 服务器端错误</p></li></ul></blockquote><h5 id="4-6-3、响应数据相关属性"><a href="#4-6-3、响应数据相关属性" class="headerlink" title="4.6.3、响应数据相关属性"></a>4.6.3、响应数据相关属性</h5><ul><li><p>responseText  获得字符串形式的响应数据。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">document.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>).<span class="hljs-attribute">innerHTML</span>=xhr.responseText;<br></code></pre></td></tr></table></figure></li><li><p>responseXML 获得 XML 形式的响应数据。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">xmlDoc</span>=xhr.responseXML;<br><span class="hljs-attribute">txt</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">x</span>=xmlDoc.getElementsByTagName(&quot;ARTIST&quot;);<br><span class="hljs-keyword">for</span> (<span class="hljs-attribute">i</span>=0;i&lt;x.length;i++)<br>&#123;<br>    <span class="hljs-attribute">txt</span>=txt + x[i].childNodes[0].nodeValue + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br>document.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>).<span class="hljs-attribute">innerHTML</span>=txt;<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-6-4、onreadystatechange事件"><a href="#4-6-4、onreadystatechange事件" class="headerlink" title="4.6.4、onreadystatechange事件"></a>4.6.4、onreadystatechange事件</h5><p>存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">xmlhttp.<span class="hljs-attribute">onreadystatechange</span>=function()<br>&#123;<br>    <span class="hljs-keyword">if</span> (xmlhttp.<span class="hljs-attribute">readyState</span>==4 &amp;&amp; xmlhttp.<span class="hljs-attribute">status</span>==200)<br>    &#123;<br>        document.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>).<span class="hljs-attribute">innerHTML</span>=xmlhttp.responseText;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> onreadystatechange 事件被触发 4 次（0 - 4）, 分别是： 0-1、1-2、2-3、3-4，对应着 readyState 的每个变化。</p><p>使用回调函数</p><p>回调函数是一种以参数形式传递给另一个函数的函数。</p><p>如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。</p><p>该函数调用<code>应该包含 URL</code> 以及<code>发生 onreadystatechange 事件时执行的任务</code>（每次调用可能不尽相同）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">function myFunction()<br>&#123;<br>    loadXMLDoc(<span class="hljs-string">&quot;/try/ajax/ajax_info.txt&quot;</span>,function()<br>    &#123;<br>        <span class="hljs-keyword">if</span> (xmlhttp.<span class="hljs-attribute">readyState</span>==4 &amp;&amp; xmlhttp.<span class="hljs-attribute">status</span>==200)<br>        &#123;<br>            document.getElementById(<span class="hljs-string">&quot;myDiv&quot;</span>).<span class="hljs-attribute">innerHTML</span>=xmlhttp.responseText;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7、Ajax正确的代码流程"><a href="#4-7、Ajax正确的代码流程" class="headerlink" title="4.7、Ajax正确的代码流程"></a>4.7、Ajax正确的代码流程</h4><p>由于我们采用的是异步请求，异步请求发送send()后,不会等待响应结果的返回，而直接继续执行下面的代码；当执行ajax.responseText的时候有可能服务器还没有响应结果;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTime</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">//1、获取ajax对象</span><br>ajax=createAjax();<br><span class="hljs-comment">//验证函数执行</span><br><br><span class="hljs-built_in">console</span>.debug(ajax);<br><span class="hljs-comment">//2、以异步的方式发出get请求</span><br>ajax.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;/getTime&quot;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//3、监听ajax状态，http响应状态</span><br>ajax.onreadystatechange=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span>(ajax.readyState==<span class="hljs-number">4</span>&amp;&amp;ajax.status==<span class="hljs-number">200</span>)&#123;<br><span class="hljs-comment">//ajax已经处理完毕并且http响应状态是200</span><br><span class="hljs-keyword">var</span> result=ajax.responseText;<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;result:&quot;</span>+result);<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mytime&quot;</span>).innerHTML=result;<br>&#125;<br>&#125;<br><span class="hljs-comment">//发出请求</span><br>ajax.send();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-8、Ajax-Get提交IE缓存问题"><a href="#4-8、Ajax-Get提交IE缓存问题" class="headerlink" title="4.8、Ajax Get提交IE缓存问题"></a>4.8、Ajax Get提交IE缓存问题</h4><p>在url地址添加随机数或者时间戳</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ajax.<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;/getTime?&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>.get<span class="hljs-constructor">Time()</span>,<span class="hljs-literal">true</span>); <br></code></pre></td></tr></table></figure><h3 id="5、Ajax-Get"><a href="#5、Ajax-Get" class="headerlink" title="5、Ajax Get"></a>5、Ajax Get</h3><p>检查用户名是否重复案例分析</p><h4 id="5-1、页面代码"><a href="#5-1、页面代码" class="headerlink" title="5.1、页面代码"></a>5.1、页面代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtUserName&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;txtUserName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;spanInfo&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnCheck&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;checkUserName();&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;检查用户名是否存在&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2、JS代码"><a href="#5-2、JS代码" class="headerlink" title="5.2、JS代码"></a>5.2、JS代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkUserName</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> xhr;<br><span class="hljs-comment">// 1 创建ajax对象</span><br>xhr = createAjax();<br><br><span class="hljs-comment">// 2 open</span><br><span class="hljs-keyword">var</span> userName = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;txtUserName&quot;</span>).value;<br>xhr.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;/isExsit?username=&quot;</span> + userName);<br><span class="hljs-comment">//需要注意的是get方式中文乱码的问题</span><br><span class="hljs-comment">// 监听</span><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>)&#123;<br><span class="hljs-keyword">var</span> info = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;spanInfo&quot;</span>);<br><span class="hljs-keyword">if</span>(xhr.responseText == <span class="hljs-string">&quot;true&quot;</span>)<br>info.innerHTML=<span class="hljs-string">&quot;用户名已存在&quot;</span>;<br><span class="hljs-keyword">else</span> <br>info.innerHTML=<span class="hljs-string">&quot;可以用此用户名&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 3 send</span><br>xhr.send();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3、Servlet代码"><a href="#5-3、Servlet代码" class="headerlink" title="5.3、Servlet代码"></a>5.3、Servlet代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">&quot;serial&quot;</span>)<br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/isExsit&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserNameCheckServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br><span class="hljs-comment">// 获取参数</span><br>req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><span class="hljs-type">String</span> userName = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">System</span>.out.println(userName);<br><span class="hljs-comment">// 检查用户名是否存在</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;你好&quot;</span>.equals(userName))&#123;<br>resp.getWriter().print(<span class="hljs-literal">true</span>);<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;true&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>resp.getWriter().print(<span class="hljs-literal">false</span>);<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;false&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、JSON格式"><a href="#6、JSON格式" class="headerlink" title="6、JSON格式"></a>6、JSON格式</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;sites&quot;</span>: [<br>    &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;菜鸟教程&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.runoob.com&quot;</span> &#125;, <br>    &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;google&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.google.com&quot;</span> &#125;, <br>    &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;微博&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.weibo.com&quot;</span> &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 sites 对象是包含 3 个站点记录（对象）的数组。</p><h4 id="6-1、什么是-JSON-？"><a href="#6-1、什么是-JSON-？" class="headerlink" title="6.1、什么是 JSON ？"></a>6.1、什么是 JSON ？</h4><ul><li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li><li>JSON 是轻量级的文本数据交换格式，JSON是一种简单的数据格式，比xml更轻巧</li><li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li><li>JSON 具有自我描述性，更易理解</li></ul><h4 id="6-2、maven项目依赖添加"><a href="#6-2、maven项目依赖添加" class="headerlink" title="6.2、maven项目依赖添加"></a>6.2、maven项目依赖添加</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>jdk15<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-3、XML和JSON格式对比"><a href="#6-3、XML和JSON格式对比" class="headerlink" title="6.3、XML和JSON格式对比"></a>6.3、XML和JSON格式对比</h4><p>打开这个网址，比较一下XML和json：<a href="http://www.bejson.com/xml2json/">http://www.bejson.com/xml2json/</a></p><table><thead><tr><th>xml</th><th>json</th></tr></thead><tbody><tr><td>&lt;?xml version=”1.0” encoding=”UTF-8” ?&gt;<br>    &lt;total&gt;50&lt;/total&gt;<br>    &lt;datas&gt;<br>        &lt;id&gt;1&lt;/id&gt;<br>        &lt;name&gt;lee&lt;/name&gt;<br>        &lt;password&gt;<strong>**\</strong><br>        &lt;email&gt;zs&lt;/email&gt;<br>        &lt;age&gt;19&lt;/age&gt;<br>        &lt;pic&gt;img/pic1.png&lt;/pic&gt;<br>        &lt;dept&gt;IT部门&lt;/dept&gt;<br>    &lt;/datas&gt;<br>    &lt;datas&gt;<br>        &lt;id&gt;2&lt;/id&gt;<br>        &lt;name&gt;wang&lt;/name&gt;<br>        &lt;password&gt; ** ** ** &lt;/password&gt;<br>        &lt;email&gt;zs&lt;/email&gt;<br>        &lt;age&gt;19&lt;/age&gt;<br>        &lt;pic&gt;img/pic2.png&lt;/pic&gt;<br>        &lt;dept&gt;IT部门&lt;/dept&gt;<br>    &lt;/datas&gt;<br>    &lt;datas&gt;<br>        &lt;id&gt;3&lt;/id&gt;<br>        &lt;name&gt;jackson&lt;/name&gt;<br>        &lt;password&gt;<strong>**\</strong><br>        &lt;email&gt;zs&lt;/email&gt;<br>        &lt;age&gt;19&lt;/age&gt;<br>        &lt;pic&gt;img/pic2.png&lt;/pic&gt;<br>        &lt;dept&gt;IT部门&lt;/dept&gt;<br>    &lt;/datas&gt;</td><td>{<br>    “total”: 50,                                                <br>    “datas”: [<br>        {<br>            “id”: 1,<br>            “name”: “lee”,<br>            “password”: “<strong>**</strong>“,<br>            “email”: “zs”,<br>            “age”: “19”,<br>            “pic”: “img/pic1.png”,<br>            “dept”: “IT部门”<br>        },<br>        {<br>            “id”: 2,<br>            “name”: “wang”,<br>            “password”: “<strong>**</strong>“,<br>            “email”: “zs”,<br>            “age”: “19”,<br>            “pic”: “img/pic2.png”,<br>            “dept”: “IT部门”<br>        },<br>        {<br>            “id”: 3,a<br>            “name”: “jackson”,<br>            “password”: “<strong>**</strong>“,<br>            “email”: “zs”,<br>            “age”: “19”,<br>            “pic”: “img/pic2.png”,<br>            “dept”: “IT部门”<br>        }<br>    ]<br>}</td></tr></tbody></table><p>比较后，可以发现，xml是一个完美主义者，然而它书写起来，要求也是比较苛刻的是吧，那么json相比较而已，是比较轻量级的。</p><p><strong>与 XML 相同之处：</strong></p><blockquote><p>①：JSON 是纯文本、                                    ②：JSON 具有”自我描述性”（人类可读）、</p><p>③：JSON 具有层级结构（值中存在值）、 ④：JSON 可通过 JavaScript 进行解析、</p><p>⑤：JSON 数据可使用 AJAX 进行传输</p></blockquote><p><strong>与 XML 不同之处：</strong></p><blockquote><p>①：没有结束标签            ②：更短</p><p>③：读写的速度更快        ④：能够使用内建的 JavaScript eval() 方法进行解析</p><p>⑤：使用数组                    ⑥：不使用保留字</p></blockquote><h4 id="6-4、为什么使用-JSON？"><a href="#6-4、为什么使用-JSON？" class="headerlink" title="6.4、为什么使用 JSON？"></a>6.4、为什么使用 JSON？</h4><p>对于 AJAX 应用程序来说，JSON 比 XML 更快更易使用：</p><p>使用 XML：</p><blockquote><ol><li>读取 XML 文档</li><li>使用 XML DOM 来循环遍历文档</li><li>读取值并存储在变量中</li></ol></blockquote><p>使用 JSON：</p><blockquote><ol><li>读取 JSON 字符串</li><li>用 eval() 处理 JSON 字符串</li></ol></blockquote><h4 id="6-5、标准json字符串的格式"><a href="#6-5、标准json字符串的格式" class="headerlink" title="6.5、标准json字符串的格式"></a>6.5、标准json字符串的格式</h4><p>JSON 文件的<code>文件类型</code>是 “.json”、JSON 文本的 <code>MIME 类型</code>是 “application/json”</p><ul><li>如果是多个对象,数组[{},{}]</li><li>如果是单个对象,{}</li><li>数据类型:字符串,数值,布尔值,null,对象,数组</li><li>key一定要添加双引号””，单引号’’不行的，如上面的id，name</li><li>JSON值：数值、字符串、逻辑值(true|false)、数组、对象、null值</li><li>如果value是布尔值，数值，可以不加””</li><li>如果value是字符串，一定要加””</li><li>结束的位置不能,前面属性分割都是,</li></ul><h4 id="6-6、JSON转换为JavaScript对象"><a href="#6-6、JSON转换为JavaScript对象" class="headerlink" title="6.6、JSON转换为JavaScript对象"></a>6.6、JSON转换为JavaScript对象</h4><p>JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。</p><p>由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 eval() 函数，用 JSON 数据来生成原生的 JavaScript 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义json格式</span><br><span class="hljs-keyword">var</span> json=<span class="hljs-string">&#x27;&#123;&quot;id&quot;:1001,&quot;name&quot;:&quot;Kongwei_Liao&quot;&#125;&#x27;</span>;<span class="hljs-comment">//json字符串</span><br><span class="hljs-built_in">console</span>.debug(json);<br><span class="hljs-comment">//console.debug(json.id);//Error</span><br><span class="hljs-built_in">console</span>.debug(json.length);<span class="hljs-comment">//33</span><br><br><span class="hljs-comment">//把json字符串转换对象</span><br><span class="hljs-keyword">var</span> json2 =<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;(&quot;</span>+json+<span class="hljs-string">&quot;)&quot;</span>);<span class="hljs-comment">//json字符串转对象</span><br><span class="hljs-built_in">console</span>.debug(json2);<br><span class="hljs-built_in">console</span>.debug(json2.id);<span class="hljs-comment">//1001</span><br><span class="hljs-built_in">console</span>.debug(json2.name);<span class="hljs-comment">//Kongwei_Liao</span><br><br><span class="hljs-comment">//json对象</span><br><span class="hljs-keyword">var</span> json3 = &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;李四&quot;</span>&#125;;<span class="hljs-comment">//JSON对象</span><br><span class="hljs-built_in">console</span>.debug(json3);<br><span class="hljs-built_in">console</span>.debug(json3.id);<br><span class="hljs-built_in">console</span>.debug(json3.name);<br><br><span class="hljs-comment">//定义对象</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.id = <span class="hljs-number">1003</span>;<br>obj.name=<span class="hljs-string">&quot;xxxxx&quot;</span>;<br><span class="hljs-built_in">console</span>.debug(obj);<br><span class="hljs-built_in">console</span>.debug(obj.id);<br><span class="hljs-built_in">console</span>.debug(obj.name);<br><span class="hljs-comment">//console.debug(obj.toSource);</span><br><br><span class="hljs-comment">//json 数组字符串</span><br><span class="hljs-keyword">var</span> jsonArray = <span class="hljs-string">&#x27;[&#123;id:1,&quot;name&quot;:&quot;xxxx&quot;&#125;,&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;yyyyy&quot;&#125;]&#x27;</span>;<br><span class="hljs-comment">//var jsonArrs = eval(&quot;(&quot;+jsonArray+&quot;)&quot;);</span><br><span class="hljs-keyword">var</span> jsonArrs = <span class="hljs-built_in">JSON</span>.parse(jsonArray);<br><span class="hljs-comment">//JSON.parse()常用于与服务端交换数据，接受的服务器数据一般都是字符串，将数据转换为JavaScript对象</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ;i &lt;jsonArrs.length;i++)&#123;<br><span class="hljs-built_in">console</span>.debug(jsonArrs[i].id+<span class="hljs-string">&quot;,&quot;</span>+jsonArrs[i].name);<br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;runoob&quot;</span>, <span class="hljs-string">&quot;alexa&quot;</span>:<span class="hljs-number">10000</span>, <span class="hljs-string">&quot;site&quot;</span>:<span class="hljs-string">&quot;www.runoob.com&quot;</span>&#125;;<br><span class="hljs-keyword">var</span> myJSON = <span class="hljs-built_in">JSON</span>.stringify(obj);<br><span class="hljs-comment">//在向服务器发送数据时一般是字符串。</span><br><span class="hljs-comment">//我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。 </span><br><br><br><br><br><span class="hljs-comment">//嵌套JSON对象访问</span><br>myObj = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;百度&quot;</span>,<br>    <span class="hljs-string">&quot;alexa&quot;</span>:<span class="hljs-number">10086</span>,<br>    <span class="hljs-string">&quot;sites&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;site1&quot;</span>:<span class="hljs-string">&quot;www.baidu.com&quot;</span>,<br>        <span class="hljs-string">&quot;site2&quot;</span>:<span class="hljs-string">&quot;m.baidu.com&quot;</span>,<br>        <span class="hljs-string">&quot;site3&quot;</span>:<span class="hljs-string">&quot;c.baidu.com&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//访问</span><br>x = myObj.sites.site1;<span class="hljs-comment">//使用（.）</span><br><span class="hljs-comment">// 或者</span><br>x = myObj.sites[<span class="hljs-string">&quot;site1&quot;</span>];<span class="hljs-comment">//使用（[]）</span><br><br><span class="hljs-comment">//修改</span><br>myObj.sites.site1=<span class="hljs-string">&quot;kongwei-liao.cn&quot;</span>;<br>myObj.sites[<span class="hljs-string">&quot;site1&quot;</span>]=<span class="hljs-string">&quot;kongwei-liao.cn&quot;</span>;<br><br><span class="hljs-comment">//删除对象属性</span><br><span class="hljs-keyword">delete</span> myObj.sites.site1;<br><span class="hljs-keyword">delete</span> myObj.sites[<span class="hljs-string">&quot;site1&quot;</span>]<br><br>myObj = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;网站&quot;</span>,<br>    <span class="hljs-string">&quot;num&quot;</span>:<span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;sites&quot;</span>: [<br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>:[ <span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-string">&quot;Google 搜索&quot;</span>, <span class="hljs-string">&quot;Google 翻译&quot;</span> ] &#125;,<br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>:[ <span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&quot;菜鸟工具&quot;</span>, <span class="hljs-string">&quot;菜鸟微信&quot;</span> ] &#125;,<br>        &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Taobao&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>:[ <span class="hljs-string">&quot;淘宝&quot;</span>, <span class="hljs-string">&quot;网购&quot;</span> ] &#125;<br>    ]<br>&#125;<br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> myObj.sites) &#123;<br>    x += <span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + myObj.sites[i].name + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (j <span class="hljs-keyword">in</span> myObj.sites[i].info) &#123;<br>        x += myObj.sites[i].info[j] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//解析函数</span><br><span class="hljs-comment">//JSON 不允许包含函数，但你可以将函数作为字符串存储，之后再将字符串转换为函数。</span><br><span class="hljs-keyword">var</span> text = <span class="hljs-string">&#x27;&#123; &quot;name&quot;:&quot;Runoob&quot;, &quot;alexa&quot;:&quot;function () &#123;return 10000;&#125;&quot;, &quot;site&quot;:&quot;www.runoob.com&quot;&#125;&#x27;</span>;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(text);<br>obj.alexa = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;(&quot;</span> + obj.alexa + <span class="hljs-string">&quot;)&quot;</span>);<br> <br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = obj.name + <span class="hljs-string">&quot; Alexa 排名：&quot;</span> + obj.alexa();<br><br></code></pre></td></tr></table></figure><p>JSON.parse(jsonArray) 这种转换要求jsonArray这个字符串里面的key 必须是标准的，需要添加 双引号;<a href="https://c.runoob.com/front-end/53">格式验证工具</a></p><h3 id="7、Ajax-Post"><a href="#7、Ajax-Post" class="headerlink" title="7、Ajax Post"></a>7、Ajax Post</h3><p>Get 请求中文乱码：配置tomcat：URIEncoding=”UTF-8”就可以解决</p><p>或  用前台encodeURI(url)，再使用后台URLDecoder.decode(url,”utf8”);</p><blockquote><p>Tomcat中配置URIEncoding=”UTF-8”来处理中文的处理</p><p>打开 C:\Program Files\Apache Software Foundation\Tomcat 7.0\confserver.xml 文件，更改两个地方。</p><p>配置一：添加 URIEncoding=”UTF-8”</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Connector <span class="hljs-attribute">URIEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> <span class="hljs-attribute">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;8081&quot;</span> <span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attribute">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>配置二：添加 URIEncoding=”UTF-8”</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Connector <span class="hljs-attribute">URIEncoding</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;8009&quot;</span> <span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;AJP/1.3&quot;</span> <span class="hljs-attribute">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>配置后重启tomcat。</p></blockquote><p>Post请求中文乱码：req.setCharacterEncoding(“utf-8”);</p><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>然而，在以下情况中，请使用 POST 请求：</p><ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul><h4 id="7-1、传统表单默认的提交属性"><a href="#7-1、传统表单默认的提交属性" class="headerlink" title="7.1、传统表单默认的提交属性"></a>7.1、传统表单默认的提交属性</h4><p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">xmlhttp</span><span class="hljs-selector-class">.open</span>(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;/try/ajax/demo_post2.php&quot;</span>,true); <br><span class="hljs-selector-tag">xmlhttp</span><span class="hljs-selector-class">.setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>); <span class="hljs-selector-tag">xmlhttp</span><span class="hljs-selector-class">.send</span>(<span class="hljs-string">&quot;fname=Henry&amp;lname=Ford&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Content-Type</span>=<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br><span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br></code></pre></td></tr></table></figure><p>浏览器访问的时候，这个属性默认不写,由浏览器自动添加</p><h4 id="7-2、Ajax-post必须额外提交请求头"><a href="#7-2、Ajax-post必须额外提交请求头" class="headerlink" title="7.2、Ajax post必须额外提交请求头"></a>7.2、Ajax post必须额外提交请求头</h4><p>才能得到数据，卸载open方法之后</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">ajax</span><span class="hljs-selector-class">.setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br></code></pre></td></tr></table></figure><p> <a href="http://www.runoob.com/http/http-content-type.html">说明文档</a></p><h4 id="7-3、页面代码"><a href="#7-3、页面代码" class="headerlink" title="7.3、页面代码"></a>7.3、页面代码</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span>&gt;<br>用户名：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;uname&quot;</span> name=<span class="hljs-string">&quot;uname&quot;</span> value=<span class="hljs-string">&quot;lee&quot;</span> /&gt;<br>&lt;<span class="hljs-keyword">br</span>/&gt;<br>密码：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;pwd&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span> value=<span class="hljs-string">&quot;l23456&quot;</span> /&gt;<br>&lt;<span class="hljs-keyword">br</span>/&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;btnSubmit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>  onclick=<span class="hljs-string">&quot;login();&quot;</span>/&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="7-4、JS代码"><a href="#7-4、JS代码" class="headerlink" title="7.4、JS代码"></a>7.4、JS代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 异步的方式请求数据</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">// 1 创建ajax对象</span><br><span class="hljs-keyword">var</span> xhr = createAjax();<br><br><span class="hljs-comment">// 2 open</span><br><span class="hljs-keyword">var</span> uname = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;uname&quot;</span>).value;<br><span class="hljs-keyword">var</span> pwd = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;pwd&quot;</span>).value;<br><span class="hljs-keyword">var</span> strParams = <span class="hljs-string">&quot;uname=&quot;</span>+uname + <span class="hljs-string">&quot;&amp;pwd=&quot;</span>+pwd;<br>xhr.open(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;/Login&quot;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//xhr.open(&quot;GET&quot;,&quot;/Login?&quot;+strParams,true);</span><br><br><span class="hljs-comment">// 4 监听</span><br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">// 判断状态</span><br><span class="hljs-keyword">if</span>(xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>)&#123;<br><span class="hljs-comment">//console.debug(xhr.responseText);</span><br><span class="hljs-built_in">console</span>.debug(<span class="hljs-keyword">typeof</span> xhr.responseText);<br><span class="hljs-keyword">var</span> jsonObj = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText);<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;code:&quot;</span> + jsonObj.code);<br><span class="hljs-built_in">console</span>.debug(<span class="hljs-string">&quot;msg:&quot;</span> + jsonObj.msg);<br>&#125;<br>&#125;<br><br>xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br><span class="hljs-comment">// 3 send</span><br>xhr.send(strParams);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-5、Servlet代码"><a href="#7-5、Servlet代码" class="headerlink" title="7.5、Servlet代码"></a>7.5、Servlet代码</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//Ajax的请求不要在代码中跳转</span><br><span class="hljs-comment">//如果跳转会出现两种情况(1.报错 2.把跳转的整个页面当做一个字符串返回回去)</span><br><span class="hljs-comment">//你想把什么数据给前端，直接通过流的方法把值输出去</span><br><br>@<span class="hljs-constructor">WebServlet(<span class="hljs-string">&quot;/Login&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> LoginSer extends HttpServlet &#123;<br><br>@Override<br>protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br><span class="hljs-comment">// 返回值说明</span><br><span class="hljs-comment">// code: 100 成功  200 错误  </span><br><span class="hljs-comment">// msg:自定义消息</span><br>req.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>resp.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>resp.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(req.get<span class="hljs-constructor">ContentType()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(resp.get<span class="hljs-constructor">ContentType()</span>);<br><br><span class="hljs-comment">// 返回值</span><br>JSONObject jsonRet = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;<br>jsonRet.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>jsonRet.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录失败&quot;</span>);<br><br><span class="hljs-comment">// 1  获取参数</span><br>String uname = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;uname&quot;</span>)</span>;<br>String pwd = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;pwd&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(uname + <span class="hljs-string">&quot;-&quot;</span> + pwd);<br><br><span class="hljs-comment">// 2  验证用户名和密码是否正确 （模拟）</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(uname)<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-string">&quot;123&quot;</span>.equals(pwd)) &#123;<br>jsonRet.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;100&quot;</span>);<br>jsonRet.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 3 返回结果</span><br>resp.get<span class="hljs-constructor">Writer()</span>.print(jsonRet);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、Ajax常见异常"><a href="#8、Ajax常见异常" class="headerlink" title="8、Ajax常见异常"></a>8、Ajax常见异常</h3><p>使用firebug或者谷歌浏览器的调试工具看错：</p><ol><li><p>ReferenceError: XMLhttpRequest is not defined[详细了解]：</p><p>表示js代码中XMLhttpRequest 对象不存在，考虑单词是否写错了</p></li><li><p>XMLHttpRequest state must be OPENED.：</p><p>setRequestHeader方法放的位置不对</p></li><li><p>JSON.parse: expected property name or ‘}’ at line 1 column 2 of the JSON data[详细了解]:</p><p>使用JSON.parse的时候，传入的json字符串不是标准的格式</p></li></ol><h3 id="8、从容应试"><a href="#8、从容应试" class="headerlink" title="8、从容应试"></a>8、从容应试</h3><ol><li><p>那些场景需要使用ajax （至少说出4个）</p></li><li><p>同步交互和异步交互 (同步和异步能说出来)</p></li><li><p>如果是html页面,可以显示动态内容?     如果使用ajax是可以的A</p></li></ol><p>10、get还是post</p><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>然而，在以下情况中，请使用 POST 请求：</p><ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul>]]></content>
    
    
    <categories>
      
      <category>Ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaBean&amp;EL&amp;JSTL</title>
    <link href="/2019/11/21/JavaBean&amp;EL&amp;JSTL/"/>
    <url>/2019/11/21/JavaBean&amp;EL&amp;JSTL/</url>
    
    <content type="html"><![CDATA[<h3 id="1、JavaBean"><a href="#1、JavaBean" class="headerlink" title="1、JavaBean"></a>1、JavaBean</h3><h4 id="1-1、什么是JavaBean"><a href="#1-1、什么是JavaBean" class="headerlink" title="1.1、什么是JavaBean"></a>1.1、什么是JavaBean</h4><p>JavaBean 是一种Java语言遵守JavaBean API规范写成的<code>可重用组件</code>。</p><p>JavaBean 与其它 Java 类相比而言独一无二的特征：</p><ul><li><pre><code> 提供一个默认的无参构造函数。</code></pre></li><li><pre><code> 需要被序列化并且实现了 Serializable 接口。</code></pre></li><li><pre><code> 可能有一系列可读写属性。</code></pre></li><li><pre><code> 可能有一系列的 getter 或 **setter** 方法。</code></pre></li></ul><p>简单一点：建一个类,给一个无参的构造方法. 它就是JavaBean</p><h4 id="1-2、JavaBean的规范"><a href="#1-2、JavaBean的规范" class="headerlink" title="1.2、JavaBean的规范"></a>1.2、JavaBean的规范</h4><p>JavaBean分两种：</p><blockquote><p>①、复杂的，组件性的（GUI），比如事件监听器；</p><p>②、简单的JavaBean：有属性和方法。</p></blockquote><p>JavaBean是一个特殊的Java类，它遵守了一定的规范（有一个公共的无参构造器，可能还有get和set方法）</p><p>注意：以Java来说get/set属于方法，但是以JavaBean来说get/set相当于属性。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">get<strong>PropertyName</strong>()</td><td align="left">举例来说，如果属性的名称为 myName，那么这个方法的名字就要写成 getMyName() 来读取这个属性。这个方法也称为访问器。</td></tr><tr><td align="left">set<strong>PropertyName</strong>()</td><td align="left">举例来说，如果属性的名称为 myName，那么这个方法的名字就要写成  setMyName()来写入这个属性。这个方法也称为写入器。</td></tr></tbody></table><p><img src="/2019/11/21/JavaBean&EL&JSTL/getset.png"></p><p>一个 JavaBean 对象的属性应该是可访问的。这个属性可以是任意合法的 Java 数据类型，包括自定义 Java 类。一个 JavaBean 对象的属性可以是可读写，或只读，或只写。</p><p>JavaBean的属性与普通类的属性不一样，属性以方法的形式出现（getter，setter）</p><p>写法：getXxx，setXxx            注：xxx未在JavaBean的字段中，不代表xxx不是它属性</p><p>特殊：</p><p>  ①getBbs 这里的bbs也是JavaBean的属性，即使bbs未在字段中定义</p><p>  ②如果是boolean 使用is判断JavaBean属性</p><p>注意：以后我们使用JavaBean，<strong>全用包装类型</strong>（后面要用），JavaBean是一个可重用的组件（反复使用，可以少些代码），今天使用JavaBean主要是要与后面的EL相结合使用。</p><h4 id="1-2、jsp-useBean"><a href="#1-2、jsp-useBean" class="headerlink" title="1.2、jsp:useBean"></a>1.2、jsp:useBean</h4><h5 id="1-2-1、-lt-jsp-useBean-gt-标签可以在-JSP-中声明一个-JavaBean，然后使用。"><a href="#1-2-1、-lt-jsp-useBean-gt-标签可以在-JSP-中声明一个-JavaBean，然后使用。" class="headerlink" title="1.2.1、&lt;jsp:useBean&gt; 标签可以在 JSP 中声明一个 JavaBean，然后使用。"></a>1.2.1、&lt;jsp:useBean&gt; 标签可以在 JSP 中声明一个 JavaBean，然后使用。</h5><p>声明后，JavaBean 对象就成了脚本变量，可以通过脚本元素或其他自定义标签来访问。&lt;jsp:useBean&gt; 标签的语法格式如下： </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;jsp:useBean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;bean 的名字&quot;</span> <span class="hljs-attribute">scope</span>=<span class="hljs-string">&quot;bean 的作用域&quot;</span> typeSpec/&gt;<br></code></pre></td></tr></table></figure><p> 其中，根据具体情况，scope 的值可以是 <code>page</code>，<code>request</code>，<code>session</code> 或 <code>application</code>。id值可任意只要不和同一 JSP 文件中其它 &lt;jsp:useBean&gt; 中 id 值一样就行了。</p><p> 接下来给出的是 &lt;jsp:useBean&gt; 标签的一个简单的用法：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="ruby">    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span></span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>useBean 实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:useBean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span> /&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>日期为：&lt;%=</span><span class="ruby"> date </span><span class="xml">%&gt;</span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p> 它将会产生如下结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">日期为：Tue Jun <span class="hljs-number">28 15:22:24</span> CST <span class="hljs-number">2016</span><br></code></pre></td></tr></table></figure><h5 id="1-2-2、-lt-jsp-getProperty-gt-和-lt-jsp-getProperty-gt"><a href="#1-2-2、-lt-jsp-getProperty-gt-和-lt-jsp-getProperty-gt" class="headerlink" title="1.2.2、&lt;jsp:getProperty/&gt;和&lt;jsp:getProperty/&gt;"></a>1.2.2、&lt;jsp:getProperty/&gt;和&lt;jsp:getProperty/&gt;</h5><p>在&lt;jsp:useBean&gt;标签主体中使用&lt;jsp:getProperty/&gt;标签来调用 <strong>getter</strong> 方法，使用&lt;jsp:getProperty/&gt;标签来调用 <strong>setter</strong> 方法，语法格式如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;jsp:useBean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;bean 编译的类&quot;</span> scope=<span class="hljs-string">&quot;bean 作用域&quot;</span>&gt;<br>   &lt;jsp:setProperty <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;bean 的 id&quot;</span> <span class="hljs-keyword">property</span>=<span class="hljs-string">&quot;属性名&quot;</span>  <br>                    value=<span class="hljs-string">&quot;value&quot;</span>/&gt;<br>   &lt;jsp:getProperty <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;bean 的 id&quot;</span> <span class="hljs-keyword">property</span>=<span class="hljs-string">&quot;属性名&quot;</span>/&gt;<br>   ...........<br>&lt;/jsp:useBean&gt;<br></code></pre></td></tr></table></figure><p> name属性指的是Bean的id属性。property属性指的是想要调用的getter或setter方法。</p><p> 接下来给出使用以上语法进行属性访问的一个简单例子：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;<span class="hljs-keyword">get</span> 和 <span class="hljs-keyword">set</span> 属性实例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;jsp:useBean id=<span class="hljs-string">&quot;students&quot;</span> <br>                    <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">StudentsBean</span>&quot;&gt; <br>   &lt;<span class="hljs-symbol">jsp:<span class="hljs-symbol">setProperty</span></span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">students</span>&quot; <span class="hljs-symbol">property</span>=&quot;<span class="hljs-symbol">firstName</span>&quot;<br>                    <span class="hljs-symbol">value</span>=&quot;小强&quot;/&gt;<br>   &lt;<span class="hljs-symbol">jsp:<span class="hljs-symbol">setProperty</span></span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">students</span>&quot; <span class="hljs-symbol">property</span>=&quot;<span class="hljs-symbol">lastName</span>&quot; <br>                    <span class="hljs-symbol">value</span>=&quot;王&quot;/&gt;<br>   &lt;<span class="hljs-symbol">jsp:<span class="hljs-symbol">setProperty</span></span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">students</span>&quot; <span class="hljs-symbol">property</span>=&quot;<span class="hljs-symbol">age</span>&quot;<br>                    <span class="hljs-symbol">value</span>=&quot;<span class="hljs-symbol">10</span>&quot;/&gt;<br>&lt;/<span class="hljs-symbol">jsp:<span class="hljs-symbol">useBean</span></span>&gt;<br><br>&lt;<span class="hljs-symbol">p</span>&gt;学生名字: <br>   &lt;<span class="hljs-symbol">jsp:<span class="hljs-symbol">getProperty</span></span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">students</span>&quot; <span class="hljs-symbol">property</span>=&quot;<span class="hljs-symbol">firstName</span>&quot;/&gt;<br>&lt;/<span class="hljs-symbol">p</span>&gt;<br>&lt;<span class="hljs-symbol">p</span>&gt;学生姓氏: <br>   &lt;<span class="hljs-symbol">jsp:<span class="hljs-symbol">getProperty</span></span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">students</span>&quot; <span class="hljs-symbol">property</span>=&quot;<span class="hljs-symbol">lastName</span>&quot;/&gt;<br>&lt;/<span class="hljs-symbol">p</span>&gt;<br>&lt;<span class="hljs-symbol">p</span>&gt;学生年龄: <br>   &lt;<span class="hljs-symbol">jsp:<span class="hljs-symbol">getProperty</span></span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">students</span>&quot; <span class="hljs-symbol">property</span>=&quot;<span class="hljs-symbol">age</span>&quot;/&gt;<br>&lt;/<span class="hljs-symbol">p</span>&gt;<br><br>&lt;/<span class="hljs-symbol">body</span>&gt;<br>&lt;/<span class="hljs-symbol">html</span>&gt;<br></code></pre></td></tr></table></figure><p> 访问以上 JSP，运行结果如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">学生名字: 小强</span><br><span class="hljs-section">学生姓氏: 王</span><br><span class="hljs-section">学生年龄: 10</span><br></code></pre></td></tr></table></figure><h4 id="1-3、JavaBean的反（自）省机制"><a href="#1-3、JavaBean的反（自）省机制" class="headerlink" title="1.3、JavaBean的反（自）省机制"></a>1.3、JavaBean的反（自）省机制</h4><p>什么是JavaBean自省机制？</p><p>​    我们拿到一个JavaBean，就可以拿到它的可读和可写的属性 或者属性名，字段；</p><p>一般来说我们需要拿到可读可写属性；有个这些属性，可以通过反射去完成读写功能；</p><p>使用JavaBean的API：<code>Introspector</code>（通过它拿到JavaBean）</p><p><img src="/2019/11/21/JavaBean&EL&JSTL/getBeanInfo.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">BeanInfo beanInfo= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Introspector</span>.</span></span>get<span class="hljs-constructor">BeanInfo(JavaBeanDemo.<span class="hljs-params">class</span>,Object.<span class="hljs-params">class</span>)</span>;<br>PropertyDescriptor<span class="hljs-literal">[]</span> pds=beanInfo.get<span class="hljs-constructor">PropertyDescriptors()</span>;<br></code></pre></td></tr></table></figure><p><strong>BeanInfo</strong>(就是一个JavaBean对象，也可以称为Javabean的描述器)  </p><p><strong>getBeanInfo</strong>(JavaBeanDemo.class)：得到<code>JavaBeanDemo</code>以及它的<code>父类Object的属性</code></p><h5 id="1-3-1、getBeanInfo-JavaBeanDemo-class-：得到StuJavaBeanDemodent的属性-包含它父类Object的属性"><a href="#1-3-1、getBeanInfo-JavaBeanDemo-class-：得到StuJavaBeanDemodent的属性-包含它父类Object的属性" class="headerlink" title="1.3.1、getBeanInfo(JavaBeanDemo.class)：得到StuJavaBeanDemodent的属性,包含它父类Object的属性"></a>1.3.1、getBeanInfo(JavaBeanDemo.class)：得到StuJavaBeanDemodent的属性,包含它父类Object的属性</h5><p><img src="/2019/11/21/JavaBean&EL&JSTL/getBeanInfo1.png"></p><p><img src="/2019/11/21/JavaBean&EL&JSTL/shuchu.png"></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">//输出分析</span><br>java.beans.PropertyDescriptor[<br><span class="hljs-keyword">name</span>=<span class="hljs-keyword">class</span>; <br>propertyType=<span class="hljs-keyword">class</span> java.lang.<span class="hljs-keyword">Class</span>; <br>readMethod=<span class="hljs-keyword">public</span> final native java.lang.<span class="hljs-keyword">Class</span> java.lang.<span class="hljs-keyword">Object</span>.getClass()<br>]<br>java.beans.PropertyDescriptor[<br><span class="hljs-keyword">name</span>=<span class="hljs-keyword">name</span>; <br>propertyType=<span class="hljs-keyword">class</span> java.lang.<span class="hljs-keyword">String</span>; <br>readMethod=<span class="hljs-keyword">public</span> java.lang.<span class="hljs-keyword">String</span> cn.ant_nest.JavaBean.JavaBeanDemo.getName(); <br>writeMethod=<span class="hljs-keyword">public</span> void cn.ant_nest.JavaBean.JavaBeanDemo.setName(java.lang.<span class="hljs-keyword">String</span>)<br>]<br><span class="hljs-comment">//id不会被输出</span><br></code></pre></td></tr></table></figure><h5 id="1-3-2、getBeanInfo-JavaBeanDemo-class-Object-class-：得到StuJavaBeanDemodent的属性-不包含它父类Object的属性"><a href="#1-3-2、getBeanInfo-JavaBeanDemo-class-Object-class-：得到StuJavaBeanDemodent的属性-不包含它父类Object的属性" class="headerlink" title="1.3.2、getBeanInfo(JavaBeanDemo.class,Object.class)：得到StuJavaBeanDemodent的属性,不包含它父类Object的属性"></a>1.3.2、getBeanInfo(JavaBeanDemo.class,Object.class)：得到StuJavaBeanDemodent的属性,不包含它父类Object的属性</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> testBeanInfo &#123;<br>    @Test<br>    public void test<span class="hljs-constructor">Bean()</span> throws IntrospectionException &#123;<br>        <span class="hljs-comment">//获取一个BeanInfo，就是一个JavaBean的描述器，从Student开始（含），到Object结束（不含）</span><br>        BeanInfo beanInfo= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Introspector</span>.</span></span>get<span class="hljs-constructor">BeanInfo(JavaBeanDemo.<span class="hljs-params">class</span>,Object.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-comment">//拿到这个JavaBean的属性描述器</span><br>        PropertyDescriptor<span class="hljs-literal">[]</span> pds=beanInfo.get<span class="hljs-constructor">PropertyDescriptors()</span>;<br>        <span class="hljs-keyword">for</span>(PropertyDescriptor pd:pds)&#123;<br>            <span class="hljs-comment">//获取JavaBean的字段名</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(pd.get<span class="hljs-constructor">Name()</span>);<br>            <span class="hljs-comment">//得到可读写方法</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(pd.get<span class="hljs-constructor">ReadMethod()</span>);<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(pd.get<span class="hljs-constructor">WriteMethod()</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*打印输出</span><br><span class="hljs-comment">name</span><br><span class="hljs-comment">public java.lang.String cn.ant_nest.JavaBean.JavaBeanDemo.getName()</span><br><span class="hljs-comment">public void cn.ant_nest.JavaBean.JavaBeanDemo.setName(java.lang.String)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//id不会被输出</span><br></code></pre></td></tr></table></figure><h4 id="1-4、BeanUtils的使用（主要进行属性的拷贝）"><a href="#1-4、BeanUtils的使用（主要进行属性的拷贝）" class="headerlink" title="1.4、BeanUtils的使用（主要进行属性的拷贝）"></a>1.4、BeanUtils的使用（主要进行属性的拷贝）</h4><p>引入：</p><p>​    有人对JavaBean做了一整套的解决实施方案，我们学习一个属性的拷贝，很多框架都是在用这个属性的拷贝的功能，在用这个的还是，需要导入对应的jar包:</p><p>先进行导包:</p><p><strong>①同一个类之间的属性拷贝</strong></p><p><img src="/2019/11/21/JavaBean&EL&JSTL/copy.png"></p><p><strong>②不同类之间属性拷贝</strong></p><p><img src="/2019/11/21/JavaBean&EL&JSTL/copy2.png"></p><p><strong>③把Map里面的元素拷贝到对象中去（但是不能把对象的元素拷贝到map）</strong></p><p><img src="/2019/11/21/JavaBean&EL&JSTL/copy3.png"></p><h3 id="2、EL表达式语言"><a href="#2、EL表达式语言" class="headerlink" title="2、EL表达式语言"></a>2、EL表达式语言</h3><p>JSP表达式语言（EL）使得访问存储在JavaBean中的数据变得非常简单。JSP EL既可以用来创建算术表达式也可以用来创建逻辑表达式。在JSP EL表达式内可以使用整型数，浮点数，字符串，常量true、false，还有null。</p><h4 id="2-1、EL是啥？"><a href="#2-1、EL是啥？" class="headerlink" title="2.1、EL是啥？"></a>2.1、EL是啥？</h4><p>EL就表达式语言,可以获取<code>作用域</code>里的共享数据</p><p>作用域：pageContext,request,session,application</p><h4 id="2-2、EL的使用"><a href="#2-2、EL的使用" class="headerlink" title="2.2、EL的使用"></a>2.2、EL的使用</h4><p>想要停用对EL表达式的评估的话，需要使用page指令将isELIgnored属性值设为true：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%@ page isELIgnored =<span class="hljs-string">&quot;true|false&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>这样，EL表达式就会被忽略。若设为false，则容器将会计算EL表达式。</p><p><strong>以下是EL的使用举例：</strong></p><p><strong>1、User.java</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package cn.ant_nest.JavaBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> pwd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getPwd</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setPwd</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> pwd</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、LoginServlet.java</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> cn.ant_nest.<span class="hljs-type">JavaBean</span>;<br><br><span class="hljs-keyword">import</span> cn.ant_nest.<span class="hljs-type">JavaBean</span>.<span class="hljs-type">User</span>;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.<span class="hljs-type">WebServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">UnsupportedEncodingException</span>;<br><br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/LoginServlet&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span>, <span class="hljs-type">ServletException</span> &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">//接收参数</span><br>        <span class="hljs-type">String</span> name=req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> pwd=req.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>);<br><br>        <span class="hljs-type">User</span> user=<span class="hljs-keyword">new</span> <span class="hljs-type">User</span>();<br>        user.setName(name);<br>        user.setPwd(pwd);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(name)&amp;&amp;<span class="hljs-string">&quot;123&quot;</span>.equals(pwd))&#123;<br>            <span class="hljs-comment">//登录成功</span><br>            req.getSession().setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br>            <span class="hljs-comment">//登陆成功调整main.jsp</span><br>            resp.sendRedirect(<span class="hljs-string">&quot;main.jsp&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//如果用户不存在</span><br>        req.setAttribute(<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;login.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在Servlet中可以用上面代码中的方法设置和访问作用域的属性，在JSP中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;jsp:useBean id=&quot;box&quot; scope=&quot;page&quot; <span class="hljs-keyword">class</span>=&quot;cn.ant_nest.JavaBean.User&quot;&gt;<br>&lt;jsp:setProperty <span class="hljs-type">name</span>=&quot;box&quot; property=&quot;name&quot; <span class="hljs-keyword">value</span>=&quot;Kongwei-Liao&quot;/&gt;<br>&lt;/jsp:useBean&gt;<br><br>$&#123;<span class="hljs-type">box</span>.name&#125;<br><br>&lt;%<br>    <span class="hljs-keyword">out</span>.println(pageContext.getAttribute(&quot;box&quot;));//&quot;box.name&quot;这里行不通，显示出来的是<span class="hljs-keyword">null</span><br>%&gt;<br><br>&lt;%<span class="hljs-comment">--浏览器页面显示的是：</span><br>Kongwei-Liao<br>cn.ant_nest.JavaBean.<span class="hljs-keyword">User</span>@<span class="hljs-number">1584</span>c339<br><span class="hljs-comment">--%&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3、login.jsp</strong></p></blockquote><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="vbscript">&lt;%--&lt;%=<span class="hljs-built_in">request</span>.getAttribute(<span class="hljs-string">&quot;error&quot;</span>)==<span class="hljs-literal">null</span>?<span class="hljs-string">&quot;&quot;</span>:<span class="hljs-built_in">request</span>.getAttribute(<span class="hljs-string">&quot;error&quot;</span>)%&gt;</span><span class="xml">--%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>$&#123;error&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;LoginServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span></span><br><span class="xml">    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>4、main.jsp</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">欢迎您$</span><span class="xquery">&#123;user<span class="hljs-built_in">.name</span>&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p> <img src="/2019/11/21/JavaBean&EL&JSTL/el.png"></p><p><strong>注：</strong>如果浏览器上直接显示的是EL表达式，而不是表达式的值，将web.xml的内容替换成以下内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee</span></span><br><span class="hljs-tag"><span class="hljs-string">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3、EL在四大作用域的取值"><a href="#2-3、EL在四大作用域的取值" class="headerlink" title="2.3、EL在四大作用域的取值"></a>2.3、EL在四大作用域的取值</h4><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="vbscript">&lt;%</span><br><span class="vbscript">    pageContext.setAttribute(<span class="hljs-string">&quot;pageInfo&quot;</span>,<span class="hljs-string">&quot;page中的值&quot;</span>);</span><br><span class="vbscript">    <span class="hljs-built_in">request</span>.setAttribute(<span class="hljs-string">&quot;requestInfo&quot;</span>,<span class="hljs-string">&quot;request中的值&quot;</span>);</span><br><span class="vbscript">    session.setAttribute(<span class="hljs-string">&quot;sessionInfo&quot;</span>,<span class="hljs-string">&quot;session中的值&quot;</span>);</span><br><span class="vbscript">    application.setAttribute(<span class="hljs-string">&quot;applicationInfo&quot;</span>,<span class="hljs-string">&quot;application中的值&quot;</span>);</span><br><span class="vbscript">%&gt;</span><br><span class="xml">$&#123;pageInfo&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">$&#123;requestInfo&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">$&#123;sessionInfo&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="xml">$&#123;applicationInfo&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/JavaBean&EL&JSTL/el1.png"></p><h5 id="2-3-1、EL取值的顺序："><a href="#2-3-1、EL取值的顺序：" class="headerlink" title="2.3.1、EL取值的顺序："></a>2.3.1、EL取值的顺序：</h5><p>在作用域范围我们的名字取成一样了,怎么去找到特定的一个作用域中的值呢?</p><p><img src="/2019/11/21/JavaBean&EL&JSTL/el2.png"></p><p>结论：它查询找的顺序：从小至大，先取小的范围的值，小的没有，在取到大的范围的值</p><p>pageContext–&gt;request–&gt;session–&gt;application</p><h5 id="2-3-2、不同作用域间属性名冲突解决"><a href="#2-3-2、不同作用域间属性名冲突解决" class="headerlink" title="2.3.2、不同作用域间属性名冲突解决"></a>2.3.2、不同作用域间属性名冲突解决</h5><p>以后我们常用的是request和session，有时候，如果没有一个规范的时候，我们取的名字会重复，使用下面的第一种解决方案。</p><p><strong>第一种解决方案：</strong>前面添加一个前缀，确定到哪个作用域拿，比如</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;pageScope.Info&#125;</span><br><span class="hljs-variable">$&#123;requestScope.Info&#125;</span><br><span class="hljs-variable">$&#123;sessionScope.Info&#125;</span><br><span class="hljs-variable">$&#123;applicationScope.Info&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/JavaBean&EL&JSTL/el3.png"></p><p><strong>第二种解决方案：</strong>名字规范 比如：XXX_IN_SESSION  </p><h4 id="2-4、EL的注意事项"><a href="#2-4、EL的注意事项" class="headerlink" title="2.4、EL的注意事项"></a>2.4、EL的注意事项</h4><p>1、</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">session.setAttribute(<span class="hljs-string">&quot;KEY.IN.SESSION&quot;</span>, <span class="hljs-string">&quot;你是session&quot;</span>);<br><span class="hljs-variable">$&#123;</span>KEY.IN.SESSION&#125;&lt;<span class="hljs-string">%--</span>取不到值--%&gt;<br><span class="hljs-variable">$&#123;</span>sessionScope.KEY.IN.SESSION&#125;&lt;<span class="hljs-string">%--</span>取不到值--%&gt;<br><span class="hljs-variable">$&#123;</span>sessionScope[<span class="hljs-string">&quot;KEY.IN.SESSION&quot;</span>]&#125;&lt;<span class="hljs-string">%--</span>OK哒！取的到值--%&gt;<br></code></pre></td></tr></table></figure><p>2、</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">$</span><span class="hljs-template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml">&lt;%--拿到上下文路径--%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;pageContext.request.contextPath&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/***&quot;</span>&gt;</span>XXX<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>3、Tomcat7之后EL表达式可以调用方法：</p><p>之前2.2节中给session对象传了一个User类对象user，我们这里调用里面的getName方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;user.getName()&#125;</span><br></code></pre></td></tr></table></figure><p>4、JavaBean的取值方式</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">$&#123;<span class="hljs-keyword">user</span>.<span class="hljs-keyword">user</span>Info&#125;<span class="hljs-variable">&lt;%--相当于调用getUserInfo()--%&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/JavaBean&EL&JSTL/huoqu.png"></p><h4 id="2-5、EL的其它特性"><a href="#2-5、EL的其它特性" class="headerlink" title="2.5、EL的其它特性"></a>2.5、EL的其它特性</h4><h5 id="2-5-1、EL算术运算符"><a href="#2-5-1、EL算术运算符" class="headerlink" title="2.5.1、EL算术运算符"></a>2.5.1、EL算术运算符</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;1+2&#125;</span> <span class="hljs-variable">$&#123;2-1&#125;</span> <span class="hljs-variable">$&#123;2*3&#125;</span> <span class="hljs-variable">$&#123;16/5&#125;</span> <span class="hljs-variable">$&#123;16%5&#125;</span><br></code></pre></td></tr></table></figure><h5 id="2-5-2、EL-关系运算符"><a href="#2-5-2、EL-关系运算符" class="headerlink" title="2.5.2、EL 关系运算符"></a>2.5.2、EL 关系运算符</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span>&gt;<span class="hljs-number">5</span>&#125; 或<span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span> <span class="hljs-keyword">gt</span> <span class="hljs-number">5</span>&#125;<br><span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span>&lt;<span class="hljs-number">5</span>&#125; 或<span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span> <span class="hljs-keyword">lt</span> <span class="hljs-number">5</span>&#125;<br><span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span>&gt;=<span class="hljs-number">5</span>&#125; 或<span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span> <span class="hljs-keyword">ge</span> <span class="hljs-number">5</span>&#125;<br><span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span>&lt;=<span class="hljs-number">5</span>&#125; 或<span class="hljs-symbol">$</span>&#123;<span class="hljs-number">16</span> <span class="hljs-keyword">le</span> <span class="hljs-number">5</span>&#125;<br><span class="hljs-symbol">$</span>&#123;<span class="hljs-number">1</span>=<span class="hljs-number">2</span>&#125; 或<span class="hljs-symbol">$</span>&#123;<span class="hljs-number">1</span> <span class="hljs-keyword">eq</span> <span class="hljs-number">2</span>&#125;<br><span class="hljs-symbol">$</span>&#123;<span class="hljs-number">2</span>!=<span class="hljs-number">1</span>&#125; 或<span class="hljs-symbol">$</span>&#123;<span class="hljs-number">2</span> <span class="hljs-keyword">ne</span> <span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-5-3、EL-逻辑运算符"><a href="#2-5-3、EL-逻辑运算符" class="headerlink" title="2.5.3、EL 逻辑运算符"></a>2.5.3、EL 逻辑运算符</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">true</span> &amp;&amp; <span class="hljs-keyword">true</span>&#125;结果 <span class="hljs-keyword">true</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">true</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">true</span>&#125; 结果<span class="hljs-keyword">true</span><br><br><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">true</span> || <span class="hljs-keyword">false</span>&#125; 结果 <span class="hljs-keyword">true</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">true</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">false</span>&#125; 结果 <span class="hljs-keyword">true</span><br><br><span class="hljs-variable">$&#123;</span>!<span class="hljs-keyword">true</span>&#125; 结果<span class="hljs-keyword">false</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-keyword">not</span> <span class="hljs-keyword">true</span>&#125; 结果<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><h5 id="2-5-4、EL-其他运算符"><a href="#2-5-4、EL-其他运算符" class="headerlink" title="2.5.4、EL 其他运算符"></a>2.5.4、EL 其他运算符</h5><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">$&#123;empty <span class="hljs-built_in">param</span>.<span class="hljs-built_in">name</span>&#125; 如果<span class="hljs-built_in">param</span>.<span class="hljs-built_in">name</span> 为空 返回<span class="hljs-literal">true</span> 否则<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h5 id="2-5-5、EL-三目运算符"><a href="#2-5-5、EL-三目运算符" class="headerlink" title="2.5.5、EL 三目运算符"></a>2.5.5、EL 三目运算符</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span>A?<span class="hljs-symbol">B:</span>C&#125; 比如 <span class="hljs-variable">$&#123;</span>user.sex?<span class="hljs-string">&quot;男&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;女&quot;</span></span>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-6、EL隐含对象"><a href="#2-6、EL隐含对象" class="headerlink" title="2.6、EL隐含对象"></a>2.6、EL隐含对象</h4><p>JSP EL支持下表列出的隐含对象：</p><table><thead><tr><th align="left"><strong>隐含对象</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">pageScope</td><td align="left">page 作用域</td></tr><tr><td align="left">requestScope</td><td align="left">request 作用域</td></tr><tr><td align="left">sessionScope</td><td align="left">session 作用域</td></tr><tr><td align="left">applicationScope</td><td align="left">application 作用域</td></tr><tr><td align="left">param</td><td align="left"><code>Request 对象</code>的参数，字符串</td></tr><tr><td align="left">paramValues</td><td align="left"><code>Request对象</code>的参数，字符串集合</td></tr><tr><td align="left">header</td><td align="left">HTTP 信息头，字符串</td></tr><tr><td align="left">headerValues</td><td align="left">HTTP 信息头，字符串集合</td></tr><tr><td align="left">initParam</td><td align="left">上下文初始化参数</td></tr><tr><td align="left">cookie</td><td align="left">Cookie值</td></tr><tr><td align="left">pageContext</td><td align="left">当前页面的pageContext</td></tr></tbody></table><h5 id="2-6-1、pageContext对象"><a href="#2-6-1、pageContext对象" class="headerlink" title="2.6.1、pageContext对象"></a>2.6.1、pageContext对象</h5><p>pageContext对象是JSP中pageContext对象的引用。通过pageContext对象，您可以访问request对象。比如，访问request对象传入的查询字符串，就像这样：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;pageContext.request.queryString&#125;</span><br></code></pre></td></tr></table></figure><h5 id="2-6-2、Scope对象"><a href="#2-6-2、Scope对象" class="headerlink" title="2.6.2、Scope对象"></a>2.6.2、Scope对象</h5><p>pageScope，requestScope，sessionScope，applicationScope变量用来访问存储在各个作用域层次的变量。<br>举例来说，如果您需要显式访问在applicationScope层的box变量，可以这样来访问：applicationScope.box。</p><h5 id="2-6-3、param和paramValues对象"><a href="#2-6-3、param和paramValues对象" class="headerlink" title="2.6.3、param和paramValues对象"></a>2.6.3、param和paramValues对象</h5><p>param和paramValues对象用来访问参数值，通过使用request.getParameter方法和request.getParameterValues方法。<br>接下来的例子表明了如何访问<code>request对象</code>中的username参数：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;%@ page import=&quot;java.io.*,java.util.*&quot; %&gt;</span><br><span class="hljs-params">&lt;%</span><br><span class="hljs-params">    String title = &quot;Accessing Request Param&quot;;</span><br><span class="hljs-params">%&gt;</span><br><span class="hljs-params">&lt;html&gt;</span><br><br><span class="hljs-params">&lt;head&gt;</span><br><span class="hljs-params">&lt;title&gt;</span><span class="hljs-params">&lt;% out.print(title); %&gt;</span><span class="hljs-params">&lt;/title&gt;</span><br><span class="hljs-params">&lt;/head&gt;</span><br><br><span class="hljs-params">&lt;body&gt;</span><br><br><span class="hljs-params">&lt;center&gt;</span><br><span class="hljs-params">&lt;h1&gt;</span><span class="hljs-params">&lt;% out.print(title); %&gt;</span><span class="hljs-params">&lt;/h1&gt;</span><br><span class="hljs-params">&lt;/center&gt;</span><br><span class="hljs-params">&lt;div align=&quot;center&quot;&gt;</span><br><span class="hljs-params">&lt;p&gt;</span>$&#123;param[<span class="hljs-string">&quot;username&quot;</span>]&#125;<span class="hljs-params">&lt;/p&gt;</span><br><span class="hljs-params">&lt;/div&gt;</span><br><br><span class="hljs-params">&lt;/body&gt;</span><br><span class="hljs-params">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>param对象返回单一的字符串，而paramValues对象则返回一个字符串数组。</p><h5 id="2-6-4、header和headerValues对象"><a href="#2-6-4、header和headerValues对象" class="headerlink" title="2.6.4、header和headerValues对象"></a>2.6.4、header和headerValues对象</h5><p>header和headerValues对象用来访问信息头，通过使用 request.getHeader方法和request.getHeaders方法。<br>举例来说，要访问一个名为user-agent的信息头，可以这样使用表达式：${header.user-agent}，或者${header[“user-agent”]}。<br>接下来的例子表明了如何访问user-agent信息头：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;%@ page import=&quot;java.io.*,java.util.*&quot; %&gt;</span><br><span class="hljs-params">&lt;%</span><br><span class="hljs-params">    String title = &quot;User Agent Example&quot;;</span><br><span class="hljs-params">%&gt;</span><br><span class="hljs-params">&lt;html&gt;</span><br><br><span class="hljs-params">&lt;head&gt;</span><br><span class="hljs-params">&lt;title&gt;</span><span class="hljs-params">&lt;% out.print(title); %&gt;</span><span class="hljs-params">&lt;/title&gt;</span><br><span class="hljs-params">&lt;/head&gt;</span><br><br><span class="hljs-params">&lt;body&gt;</span><br><br><span class="hljs-params">&lt;center&gt;</span><br><span class="hljs-params">&lt;h1&gt;</span><span class="hljs-params">&lt;% out.print(title); %&gt;</span><span class="hljs-params">&lt;/h1&gt;</span><br><span class="hljs-params">&lt;/center&gt;</span><br><span class="hljs-params">&lt;div align=&quot;center&quot;&gt;</span><br><span class="hljs-params">&lt;p&gt;</span>$&#123;header[<span class="hljs-string">&quot;user-agent&quot;</span>]&#125;<span class="hljs-params">&lt;/p&gt;</span><br><span class="hljs-params">&lt;/div&gt;</span><br><br><span class="hljs-params">&lt;/body&gt;</span><br><span class="hljs-params">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/11/21/JavaBean&EL&JSTL/res.png"></p><h3 id="3、JSTL"><a href="#3、JSTL" class="headerlink" title="3、JSTL"></a><a href="https://www.runoob.com/jsp/jsp-jstl.html">3、JSTL</a></h3><p>使用JSTL帮助我们我们去消除Java代码，比如可以消除 &lt;% … %&gt;这里面的内容</p><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。</p><p>JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。 除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。</p><p>根据JSTL标签所提供的功能，可以将其分为5个类别。</p><blockquote><ul><li>核心标签 </li><li>格式化标签</li><li>SQL 标签 </li><li>XML 标签 </li><li>JSTL 函数</li></ul></blockquote><h4 id="3-1、JSTL是啥？"><a href="#3-1、JSTL是啥？" class="headerlink" title="3.1、JSTL是啥？"></a>3.1、JSTL是啥？</h4><p>JSTL: 标准标签库, 由<code>标签库</code>和<code>EL表达式语言</code>两个部分组成，可用来消除JAVA代码；</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">&lt;<span class="hljs-comment">%</span><br>int age = <span class="hljs-number">23</span>;<br>if(age&gt;<span class="hljs-number">18</span>)&#123;<br><span class="hljs-comment">%&gt;</span><br>你真棒！<br>&lt;<span class="hljs-comment">%</span><br>&#125;<br><span class="hljs-comment">%&gt;</span><br></code></pre></td></tr></table></figure><p>可以将上面的代码变成标签：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;c:if test=&quot;age&gt;</span>18&quot;&gt;<br>你真棒！<br><span class="hljs-attribute">&lt;/c:if&gt;</span><br>或<br><span class="hljs-attribute">&lt;如果 表达式=&quot;age&gt;</span>18&quot;&gt;<br>你真棒！<br><span class="hljs-attribute">&lt;/如果&gt;</span><br></code></pre></td></tr></table></figure><p>但是这个标签不能随便写，Java已经帮我们统一了一套标签，叫做JSTL；</p><p>所以要使用JSTL，必须使用标签，所以也必须导入Java提供好的标签库</p><h4 id="3-2、使用JSTL标签库"><a href="#3-2、使用JSTL标签库" class="headerlink" title="3.2、使用JSTL标签库"></a>3.2、使用JSTL标签库</h4><p>第一步：导Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二步：引用JSTL标签库</p><p><img src="/2019/11/21/JavaBean&EL&JSTL/JSTL.png"></p><p>我们学习的是core标签库:需在进行导入:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ taglib uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/JavaBean&EL&JSTL/jstl1.png"></p><h4 id="3-3、核心标签库"><a href="#3-3、核心标签库" class="headerlink" title="3.3、核心标签库"></a>3.3、核心标签库</h4><p><img src="/2019/11/21/JavaBean&EL&JSTL/bao.png"></p><h5 id="3-3-1、if标签（判断）"><a href="#3-3-1、if标签（判断）" class="headerlink" title="3.3.1、if标签（判断）"></a>3.3.1、if标签（判断）</h5><p><img src="/2019/11/21/JavaBean&EL&JSTL/jstl1.png"></p><h5 id="3-3-2、choose标签（选择）"><a href="#3-3-2、choose标签（选择）" class="headerlink" title="3.3.2、choose标签（选择）"></a>3.3.2、choose标签（选择）</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:choose</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;age&lt;=18&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">        </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;age&gt;18&amp;&amp;age&lt;60&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">        </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">c:otherwise</span>&gt;</span></span><br><span class="xml">        </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">c:otherwise</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:choose</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="3-3-3、c-set、c-out和c-remove标签"><a href="#3-3-3、c-set、c-out和c-remove标签" class="headerlink" title="3.3.3、c:set、c:out和c:remove标签"></a>3.3.3、c:set、c:out和c:remove标签</h5><p>scope取值：[session,page,request,application]</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;c:<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">var</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attribute">scope</span>=<span class="hljs-string">&quot;session&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;ZhangSan&quot;</span>/&gt;<br>&lt;c:out <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;name&#125;</span>&quot;</span>/&gt;<br>&lt;c:<span class="hljs-builtin-name">remove</span> <span class="hljs-attribute">var</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attribute">scope</span>=<span class="hljs-string">&quot;session&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h5 id="3-3-4、c-url标签"><a href="#3-3-4、c-url标签" class="headerlink" title="3.3.4、c:url标签"></a>3.3.4、c:url标签</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:url</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cm&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:url</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;login&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>login1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="3-3-5、forEach标签（循环）"><a href="#3-3-5、forEach标签（循环）" class="headerlink" title="3.3.5、forEach标签（循环）"></a>3.3.5、forEach标签（循环）</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&lt;c:<span class="hljs-keyword">forEach</span> <span class="hljs-keyword">begin</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;10&quot;</span> var=<span class="hljs-string">&quot;s&quot;</span>&gt;<br><span class="hljs-variable">$</span>&#123;s&#125;<br>&lt;/c:<span class="hljs-keyword">forEach</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>begin:从哪里开始、end：到哪里结束、var：取了名字，放到作用域里面</p><p>forEach的常用用法是从数据库拿数据，展示到页面：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;c:<span class="hljs-keyword">forEach</span> items=<span class="hljs-string">&quot;$&#123;emails&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;e&quot;</span> varStatus=<span class="hljs-string">&quot;s&quot;</span>&gt;<br><span class="hljs-variable">$&#123;s</span>.<span class="hljs-keyword">count</span>&#125;||<span class="hljs-variable">$&#123;e</span>.id&#125;-<span class="hljs-variable">$&#123;e</span>.title&#125;-<span class="hljs-variable">$&#123;e</span>.intro&#125;&lt;<span class="hljs-keyword">br</span>&gt;<br>&lt;/c:<span class="hljs-keyword">forEach</span>&gt;<br></code></pre></td></tr></table></figure><p>items : 要循环的集合(数组)、var :每一个数据的名称</p><p>varStatus: 当前循环的状态（s它是个javabean，里面有属性 index(循环索引，从0开始),count（计数））</p></blockquote><h4 id="lt-frameset-gt-Deprecated-HTML-tag"><a href="#lt-frameset-gt-Deprecated-HTML-tag" class="headerlink" title="&lt;frameset&gt;:Deprecated HTML tag"></a>&lt;frameset&gt;:Deprecated HTML tag</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;20%,80%&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 头部页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/xxx/top.jsp&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 中间区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;25%,75%&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/xxx/menu.jsp&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;frame_main&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaBean</tag>
      
      <tag>JSP</tag>
      
      <tag>EL</tag>
      
      <tag>JSTL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet交互与JSP</title>
    <link href="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/"/>
    <url>/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/</url>
    
    <content type="html"><![CDATA[<h3 id="1、Java-Servlet"><a href="#1、Java-Servlet" class="headerlink" title="1、Java Servlet"></a><a href="https://www.runoob.com/servlet/servlet-tutorial.html">1、Java Servlet</a></h3><h4 id="1-1、Servlet介绍"><a href="#1-1、Servlet介绍" class="headerlink" title="1.1、Servlet介绍"></a>1.1、Servlet介绍</h4><p>Java Servlet 是运行在支持 Java Servlet 规范的解释器的Web 服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>Servlet 可以使用 <strong>javax.servlet</strong> 和 <strong>javax.servlet.http</strong> 包创建，它是 <strong>Java 企业版的标准组成部分</strong>，Java 企业版是支持<strong>大型开发项目的 Java 类库的扩展版本</strong>。这些类实现 Java Servlet 和 JSP 规范。</p><h5 id="1-1-1、Servlet-执行以下主要任务"><a href="#1-1-1、Servlet-执行以下主要任务" class="headerlink" title="1.1.1、Servlet 执行以下主要任务"></a>1.1.1、Servlet 执行以下主要任务</h5><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><h5 id="1-1-2、Servlet和CGI"><a href="#1-1-2、Servlet和CGI" class="headerlink" title="1.1.2、Servlet和CGI"></a>1.1.2、Servlet和CGI</h5><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p><blockquote><ul><li>性能明显更好。</li><li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li><li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li><li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li><li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li></ul></blockquote><h4 id="1-2、Servlet架构"><a href="#1-2、Servlet架构" class="headerlink" title="1.2、Servlet架构"></a>1.2、Servlet架构</h4><p>下图显示了 Servlet 在 Web 应用程序中的位置。</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/servlet1.png"></p><h4 id="1-3、Servlet生命周期"><a href="#1-3、Servlet生命周期" class="headerlink" title="1.3、Servlet生命周期:"></a><a href="https://www.runoob.com/servlet/servlet-life-cycle.html">1.3、Servlet生命周期:</a></h4><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/lificycle.png"></p><h4 id="正式开始码Servlet前先1-20看Servlet如何配置部署"><a href="#正式开始码Servlet前先1-20看Servlet如何配置部署" class="headerlink" title="正式开始码Servlet前先1.20看Servlet如何配置部署"></a>正式开始码Servlet前先1.20看Servlet如何配置部署</h4><h4 id="1-4、Servlet处理表单数据"><a href="#1-4、Servlet处理表单数据" class="headerlink" title="1.4、Servlet处理表单数据"></a><a href="https://www.runoob.com/servlet/servlet-form-data.html">1.4、Servlet处理表单数据</a></h4><h5 id="1-4-1、客户端向Web服务器发送数据"><a href="#1-4-1、客户端向Web服务器发送数据" class="headerlink" title="1.4.1、客户端向Web服务器发送数据"></a>1.4.1、客户端向Web服务器发送数据</h5><p>以表单形式传递。浏览器使用两种方法传递这些数据，分别是<code>GET</code>和<code>POST</code>方法。</p><p><strong>GET方法:</strong></p><p>GET 方法是默认的从浏览器向 Web 服务器传递数据的方法，它会产生一个很长的字符串，出现在浏览器的地址栏中。</p><p>如果您要向服务器传递的是密码或其他的敏感信数据，请不要使用 GET 方法。GET 方法还有大小限制：请求字符串中最多只能有 1024 个字符。</p><p>这些信息使用 <strong>QUERY_STRING  头传递</strong>，并可以通过 QUERY_STRING 环境变量访问，Servlet 使用 <strong>doGet() 方法处理这种类型的请求</strong>。</p><p>GET 方法向页面请求发送已编码的用户数据。页面和已编码的数据中间用 ? 字符分隔，如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.test.com/hello?key<span class="hljs-number">1</span>=value<span class="hljs-number">1</span>&amp;key<span class="hljs-number">2</span>=value<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>POST方法:</strong></p><p>另一个向后台程序传递信息的比较可靠的方法。POST 方法打包信息的方式与 GET 方法基本相同，但是 POST 方法不是<code>把信息作为 URL</code> 中 ? 字符后的文本字符串进行发送，而是把这些信息作为一个<code>单独的消息</code>。消息以标准输出的形式传到后台程序，您可以解析和使用这些标准输出。Servlet 使用 <strong>doPost() 方法处理这种类型的请求</strong>。</p><h5 id="1-4-2、Servlet使用从浏览器传递来的数据"><a href="#1-4-2、Servlet使用从浏览器传递来的数据" class="headerlink" title="1.4.2、Servlet使用从浏览器传递来的数据"></a>1.4.2、Servlet使用从浏览器传递来的数据</h5><p>Servlet 处理表单数据，这些数据会根据不同的情况使用不同的方法自动解析：</p><ul><li><strong>getParameter()：</strong>您可以调用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues()：</strong>如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。</li><li><strong>getParameterNames()：</strong>如果您想要得到当前请求中的所有参数的完整列表，则调用该方法。</li></ul><p><strong>(1)、get方式举例：</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs swift">package cn.ant_nest.www;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/Index&quot;</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-title">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    protected void doPost(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>            doGet(request, response);<br>    &#125;<br><br>    protected void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br><br>        <span class="hljs-comment">// 设置响应内容类型</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        <span class="hljs-type">PrintWriter</span> out <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-type">String</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;读取表单数据&quot;</span>;<br>        <span class="hljs-comment">// 处理中文</span><br>        <span class="hljs-type">String</span> name <span class="hljs-operator">=</span>new <span class="hljs-type">String</span>(request.getParameter(<span class="hljs-string">&quot;name&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-comment">//处理表单传递中文信息乱码问题</span><br>        <span class="hljs-type">String</span> docType <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; <span class="hljs-subst">\n</span>&quot;</span>;<br>        out.println(docType <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;html&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;body bgcolor=<span class="hljs-subst">\&quot;</span>#f0f0f0<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;h1 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h1&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;ul&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;  &lt;li&gt;&lt;b&gt;站点名&lt;/b&gt;：&quot;</span><br>                <span class="hljs-operator">+</span> name <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;  &lt;li&gt;&lt;b&gt;网址&lt;/b&gt;：&quot;</span><br>                <span class="hljs-operator">+</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>) <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;/ul&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;ul&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;  &lt;li&gt;&lt;b&gt;百度标识：&lt;/b&gt;: &quot;</span><br>                <span class="hljs-operator">+</span> request.getParameter(<span class="hljs-string">&quot;baidu&quot;</span>) <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;  &lt;li&gt;&lt;b&gt;Google 标识：&lt;/b&gt;: &quot;</span><br>                <span class="hljs-operator">+</span> request.getParameter(<span class="hljs-string">&quot;google&quot;</span>) <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;  &lt;li&gt;&lt;b&gt;淘宝标识：&lt;/b&gt;: &quot;</span><br>                <span class="hljs-operator">+</span> request.getParameter(<span class="hljs-string">&quot;taobao&quot;</span>) <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;/ul&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=&quot;Index&quot; <span class="hljs-keyword">method</span>=&quot;get&quot;&gt;<br>        网址名：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;name&quot;&gt;<br>        &lt;br /&gt;<br>        网址：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;url&quot; /&gt;&lt;br&gt;<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;baidu&quot; checked=&quot;checked&quot; /&gt; 百度<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;google&quot;  /&gt; Google<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;taobao&quot; checked=&quot;checked&quot; /&gt; 淘宝<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; <span class="hljs-keyword">value</span>=&quot;提交&quot; /&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/get.png"></p><p><strong>（2）、post方式举例：</strong></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/post.png"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/post1.png"></p><p><strong>（3）、遍历表单元素：</strong></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sas">Enumeration paramNames = request.getParameterNames();//获取所有面单元素名<br><br><span class="hljs-meta">while</span>(paramNames.hasMoreElements()) &#123;<br>String paramName = (String)paramNames.nextElement();<br><span class="hljs-meta">out</span>.p<span class="hljs-meta">rint(</span><span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> + paramName + <span class="hljs-string">&quot;&lt;/td&gt;\n&quot;</span>);<br>String[] paramValues =<br>request.getParameterValues(paramName);<br>// 读取单个值的数据<br><span class="hljs-meta">if</span> (paramValues.<span class="hljs-meta">length</span> == 1) &#123;<br>String paramValue = paramValues[0];<br><span class="hljs-meta">if</span> (paramValue<span class="hljs-meta">.length(</span>) == 0)<br><span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;&lt;td&gt;&lt;i&gt;没有值&lt;/i&gt;&lt;/td&gt;&quot;</span>);<br><span class="hljs-meta">else</span><br><span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + paramValue + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br>&#125; <span class="hljs-meta">else</span> &#123;<br>// 读取多个值的数据<br><span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;&lt;td&gt;&lt;ul&gt;&quot;</span>);<br>for(int i=0; i &lt; paramValues.<span class="hljs-meta">length</span>; i++) &#123;<br><span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;&lt;li&gt;&quot;</span> + paramValues[i]);<br>&#125;<br><span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-string">&quot;&lt;/ul&gt;&lt;/td&gt;&quot;</span>);<br>&#125;<br><span class="hljs-meta">out</span>.p<span class="hljs-meta">rint(</span><span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/bianli.png"></p><h4 id="1-5、Servlet于HTTP请求响应"><a href="#1-5、Servlet于HTTP请求响应" class="headerlink" title="1.5、Servlet于HTTP请求响应"></a>1.5、Servlet于HTTP请求响应</h4><p>浏览器请求网页时，它会向 Web 服务器发送特定信息，这些信息不能被直接读取，因为这些信息是作为 <code>HTTP 请求的头</code>的一部分进行传输的。您可以查看 <a href="https://www.runoob.com/http/http-tutorial.html">HTTP 协议</a> 了解更多相关信息。</p><p><strong>（1）、以下是来自于浏览器端的重要头信息：</strong></p><table><thead><tr><th align="left">头信息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Accept</td><td align="left">这个头信息指定浏览器或其他客户端可以处理的 MIME 类型。值 <strong>image/png</strong> 或 <strong>image/jpeg</strong> 是最常见的两种可能值。</td></tr><tr><td align="left">Accept-Charset</td><td align="left">这个头信息指定浏览器可以用来显示信息的字符集。例如 ISO-8859-1。</td></tr><tr><td align="left">Accept-Encoding</td><td align="left">这个头信息指定浏览器知道如何处理的编码类型。值 <strong>gzip</strong> 或 <strong>compress</strong> 是最常见的两种可能值。</td></tr><tr><td align="left">Accept-Language</td><td align="left">这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果。例如，en、en-us、ru 等。</td></tr><tr><td align="left">Authorization</td><td align="left">这个头信息用于客户端在访问受密码保护的网页时识别自己的身份。</td></tr><tr><td align="left">Connection</td><td align="left">这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过<code>（单个请求来检索多个文件？？？）</code>。值 <strong>Keep-Alive</strong> 意味着使用了持续连接。</td></tr><tr><td align="left">Content-Length</td><td align="left">这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。</td></tr><tr><td align="left">Cookie</td><td align="left">这个头信息把之前发送到浏览器的 cookies 返回到服务器。</td></tr><tr><td align="left">Host</td><td align="left">这个头信息指定原始的 URL 中的主机和端口。</td></tr><tr><td align="left">If-Modified-Since</td><td align="left">这个头信息表示只有当页面在指定的日期后已更改时，客户端想要的页面。如果没有新的结果可以使用，服务器会发送一个 304 代码，表示 <strong>Not Modified</strong> 头信息。</td></tr><tr><td align="left">If-Unmodified-Since</td><td align="left">这个头信息是 If-Modified-Since 的对立面，它指定只有当文档早于指定日期时，操作才会成功。</td></tr><tr><td align="left">Referer</td><td align="left">这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。</td></tr><tr><td align="left">User-Agent</td><td align="left">这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。</td></tr></tbody></table><p><strong>（2）、下表总结了从 Web 服务器端返回到浏览器的最有用的 HTTP 1.1 响应报头：</strong></p><table><thead><tr><th align="left">头信息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Allow</td><td align="left">这个头信息指定服务器支持的请求方法（GET、POST 等）。</td></tr><tr><td align="left">Cache-Control</td><td align="left">这个头信息指定响应文档在何种情况下可以安全地缓存。可能的值有：<strong>public、private</strong> 或 <strong>no-cache</strong> 等。Public 意味着文档是可缓存，Private 意味着文档是单个用户私用文档，且只能存储在私有（非共享）缓存中，no-cache 意味着文档不应被缓存。</td></tr><tr><td align="left">Connection</td><td align="left">这个头信息指示浏览器是否使用持久 HTTP 连接。值 <strong>close</strong> 指示浏览器不使用持久 HTTP 连接，值 <strong>keep-alive</strong> 意味着使用持久连接。</td></tr><tr><td align="left">Content-Disposition</td><td align="left">这个头信息可以让您请求浏览器要求用户以给定名称的文件把响应保存到磁盘。</td></tr><tr><td align="left">Content-Encoding</td><td align="left">在传输过程中，这个头信息指定页面的编码方式。</td></tr><tr><td align="left">Content-Language</td><td align="left">这个头信息表示文档编写所使用的语言。例如，en、en-us、ru 等。</td></tr><tr><td align="left">Content-Length</td><td align="left">这个头信息指示响应中的字节数。只有当浏览器使用持久（keep-alive）HTTP 连接时才需要这些信息。</td></tr><tr><td align="left">Content-Type</td><td align="left">这个头信息提供了响应文档的 MIME（Multipurpose Internet Mail Extension）类型。</td></tr><tr><td align="left">Expires</td><td align="left">这个头信息指定内容过期的时间，在这之后内容不再被缓存。</td></tr><tr><td align="left">Last-Modified</td><td align="left">这个头信息指示文档的最后修改时间。然后，客户端可以缓存文件，并在以后的请求中通过 <strong>If-Modified-Since</strong> 请求头信息提供一个日期。</td></tr><tr><td align="left">Location</td><td align="left">这个头信息应被包含在所有的带有状态码的响应中。在 300s 内，这会通知浏览器文档的地址。浏览器会自动重新连接到这个位置，并获取新的文档。</td></tr><tr><td align="left">Refresh</td><td align="left">这个头信息指定浏览器应该如何尽快请求更新的页面。您可以指定页面刷新的秒数。</td></tr><tr><td align="left">Retry-After</td><td align="left">这个头信息可以与 503（Service Unavailable 服务不可用）响应配合使用，这会告诉客户端多久就可以重复它的请求。</td></tr><tr><td align="left">Set-Cookie</td><td align="left">这个头信息指定一个与页面关联的 cookie。</td></tr></tbody></table><h5 id="1-5-1、Servlet处理浏览器HTTP请求"><a href="#1-5-1、Servlet处理浏览器HTTP请求" class="headerlink" title="1.5.1、Servlet处理浏览器HTTP请求"></a>1.5.1、Servlet处理浏览器HTTP请求</h5><p>通过 <code>HttpServletRequest</code> 对象：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>Cookie[] getCookies()</strong> 返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。</td></tr><tr><td align="left">2</td><td align="left"><strong>Enumeration getAttributeNames()</strong> 返回一个枚举，包含提供给该请求可用的属性名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>Enumeration getHeaderNames()</strong> 返回一个枚举，包含在该请求中包含的所有的头名。</td></tr><tr><td align="left">4</td><td align="left"><strong>Enumeration getParameterNames()</strong> 返回一个 String 对象的枚举，包含在该请求中包含的参数的名称。</td></tr><tr><td align="left">5</td><td align="left"><strong>HttpSession getSession()</strong> 返回与该请求关联的当前 session 会话，或者<strong>如果请求没有 session 会话，则创建一个。</strong></td></tr><tr><td align="left">6</td><td align="left"><strong>HttpSession getSession(boolean create)</strong> 返回与该请求关联的当前 HttpSession，或者如果没有当前会话，且创建是真的，则返回一个新的 session 会话。</td></tr><tr><td align="left">7</td><td align="left"><strong>Locale getLocale()</strong> 基于 Accept-Language 头，返回<strong>客户端接受内容的首选的区域设置</strong>。</td></tr><tr><td align="left">8</td><td align="left"><strong>Object getAttribute(String name)</strong> 以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。</td></tr><tr><td align="left">9</td><td align="left"><strong>ServletInputStream getInputStream()</strong> 使用 ServletInputStream，以二进制数据形式检索请求的主体。</td></tr><tr><td align="left">10</td><td align="left"><strong>String getAuthType()</strong> 返回用于保护 Servlet 的<strong>身份验证方案的名称</strong>，例如，”BASIC” 或 “SSL”，如果JSP没有受到保护则返回 null。</td></tr><tr><td align="left">11</td><td align="left"><strong>String getCharacterEncoding()</strong> 返回请求主体中使用的字符编码的名称。</td></tr><tr><td align="left">12</td><td align="left"><strong>String getContentType()</strong> 返回请求主体的 MIME 类型，如果不知道类型则返回 null。</td></tr><tr><td align="left">13</td><td align="left"><strong>String getContextPath()</strong> 返回指示请求上下文的请求 URI 部分。</td></tr><tr><td align="left">14</td><td align="left"><strong>String getHeader(String name)</strong> 以字符串形式返回指定的请求头的值。</td></tr><tr><td align="left">15</td><td align="left"><strong>String getMethod()</strong> 返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</td></tr><tr><td align="left">16</td><td align="left"><strong>String getParameter(String name)</strong> 以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</td></tr><tr><td align="left">17</td><td align="left"><strong>String getPathInfo()</strong> 当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</td></tr><tr><td align="left">18</td><td align="left"><strong>String getProtocol()</strong> 返回请求协议的名称和版本。</td></tr><tr><td align="left">19</td><td align="left"><strong>String getQueryString()</strong> 返回包含在路径后的请求 URL 中的<strong>查询字符串</strong>。</td></tr><tr><td align="left">20</td><td align="left"><strong>String getRemoteAddr()</strong> 返回发送请求的客户端的互联网协议（IP）地址。</td></tr><tr><td align="left">21</td><td align="left"><strong>String getRemoteHost()</strong> 返回发送请求的客户端的完全限定名称。</td></tr><tr><td align="left">22</td><td align="left"><strong>String getRemoteUser()</strong> 如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</td></tr><tr><td align="left">23</td><td align="left"><strong>String getRequestURI()</strong> 从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</td></tr><tr><td align="left">24</td><td align="left"><strong>String getRequestedSessionId()</strong> 返回由客户端指定的 session 会话 ID。</td></tr><tr><td align="left">25</td><td align="left"><strong>String getServletPath()</strong> 返回调用 JSP 的请求的 URL 的一部分。</td></tr><tr><td align="left">26</td><td align="left"><strong>String[] getParameterValues(String name)</strong> 返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。</td></tr><tr><td align="left">27</td><td align="left"><strong>boolean isSecure()</strong> 返回一个布尔值，指示请求是否使用安全通道，如 HTTPS。</td></tr><tr><td align="left">28</td><td align="left"><strong>int getContentLength()</strong> 以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</td></tr><tr><td align="left">29</td><td align="left"><strong>int getIntHeader(String name)</strong> 返回指定的请求头的值为一个 int 值。</td></tr><tr><td align="left">30</td><td align="left"><strong>int getServerPort()</strong> 返回接收到这个请求的端口号。</td></tr><tr><td align="left">31</td><td align="left"><strong>int getParameterMap()</strong> 将参数封装成 Map 类型。</td></tr></tbody></table><p>HTTP Header 请求实例：</p><p>使用 HttpServletRequest 的 <strong>getHeaderNames()</strong> 和**getHeader()**方法读取 HTTP 头信息。该方法返回一个枚举，包含与当前的 HTTP 请求相关的头信息。使用 <em>hasMoreElements()</em> 方法来确定何时停止，使用 <em>nextElement()</em> 方法来获取每个参数的名称。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>&#123;<br>    <span class="hljs-comment">// 设置响应内容类型</span><br>    response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>    <span class="hljs-type">PrintWriter</span> out <span class="hljs-operator">=</span> response.getWriter();<br>    <span class="hljs-type">String</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HTTP Header 请求实例&quot;</span>;<br>    <span class="hljs-type">String</span> docType <span class="hljs-operator">=</span><span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; <span class="hljs-subst">\n</span>&quot;</span>;<br>    out.println(docType <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;html&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;head&gt;&lt;meta charset=<span class="hljs-subst">\&quot;</span>utf-8<span class="hljs-subst">\&quot;</span>&gt;&lt;title&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="hljs-subst">\n</span>&quot;</span><span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;body bgcolor=<span class="hljs-subst">\&quot;</span>#f0f0f0<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;h1 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h1&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;table width=<span class="hljs-subst">\&quot;</span>100%<span class="hljs-subst">\&quot;</span> border=<span class="hljs-subst">\&quot;</span>1<span class="hljs-subst">\&quot;</span> align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;tr bgcolor=<span class="hljs-subst">\&quot;</span>#949494<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;<span class="hljs-subst">\n</span>&quot;</span><span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;/tr&gt;<span class="hljs-subst">\n</span>&quot;</span>);<br><br>    <span class="hljs-type">Enumeration</span> headerNames <span class="hljs-operator">=</span> request.getHeaderNames();<br><br>    <span class="hljs-keyword">while</span>(headerNames.hasMoreElements()) &#123;<br>        <span class="hljs-type">String</span> paramName <span class="hljs-operator">=</span> (<span class="hljs-type">String</span>)headerNames.nextElement();<br>        out.print(<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> <span class="hljs-operator">+</span> paramName <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/td&gt;<span class="hljs-subst">\n</span>&quot;</span>);<br>        <span class="hljs-type">String</span> paramValue <span class="hljs-operator">=</span> request.getHeader(paramName);<br>        out.println(<span class="hljs-string">&quot;&lt;td&gt; &quot;</span> <span class="hljs-operator">+</span> paramValue <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;<span class="hljs-subst">\n</span>&quot;</span>);<br>    &#125;<br>    out.println(<span class="hljs-string">&quot;&lt;/table&gt;<span class="hljs-subst">\n</span>&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/header.png"></p><h5 id="1-5-2、Servlet服务器HTTP响应"><a href="#1-5-2、Servlet服务器HTTP响应" class="headerlink" title="1.5.2、Servlet服务器HTTP响应"></a>1.5.2、Servlet服务器HTTP响应</h5><p>HTTP 请求和 HTTP 响应消息的格式是类似的，结构如下：</p><ul><li>初始状态行 + 回车换行符（回车+换行）</li><li>零个或多个标题行+回车换行符</li><li>一个空白行，即回车换行符</li><li>一个可选的消息主体，比如文件、查询数据或查询输出</li></ul><p>一个典型的响应如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">HTTP/1.1 200 OK<br>Content-Type: text/html<br>Header2: ...<br>...<br>HeaderN: ...<br>  (Blank Line)<br><span class="hljs-meta">&lt;!doctype ...&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>状态行包括 HTTP 版本（在本例中为 HTTP/1.1）、一个状态码（在本例中为 200）和一个对应于状态码的短消息（在本例中为 OK）。</p><p>设置HTTP响应报头的方法</p><p>通过 <code>HttpServletResponse</code> 对象，在 Servlet 程序中设置 HTTP 响应报头</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>String encodeRedirectURL(String url)</strong> 为 sendRedirect 方法中使用的指定的 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td align="left">2</td><td align="left"><strong>String encodeURL(String url)</strong> 对包含 session 会话 ID 的指定 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。</td></tr><tr><td align="left">3</td><td align="left"><strong>boolean containsHeader(String name)</strong> 返回一个布尔值，指示是否已经设置已命名的响应报头。</td></tr><tr><td align="left">4</td><td align="left"><strong>boolean isCommitted()</strong> 返回一个布尔值，指示响应是否已经提交。</td></tr><tr><td align="left">5</td><td align="left"><strong>void addCookie(Cookie cookie)</strong> 把指定的 cookie 添加到响应。</td></tr><tr><td align="left">6</td><td align="left"><strong>void addDateHeader(String name, long date)</strong> 添加一个带有给定的名称和日期值的响应报头。</td></tr><tr><td align="left">7</td><td align="left"><strong>void addHeader(String name, String value)</strong> 添加一个带有给定的名称和值的响应报头。</td></tr><tr><td align="left">8</td><td align="left"><strong>void addIntHeader(String name, int value)</strong> 添加一个带有给定的名称和整数值的响应报头。</td></tr><tr><td align="left">9</td><td align="left"><strong>void flushBuffer()</strong> 强制任何在缓冲区中的内容被写入到客户端。</td></tr><tr><td align="left">10</td><td align="left"><strong>void reset()</strong> 清除缓冲区中存在的任何数据，包括状态码和头。</td></tr><tr><td align="left">11</td><td align="left"><strong>void resetBuffer()</strong> 清除响应中基础缓冲区的内容，不清除状态码和头。</td></tr><tr><td align="left">12</td><td align="left"><strong>void sendError(int sc)</strong> 使用指定的状态码（通常404）发送错误响应到客户端，并清除缓冲区。</td></tr><tr><td align="left">13</td><td align="left"><strong>void sendError(int sc, String msg)</strong> 使用指定的状态发送错误响应到客户端。</td></tr><tr><td align="left">14</td><td align="left"><strong>void sendRedirect(String location)</strong> 使用指定的重定向位置 URL 发送临时重定向响应到客户端。该方法生成一个 <code>302 响应</code>，连同一个带有新文档 URL 的 <em>Location</em> 头。</td></tr><tr><td align="left">15</td><td align="left"><strong>void setBufferSize(int size)</strong> 为响应主体设置首选的缓冲区大小。</td></tr><tr><td align="left">16</td><td align="left"><strong>void setCharacterEncoding(String charset)</strong> 设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。</td></tr><tr><td align="left">17</td><td align="left"><strong>void setContentLength(int len)</strong> 设置在 HTTP Servlet 响应中的内容主体的长度，该方法设置 HTTP Content-Length 头。</td></tr><tr><td align="left">18</td><td align="left"><strong>void setContentType(String type)</strong> 如果响应还未被提交，设置被发送到客户端的响应的内容类型。</td></tr><tr><td align="left">19</td><td align="left"><strong>void setDateHeader(String name, long date)</strong> 设置一个带有给定的名称和日期值的响应报头。</td></tr><tr><td align="left">20</td><td align="left"><strong>void setHeader(String name, String value)</strong> 设置一个带有给定的名称和值的响应报头。</td></tr><tr><td align="left">21</td><td align="left"><strong>void setIntHeader(String name, int value)</strong> 设置一个带有给定的名称和整数值的响应报头。</td></tr><tr><td align="left">22</td><td align="left"><strong>void setLocale(Locale loc)</strong> 如果响应还未被提交，设置响应的区域。</td></tr><tr><td align="left">23</td><td align="left"><strong>void setStatus(int sc)</strong> 为该响应设置状态码。</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> void doGet(<span class="hljs-type">HttpServletRequest</span> request,<br>                  <span class="hljs-type">HttpServletResponse</span> response)<br>          <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>&#123;<br>    <span class="hljs-comment">// 设置刷新自动加载时间为 5 秒</span><br>    response.setIntHeader(<span class="hljs-string">&quot;Refresh&quot;</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// 设置响应内容类型</span><br>    response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>   <br>    <span class="hljs-comment">//使用默认时区和语言环境获得一个日历  </span><br>    <span class="hljs-type">Calendar</span> cale <span class="hljs-operator">=</span> <span class="hljs-type">Calendar</span>.getInstance();  <br>    <span class="hljs-comment">//将Calendar类型转换成Date类型  </span><br>    <span class="hljs-type">Date</span> tasktime<span class="hljs-operator">=</span>cale.getTime();  <br>    <span class="hljs-comment">//设置日期输出的格式  </span><br>    <span class="hljs-type">SimpleDateFormat</span> df<span class="hljs-operator">=</span>new <span class="hljs-type">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  <br>    <span class="hljs-comment">//格式化输出  </span><br>    <span class="hljs-type">String</span> nowTime <span class="hljs-operator">=</span> df.format(tasktime);<br>    <br>    <span class="hljs-type">PrintWriter</span> out <span class="hljs-operator">=</span> response.getWriter();<br>    <span class="hljs-type">String</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;自动刷新 Header 设置&quot;</span>;<br>    <span class="hljs-type">String</span> docType <span class="hljs-operator">=</span><br>    <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;<span class="hljs-subst">\n</span>&quot;</span>;<br>    out.println(docType <span class="hljs-operator">+</span><br>      <span class="hljs-string">&quot;&lt;html&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>      <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="hljs-subst">\n</span>&quot;</span><span class="hljs-operator">+</span><br>      <span class="hljs-string">&quot;&lt;body bgcolor=<span class="hljs-subst">\&quot;</span>#f0f0f0<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>      <span class="hljs-string">&quot;&lt;h1 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h1&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>      <span class="hljs-string">&quot;&lt;p&gt;当前时间是：&quot;</span> <span class="hljs-operator">+</span> nowTime <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/p&gt;<span class="hljs-subst">\n</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/respon.png"></p><h5 id="1-5-3、HTTP状态码"><a href="#1-5-3、HTTP状态码" class="headerlink" title="1.5.3、HTTP状态码"></a>1.5.3、HTTP状态码</h5><table><thead><tr><th align="left">代码</th><th align="left">消息</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">服务器切换协议。</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">该请求是完整的，并创建一个新的资源。</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">该请求被接受处理，但是该处理是不完整的。</td></tr><tr><td align="left">203</td><td align="left">Non-authoritative Information</td><td align="left"></td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left"></td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left"></td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">所请求的页面已经转移到一个新的 URL。</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">所请求的页面可以在另一个不同的 URL 下被找到。</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left"></td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left"></td></tr><tr><td align="left">306</td><td align="left"><em>Unused</em></td><td align="left">在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">所请求的页面已经临时转移到一个新的 URL。</td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">服务器不理解请求。</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">所请求的页面需要用户名和密码。</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left"><em>您还不能使用该代码。</em></td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">禁止访问所请求的页面。</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法找到所请求的页面。.</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">在请求中指定的方法是不允许的。</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器只生成一个不被客户端接受的响应。</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">在请求送达之前，您必须使用代理服务器的验证。</td></tr><tr><td align="left">408</td><td align="left">Request Timeout</td><td align="left">请求需要的时间比服务器能够等待的时间长，超时。</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">请求因为冲突无法完成。</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">所请求的页面不再可用。</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">“Content-Length” 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">请求中给出的先决条件被服务器评估为 false。</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">服务器不接受该请求，因为请求实体过大。</td></tr><tr><td align="left">414</td><td align="left">Request-url Too Long</td><td align="left">服务器不接受该请求，因为 URL 太长。当您转换一个 “post” 请求为一个带有长的查询信息的 “get” 请求时发生。</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器不接受该请求，因为媒体类型不被支持。</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed</td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">未完成的请求。服务器遇到了一个意外的情况。</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">未完成的请求。服务器不支持所需的功能。</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">未完成的请求。服务器从上游服务器收到无效响应。</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">未完成的请求。服务器暂时超载或死机。</td></tr><tr><td align="left">504</td><td align="left">Gateway Timeout</td><td align="left">网关超时。</td></tr><tr><td align="left">505</td><td align="left">HTTP Version Not Supported</td><td align="left">服务器不支持”HTTP协议”版本。</td></tr></tbody></table><h4 id="1-6、Servlet过滤器"><a href="#1-6、Servlet过滤器" class="headerlink" title="1.6、Servlet过滤器"></a>1.6、Servlet过滤器</h4><p>Servlet 过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。</p><p>可以将一个或多个 Servlet 过滤器附加到一个 Servlet 或一组 Servlet，也可以附加到 JavaServer Pages (JSP) 文件和 HTML 页面。调用 Servlet 前调用所有附加的 Servlet 过滤器。</p><p>过滤器通过 Web 部署描述符（web.xml）中的 XML 标签来声明，然后映射到您的应用程序的部署描述符中的 Servlet 名称或 URL 模式。</p><p>当 Web 容器启动 Web 应用程序时，它会为您在部署描述符中声明的每一个过滤器创建一个实例。</p><p>Filter的执行顺序与在web.xml配置文件中的配置顺序一致，一般把Filter配置在所有的Servlet之前。</p><h5 id="1-6-1、Servlet-过滤器目的"><a href="#1-6-1、Servlet-过滤器目的" class="headerlink" title="1.6.1、Servlet 过滤器目的"></a>1.6.1、Servlet 过滤器目的</h5><p>Servlet 过滤器是可用于 Servlet 编程的 Java 类，可以实现以下目的：</p><ul><li>在客户端的请求访问后端资源之前，拦截这些请求。</li><li>在服务器的响应发送回客户端之前，处理这些响应。</li></ul><h5 id="1-6-2、根据规范建议的各种类型的过滤器"><a href="#1-6-2、根据规范建议的各种类型的过滤器" class="headerlink" title="1.6.2、根据规范建议的各种类型的过滤器"></a>1.6.2、根据规范建议的各种类型的过滤器</h5><ul><li>身份验证过滤器（Authentication Filters）。</li><li>数据压缩过滤器（Data compression Filters）。</li><li>加密过滤器（Encryption Filters）。</li><li>触发资源访问事件过滤器。</li><li>图像转换过滤器（Image Conversion Filters）。</li><li>日志记录和审核过滤器（Logging and Auditing Filters）。</li><li>MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。</li><li>标记化过滤器（Tokenizing Filters）。</li><li>XSL/T 过滤器（XSL/T Filters），转换 XML 内容。</li></ul><h5 id="1-6-3、Servlet-过滤器方法"><a href="#1-6-3、Servlet-过滤器方法" class="headerlink" title="1.6.3、Servlet 过滤器方法"></a><strong>1.6.3、Servlet 过滤器方法</strong></h5><p>过滤器是一个实现了 <code>javax.servlet.Filter</code> 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void doFilter (ServletRequest, ServletResponse, FilterChain)</strong> <br>该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。</td></tr><tr><td align="left">2</td><td align="left"><strong>public void init(FilterConfig filterConfig)</strong> <br>web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void destroy()</strong> <br>Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。</td></tr></tbody></table><h5 id="1-6-4、FilterConfig-使用"><a href="#1-6-4、FilterConfig-使用" class="headerlink" title="1.6.4、FilterConfig 使用"></a><strong>1.6.4、FilterConfig 使用</strong></h5><p>Filter 的 init 方法中提供了一个 FilterConfig 对象。</p><p>如 web.xml 文件配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.ant_nest.test.LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>Site<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>Ant Nest<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;<span class="hljs-name">f</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 init 方法使用 FilterConfig 对象获取参数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig <span class="hljs-built_in">config</span>)</span> throws ServletException </span>&#123;<br>    <span class="hljs-comment">// 获取初始化参数</span><br>    <span class="hljs-keyword">String</span> site = <span class="hljs-built_in">config</span>.getInitParameter(<span class="hljs-string">&quot;Site&quot;</span>); <br>    <span class="hljs-comment">// 输出初始化参数</span><br>    System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;网站名称: &quot;</span> + site); <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-6-5、Servlet过滤器案例"><a href="#1-6-5、Servlet过滤器案例" class="headerlink" title="1.6.5、Servlet过滤器案例"></a>1.6.5、Servlet过滤器案例</h5><p><strong>1）、DisplayHeader.java</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//导入必需的 java 库</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/DisplayHeader&quot;</span>)<br><br><span class="hljs-comment">//扩展 HttpServlet 类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DisplayHeader</span> <span class="hljs-title">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">// 处理 GET 方法请求的方法</span><br>    <span class="hljs-keyword">public</span> void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>    &#123;<br>        <span class="hljs-comment">// 设置响应内容类型</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        <span class="hljs-type">PrintWriter</span> out <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-type">String</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HTTP Header 请求实例&quot;</span>;<br>        <span class="hljs-type">String</span> docType <span class="hljs-operator">=</span><br>                <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; <span class="hljs-subst">\n</span>&quot;</span>;<br>        out.println(docType <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;html&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;head&gt;&lt;meta charset=<span class="hljs-subst">\&quot;</span>utf-8<span class="hljs-subst">\&quot;</span>&gt;&lt;title&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="hljs-subst">\n</span>&quot;</span><span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;body bgcolor=<span class="hljs-subst">\&quot;</span>#f0f0f0<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;h1 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h1&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;table width=<span class="hljs-subst">\&quot;</span>100%<span class="hljs-subst">\&quot;</span> border=<span class="hljs-subst">\&quot;</span>1<span class="hljs-subst">\&quot;</span> align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;tr bgcolor=<span class="hljs-subst">\&quot;</span>#949494<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;th&gt;Header 名称&lt;/th&gt;&lt;th&gt;Header 值&lt;/th&gt;<span class="hljs-subst">\n</span>&quot;</span><span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&lt;/tr&gt;<span class="hljs-subst">\n</span>&quot;</span>);<br><br>        <span class="hljs-type">Enumeration</span> headerNames <span class="hljs-operator">=</span> request.getHeaderNames();<br><br>        <span class="hljs-keyword">while</span>(headerNames.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> paramName <span class="hljs-operator">=</span> (<span class="hljs-type">String</span>)headerNames.nextElement();<br>            out.print(<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> <span class="hljs-operator">+</span> paramName <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/td&gt;<span class="hljs-subst">\n</span>&quot;</span>);<br>            <span class="hljs-type">String</span> paramValue <span class="hljs-operator">=</span> request.getHeader(paramName);<br>            out.println(<span class="hljs-string">&quot;&lt;td&gt; &quot;</span> <span class="hljs-operator">+</span> paramValue <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;<span class="hljs-subst">\n</span>&quot;</span>);<br>        &#125;<br>        out.println(<span class="hljs-string">&quot;&lt;/table&gt;<span class="hljs-subst">\n</span>&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 处理 POST 方法请求的方法</span><br>    <span class="hljs-keyword">public</span> void doPost(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2）、index.jsp</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<span class="hljs-comment">-- Created by IntelliJ IDEA. --%&gt;</span><br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;<br>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=&quot;DisplayHeader&quot; <span class="hljs-keyword">method</span>=&quot;get&quot;&gt;<br>        网址名：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;name&quot;&gt;<br>        &lt;br /&gt;<br>        网址：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;url&quot; /&gt;<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;baidu&quot; checked=&quot;checked&quot; /&gt; 百度<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;google&quot;  /&gt; Google<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;checkbox&quot; <span class="hljs-type">name</span>=&quot;taobao&quot; checked=&quot;checked&quot; /&gt; 淘宝<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; <span class="hljs-keyword">value</span>=&quot;提交&quot; /&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>3）、LogFilter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.ant_nest.Filter;<br><br><span class="hljs-comment">//导入必需的 java 库</span><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">//实现 Filter 类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span>  </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-comment">// 获取初始化参数</span><br>        String site = config.getInitParameter(<span class="hljs-string">&quot;Site&quot;</span>);<br><br>        <span class="hljs-comment">// 输出初始化参数</span><br>        System.out.println(<span class="hljs-string">&quot;网站名称: &quot;</span> + site);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> java.io.IOException, ServletException </span>&#123;<br><br>        <span class="hljs-comment">// 输出站点名称</span><br>        System.out.println(<span class="hljs-string">&quot;站点网址：http://Kongwei-Liao.cn&quot;</span>);<br><br>        <span class="hljs-comment">// 把请求传回过滤链</span><br>        chain.doFilter(request,response);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">( )</span></span>&#123;<br>        <span class="hljs-comment">/* 在 Filter 实例被 Web 容器从服务移除之前调用 */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4）、配置web.xml</strong></p><p>上述过滤器适用于所有的 Servlet，因为我们在配置中指定 <strong>/*</strong> 。如果您只想在少数的 Servlet 上应用过滤器，您可以指定一个具体的 Servlet 路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.ant_nest.Filter.LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>Site<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>练习使用过滤器<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/filt.png"></p><h5 id="1-6-6、使用多个过滤器"><a href="#1-6-6、使用多个过滤器" class="headerlink" title="1.6.6、使用多个过滤器"></a>1.6.6、使用多个过滤器</h5><p>Web 应用程序可以根据特定的目的定义若干个不同的过滤器。假设您定义了两个过滤器 <em>AuthenFilter</em> 和 <em>LogFilter</em>。您需要创建一个如下所述的不同的映射，其余的处理与上述所讲解的大致相同：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.ant_nest.Filter.LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>test-param<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>Initialization Paramter<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AuthenFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.ant_nest.Filter.AuthenFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>test-param<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>Initialization Paramter<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AuthenFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-6-7、多个过滤器的顺序"><a href="#1-6-7、多个过滤器的顺序" class="headerlink" title="1.6.7、多个过滤器的顺序"></a>1.6.7、多个过滤器的顺序</h5><p>web.xml 中的 filter-mapping 元素的顺序决定了 Web 容器应用过滤器到 Servlet 的顺序。若要反转过滤器的顺序，您只需要在 web.xml 文件中反转 filter-mapping 元素即可。</p><p>例如，上面的实例将先应用 LogFilter，然后再应用 AuthenFilter，但是下面的实例将颠倒这个顺序：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AuthenFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>LogFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-6-8、web-xml配置各个结点说明"><a href="#1-6-8、web-xml配置各个结点说明" class="headerlink" title="1.6.8、web.xml配置各个结点说明"></a>1.6.8、web.xml配置各个结点说明</h5><ul><li><p><filter>指定一个过滤器。 </filter></p><ul><li><filter-name>用于为过滤器指定一个名字，该元素的内容不能为空。</filter-name></li><li><filter-class>元素用于指定过滤器的完整的限定类名。</filter-class></li><li><init-param>元素用于为过滤器指定初始化参数，它的子元素<param-name>指定参数的名字，<param-value>指定参数的值。</param-value></param-name></init-param></li><li>在过滤器中，可以使用FilterConfig接口对象来访问初始化参数。</li></ul></li><li><p><filter-mapping>元素用于设置一个 Filter 所负责拦截的资源。一个Filter拦截的资源可通过两种方式来指定：Servlet 名称和资源访问的请求路径 </filter-mapping></p><ul><li><filter-name>子元素用于设置filter的注册名称。该值必须是在<filter>元素中声明过的过滤器的名字</filter></filter-name></li><li><url-pattern>设置 filter 所拦截的请求路径(过滤器关联的URL样式)</url-pattern></li></ul></li><li><p><servlet-name>指定过滤器所拦截的Servlet名称。</servlet-name></p></li><li><p><dispatcher>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<dispatcher>子元素用来指定 Filter 对资源的多种调用方式进行拦截。</dispatcher></dispatcher></p></li><li><p><dispatcher>子元素可以设置的值及其意义 </dispatcher></p><ul><li>REQUEST：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过</li><li>RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。</li><li>INCLUDE：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</li><li>FORWARD：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。</li><li>ERROR：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</li></ul></li></ul><h4 id="1-7、Servlet异常处理"><a href="#1-7、Servlet异常处理" class="headerlink" title="1.7、Servlet异常处理"></a><a href="https://www.runoob.com/servlet/servlet-exception-handling.html">1.7、Servlet异常处理</a></h4><p>当一个 Servlet 抛出一个异常时，Web 容器在使用了 exception-type 元素的 <strong>web.xml</strong> 中搜索与抛出异常类型相匹配的配置。</p><p>您必须在 web.xml 中使用 <strong>error-page</strong> 元素来指定对特定<strong>异常</strong> 或 HTTP <strong>状态码</strong> 作出相应的 Servlet 调用。</p><h5 id="1-7-1、web-xml配置"><a href="#1-7-1、web-xml配置" class="headerlink" title="1.7.1、web.xml配置"></a>1.7.1、web.xml配置</h5><p>假设，有一个 <em>ErrorHandler</em> 的 Servlet 在任何已定义的异常或错误出现时被调用。以下将是在 web.xml 中创建的项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet 定义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!-- servlet 映射 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- error-code 相关的错误页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>403<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- exception-type 相关的错误页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exception-type</span>&gt;</span><br>          javax.servlet.ServletException<br>    &lt;/exception-type &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exception-type</span>&gt;</span><br>    java.io.IOException<br>    &lt;/exception-type &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/ErrorHandler<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果您想对所有的异常有一个通用的错误处理程序，那么应该定义下面<code>java.lang.Throwable</code>的 error-page，而不是为每个异常定义单独的 error-page 元素：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;error-page&gt;</span><br>    <span class="hljs-attribute">&lt;exception-type&gt;</span>java.lang.Throwable<span class="hljs-attribute">&lt;/exception-type &gt;</span><br>    <span class="hljs-attribute">&lt;location&gt;</span>/ErrorHandler<span class="hljs-attribute">&lt;/location&gt;</span><br><span class="hljs-attribute">&lt;/error-page&gt;</span><br></code></pre></td></tr></table></figure><p>以下是关于上面的 web.xml 异常处理要注意的点：</p><ul><li>Servlet ErrorHandler 与其他的 Servlet 的定义方式一样，且在 web.xml 中进行配置。</li><li>如果有错误状态代码出现，不管为 404（Not Found 未找到）或 403（Forbidden 禁止），则会调用 ErrorHandler 的 Servlet。</li><li>如果 Web 应用程序抛出 <em>ServletException</em> 或 <em>IOException</em>，那么 Web 容器会调用 ErrorHandler 的 Servlet。</li><li>您可以定义不同的错误处理程序来处理不同类型的错误或异常。上面的实例是非常通用的，希望您能通过实例理解基本的概念。</li></ul><h5 id="1-7-2、请求属性-错误-异常"><a href="#1-7-2、请求属性-错误-异常" class="headerlink" title="1.7.2、请求属性-错误/异常"></a>1.7.2、<code>请求属性</code>-错误/异常</h5><p>以下是错误处理的 Servlet 可以访问的请求属性列表，用来分析错误/异常的性质。</p><table><thead><tr><th align="left">序号</th><th align="left"><code>属性</code> &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>javax.servlet.error.status_code</strong> 该属性给出状态码，状态码可被存储，并在存储为 java.lang.Integer 数据类型后可被分析。</td></tr><tr><td align="left">2</td><td align="left"><strong>javax.servlet.error.exception_type</strong> 该属性给出异常类型的信息，异常类型可被存储，并在存储为 java.lang.Class 数据类型后可被分析。</td></tr><tr><td align="left">3</td><td align="left"><strong>javax.servlet.error.message</strong> 该属性给出确切错误消息的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr><tr><td align="left">4</td><td align="left"><strong>javax.servlet.error.request_uri</strong> 该属性给出有关 URL 调用 Servlet 的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr><tr><td align="left">5</td><td align="left"><strong>javax.servlet.error.exception</strong> 该属性给出异常产生的信息，信息可被存储，并在存储为 java.lang.Throwable 数据类型后可被分析。</td></tr><tr><td align="left">6</td><td align="left"><strong>javax.servlet.error.servlet_name</strong> 该属性给出 Servlet 的名称，名称可被存储，并在存储为 java.lang.String 数据类型后可被分析。</td></tr></tbody></table><h5 id="1-7-3、Servlet错误处理程序"><a href="#1-7-3、Servlet错误处理程序" class="headerlink" title="1.7.3、Servlet错误处理程序"></a>1.7.3、Servlet错误处理程序</h5><p>以下是 Servlet 实例，将应对任何您所定义的错误或异常发生时的错误处理程序。</p><p>本实例让您对 Servlet 中的异常处理有基本的了解，您可以使用相同的概念编写更复杂的异常处理应用程序：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//扩展 HttpServlet 类</span><br><span class="hljs-keyword">public</span> class ErrorHandler extends HttpServlet &#123;<br><br>    <span class="hljs-comment">// 处理 GET 方法请求的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response) <span class="hljs-keyword">throws</span> ServletException, IOException<br>    &#123;<br>        Throwable throwable = (Throwable)<br>        request.getAttribute(<span class="hljs-string">&quot;javax.servlet.error.exception&quot;</span>);<span class="hljs-comment">//1.7.2的请求属性</span><br>        Integer statusCode = (Integer)<br>        request.getAttribute(<span class="hljs-string">&quot;javax.servlet.error.status_code&quot;</span>);<br>        <span class="hljs-keyword">String</span> servletName = (<span class="hljs-keyword">String</span>)<br>        request.getAttribute(<span class="hljs-string">&quot;javax.servlet.error.servlet_name&quot;</span>);<br>        <span class="hljs-keyword">if</span> (servletName == <span class="hljs-keyword">null</span>)&#123;<br>            servletName = <span class="hljs-string">&quot;Unknown&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">String</span> requestUri = (<span class="hljs-keyword">String</span>)<br>        request.getAttribute(<span class="hljs-string">&quot;javax.servlet.error.request_uri&quot;</span>);<br>        <span class="hljs-keyword">if</span> (requestUri == <span class="hljs-keyword">null</span>)&#123;<br>            requestUri = <span class="hljs-string">&quot;Unknown&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 设置响应内容类型</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <br>        PrintWriter out = response.getWriter();<br>        <span class="hljs-keyword">String</span> title = <span class="hljs-string">&quot;Error/Exception 信息&quot;</span>;<br>       <br>        <span class="hljs-keyword">String</span> docType = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;<br>        out.<span class="hljs-built_in">println</span>(docType +<br>            <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>             <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +<br>             <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span>);<br>           out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&lt;h1&gt;异常信息实例演示&lt;/h1&gt;&quot;</span>);<br>           <span class="hljs-keyword">if</span> (throwable == <span class="hljs-keyword">null</span> &amp;&amp; statusCode == <span class="hljs-keyword">null</span>)&#123;<br>              out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&lt;h2&gt;错误信息丢失&lt;/h2&gt;&quot;</span>);<br>              out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请返回 &lt;a href=\&quot;&quot;</span> + <br>            response.encodeURL(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>) + <br>                <span class="hljs-string">&quot;\&quot;&gt;主页&lt;/a&gt;。&quot;</span>);<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (statusCode != <span class="hljs-keyword">null</span>) &#123;<br>              out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;错误代码 : &quot;</span> + statusCode);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>               out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&lt;h2&gt;错误信息&lt;/h2&gt;&quot;</span>);<br>              out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Servlet Name : &quot;</span> + servletName + <br>                              <span class="hljs-string">&quot;&lt;/br&gt;&lt;/br&gt;&quot;</span>);<br>              out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;异常类型 : &quot;</span> + <br>                              throwable.getClass( ).getName( ) + <br>                              <span class="hljs-string">&quot;&lt;/br&gt;&lt;/br&gt;&quot;</span>);<br>              out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请求 URI: &quot;</span> + requestUri + <br>                              <span class="hljs-string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>);<br>              out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;异常信息: &quot;</span> + <br>                                  throwable.getMessage( ));<br>           &#125;<br>           out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>           out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 处理 POST 方法请求的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> doPost(HttpServletRequest request,<br>                      HttpServletResponse response)<br>       <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-8、Servlet-Cookies处理"><a href="#1-8、Servlet-Cookies处理" class="headerlink" title="1.8、Servlet Cookies处理"></a>1.8、Servlet Cookies处理</h4><p>Cookie 是存储在客户端计算机上的文本文件，并保留了各种跟踪信息。Java Servlet 显然支持 HTTP Cookie。</p><p>识别返回用户包括三个步骤：</p><ul><li>服务器脚本向浏览器发送一组 Cookie。例如：姓名、年龄或识别号码等。</li><li>浏览器将这些信息存储在本地计算机上，以备将来使用。</li><li>当下一次浏览器向 Web 服务器发送任何请求时，浏览器会把这些 Cookie 信息发送到服务器，服务器将使用这些信息来识别用户。</li></ul><p>Cookie 通常设置在 HTTP 头信息中（虽然 JavaScript 也可以直接在浏览器上设置一个 Cookie）。设置 Cookie 的 Servlet 会发送如下的头信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Date</span>: Fri, <span class="hljs-number">04</span> Feb <span class="hljs-number">2000</span> <span class="hljs-number">21</span>:<span class="hljs-number">03</span>:<span class="hljs-number">38</span> GMT<br><span class="hljs-attribute">Server</span>: Apache/<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span> (UNIX) PHP/<span class="hljs-number">4</span>.<span class="hljs-number">0</span>b<span class="hljs-number">3</span><br><span class="hljs-attribute">Set</span>-Cookie: name=xyz; expires=Friday, <span class="hljs-number">04</span>-Feb-<span class="hljs-number">07</span> <span class="hljs-number">22</span>:<span class="hljs-number">03</span>:<span class="hljs-number">38</span> GMT; <br>                 <span class="hljs-attribute">path</span>=/; domain=Kongwei-Liao.cn<br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content</span>-Type: text/html<br></code></pre></td></tr></table></figure><p>正如您所看到的，Set-Cookie 头包含了一个名称值对、一个 GMT 日期、一个路径和一个域。名称和值会被 URL 编码。expires 字段是一个指令，告诉浏览器在给定的时间和日期之后”忘记”该 Cookie。</p><p>如果浏览器被配置为存储 Cookie，它将会保留此信息直到到期日期。如果用户的浏览器指向任何匹配该 Cookie 的路径和域的页面，它会重新发送 Cookie 到服务器。浏览器的头信息可能如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.0</span><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Keep-Alive<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/4.6 (X11; I; Linux 2.2.6-15apmac ppc)<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>zink.demon.co.uk:1126<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>image/gif, */*<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en<br><span class="hljs-attribute">Accept-Charset</span><span class="hljs-punctuation">: </span>iso-8859-1,*,utf-8<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>name=xyz<br></code></pre></td></tr></table></figure><p>Servlet 就能够通过请求方法 <code>request.getCookies()</code> 访问 Cookie，该方法将返回一个 <em>Cookie</em> 对象的数组。</p><p>以下是在 Servlet 中操作 Cookie 时可使用的有用的方法列表。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void setDomain(String pattern)</strong> 该方法设置 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">2</td><td align="left"><strong>public String getDomain()</strong> 该方法获取 cookie 适用的域，例如 runoob.com。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void setMaxAge(int expiry)</strong> 该方法设置 cookie 过期的时间（以秒为单位）。如果不这样设置，cookie 只会在当前 session 会话中持续有效。</td></tr><tr><td align="left">4</td><td align="left"><strong>public int getMaxAge()</strong> 该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭。</td></tr><tr><td align="left">5</td><td align="left"><strong>public String getName()</strong> 该方法返回 cookie 的名称。名称在创建后不能改变。</td></tr><tr><td align="left">6</td><td align="left"><strong>public void setValue(String newValue)</strong> 该方法设置与 cookie 关联的值。</td></tr><tr><td align="left">7</td><td align="left"><strong>public String getValue()</strong> 该方法获取与 cookie 关联的值。</td></tr><tr><td align="left">8</td><td align="left"><strong>public void setPath(String uri)</strong> 该方法设置 cookie 适用的路径。如果您不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。</td></tr><tr><td align="left">9</td><td align="left"><strong>public String getPath()</strong> 该方法获取 cookie 适用的路径。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setSecure(boolean flag)</strong> 该方法设置布尔值，表示 cookie 是否应该只在加密的（即 SSL）连接上发送。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setComment(String purpose)</strong> 设置cookie的注释。该注释在浏览器向用户呈现 cookie 时非常有用。</td></tr><tr><td align="left">12</td><td align="left"><strong>public String getComment()</strong> 获取 cookie 的注释，如果 cookie 没有注释则返回 null。</td></tr></tbody></table><p>通过 Servlet 设置 Cookie 的步骤：</p><h5 id="1-8-1、创建一个-Cookie-对象："><a href="#1-8-1、创建一个-Cookie-对象：" class="headerlink" title="1.8.1、创建一个 Cookie 对象："></a><strong>1.8.1、创建一个 Cookie 对象：</strong></h5><p>您可以调用带有 cookie 名称和 cookie 值的 Cookie 构造函数，cookie 名称和 cookie 值都是字符串。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Cookie cookie</span> = new Cookie(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br></code></pre></td></tr></table></figure><p>请记住，无论是名字还是值，都不应该包含空格或以下任何字符：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">[ ] ( ) = , <span class="hljs-string">&quot; / ? @ : ;</span><br></code></pre></td></tr></table></figure><h5 id="1-8-2、-设置最大生存周期："><a href="#1-8-2、-设置最大生存周期：" class="headerlink" title="1.8.2、 设置最大生存周期："></a><strong>1.8.2、 设置最大生存周期：</strong></h5><p>您可以使用 setMaxAge 方法来指定 cookie 能够保持有效的时间（以秒为单位）。下面将设置一个最长有效期为 24 小时的 cookie。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cookie</span>.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>); <br></code></pre></td></tr></table></figure><h5 id="1-8-3、-发送-Cookie-到-HTTP-响应头："><a href="#1-8-3、-发送-Cookie-到-HTTP-响应头：" class="headerlink" title="1.8.3、 发送 Cookie 到 HTTP 响应头："></a><strong>1.8.3、 发送 Cookie 到 HTTP 响应头：</strong></h5><p>您可以使用 <strong>response.addCookie</strong> 来添加 HTTP 响应头中的 Cookie，如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">response.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br></code></pre></td></tr></table></figure><h5 id="1-8-4、要读取-Cookie"><a href="#1-8-4、要读取-Cookie" class="headerlink" title="1.8.4、要读取 Cookie"></a><strong>1.8.4、要读取 Cookie</strong></h5><p>您需要通过调用 <em>HttpServletRequest</em> 的 <strong>getCookies( )</strong> 方法创建一个 <em>javax.servlet.http.Cookie</em> 对象的数组。然后循环遍历数组，并使用 getName() 和 getValue() 方法来访问每个 cookie 和关联的值。</p><h5 id="1-8-5、删除Cookie："><a href="#1-8-5、删除Cookie：" class="headerlink" title="1.8.5、删除Cookie："></a><strong>1.8.5、删除Cookie：</strong></h5><p>1、读取一个现有的 cookie；</p><p>2、使用 <strong>setMaxAge()</strong> 方法设置 cookie 的年龄为零</p><p>3、把这个 cookie 添加到响应头。</p><h4 id="1-9、Servlet-Session跟踪"><a href="#1-9、Servlet-Session跟踪" class="headerlink" title="1.9、Servlet Session跟踪"></a>1.9、Servlet Session跟踪</h4><p>HTTP 是一种”无状态”协议，这意味着每次客户端检索网页时，客户端打开一个单独的连接到 Web 服务器，服务器会自动不保留之前客户端请求的任何记录。</p><p>Servlet 提供了 HttpSession 接口，该接口提供了一种跨多个页面请求或访问网站时识别用户以及存储有关用户信息的方式。</p><p>Servlet 容器使用这个接口来创建一个 HTTP 客户端和 HTTP 服务器之间的 session 会话。会话持续一个指定的时间段，跨多个连接或页面请求。</p><h5 id="1-9-1、Session对象获取"><a href="#1-9-1、Session对象获取" class="headerlink" title="1.9.1、Session对象获取"></a>1.9.1、Session对象获取</h5><p>通过调用 HttpServletRequest 的公共方法 <strong>getSession()</strong> 来获取 HttpSession 对象，如下所示：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">HttpSession session = request.getSession()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>注：你需要在向客户端发送任何文档内容之前调用 <em>request.getSession()<em>。</em></em>？？？**</p><h5 id="1-9-2、HttpSession-对象中可用的几个重要的方法"><a href="#1-9-2、HttpSession-对象中可用的几个重要的方法" class="headerlink" title="1.9.2、HttpSession 对象中可用的几个重要的方法"></a>1.9.2、HttpSession 对象中可用的几个重要的方法</h5><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public Object getAttribute(String name)</strong> 该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null。</td></tr><tr><td align="left">2</td><td align="left"><strong>public Enumeration getAttributeNames()</strong> 该方法返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>public long getCreationTime()</strong> 该方法返回该 session 会话被创建的时间，自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td align="left">4</td><td align="left"><strong>public String getId()</strong> 该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。</td></tr><tr><td align="left">5</td><td align="left"><strong>public long getLastAccessedTime()</strong> 该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。</td></tr><tr><td align="left">6</td><td align="left"><strong>public int getMaxInactiveInterval()</strong> 该方法返回 Servlet 容器在客户端访问时保持 session 会话打开的最大时间间隔，以秒为单位。</td></tr><tr><td align="left">7</td><td align="left"><strong>public void invalidate()</strong> 该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。</td></tr><tr><td align="left">8</td><td align="left"><strong>public boolean isNew()</strong> 如果<strong>客户端还不知道该 session 会话</strong>，或者如果客户选择不参入该 session 会话，则该方法返回 true。</td></tr><tr><td align="left">9</td><td align="left"><strong>public void removeAttribute(String name)</strong> 该方法将从该 session 会话移除指定名称的对象。</td></tr><tr><td align="left">10</td><td align="left"><strong>public void setAttribute(String name, Object value)</strong>  该方法使用指定的名称绑定一个对象到该 session 会话。</td></tr><tr><td align="left">11</td><td align="left"><strong>public void setMaxInactiveInterval(int interval)</strong> 该方法在 Servlet 容器指示该 session 会话无效之前，指定客户端请求之间的时间，以秒为单位。</td></tr></tbody></table><h5 id="1-9-3、删除Session会话数据"><a href="#1-9-3、删除Session会话数据" class="headerlink" title="1.9.3、删除Session会话数据"></a>1.9.3、删除Session会话数据</h5><p>当您完成了一个用户的 session 会话数据，您有以下几种选择：</p><ul><li><strong>移除一个特定的属性：</strong>您可以调用 <em>public void removeAttribute(String name)</em> 方法来删除与特定的键相关联的值。</li><li><strong>删除整个 session 会话：</strong>您可以调用 <em>public void invalidate()</em> 方法来丢弃整个 session 会话。</li><li><strong>设置 session 会话过期时间：</strong>您可以调用 <em>public void setMaxInactiveInterval(int interval)</em> 方法来单独设置 session 会话超时。</li><li><strong>注销用户：</strong>如果使用的是支持 servlet 2.4 的服务器，您可以调用 <strong>logout</strong> 来注销 Web 服务器的客户端，并把属于所有用户的所有 session 会话设置为无效。</li><li><strong>web.xml 配置：</strong>如果您使用的是 Tomcat，除了上述方法，您还可以在 web.xml 文件中配置 session 会话超时，如下所示：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面实例中的超时时间是<strong>以分钟为单位</strong>，将覆盖 Tomcat 中默认的 30 分钟超时时间。</p><p>在一个 Servlet 中的 getMaxInactiveInterval() 方法会返回 session 会话的超时时间，<strong>以秒为单位</strong>。所以，如果在 web.xml 中配置 session 会话超时时间为 15 分钟，那么 getMaxInactiveInterval() 会返回 900。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">WebServlet(<span class="hljs-string">&quot;/SessionTrack&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> SessionTrack extends HttpServlet &#123;<br>    <span class="hljs-keyword">private</span> static final long serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>)</span> throws ServletException, IOException<br>    &#123;<br>        <span class="hljs-comment">// 如果不存在 session 会话，则创建一个 session 对象</span><br>        HttpSession session = request.get<span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>;<br>        <span class="hljs-comment">// 获取 session 创建时间</span><br>        Date createTime = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">session</span>.<span class="hljs-params">getCreationTime</span>()</span>);<br>        <span class="hljs-comment">// 获取该网页的最后一次访问时间</span><br>        Date lastAccessTime = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">session</span>.<span class="hljs-params">getLastAccessedTime</span>()</span>);<br><br>        <span class="hljs-comment">//设置日期输出的格式  </span><br>        SimpleDateFormat df=<span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;<br><br>        String title = <span class="hljs-string">&quot;Servlet Session 实例 - 菜鸟教程&quot;</span>;<br>        Integer visitCount = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(0)</span>;<br>        String visitCountKey = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-string">&quot;visitCount&quot;</span>)</span>;<br>        String userIDKey = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-string">&quot;userID&quot;</span>)</span>;<br>        String userID = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-string">&quot;Runoob&quot;</span>)</span>;<br>        <span class="hljs-keyword">if</span>(session.get<span class="hljs-constructor">Attribute(<span class="hljs-params">visitCountKey</span>)</span><span class="hljs-operator"> == </span>null) &#123;<br>            session.set<span class="hljs-constructor">Attribute(<span class="hljs-params">visitCountKey</span>, <span class="hljs-params">new</span> Integer(0)</span>);<br>        &#125;<br><br><br>        <span class="hljs-comment">// 检查网页上是否有新的访问者</span><br>        <span class="hljs-keyword">if</span> (session.is<span class="hljs-constructor">New()</span>)&#123;<br>            title = <span class="hljs-string">&quot;Servlet Session 实例 - 菜鸟教程&quot;</span>;<br>            session.set<span class="hljs-constructor">Attribute(<span class="hljs-params">userIDKey</span>, <span class="hljs-params">userID</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            visitCount = (Integer)session.get<span class="hljs-constructor">Attribute(<span class="hljs-params">visitCountKey</span>)</span>;<br>            visitCount = visitCount + <span class="hljs-number">1</span>;<br>            userID = (String)session.get<span class="hljs-constructor">Attribute(<span class="hljs-params">userIDKey</span>)</span>;<br>        &#125;<br>        session.set<span class="hljs-constructor">Attribute(<span class="hljs-params">visitCountKey</span>,  <span class="hljs-params">visitCount</span>)</span>;<br><br>        <span class="hljs-comment">// 设置响应内容类型</span><br>        response.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>)</span>;<br>        PrintWriter out = response.get<span class="hljs-constructor">Writer()</span>;<br><br>        String docType = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;<br>        out.println(docType +<br>                <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;h2 align=\&quot;center\&quot;&gt;Session 信息&lt;/h2&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;table border=\&quot;1\&quot; align=\&quot;center\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;tr bgcolor=\&quot;#949494\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;th&gt;Session 信息&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;/tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;id&lt;/td&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;&quot;</span> + session.get<span class="hljs-constructor">Id()</span> + <span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;创建时间&lt;/td&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;&quot;</span> +  df.format(createTime) +<br>                <span class="hljs-string">&quot;  &lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;最后访问时间&lt;/td&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;&quot;</span> + df.format(lastAccessTime) +<br>                <span class="hljs-string">&quot;  &lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;用户 ID&lt;/td&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;&quot;</span> + userID +<br>                <span class="hljs-string">&quot;  &lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;访问统计：&lt;/td&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;td&gt;&quot;</span> + visitCount + <span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/table&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-10、Servlet数据库访问"><a href="#1-10、Servlet数据库访问" class="headerlink" title="1.10、Servlet数据库访问"></a>1.10、Servlet数据库访问</h4><p>在 java 项目中，只需要在 Eclipse 中引入 mysql-connector-java-5.1.39-bin.jar 就可以运行java项目。 但是在 Eclipse web 项目中，当执行 Class.forName(“com.mysql.jdbc.Driver”);时不会去查找驱动的。所以本实例中我们需要把 mysql-connector-java-5.1.39-bin.jar 拷贝到<code> tomcat下lib目录</code>。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs processing">@WebServlet(<span class="hljs-string">&quot;/DatabaseAccess&quot;</span>)<br><span class="hljs-keyword">public</span> class DatabaseAccess extends HttpServlet &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1</span>L;<br>    <span class="hljs-comment">// JDBC 驱动名及数据库 URL</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> JDBC_DRIVER = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> DB_URL = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/Train&quot;</span>;<br>    <br>    <span class="hljs-comment">// 数据库的用户名与密码，需要根据自己的设置</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> USER = <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> PASS = <span class="hljs-string">&quot;123456&quot;</span>; <br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response) <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        Statement stmt = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 设置响应内容类型</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        PrintWriter out = response.getWriter();<br>        <span class="hljs-keyword">String</span> title = <span class="hljs-string">&quot;Servlet Mysql 测试&quot;</span>;<br>        <span class="hljs-keyword">String</span> docType = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>;<br>        out.<span class="hljs-built_in">println</span>(docType +<br>        <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>        <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +<br>        <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +<br>        <span class="hljs-string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 注册 JDBC 驱动器</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <br>            <span class="hljs-comment">// 打开一个连接</span><br>            conn = DriverManager.getConnection(DB_URL,USER,PASS);<br><br>            <span class="hljs-comment">// 执行 SQL 查询</span><br>            stmt = conn.createStatement();<br>            <span class="hljs-keyword">String</span> sql;<br>            sql = <span class="hljs-string">&quot;SELECT id, name, url FROM websites&quot;</span>;<br>            ResultSet rs = stmt.executeQuery(sql);<br><br>            <span class="hljs-comment">// 展开结果集数据库</span><br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                <span class="hljs-comment">// 通过字段检索</span><br>                <span class="hljs-built_in">int</span> id  = rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-keyword">String</span> name = rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-keyword">String</span> url = rs.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>    <br>                <span class="hljs-comment">// 输出数据</span><br>                out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;ID: &quot;</span> + id);<br>                out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;, 站点名称: &quot;</span> + name);<br>                out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;, 站点 URL: &quot;</span> + url);<br>                out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br>            &#125;<br>            out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br><br>            <span class="hljs-comment">// 完成后关闭</span><br>            rs.close();<br>            stmt.close();<br>            conn.close();<br>        &#125; <span class="hljs-keyword">catch</span>(SQLException se) &#123;<br>            <span class="hljs-comment">// 处理 JDBC 错误</span><br>            se.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-comment">// 处理 Class.forName 错误</span><br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">// 最后是用于关闭资源的块</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span>(stmt!=<span class="hljs-keyword">null</span>)<br>                stmt.close();<br>            &#125;<span class="hljs-keyword">catch</span>(SQLException se2)&#123;<br>            &#125;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)<br>                conn.close();<br>            &#125;<span class="hljs-keyword">catch</span>(SQLException se)&#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-11、Servlet文件上传"><a href="#1-11、Servlet文件上传" class="headerlink" title="1.11、Servlet文件上传"></a>1.11、Servlet文件上传</h4><p>Servlet 可以与 HTML form 标签一起使用，来允许用户上传文件到服务器。上传的文件可以是文本文件或图像文件或任何文档。</p><p>需要引入的 jar 文件：commons-fileupload-1.3.2、commons-io-2.5.jar。</p><p><strong>注意：</strong>Servlet3.0 已经内置了文件上传这一特性，开发者不再需要将 Commons FileUpload 组件导入到工程中去。</p><p>案例：</p><h5 id="第一步创建一个文件上传表单"><a href="#第一步创建一个文件上传表单" class="headerlink" title="第一步创建一个文件上传表单"></a>第一步创建一个文件上传表单</h5><ul><li>表单 <strong>method</strong> 属性应该设置为 <strong>POST</strong> 方法，不能使用 GET 方法。</li><li>表单 <strong>enctype</strong> 属性应该设置为 <strong>multipart/form-data</strong>.</li><li>表单 <strong>action</strong> 属性应该设置为在后端服务器上处理文件上传的 Servlet 文件。下面的实例使用了 <strong>UploadServlet</strong> Servlet 来上传文件。</li><li>上传单个文件，您应该使用单个带有属性 type=”file” 的 &lt;input …/&gt; 标签。为了允许多个文件上传，请包含多个 name 属性值不同的 input 标签。输入标签具有不同的名称属性的值。浏览器会为每个 input 标签关联一个浏览按钮。</li></ul><p>upload.jsp代码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;/TomcatTest/UploadServlet&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    选择一个文件:<br>    &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span> /&gt;<br>    &lt;<span class="hljs-keyword">br</span>/&gt;&lt;<span class="hljs-keyword">br</span>/&gt;<br>    &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span> /&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="第二步编写后台Servlet"><a href="#第二步编写后台Servlet" class="headerlink" title="第二步编写后台Servlet"></a>第二步编写后台Servlet</h5><p>以下是 UploadServlet 的源代码，同于处理文件上传，在这之前我们先确保依赖包已经引入到项目的 WEB-INF/lib 目录下： </p><ul><li>下面的实例依赖于 FileUpload，所以一定要确保在您的 classpath 中有最新版本的 <strong>commons-fileupload.x.x.jar</strong> 文件。可以从 <a href="http://commons.apache.org/proper/commons-fileupload/">http://commons.apache.org/proper/commons-fileupload/</a> 下载。</li><li>FileUpload 依赖于 Commons IO，所以一定要确保在您的 classpath 中有最新版本的 <strong>commons-io-x.x.jar</strong> 文件。可以从 <a href="http://commons.apache.org/proper/commons-io/">http://commons.apache.org/proper/commons-io/</a> 下载。</li></ul><p>你可以直接下载本站提供的两个依赖包：</p><ul><li><a href="http://static.runoob.com/download/commons-fileupload-1.3.2.jar">commons-fileupload-1.3.2.jar</a></li><li><a href="http://static.runoob.com/download/commons-io-2.5.jar">commons-io-2.5.jar</a></li></ul><p>UploadServlet 的源代码 如下所示：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs gradle">@WebServlet(<span class="hljs-string">&quot;/UploadServlet&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> UploadServlet <span class="hljs-keyword">extends</span> HttpServlet &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1</span>L;<br>     <br>    <span class="hljs-comment">// 上传文件存储目录</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String UPLOAD_DIRECTORY = <span class="hljs-string">&quot;upload&quot;</span>;<br> <br>    <span class="hljs-comment">// 上传配置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MEMORY_THRESHOLD   = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">3</span>;  <span class="hljs-comment">// 3MB</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_FILE_SIZE      = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">40</span>; <span class="hljs-comment">// 40MB</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MAX_REQUEST_SIZE   = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>; <span class="hljs-comment">// 50MB</span><br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传数据及保存文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> doPost(HttpServletRequest request,<br>        HttpServletResponse response) <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 检测是否为多媒体上传</span><br>        <span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;<br>            <span class="hljs-comment">// 如果不是则停止</span><br>            PrintWriter writer = response.getWriter();<br>            writer.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;Error: 表单必须包含 enctype=multipart/form-data&quot;</span>);<br>            writer.flush();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br> <br>        <span class="hljs-comment">// 配置上传参数</span><br>        DiskFileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<br>        <span class="hljs-comment">// 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中</span><br>        factory.setSizeThreshold(MEMORY_THRESHOLD);<br>        <span class="hljs-comment">// 设置临时存储目录</span><br>        factory.setRepository(<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(System.getProperty(<span class="hljs-string">&quot;java.io.tmpdir&quot;</span>)));<br> <br>        ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload(factory);<br>         <br>        <span class="hljs-comment">// 设置最大文件上传值</span><br>        upload.setFileSizeMax(MAX_FILE_SIZE);<br>         <br>        <span class="hljs-comment">// 设置最大请求值 (包含文件和表单数据)</span><br>        upload.setSizeMax(MAX_REQUEST_SIZE);<br><br>        <span class="hljs-comment">// 中文处理</span><br>        upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <br><br>        <span class="hljs-comment">// 构造临时路径来存储上传的文件</span><br>        <span class="hljs-comment">// 这个路径相对当前应用的目录</span><br>        String uploadPath = request.getServletContext().getRealPath(<span class="hljs-string">&quot;./&quot;</span>) + <span class="hljs-keyword">File</span>.separator + UPLOAD_DIRECTORY;<br>       <br>         <br>        <span class="hljs-comment">// 如果目录不存在则创建</span><br>        <span class="hljs-keyword">File</span> uploadDir = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(uploadPath);<br>        <span class="hljs-keyword">if</span> (!uploadDir.exists()) &#123;<br>            uploadDir.mkdir();<br>        &#125;<br> <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 解析请求的内容提取文件数据</span><br>            @SuppressWarnings(<span class="hljs-string">&quot;unchecked&quot;</span>)<br>            List&lt;FileItem&gt; formItems = upload.parseRequest(request);<br> <br>            <span class="hljs-keyword">if</span> (formItems != <span class="hljs-keyword">null</span> &amp;&amp; formItems.<span class="hljs-keyword">size</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 迭代表单数据</span><br>                <span class="hljs-keyword">for</span> (FileItem item : formItems) &#123;<br>                    <span class="hljs-comment">// 处理不在表单中的字段</span><br>                    <span class="hljs-keyword">if</span> (!item.isFormField()) &#123;<br>                        String fileName = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(item.getName()).getName();<br>                        String filePath = uploadPath + <span class="hljs-keyword">File</span>.separator + fileName;<br>                        <span class="hljs-keyword">File</span> storeFile = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(filePath);<br>                        <span class="hljs-comment">// 在控制台输出文件的上传路径</span><br>                        System.out.<span class="hljs-keyword">println</span>(filePath);<br>                        <span class="hljs-comment">// 保存文件到硬盘</span><br>                        item.<span class="hljs-keyword">write</span>(storeFile);<br>                        request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<br>                            <span class="hljs-string">&quot;文件上传成功!&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<br>                    <span class="hljs-string">&quot;错误信息: &quot;</span> + ex.getMessage());<br>        &#125;<br>        <span class="hljs-comment">// 跳转到 message.jsp</span><br>        request.getServletContext().getRequestDispatcher(<span class="hljs-string">&quot;/message.jsp&quot;</span>).forward(<br>                request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>message.jsp 文件代码如下：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby">@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="ruby">    pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span></span><span class="xml">%&gt;</span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span></span><br><span class="xml">    &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传结果<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>$&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="1-12、Servlet处理时间"><a href="#1-12、Servlet处理时间" class="headerlink" title="1.12、Servlet处理时间"></a>1.12、Servlet处理时间</h4><p>使用 Servlet 的最重要的优势之一是，可以使用核心 Java 中的大多数可用的方法， Java 提供的 <strong>java.util</strong> 包中的 <strong>Date</strong> 类，这个类封装了当前的日期和时间。</p><h5 id="1-12-1、Date类"><a href="#1-12-1、Date类" class="headerlink" title="1.12.1、Date类"></a>1.12.1、Date类</h5><p>Date 类支持两个构造函数。第一个构造函数初始化当前日期和时间的对象。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Date</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>下面的构造函数接受一个参数，该参数等于 1970 年 1 月 1 日午夜以来经过的毫秒数。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Date(<span class="hljs-params">long</span> <span class="hljs-params">millisec</span>)</span><br></code></pre></td></tr></table></figure><p>一旦您有一个可用的 Date 对象，您可以调用下列任意支持的方法来使用日期：</p><h5 id="1-12-2、Date-对象的方法"><a href="#1-12-2、Date-对象的方法" class="headerlink" title="1.12.2、Date 对象的方法"></a>1.12.2、Date 对象的方法</h5><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>boolean after(Date date)</strong> 如果调用的 Date 对象中包含的日期在 date 指定的日期之后，则返回 true，否则返回 false。</td></tr><tr><td align="left">2</td><td align="left"><strong>boolean before(Date date)</strong> 如果调用的 Date 对象中包含的日期在 date 指定的日期之前，则返回 true，否则返回 false。</td></tr><tr><td align="left">3</td><td align="left"><strong>Object clone( )</strong> 重复调用 Date 对象。</td></tr><tr><td align="left">4</td><td align="left"><strong>int compareTo(Date date)</strong> 把调用对象的值与 date 的值进行比较。如果两个值是相等的，则返回 0。如果调用对象在 date 之前，则返回一个负值。如果调用对象在 date 之后，则返回一个正值。</td></tr><tr><td align="left">5</td><td align="left"><strong>int compareTo(Object obj)</strong> 如果 obj 是 Date 类，则操作等同于 compareTo(Date)。否则，它会抛出一个 ClassCastException。</td></tr><tr><td align="left">6</td><td align="left"><strong>boolean equals(Object date)</strong> 如果调用的 Date 对象中包含的时间和日期与 date 指定的相同，则返回 true，否则返回 false。</td></tr><tr><td align="left">7</td><td align="left"><strong>long getTime( )</strong> 返回 1970 年 1 月 1 日以来经过的毫秒数。</td></tr><tr><td align="left">8</td><td align="left"><strong>int hashCode( )</strong> 为调用对象返回哈希代码。</td></tr><tr><td align="left">9</td><td align="left"><strong>void setTime(long time)</strong> 设置 time 指定的时间和日期，这表示从 1970 年 1 月 1 日午夜以来经过的时间（以毫秒为单位）。</td></tr><tr><td align="left">10</td><td align="left"><strong>String toString( )</strong> 转换调用的 Date 对象为一个字符串，并返回结果。</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/CurrentDate&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CurrentDate</span> <span class="hljs-title">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> long serialVersionUID <span class="hljs-operator">=</span> 1L;<br><br>    protected void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> out <span class="hljs-operator">=</span> response.getWriter();<br>          <span class="hljs-type">String</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;显示当前的日期和时间&quot;</span>;<br>        <span class="hljs-type">Date</span> date <span class="hljs-operator">=</span> new <span class="hljs-type">Date</span>();<br>        <span class="hljs-type">String</span> docType <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; <span class="hljs-subst">\n</span>&quot;</span>;<br>          out.println(docType <span class="hljs-operator">+</span><br>            <span class="hljs-string">&quot;&lt;html&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>            <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>            <span class="hljs-string">&quot;&lt;body bgcolor=<span class="hljs-subst">\&quot;</span>#f0f0f0<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>            <span class="hljs-string">&quot;&lt;h1 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h1&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>            <span class="hljs-string">&quot;&lt;h2 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> date.toString() <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h2&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>            <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/date" alt="img" style="zoom: 80%;"><h5 id="1-12-3、日期比较"><a href="#1-12-3、日期比较" class="headerlink" title="1.12.3、日期比较"></a>1.12.3、日期比较</h5><ul><li>您可以使用 getTime() 来获取两个对象自 1970 年 1 月 1 日午夜以来经过的时间（以毫秒为单位），然后对这两个值进行比较。</li><li>您可以使用方法 before( )、after( ) 和 equals( )。由于一个月里 12 号在 18 号之前，例如，new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回 true。</li><li>您可以使用 compareTo( ) 方法，该方法由 Comparable 接口定义，由 Date 实现。</li></ul><h5 id="1-12-4、使用SimpleDateFormat格式化日期"><a href="#1-12-4、使用SimpleDateFormat格式化日期" class="headerlink" title="1.12.4、使用SimpleDateFormat格式化日期"></a>1.12.4、使用SimpleDateFormat格式化日期</h5><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和解析日期的具体类。 SimpleDateFormat 允许您选择任何用户定义的日期时间格式化的模式。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Date</span> dNow = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>SimpleDateFormat ft = <span class="hljs-built_in">new</span> SimpleDateFormat (&quot;yyyy.MM.dd  hh:mm:ss E a &quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ft.format(dNow));<br></code></pre></td></tr></table></figure><p>使用事件模式字符串来指定时间格式。在这种模式下，所有的 ASCII 字母被保留为模式字母，这些字母定义如下：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">G</td><td align="left">Era 指示器</td><td align="left">AD</td></tr><tr><td align="left">y</td><td align="left">四位数表示的年</td><td align="left">2001</td></tr><tr><td align="left">M</td><td align="left">一年中的月</td><td align="left">July 或 07</td></tr><tr><td align="left">d</td><td align="left">一月中的第几天</td><td align="left">10</td></tr><tr><td align="left">h</td><td align="left">带有 A.M./P.M. 的小时（1~12）</td><td align="left">12</td></tr><tr><td align="left">H</td><td align="left">一天中的第几小时（0~23）</td><td align="left">22</td></tr><tr><td align="left">m</td><td align="left">一小时中的第几分</td><td align="left">30</td></tr><tr><td align="left">s</td><td align="left">一分中的第几秒</td><td align="left">55</td></tr><tr><td align="left">S</td><td align="left">毫秒</td><td align="left">234</td></tr><tr><td align="left">E</td><td align="left">一周中的星期几</td><td align="left">Tuesday</td></tr><tr><td align="left">D</td><td align="left">一年中的第几天</td><td align="left">360</td></tr><tr><td align="left">F</td><td align="left">所在的周是这个月的第几周</td><td align="left">2 (second Wed. in July)</td></tr><tr><td align="left">w</td><td align="left">一年中的第几周</td><td align="left">40</td></tr><tr><td align="left">W</td><td align="left">一月中的第几周</td><td align="left">1</td></tr><tr><td align="left">a</td><td align="left">A.M./P.M. 标记</td><td align="left">PM</td></tr><tr><td align="left">k</td><td align="left">一天中的第几小时（1~24）</td><td align="left">24</td></tr><tr><td align="left">K</td><td align="left">带有 A.M./P.M. 的小时（0~11）</td><td align="left">10</td></tr><tr><td align="left">z</td><td align="left">时区</td><td align="left">Eastern Standard Time</td></tr><tr><td align="left">‘</td><td align="left">Escape for text</td><td align="left">Delimiter</td></tr><tr><td align="left">“</td><td align="left">单引号</td><td align="left">`</td></tr></tbody></table><p>如需查看可用的处理日期方法的完整列表，您可以参考标准的 Java 文档。</p><h4 id="1-13、Servlet网页重定向"><a href="#1-13、Servlet网页重定向" class="headerlink" title="1.13、Servlet网页重定向"></a>1.13、Servlet网页重定向</h4><p>当文档移动到新的位置，我们需要向客户端发送这个新位置时，我们需要用到网页重定向。当然，也可能是为了负载均衡，或者只是为了简单的随机，这些情况都有可能用到网页重定向。</p><h5 id="1-13-1、使用-response-对象的-sendRedirect-方法"><a href="#1-13-1、使用-response-对象的-sendRedirect-方法" class="headerlink" title="1.13.1、使用 response 对象的 sendRedirect() 方法"></a>1.13.1、使用 response 对象的 sendRedirect() 方法</h5><p>重定向请求到另一个网页的最简单的方式是使用 response 对象的 sendRedirect() 方法。下面是该方法的定义：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> HttpServletResponse.sendRedirect(<span class="hljs-keyword">String</span> location)<br><span class="hljs-keyword">throws</span> IOException<br></code></pre></td></tr></table></figure><h5 id="1-13-2、setStatus-和-setHeader-方法一起"><a href="#1-13-2、setStatus-和-setHeader-方法一起" class="headerlink" title="1.13.2、setStatus() 和 setHeader() 方法一起"></a>1.13.2、setStatus() 和 setHeader() 方法一起</h5><p>该方法把响应连同状态码和新的网页位置发送回浏览器。您也可以通过把 setStatus() 和 setHeader() 方法一起使用来达到同样的效果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">....<br>String site = &quot;http://www.baidu.com&quot; ;<br>response.setStatus(response.SC_MOVED_TEMPORARILY);<br>response.setHeader(&quot;Location&quot;, site); <br>....<br></code></pre></td></tr></table></figure><p>本实例显示了 Servlet 如何进行页面重定向到另一个位置：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/PageRedirect&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageRedirect</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>    <br>  public void doGet(<span class="hljs-type">HttpServletRequest</span> request,<br>                    <span class="hljs-type">HttpServletResponse</span> response)<br>            <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>  &#123;<br>      <span class="hljs-comment">// 设置响应内容类型</span><br>      response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>      <span class="hljs-comment">// 要重定向的新位置</span><br>      <span class="hljs-type">String</span> site = <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>(<span class="hljs-string">&quot;http://www.runoob.com&quot;</span>);<br><br>      response.setStatus(response.<span class="hljs-type">SC_MOVED_TEMPORARILY</span>);<br>      response.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, site);    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-14、Servlet点击计数器"><a href="#1-14、Servlet点击计数器" class="headerlink" title="1.14、Servlet点击计数器"></a>1.14、Servlet点击计数器</h4><h5 id="1-14-1网页点击计数器："><a href="#1-14-1网页点击计数器：" class="headerlink" title="1.14.1网页点击计数器："></a><strong>1.14.1网页点击计数器：</strong></h5><p>很多时候，您可能有兴趣知道网站的某个特定页面上的总点击量。使用 Servlet 来计算这些点击量是非常简单的，因为一个 Servlet 的生命周期是由它运行所在的容器控制的。</p><p>以下是实现一个简单的基于 Servlet 生命周期的网页点击计数器需要采取的步骤：</p><ul><li>在 init() 方法中初始化一个全局变量。</li><li>每次调用 doGet() 或 doPost() 方法时，都增加全局变量。</li><li>如果需要，您可以使用一个数据库表来存储全局变量的值在 destroy() 中。在下次初始化 Servlet 时，该值可在 init() 方法内被读取。这一步是可选的。</li><li>如果您只想对一个 session 会话计数一次页面点击，那么请使用 isNew() 方法来检查该 session 会话是否已点击过相同页面。这一步是可选的。</li><li>您可以通过显示全局计数器的值，来在网站上展示页面的总点击量。这一步是可选的。</li></ul><p>在这里，我们假设 Web 容器将无法重新启动。如果是重新启动或 Servlet 被销毁，计数器将被重置。</p><h5 id="1-14-2、网站点击计数器："><a href="#1-14-2、网站点击计数器：" class="headerlink" title="1.14.2、网站点击计数器："></a><strong>1.14.2、网站点击计数器</strong>：</h5><p>很多时候，您可能有兴趣知道整个网站的总点击量。在 Servlet 中，这也是非常简单的，我们可以使用过滤器做到这一点。</p><p>以下是实现一个简单的基于过滤器生命周期的网站点击计数器需要采取的步骤：</p><ul><li>在过滤器的 init() 方法中初始化一个全局变量。</li><li>每次调用 doFilter 方法时，都增加全局变量。</li><li>如果需要，您可以在过滤器的 destroy() 中使用一个数据库表来存储全局变量的值。在下次初始化过滤器时，该值可在 init() 方法内被读取, 这一步是可选的。</li></ul><p>在这里，我们假设 Web 容器将无法重新启动。如果是重新启动或 Servlet 被销毁，点击计数器将被重置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SiteHitCounter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> hitCount; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> </span><br><span class="hljs-function">                    <span class="hljs-keyword">throws</span> ServletException</span>&#123;<br>     <span class="hljs-comment">// 重置点ss击计数器</span><br>     hitCount = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, </span></span><br><span class="hljs-function"><span class="hljs-params">              ServletResponse response,</span></span><br><span class="hljs-function"><span class="hljs-params">              FilterChain chain)</span> </span><br><span class="hljs-function">              <span class="hljs-keyword">throws</span> java.io.IOException, ServletException </span>&#123;<br>      <span class="hljs-comment">// 把计数器的值增加 1</span><br>      hitCount++;<br>      <span class="hljs-comment">// 输出计数器</span><br>      System.out.println(<span class="hljs-string">&quot;网站访问统计：&quot;</span>+ hitCount );<br>      <span class="hljs-comment">// 把请求传回到过滤器链???</span><br>      chain.doFilter(request,response);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">  </span>&#123; <br>      <span class="hljs-comment">// 这一步是可选的，但是如果需要，您可以把 hitCount 的值写入到数据库</span><br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-15、Servlet包"><a href="#1-15、Servlet包" class="headerlink" title="1.15、Servlet包"></a>1.15、Servlet包</h4><p>涉及到 WEB-INF 子目录的 Web 应用程序结构是所有的 Java web 应用程序的标准，并由 Servlet API 规范指定。给定一个顶级目录名 myapp，目录结构如下所示：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/myapp</span><br>    <span class="hljs-string">/images</span><br>    <span class="hljs-string">/WEB-INF</span><br>        <span class="hljs-string">/classes</span><br>        <span class="hljs-string">/lib</span><br></code></pre></td></tr></table></figure><p>WEB-INF 子目录中包含应用程序的部署描述符，名为 web.xml。所有的 HTML 文件都位于顶级目录 <em>myapp</em> 下。对于 admin 用户，您会发现 ROOT 目录是 myApp 的父目录。</p><h5 id="1-15-1、创建包中的-Servlet"><a href="#1-15-1、创建包中的-Servlet" class="headerlink" title="1.15.1、创建包中的 Servlet"></a>1.15.1、创建包中的 Servlet</h5><p>WEB-INF/classes 目录包含了所有的 Servlet 类和其他类文件，类文件所在的目录结构与他们的包名称匹配。例如，如果您有一个完全合格的类名称 <strong>com.myorg.MyServlet</strong>，那么这个 Servlet 类必须位于以下目录中：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/myapp/</span>WEB-INF<span class="hljs-regexp">/classes/</span>com<span class="hljs-regexp">/myorg/My</span>Servlet.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><h5 id="1-15-2、编译包中的-Servlet"><a href="#1-15-2、编译包中的-Servlet" class="headerlink" title="1.15.2、编译包中的 Servlet"></a>1.15.2、编译包中的 Servlet</h5><p>编译包中的类与编译其他的类没有什么大的不同。最简单的方法是让您的 java 文件保留完全限定路径，如上面提到的类，将被保留在 com.myorg 中。您还需要在 CLASSPATH 中添加该目录。 </p><p>假设您的环境已正确设置，进入 <strong>/webapps/ROOT/WEB-INF/classes</strong> 目录，并编译 MyServlet.java，如下所示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">$ javac <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MyServlet</span>.</span></span>java<br></code></pre></td></tr></table></figure><p>如果 Servlet 依赖于其他库，那么您必须在 CLASSPATH 中也要引用那些 JAR 文件。这里我只引用了 servlet-api.jar JAR 文件，因为我在 Hello World 程序中并没有使用任何其他库。</p><p>该命令行使用内置的 javac 编译器，它是 Sun Microsystems Java 软件开发工具包（JDK，全称 Java Software Development Kit）附带的。 Microsystems的Java软件开发工具包（JDK）。为了让该命令正常工作，必须包括您在 PATH 环境变量中所使用的 Java SDK 的位置。</p><p>如果一切顺利，上述编译会在同一目录下生成 <strong>MyServlet.class</strong> 文件。下一节将解释如何把一个已编译的 Servlet 部署到生产中。</p><h5 id="1-15-3、Servlet-打包部署"><a href="#1-15-3、Servlet-打包部署" class="headerlink" title="1.15.3、Servlet 打包部署"></a>1.15.3、Servlet 打包部署</h5><p>默认情况下，Servlet 应用程序位于路径 &lt;Tomcat-installation-directory&gt;/webapps/ROOT 下，且类文件放在 &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/classes 中。</p><p>如果您有一个完全合格的类名称 <strong>com.myorg.MyServlet</strong>，那么这个 Servlet 类必须位于 WEB-INF/classes/com/myorg/MyServlet.class 中，您需要在位于 &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/ 的 web.xml 文件中创建以下条目：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.myorg.MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的条目要被创建在 web.xml 文件中的 &lt;web-app&gt;…&lt;/web-app&gt; 标签内。在该文件中可能已经有各种可用的条目，但不要在意。</p><p>到这里，您基本上已经完成了，现在让我们使用 &lt;Tomcat-installation-directory&gt;\bin\startup.bat（在 Windows 上）或 &lt;Tomcat-installation-directory&gt;/bin/startup.sh（在 Linux/Solaris 等上）启动 tomcat 服务器，最后在浏览器的地址栏中输入 <strong><a href="http://localhost:8080/MyServlet">http://localhost:8080/MyServlet</a></strong>。如果一切顺利，浏览器页面显示“Hello World“。</p><h4 id="1-16、Servlet调试"><a href="#1-16、Servlet调试" class="headerlink" title="1.16、Servlet调试"></a>1.16、Servlet调试</h4><p>测试/调试 Servlet 始终是开发使用过程中的难点。Servlet 往往涉及大量的客户端/服务器交互，可能会出现错误但又难以重现。</p><h5 id="1-16-1、一些提示和建议，帮助调试"><a href="#1-16-1、一些提示和建议，帮助调试" class="headerlink" title="1.16.1、一些提示和建议，帮助调试"></a>1.16.1、一些提示和建议，帮助调试</h5><ul><li><p>System.out.println()</p></li><li><p>消息日志：使用适当的日志记录方法来记录所有调试、警告和错误消息，推荐使用 <a href="https://logging.apache.org/log4j/2.0/download.html">log4J</a> 来记录所有的消息。</p></li><li><p>使用JDB调试器：使用调试 applet 或应用程序的 jdb 命令来调试 Servlet。</p></li><li><p>使用注释：代码中的注释有助于以各种方式进行调试。</p></li><li><p>客户端和服务器端头信息：当一个 Servlet 并没有像预期那样时，查看原始的 HTTP 请求和响应是非常有用的。</p></li></ul><h5 id="1-16-2、一些-Servlet-调试的技巧："><a href="#1-16-2、一些-Servlet-调试的技巧：" class="headerlink" title="1.16.2、一些 Servlet 调试的技巧："></a>1.16.2、一些 Servlet 调试的技巧：</h5><ul><li>请注意，server_root/classes 不会重载，而 server_root/servlets 可能会。</li><li>要求浏览器显示它所显示的页面的原始内容。这有助于识别格式的问题。它通常是”视图”菜单下的一个选项。</li><li>通过强制执行完全重新加载页面来确保浏览器还没有缓存前一个请求的输出。在 Netscape Navigator 中，请使用 Shift-Reload，在 Internet Explorer 中，请使用 Shift-Refresh。</li><li>请确认 servlet 的 init() 方法接受一个 ServletConfig 参数，并调用 super.init(config)。</li></ul><h4 id="1-17、Servlet国际化"><a href="#1-17、Servlet国际化" class="headerlink" title="1.17、Servlet国际化"></a>1.17、Servlet国际化</h4><p>当建立一个全球性的网站时有一些注意事项。本教程不会讲解这些注意事项的完整细节，但它会通过一个很好的实例向您演示如何通过差异化定位（即区域设置）来让网页以不同语言呈现。</p><p>在我们开始之前，先来看看三个重要术语：</p><ul><li><strong>国际化（i18n）：</strong>这意味着一个网站提供了不同版本的翻译成访问者的语言或国籍的内容。</li><li><strong>本地化（l10n）：</strong>这意味着向网站添加资源，以使其适应特定的地理或文化区域，例如网站翻译成印地文（Hindi）。</li><li><strong>区域设置（locale）：</strong>这是一个特殊的文化或地理区域。它通常指语言符号后跟一个下划线和一个国家符号。例如 “en_US” 表示针对 US 的英语区域设置。</li></ul><p>Servlet 可以根据请求者的区域设置拾取相应版本的网站，并根据当地的语言、文化和需求提供相应的网站版本。以下是 request 对象中返回 Locale 对象的方法。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Locale</span> request<span class="hljs-selector-class">.getLocale</span>() <br></code></pre></td></tr></table></figure><h5 id="1-17-1、检测区域设置"><a href="#1-17-1、检测区域设置" class="headerlink" title="1.17.1、检测区域设置"></a>1.17.1、检测区域设置</h5><p>下面列出了重要的区域设置方法，您可以使用它们来检测请求者的地理位置、语言和区域设置。下面所有的方法都显示了请求者浏览器中设置的国家名称和语言名称。</p><table><thead><tr><th align="left">序号</th><th align="left">方法 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>String getCountry()</strong> 该方法以 2 个大写字母形式的 ISO 3166 格式返回该区域设置的国家/地区代码。</td></tr><tr><td align="left">2</td><td align="left"><strong>String getDisplayCountry()</strong> 该方法返回适合向用户显示的区域设置的国家的名称。</td></tr><tr><td align="left">3</td><td align="left"><strong>String getLanguage()</strong> 该方法以小写字母形式的 ISO 639 格式返回该区域设置的语言代码。</td></tr><tr><td align="left">4</td><td align="left"><strong>String getDisplayLanguage()</strong> 该方法返回适合向用户显示的区域设置的语言的名称。</td></tr><tr><td align="left">5</td><td align="left"><strong>String getISO3Country()</strong> 该方法返回该区域设置的国家的三个字母缩写。</td></tr><tr><td align="left">6</td><td align="left"><strong>String getISO3Language()</strong> 该方法返回该区域设置的语言的三个字母的缩写。</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetLocale</span> <span class="hljs-title">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>  <span class="hljs-keyword">public</span> void doGet(<span class="hljs-type">HttpServletRequest</span> request,<br>                    <span class="hljs-type">HttpServletResponse</span> response)<br>            <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>  &#123;<br>      <span class="hljs-comment">// 获取客户端的区域设置</span><br>      <span class="hljs-type">Locale</span> locale <span class="hljs-operator">=</span> request.getLocale();<br>      <span class="hljs-type">String</span> language <span class="hljs-operator">=</span> locale.getLanguage();<br>      <span class="hljs-type">String</span> country <span class="hljs-operator">=</span> locale.getCountry();<br><br>      <span class="hljs-comment">// 设置响应内容类型</span><br>      response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>      <span class="hljs-type">PrintWriter</span> out <span class="hljs-operator">=</span> response.getWriter();<br><br>      <span class="hljs-type">String</span> title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;检测区域设置&quot;</span>;<br>      <span class="hljs-type">String</span> docType <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; <span class="hljs-subst">\n</span>&quot;</span>;<br>      out.println(docType <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;html&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> <span class="hljs-operator">+</span> title <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;body bgcolor=<span class="hljs-subst">\&quot;</span>#f0f0f0<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;h1 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> language <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h1&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;h2 align=<span class="hljs-subst">\&quot;</span>center<span class="hljs-subst">\&quot;</span>&gt;&quot;</span> <span class="hljs-operator">+</span> country <span class="hljs-operator">+</span> <span class="hljs-string">&quot;&lt;/h2&gt;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>        <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-17-2、语言设置"><a href="#1-17-2、语言设置" class="headerlink" title="1.17.2、语言设置"></a>1.17.2、语言设置</h5><p>Servlet 可以输出以西欧语言（如英语、西班牙语、德语、法语、意大利语、荷兰语等）编写的页面。在这里，为了能正确显示所有的字符，设置 Content-Language 头是非常重要的。</p><p>第二点是使用 HTML 实体显示所有的特殊字符，例如，”&amp;#241;” 表示 “ñ”，”&amp;#161;” 表示 “¡”，如下所示：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DisplaySpanish</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>  public void doGet(<span class="hljs-type">HttpServletRequest</span> request,<br>                    <span class="hljs-type">HttpServletResponse</span> response)<br>            <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>  &#123;<br>    <span class="hljs-comment">// 设置响应内容类型</span><br>    response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <span class="hljs-type">PrintWriter</span> out = response.getWriter();<br>    <span class="hljs-comment">// 设置西班牙语言代码</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Language&quot;</span>, <span class="hljs-string">&quot;es&quot;</span>);<br><br>    <span class="hljs-type">String</span> title = <span class="hljs-string">&quot;En Espa&amp;ntilde;ol&quot;</span>;<br>    <span class="hljs-type">String</span> docType = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;<br>     out.println(docType +<br>     <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>     <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +<br>     <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +<br>     <span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + <span class="hljs-string">&quot;En Espa&amp;ntilde;ol:&quot;</span> + <span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>     <span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + <span class="hljs-string">&quot;&amp;iexcl;Hola Mundo!&quot;</span> + <span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>     <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-17-3、特定于区域设置的日期"><a href="#1-17-3、特定于区域设置的日期" class="headerlink" title="1.17.3、特定于区域设置的日期"></a>1.17.3、特定于区域设置的日期</h5><p>您可以使用 java.text.DateFormat 类及其静态方法 getDateTimeInstance() 来格式化特定于区域设置的日期和时间。下面的实例演示了如何格式化特定于某个给定的区域设置的日期：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> class DateLocale extends HttpServlet&#123;<br>    <br>  <span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> doGet(HttpServletRequest request,<br>                    HttpServletResponse response)<br>            throws ServletException, IOException<br>  &#123;<br>    <span class="hljs-comment">// 设置响应内容类型</span><br>    response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    PrintWriter out = response.getWriter();<br>    <span class="hljs-comment">// 获取客户端的区域设置</span><br>    <span class="hljs-built_in">Locale</span> <span class="hljs-built_in">locale</span> = request.getLocale( );<br>    <span class="hljs-built_in">String</span> <span class="hljs-built_in">date</span> = DateFormat.getDateTimeInstance(<br>                                  DateFormat.<span class="hljs-literal">FULL</span>, <br>                                  DateFormat.SHORT, <br>                                  <span class="hljs-built_in">locale</span>).format(<span class="hljs-literal">new</span> <span class="hljs-built_in">Date</span>( ));<br><br>    <span class="hljs-built_in">String</span> title = <span class="hljs-string">&quot;特定于区域设置的日期&quot;</span>;<br>    <span class="hljs-built_in">String</span> docType = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;<br>      out.println(docType +<br>      <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + <span class="hljs-built_in">date</span> + <span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-17-4、特定于区域设置的货币"><a href="#1-17-4、特定于区域设置的货币" class="headerlink" title="1.17.4、特定于区域设置的货币"></a>1.17.4、特定于区域设置的货币</h5><p>您可以使用 java.text.NumberFormat 类及其静态方法 getCurrencyInstance() 来格式化数字（比如 long 类型或 double 类型）为特定于区域设置的货币。下面的实例演示了如何格式化特定于某个给定的区域设置的货币：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CurrencyLocale</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>    <br>  public void doGet(<span class="hljs-type">HttpServletRequest</span> request,<br>                    <span class="hljs-type">HttpServletResponse</span> response)<br>            <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>  &#123;<br>    <span class="hljs-comment">// 设置响应内容类型</span><br>    response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <span class="hljs-type">PrintWriter</span> out = response.getWriter();<br>    <span class="hljs-comment">// 获取客户端的区域设置</span><br>    <span class="hljs-type">Locale</span> locale = request.getLocale( );<br>    <span class="hljs-type">NumberFormat</span> nft = <span class="hljs-type">NumberFormat</span>.getCurrencyInstance(locale);<br>    <span class="hljs-type">String</span> formattedCurr = nft.format(<span class="hljs-number">1000000</span>);<br><br>    <span class="hljs-type">String</span> title = <span class="hljs-string">&quot;特定于区域设置的货币&quot;</span>;<br>    <span class="hljs-type">String</span> docType = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;<br>      out.println(docType +<br>      <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + formattedCurr + <span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-17-5、特定于区域设置的百分比"><a href="#1-17-5、特定于区域设置的百分比" class="headerlink" title="1.17.5、特定于区域设置的百分比"></a>1.17.5、特定于区域设置的百分比</h5><p>您可以使用 java.text.NumberFormat 类及其静态方法 getPercentInstance() 来格式化特定于区域设置的百分比。下面的实例演示了如何格式化特定于某个给定的区域设置的百分比：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PercentageLocale</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>    <br>  public void doGet(<span class="hljs-type">HttpServletRequest</span> request,<br>                    <span class="hljs-type">HttpServletResponse</span> response)<br>            <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span><br>  &#123;<br>    <span class="hljs-comment">// 设置响应内容类型</span><br>    response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <span class="hljs-type">PrintWriter</span> out = response.getWriter();<br>    <span class="hljs-comment">// 获取客户端的区域设置</span><br>    <span class="hljs-type">Locale</span> locale = request.getLocale( );<br>    <span class="hljs-type">NumberFormat</span> nft = <span class="hljs-type">NumberFormat</span>.getPercentInstance(locale);<br>    <span class="hljs-type">String</span> formattedPerc = nft.format(<span class="hljs-number">0.51</span>);<br><br>    <span class="hljs-type">String</span> title = <span class="hljs-string">&quot;特定于区域设置的百分比&quot;</span>;<br>    <span class="hljs-type">String</span> docType = <span class="hljs-string">&quot;&lt;!DOCTYPE html&gt; \n&quot;</span>;<br>      out.println(docType +<br>      <span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="hljs-string">&quot;&lt;/title&gt;&lt;/head&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;body bgcolor=\&quot;#f0f0f0\&quot;&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;h1 align=\&quot;center\&quot;&gt;&quot;</span> + formattedPerc + <span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>      <span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-18、需要共享信息与页面跳转的原因"><a href="#1-18、需要共享信息与页面跳转的原因" class="headerlink" title="1.18、需要共享信息与页面跳转的原因"></a>1.18、需要共享信息与页面跳转的原因</h4><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/servlet.png"></p><h5 id="1-18-1、为什么需要跳转和数据共享？"><a href="#1-18-1、为什么需要跳转和数据共享？" class="headerlink" title="1.18.1、为什么需要跳转和数据共享？"></a>1.18.1、为什么需要跳转和数据共享？</h5><p>跳转：需要做责任分离（Servlet擅长写代码，jsp擅长展示页面）</p><p>共享：Http是无状态的，我们跳转的时候数据无法传递，因此需要做数据共享</p><h5 id="1-18-2、页面跳转可以怎么跳"><a href="#1-18-2、页面跳转可以怎么跳" class="headerlink" title="1.18.2、页面跳转可以怎么跳?"></a>1.18.2、页面跳转可以怎么跳?</h5><p>Servlet 跳转 其它资源(jsp,html)</p><p>Serlvet 跳转 Servlet </p><p>一般来说: 最后都会跳转到JSP页面(我们需要JSP页面来做展示)</p><h5 id="1-18-3、页面跳转的三种方式"><a href="#1-18-3、页面跳转的三种方式" class="headerlink" title="1.18.3、页面跳转的三种方式"></a>1.18.3、页面跳转的三种方式</h5><p>①请求转发、②重定向、③请求包含</p><h5 id="1-18-4、页面跳转：请求转发-Forward"><a href="#1-18-4、页面跳转：请求转发-Forward" class="headerlink" title="1.18.4、页面跳转：请求转发 Forward"></a>1.18.4、页面跳转：请求转发 Forward</h5><p>创建两个Servlet，分别是AServlet与BServlet，然后我访问AServlet，从AServlet跳转到BServlet；（分别使用3种方式）</p><p>转发的方式: <code>req.getRequestDispatcher(&quot;路径&quot;).forward(request, response);</code></p><p>注意:千万不要忘了forward</p><p><strong>案例代码：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/forward/a&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> req,<span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;现在AServlet中。。。&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * req.getRequestDispatcher(String path)</span><br><span class="hljs-comment">         * 拿到分发器/确认跳转的地址</span><br><span class="hljs-comment">         * forward：进行跳转</span><br><span class="hljs-comment">         */</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/forward/b&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/forward/b&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;现在BServlet&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jsp2.png"></p><p><strong>forward转发的特点：</strong></p><ul><li><p>地址栏地址不发生变化</p></li><li><p>浏览器只发送了一次请求（请求对象只有 <code>HTTPServletRequest req</code> 一个），forward是作为参数传递。</p></li><li><p>AServlet收到的浏览器的请求req和forward传给BServlet的req是同一个对象。里边的内容是相同的。</p></li><li><p>请求的顺序中，只最后一个response才起最用</p></li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/response.png"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jsp3.png"></p><ul><li><p>在AServlet 里面 跳转之后，resp.getWriter().println(i am aservlet”);不会显示在页面上，因为这个resp 不会转发之后，在回AServlet里面来;</p></li><li><p>forward不可跨域访问</p></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">req</span><span class="hljs-selector-class">.getRequestDispatcher</span>(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<span class="hljs-selector-class">.forward</span>(req,resp);<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jsp4.png"></p><ul><li>可以访问web-inf中的资源，但是不能直接通过/locolhost/WEB-INF/haha.html进行访问，可以通过转发访问到WEB-INF里面的内容。</li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jsp5.png"></p><h5 id="1-18-5、页面跳转：重定向Redirect"><a href="#1-18-5、页面跳转：重定向Redirect" class="headerlink" title="1.18.5、页面跳转：重定向Redirect"></a>1.18.5、页面跳转：重定向Redirect</h5><p>跳转的方式: resp.sendRedirect(“路径”);//直接跳转</p><p><strong>转发特点:</strong></p><ul><li><p> 地址会发生变化</p></li><li><p> 发送了多次请求(每跳转一次就会发送一次请求)</p></li><li><p> 请求不一样的（请求头不共享）</p></li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/redirect.png"></p><ul><li> 请求的顺序, 显示的依然是最后一个</li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/redirect3.png"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/redirect1.png"></p><ul><li> 可以跨域访问</li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/redirect4.png"></p><ul><li> 不能访问到WEB-INF下面的内容</li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/redirect5.png"></p><h5 id="1-18-6、页面跳转：请求包含include"><a href="#1-18-6、页面跳转：请求包含include" class="headerlink" title="1.18.6、页面跳转：请求包含include"></a><strong>1.18.6、页面跳转：请求包含include</strong></h5><p>一般不会在Servlet中使用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">req</span><span class="hljs-selector-class">.getRequestDispatcher</span>(<span class="hljs-string">&quot;/include/b&quot;</span>)<span class="hljs-selector-class">.include</span>(req, resp);<br></code></pre></td></tr></table></figure><p>这个两个结果会包含在一起（我们一般不使用）：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/include.png"></p><h4 id="1-19、四大作用域对象"><a href="#1-19、四大作用域对象" class="headerlink" title="1.19、四大作用域对象"></a>1.19、四大作用域对象</h4><p>引入：我们在做数据共享的时候，把数据放到不同的地方，这个不同的地方就是放到不同的作用域里面，作用域对象有4个；</p><table><thead><tr><th>类</th><th>对象(叫法)</th><th>范围</th></tr></thead><tbody><tr><td>PageContext</td><td>pageContext</td><td>当前页面(作用不大)  当前页，直接使用就是，根本不需要在放到对象里面</td></tr><tr><td>HttpServletRequest</td><td>Request</td><td>一次请求(必需请求转发)</td></tr><tr><td>HttpSession</td><td>Session（多个对象）</td><td>一次会话</td></tr><tr><td>ServletContext</td><td>application</td><td>整个应用(有且只有一个对象)</td></tr></tbody></table><p>pageContext：每次访问的时候创建，可以有多个；</p><p>Request：每次请求的时候创建，可以有多个；</p><p>Session：每次会话的时候创建，不同人打开不同的浏览器，就创建多个，可以有个多个；</p><p>Application：整个应用有且只有一个对象，tomcat启动的创建，关闭的时候销毁；</p><h5 id="1-19-1、作用域对象的操作"><a href="#1-19-1、作用域对象的操作" class="headerlink" title="1.19.1、作用域对象的操作"></a>1.19.1、作用域对象的操作</h5><p><code>service方法</code>中拿到相应的作用域对象</p><blockquote><p>request:req</p><p>session:req.getSession()</p><p>application:super.getServletContext()</p></blockquote><p><strong>1)、向作用域对象中添加数据</strong></p><p>作用域对象.setAttribute(key, value);</p><p>修改（在设置一个相同的key，覆盖原有的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScopeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">protect <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException</span>&#123;<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<span class="hljs-comment">//添加到request对象</span><br>        req.getSession().setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<span class="hljs-comment">//添加到Session对象中</span><br>        <span class="hljs-keyword">super</span>.getServletContext().setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<span class="hljs-comment">//添加到Applicatoin</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2）、作用域对象中获取数据</strong></p><p>作用域对象.getAttribute(key);</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScopeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    protect void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>&#123;<br>        req.getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<span class="hljs-comment">//从request对象获取数据</span><br>        req.getSession().getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<span class="hljs-comment">//从Session对象中获取</span><br>        <span class="hljs-keyword">super</span>.getServletContext().getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<span class="hljs-comment">//从Applicatoin获取</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3）、删除作用域对象中的数据</strong></p><p>作用域对象.removeAttribute(“key”);</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScopeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    protect void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>&#123;<br>        req.removeAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>        req.getSession().removeAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>        <span class="hljs-keyword">super</span>.getServletContext().removeAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>作用域有大小，存在哪个作用域对象里，就需要在哪个作用域对象里获取</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/domain.png"></p><h5 id="1-19-2、各个作用域使用"><a href="#1-19-2、各个作用域使用" class="headerlink" title="1.19.2、各个作用域使用"></a>1.19.2、各个作用域使用</h5><p>①Session只用于登录，保存当前登录的用户</p><p>②Request我们平时从数据库拿到数据的展示都全部Request</p><p>③Application一般用于统计当前登录用户的数量上</p><h5 id="1-19-3、作用域经典案例"><a href="#1-19-3、作用域经典案例" class="headerlink" title="1.19.3、作用域经典案例"></a>1.19.3、作用域经典案例</h5><p>创建一个CountServlet.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 我们去作用域对象里面去拿到一个计数器</span><br><span class="hljs-comment"> *   如果有这个计数器,就直接拿到</span><br><span class="hljs-comment"> *   如果没有,创建一个,再拿到</span><br><span class="hljs-comment"> * 对计数器进行加1</span><br><span class="hljs-comment"> * 将新计数器再重新放到作用域中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.<span class="hljs-type">WebServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/scope/count&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CountServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-comment">//request作用域</span><br>        <span class="hljs-type">Integer</span> reqCount=(<span class="hljs-type">Integer</span>)req.getAttribute(<span class="hljs-string">&quot;REQ_IN_COUNT&quot;</span>);<br>        <span class="hljs-keyword">if</span>(reqCount==<span class="hljs-literal">null</span>)&#123;<br>            reqCount=<span class="hljs-number">0</span>;<br>        &#125;<br>        reqCount=reqCount+<span class="hljs-number">1</span>;<br>        req.setAttribute(<span class="hljs-string">&quot;REQ_IN_COUNT&quot;</span>,reqCount);<br>        <span class="hljs-comment">//session作用域</span><br>        <span class="hljs-type">Integer</span> sessionCount=(<span class="hljs-type">Integer</span>)req.getSession().getAttribute(<span class="hljs-string">&quot;SESSION_IN_COUNT&quot;</span>);<br>        <span class="hljs-keyword">if</span>(sessionCount==<span class="hljs-literal">null</span>)&#123;<br>            sessionCount=<span class="hljs-number">0</span>;<br>        &#125;<br>        sessionCount=sessionCount+<span class="hljs-number">1</span>;<br>        req.getSession().setAttribute(<span class="hljs-string">&quot;SESSION_IN_COUNT&quot;</span>,sessionCount);<br><br>        <span class="hljs-comment">//application作用域</span><br>        <span class="hljs-type">Integer</span> appCount=(<span class="hljs-type">Integer</span>)<span class="hljs-keyword">super</span>.getServletContext().getAttribute(<span class="hljs-string">&quot;APP_IN_COUNT&quot;</span>);<br>        <span class="hljs-keyword">if</span>(appCount==<span class="hljs-literal">null</span>)&#123;<br>            appCount=<span class="hljs-number">0</span>;<br>        &#125;<br>        appCount=appCount+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">super</span>.getServletContext().setAttribute(<span class="hljs-string">&quot;APP_IN_COUNT&quot;</span>,appCount);<br><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/scope/result&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个ScopeServlet.java拿到计数器的值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> javax.servlet.annotation.<span class="hljs-type">WebServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br><span class="hljs-meta">@WebServlet</span>(<span class="hljs-string">&quot;/scope/result&quot;</span>)<br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScopeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void service(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">Integer</span> reqCount=(<span class="hljs-type">Integer</span>)req.getAttribute(<span class="hljs-string">&quot;REQ_IN_COUNT&quot;</span>);<br>        resp.getWriter().println(<span class="hljs-string">&quot;request:&quot;</span>+reqCount);<br><br>        <span class="hljs-type">Integer</span> sessionCount=(<span class="hljs-type">Integer</span>)req.getSession().getAttribute(<span class="hljs-string">&quot;SESSION_IN_COUNT&quot;</span>);<br>        resp.getWriter().println(<span class="hljs-string">&quot;session:&quot;</span>+sessionCount);<br><br>        <span class="hljs-type">Integer</span> appCount=(<span class="hljs-type">Integer</span>)<span class="hljs-keyword">super</span>.getServletContext().getAttribute(<span class="hljs-string">&quot;APP_IN_COUNT&quot;</span>);<br>        resp.getWriter().println(<span class="hljs-string">&quot;application:&quot;</span>+appCount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/Scope.png"></p><p>注：有的浏览器如Chrome，因受浏览器后台驻留影响，重新打开浏览器不会创建新的session会话，而是使用原有的session，给我们一种重启浏览器session不会重新计数的印象。</p><h5 id="1-19-4、ServletContext对象介绍"><a href="#1-19-4、ServletContext对象介绍" class="headerlink" title="1.19.4、ServletContext对象介绍"></a>1.19.4、ServletContext对象介绍</h5><p><strong>1）、获取ServletContext 上下文对象</strong></p><p>ServletContext 表示上下文对象，得到上下文对象ServletContext对象的四种方式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ServletContext <span class="hljs-attribute">app1</span>=super.getServletContext();<br>ServletContext <span class="hljs-attribute">app2</span>=super.getServletConfig().getServletContext();<br>ServletContext <span class="hljs-attribute">app3</span>=req.getServletContext();<br>ServletContext <span class="hljs-attribute">app4</span>=re1.getSession().getServletContext();<br></code></pre></td></tr></table></figure><p>它们拿到的对象都是同一个对象，那我们选择哪种方式呢？</p><blockquote><p>第①和第②种我们肯定选择①</p><p>第③和和第④种我们肯定选择③（简单）</p><p>第①和第③种选择哪种？</p><ul><li>如果在servlet里面 有super，使用第一种①；</li><li>如果没有在servlet，普通类里面 ，可以通过传递req，选择③</li></ul><p>第③种更简单,不兼容低版本，不兼容tomcat7以前的版本</p><p>第④种麻烦一点,兼容性好</p></blockquote><p><strong>2）、ServletContext的常用方法</strong></p><p>获取到ServletContext 上下文对象后，怎么用？有什么用？</p><p>主要看里面的一些方法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">getContextPath</span>();<span class="hljs-comment">//拿到上下文路径</span><br><span class="hljs-selector-tag">getRealPath</span>(“/”);拿到真实路径<span class="hljs-selector-tag">--</span>(以后做上传下载可以使用)<br><span class="hljs-selector-tag">getInitParameter</span>(“encoding”);<span class="hljs-comment">//拿到初始化参数（只能拿到全局里面的参数信息）</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/%E4%B8%8A%E4%B8%8B%E9%97%AE%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95.png"></p><p>①<strong>以前</strong>取到servlet里面配置的参数信息，</p><p> 通过super.getServletConfig().getInitParameter(“encoding”)拿到</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/se.png"></p><p>②<strong>现在</strong>web.xml配置全局的信息，通过super.getServletContext().getInitParameter(“encoding”) 拿到：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/webxml.png"></p><p>注意：super.getServletContext().getInitParameter(“encoding”); 只能拿到context-param里面配置，不能拿到Servlet里面配置的参数；</p><h5 id="1-19-5、补充内容"><a href="#1-19-5、补充内容" class="headerlink" title="1.19.5、补充内容"></a>1.19.5、补充内容</h5><p><strong>1）、req.getParameter(“”)和req.getAttribute(“”)的区别?</strong></p><blockquote><p>req.getParameter :用户传过来的</p><p>req.getAttribute :从作用域里拿的(必需是放到作用域里的)</p></blockquote><p><strong>2）、ServletConfig.getInitParameter和application.getInitParameter 有什么区别?</strong></p><blockquote><p>ServletConfig.getInitParameter 只作为于一个Servlet</p><p>application.getInitParameter 整个应用都可以拿到</p></blockquote><h4 id="1-20、Servlet配置部署"><a href="#1-20、Servlet配置部署" class="headerlink" title="1.20、Servlet配置部署"></a>1.20、Servlet配置部署</h4><p>在Servlet2.5规范之前，Java Web应用的绝大部分组件都通过web.xml文件来配置管理，Servlet3.0规范可通过Annotation来配置管理Web组件，因此web.xml文件可以变得更加简洁，这也是Servlet3.0的重要简化。</p><p>两种方式：</p><h5 id="（1），通过web-xml配置"><a href="#（1），通过web-xml配置" class="headerlink" title="（1），通过web.xml配置"></a>（1），通过<strong>web.xml</strong>配置</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>GetApplication<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.fpp.GetApplication<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过servletConfig getInitParameter()取出参数 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>GetApplication<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/GetApplication<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="（2），使用-WebServlet-Annotation-进行配置"><a href="#（2），使用-WebServlet-Annotation-进行配置" class="headerlink" title="（2），使用**@WebServlet Annotation**进行配置"></a>（2），使用**@WebServlet Annotation**进行配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name=&quot;AdminAddServlet&quot;,urlPatterns=&quot;/adminAddServlet&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminAddServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span>  </span><br></code></pre></td></tr></table></figure><p> @WebServlet支持的常用属性：</p><blockquote><p>displayName,initParams,loadOnStartup,name,urlPatterns/value,asyncSupported</p></blockquote><p>如果打算使用Annotation来配置Servlet，需要注意以下几点：</p><ul><li>不要在web.xml文件的根元素（&lt;web-app—/&gt;）中指定metadata-complete=“true”；</li><li>不要在web.xml文件中配置该Servlet</li></ul><h3 id="2、JSP"><a href="#2、JSP" class="headerlink" title="2、JSP"></a>2、JSP</h3><h4 id="2-1、JSP简介"><a href="#2-1、JSP简介" class="headerlink" title="2.1、JSP简介"></a>2.1、JSP简介</h4><p>JSP 与 PHP、ASP、ASP.NET 等语言类似，运行在服务端的语言。</p><p>JSP（全称Java Server Pages）是由 Sun Microsystems 公司倡导和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。</p><p>JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。</p><p><strong>Servlet也是Java用来做动态网页的技术，因为JSP就是Servlet；</strong></p><p>Servlet:         <strong>Java代码(主)</strong> + HTML代码</p><p>Jsp:                Java代码 + <strong>HTML代码(主)</strong></p><p>JSP就是Servlet ( 我们开发需要把 jsp 和 Servlet 结合使用)</p><p>Servlet更擅长写java业务代码，Jsp更擅长于显示的HTML页面；</p><p>开发目标：<strong>servlet里面不要写HTML代码，jsp里面不要写java代码。</strong></p><p>一个基本的JSP代码结构：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/JSPS.png"></p><p>注意：JSP页面不能直接拖到浏览器上面运行，它只能在服务器上面使用，服务器对它作了编译的返回给浏览器HTML格式的页面。</p><h4 id="2-2、JSP原理分析"><a href="#2-2、JSP原理分析" class="headerlink" title="2.2、JSP原理分析"></a>2.2、JSP原理分析</h4><h5 id="2-2-1、JSP结构"><a href="#2-2-1、JSP结构" class="headerlink" title="2.2.1、JSP结构"></a>2.2.1、JSP结构</h5><p>网络服务器需要一个 JSP 引擎，也就是一个容器来处理 JSP 页面。容器负责截获对 JSP 页面的请求。本教程使用内嵌 JSP 容器的 Apache 来支持 JSP 开发。 </p><p> JSP 容器与 Web 服务器协同合作，为JSP的正常运行提供必要的运行环境和其他服务，并且能够正确识别专属于 JSP 网页的特殊元素。 </p><p>下图显示了 JSP 容器和 JSP 文件在 Web 应用中所处的位置。 </p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/StructJSP.png"></p><h5 id="2-2-2、JSP处理"><a href="#2-2-2、JSP处理" class="headerlink" title="2.2.2、JSP处理"></a>2.2.2、JSP处理</h5><p>以下步骤表明了 Web 服务器是如何使用JSP来创建网页的： </p><ul><li><p>就像其他普通的网页一样，您的浏览器发送一个 HTTP 请求给服务器。</p></li><li><p>Web 服务器识别出这是一个对 JSP 网页的请求，并且将该请求传递给 JSP 引擎。通过使用  URL或者 .jsp 文件来完成。</p></li><li><p>JSP 引擎从磁盘中载入 JSP 文件，然后将它们转化为 Servlet。这种转化只是简单地将所有模板文本改用 println() 语句，并且将所有的 JSP 元素转化成 Java 代码。</p></li><li><p>JSP 引擎将 Servlet 编译成可执行类，并且将原始请求传递给 Servlet 引擎。</p></li><li><p>Web 服务器的某组件将会调用 Servlet 引擎，然后载入并执行 Servlet 类。在执行过程中，Servlet 产生 HTML 格式的输出并将其内嵌于 HTTP response 中上交给 Web 服务器。</p></li><li><p>Web 服务器以静态 HTML 网页的形式将 HTTP response 返回到您的浏览器中。</p></li><li><p>最终，Web 浏览器处理 HTTP response 中动态产生的HTML网页，就好像在处理静态网页一样。</p><p>以上提及到的步骤可以用下图来表示： </p></li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jsp-processing.jpg"></p><p>一般情况下，JSP 引擎会检查 JSP 文件对应的 Servlet 是否已经存在，并且检查 JSP 文件的修改日期是否早于 Servlet。如果 JSP 文件的修改日期早于对应的 Servlet，那么容器就可以确定 JSP 文件没有被修改过并且 Servlet 有效。这使得整个流程与其他脚本语言（比如 PHP）相比要高效快捷一些。 </p><p> 总的来说，JSP 网页就是用另一种方式来编写 Servlet 而不用成为 Java 编程高手。除了解释阶段外，JSP 网页几乎可以被当成一个普通的 Servlet 来对待。 </p><h5 id="2-2-3、JSP生命周期"><a href="#2-2-3、JSP生命周期" class="headerlink" title="2.2.3、JSP生命周期"></a>2.2.3、JSP生命周期</h5><p>JSP生命周期就是从创建到销毁的整个过程，类似于servlet生命周期，区别在于JSP生命周期还包括将JSP文件编译成servlet。 </p><ul><li><p><strong>编译阶段：</strong></p><p>解析JSP文件，转换为Servlet，servlet容器编译servlet源文件，生成servlet类</p></li><li><p>初始化阶段：</p><p>加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法</p></li><li><p>执行阶段：</p><p>调用与JSP对应的servlet实例的服务方法</p></li><li><p>销毁阶段：</p><p>调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例</p></li></ul><p>很明显，JSP生命周期的四个主要阶段和servlet生命周期非常相似，下面给出图示： </p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jsp_life_cycle.jpg"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/Snip.png"></p><h5 id="2-2-4、代码分析"><a href="#2-2-4、代码分析" class="headerlink" title="2.2.4、代码分析"></a>2.2.4、代码分析</h5><p>Jsp页面上面的代码如下所示，怎么运行之后，就变成右边的时间呢？</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="vbscript">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    HelloWorld！</span><span class="vbscript">&lt;%= <span class="hljs-keyword">new</span> java.util.<span class="hljs-built_in">Date</span>().<span class="hljs-keyword">to</span><span class="hljs-built_in">String</span>()%&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/fenxi.png"></p><p>当我们访问 20191120.jsp时，会先去找到web.xml里面&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;，在会找到 JspServlet，如下图：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/procedure.png"></p><p>JspServlet：在这里面，把我们自己写的JSP页面给翻译成一个JAVA文件，翻译好的文件放在         apache-tomcat-7.0.57\work\Catalina文件夹下面  </p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/compile.png"></p><p>记事本打开这个生成的Java文件：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/shengcheng.png"></p><p>翻译过程：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/procedure1.png"></p><h4 id="2-3、JSP语法"><a href="#2-3、JSP语法" class="headerlink" title="2.3、JSP语法"></a>2.3、JSP语法</h4><p>请大家记住一句话:</p><blockquote><p>在JSP里面最好不要写JAVA代码，在Servlet里面也不要写HTML代码；</p><p>到目前，初学者可能还不能完全做到，后面内容学完，才能消除二者代码的杂糅。</p></blockquote><h5 id="2-3-1、JSP页面上面注释"><a href="#2-3-1、JSP页面上面注释" class="headerlink" title="2.3.1、JSP页面上面注释"></a>2.3.1、JSP页面上面注释</h5><p>   ①语法：&lt;%–这是注释–%&gt; 在jsp翻译成Servlet的时候这个注释就没有了(浏览器查看页面源代码看不到)；</p><p>   ②我们还可以用html的注释（<!--我是一个注释-->）,在页面上看源代码可以看到；</p><h5 id="2-3-2、-lt-表达式-gt"><a href="#2-3-2、-lt-表达式-gt" class="headerlink" title="2.3.2、&lt;%=表达式%&gt;"></a>2.3.2、&lt;%=表达式%&gt;</h5><p>实际上就是调用输出流打印到页面上，其对应servlet里的out.print(表达式);</p><p>作用：输出数据到页面上</p><p>例: &lt;%=**new** java.util.Date().toLocaleString() %&gt;</p><p>翻译到Servlet中的代码:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">out.print(<span class="hljs-keyword">new</span> java.util.<span class="hljs-constructor">Date()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">LocaleString()</span>);<br></code></pre></td></tr></table></figure><h5 id="2-3-3、-lt-…-gt"><a href="#2-3-3、-lt-…-gt" class="headerlink" title="2.3.3、&lt;% … %&gt;"></a>2.3.3、&lt;% … %&gt;</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;%<br> Java语句<span class="hljs-number">1</span><span class="hljs-comment">;</span><br> Java语句<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>%&gt;<br></code></pre></td></tr></table></figure><p>JSP中的Java脚本片段：(实际开发中，应做到JSP中不能出现一行Java脚本片段)</p><p>作用：书写Java代码逻辑</p><p>原理：其中的语句会原封不动的被服务器翻译到对应的<code>Servlet的_jspService</code>方法中。</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jspservice.png"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/fanyi.png"></p><h5 id="2-3-4、-lt-…-gt"><a href="#2-3-4、-lt-…-gt" class="headerlink" title="2.3.4、&lt;%!  … %&gt;"></a>2.3.4、&lt;%!  … %&gt;</h5><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">&lt;<span class="hljs-comment">%!</span><br>  Java代码<br><span class="hljs-comment">%&gt;</span><br></code></pre></td></tr></table></figure><p>作用：定义类的成员</p><p>原理: 把其中的代码,原封不动翻译到Servlet类中。</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/chengyuan.png"></p><h4 id="2-4、JSP三大指令"><a href="#2-4、JSP三大指令" class="headerlink" title="2.4、JSP三大指令"></a>2.4、JSP三大指令</h4><p>JSP指令用来设置整个JSP页面相关的属性，如网页的编码方式和脚本语言。</p><table><thead><tr><th align="left"><strong>指令</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">&lt;%@ page … %&gt;</td><td align="left">定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td align="left">&lt;%@ include … %&gt;</td><td align="left">包含其他文件</td></tr><tr><td align="left">&lt;%@ taglib … %&gt;</td><td align="left">引入标签库的定义，可以是自定义标签</td></tr></tbody></table><h5 id="2-4-1、Page指令"><a href="#2-4-1、Page指令" class="headerlink" title="2.4.1、Page指令"></a>2.4.1、Page指令</h5><p>Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。</p><p>Page指令的语法格式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ page attribute=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p> 等价的XML格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:directive.page</span> <span class="hljs-attr">attribute</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>Page指令相关的属性：</p><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">buffer</td><td align="left">指定out对象使用缓冲区的大小</td></tr><tr><td align="left">autoFlush</td><td align="left">控制out对象的 缓存区</td></tr><tr><td align="left">contentType</td><td align="left">指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td align="left">errorPage</td><td align="left">指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td align="left">isErrorPage</td><td align="left">指定当前页面是否可以作为另一个JSP页面的错误处理页面</td></tr><tr><td align="left">extends</td><td align="left">指定servlet从哪一个类继承</td></tr><tr><td align="left">import</td><td align="left">导入要使用的Java类</td></tr><tr><td align="left">info</td><td align="left">定义JSP页面的描述信息</td></tr><tr><td align="left">isThreadSafe</td><td align="left">指定对JSP页面的访问是否为线程安全</td></tr><tr><td align="left">language</td><td align="left">定义JSP页面所用的脚本语言，默认是Java</td></tr><tr><td align="left">session</td><td align="left">指定JSP页面是否使用session</td></tr><tr><td align="left">isELIgnored</td><td align="left">指定是否执行EL表达式</td></tr><tr><td align="left">isScriptingEnabled</td><td align="left">确定脚本元素能否被使用</td></tr></tbody></table><p>①、language=”java” *–&gt;*语言只有java，意义不大 </p><p>②、contentType=”text/html; charset=UTF-8” *–&gt;*输出的页面类型,以后的servlet里面不用写（resp.setContentType(“text/html;charset=utf-8”)）</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/setcontenttype.png"></p><p>③、pageEncoding=”UTF-8”</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/page.png"></p><p>④、errorPage=”/myerror.jsp”:如果当前页面出错,就跳转到对应的页面</p><p>和isErrorPage=”true”:这个页面是否是错误页面(当我们要在页面上直接使用exception的时候就可以加上它)</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/errorPage.png"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/iserrorpage.png"></p><p>效果：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/error.png"></p><p>在web.xml里面也可以配置错误页面：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/errorxml.png"></p><h5 id="2-4-2、Include指令"><a href="#2-4-2、Include指令" class="headerlink" title="2.4.2、Include指令"></a>2.4.2、Include指令</h5><p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</p><p> Include指令的语法格式如下：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%@ include <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;文件相对 url 地址&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p> <strong>include</strong> 指令中的文件名实际上是一个相对的 URL 地址。</p><p>如果您没有给文件关联一个路径，JSP编译器默认在当前路径下寻找。</p><p> 等价的XML语法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">&lt;jsp:directive.<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;文件相对 url 地址&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>当每个页面都有导航的时候，我们只需要使用一个，这个时候就可以使用包含指令：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/include1.png"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/baohan.png"></p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/baohan1.png"></p><p>一般被包含的jsp文件我们会取名为 jspf(jsp片断)：</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/pianduan.png"></p><h5 id="2-4-3、taglib指令"><a href="#2-4-3、taglib指令" class="headerlink" title="2.4.3、taglib指令"></a>2.4.3、taglib指令</h5><p>JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。</p><p> Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。</p><p> Taglib指令的语法：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ taglib uri=<span class="hljs-string">&quot;uri&quot;</span> prefix=<span class="hljs-string">&quot;prefixOfTag&quot;</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p> uri属性确定标签库的位置，prefix属性指定标签库的前缀。</p><p> 等价的XML语法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;jsp:directive.taglib <span class="hljs-attribute">uri</span>=<span class="hljs-string">&quot;uri&quot;</span> <span class="hljs-attribute">prefix</span>=<span class="hljs-string">&quot;prefixOfTag&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h4 id="2-5、JSP动作元素"><a href="#2-5、JSP动作元素" class="headerlink" title="2.5、JSP动作元素"></a><a href="https://www.runoob.com/jsp/jsp-actions.html">2.5、JSP动作元素</a></h4><p>JSP行为标签使用XML语法结构来控制servlet引擎。它能够<code>动态</code>插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等。</p><p> 行为标签只有一种语法格式，它严格遵守XML标准：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:action_name</span> <span class="hljs-attr">attribute</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p> 行为标签基本上是一些预先就定义好的函数，下表罗列出了一些可用的</p><h5 id="2-5-1、JSP动作标签：："><a href="#2-5-1、JSP动作标签：：" class="headerlink" title="2.5.1、JSP动作标签：："></a>2.5.1、JSP动作标签：：</h5><table><thead><tr><th align="left"><strong>语法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">jsp:include</td><td align="left">用于在当前页面中包含静态或动态资源</td></tr><tr><td align="left">jsp:useBean</td><td align="left">寻找和初始化一个JavaBean组件</td></tr><tr><td align="left">jsp:setProperty</td><td align="left">设置 JavaBean组件的值</td></tr><tr><td align="left">jsp:getProperty</td><td align="left">将 JavaBean组件的值插入到 output中</td></tr><tr><td align="left">jsp:forward</td><td align="left">从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td></tr><tr><td align="left">jsp:plugin</td><td align="left">用于在生成的HTML页面中包含Applet和JavaBean对象</td></tr><tr><td align="left">jsp:element</td><td align="left">动态创建一个XML元素</td></tr><tr><td align="left">jsp:attribute</td><td align="left">定义动态创建的XML元素的属性</td></tr><tr><td align="left">jsp:body</td><td align="left">定义动态创建的XML元素的主体</td></tr><tr><td align="left">jsp:text</td><td align="left">用于封装模板数据</td></tr></tbody></table><h5 id="2-5-2、所有的动作要素都有两个属性"><a href="#2-5-2、所有的动作要素都有两个属性" class="headerlink" title="2.5.2、所有的动作要素都有两个属性"></a>2.5.2、所有的动作要素都有两个属性</h5><ul><li><p>id属性：</p><p>id属性是动作元素的唯一标识，可以在JSP页面中引用。动作元素创建的id值可以通过PageContext来调用。 </p></li><li><p>scope属性：</p><p>该属性用于识别动作元素的生命周期。 id属性和scope属性有直接关系，scope属性定义了相关联id对象的寿命。 scope属性有四个可能的值： (a) page, (b)request, (c)session, 和 (d) application。 </p></li></ul><h5 id="2-5-3、-lt-jsp-include-gt-动作元素"><a href="#2-5-3、-lt-jsp-include-gt-动作元素" class="headerlink" title="2.5.3、**&lt;jsp:include&gt;**动作元素"></a>2.5.3、**&lt;jsp:include&gt;**动作元素</h5><p>用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;jsp:include <span class="hljs-attribute">page</span>=<span class="hljs-string">&quot;相对 URL 地址&quot;</span> <span class="hljs-attribute">flush</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p> 前面已经介绍过include指令，它是在JSP文件被转换成Servlet的时候引入文件，而这里的</p><p>&lt;jsp:include&gt;动作不同，插入文件的时间是在页面被请求的时候。 </p><p>以下是include动作相关的属性列表。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">page</td><td align="left">包含在页面中的相对URL地址。</td></tr><tr><td align="left">flush</td><td align="left">布尔属性，定义在包含资源前是否刷新缓存区。</td></tr></tbody></table><h5 id="2-5-4、-lt-jsp-forward-gt-动作"><a href="#2-5-4、-lt-jsp-forward-gt-动作" class="headerlink" title="**2.5.4、&lt;jsp:forward&gt;**动作"></a>**2.5.4、&lt;jsp:forward&gt;**动作</h5><p>把请求转到另外的页面。jsp:forward标记只有一个属性page。语法格式如下所示：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:forward</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;相对 URL 地址&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>以下是foward相关联的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">page</td><td align="left">page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</td></tr></tbody></table><h5 id="2-5-5、-lt-jsp-useBean-gt-动作用来加载一个将在JSP页面中使用的JavaBean。"><a href="#2-5-5、-lt-jsp-useBean-gt-动作用来加载一个将在JSP页面中使用的JavaBean。" class="headerlink" title="2.5.5、&lt;jsp:useBean&gt; 动作用来加载一个将在JSP页面中使用的JavaBean。"></a><strong>2.5.5、&lt;jsp:useBean&gt;</strong> 动作用来加载一个将在JSP页面中使用的JavaBean。</h5><p>这个功能非常有用，因为它使得我们可以发挥 Java 组件复用的优势。</p><p>jsp:useBean动作最简单的语法为：  </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;jsp:useBean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;package.class&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p> 在类载入后，我们既可以通过 jsp:setProperty 和 jsp:getProperty 动作来修改和检索bean的属性。  </p><p>以下是useBean动作相关的属性列表。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">指定Bean的完整包名。</td></tr><tr><td align="left">type</td><td align="left">指定将引用该对象变量的类型。</td></tr><tr><td align="left">beanName</td><td align="left">通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。</td></tr></tbody></table><p>**&lt;jsp:setProperty&gt;**用来设置已经实例化的Bean对象的属性，有两种用法。首先，你可以在jsp:useBean元素的外面（后面）使用jsp:setProperty，如下所示：  </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;jsp:useBean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myName&quot;</span> ... /&gt;<br>...<br>&lt;jsp:setProperty <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;myName&quot;</span> <span class="hljs-keyword">property</span>=<span class="hljs-string">&quot;someProperty&quot;</span> .../&gt;<br></code></pre></td></tr></table></figure><p>此时，不管jsp:useBean是找到了一个现有的Bean，还是新创建了一个Bean实例，jsp:setProperty都会执行。第二种用法是把jsp:setProperty放入jsp:useBean元素的内部，如下所示：  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;jsp<span class="hljs-function">:useBean</span> id=<span class="hljs-string">&quot;myName&quot;</span> <span class="hljs-string">...</span> &gt;<br><span class="hljs-string">...</span><br>   &lt;jsp<span class="hljs-function">:setProperty</span> name=<span class="hljs-string">&quot;myName&quot;</span> property=<span class="hljs-string">&quot;someProperty&quot;</span> <span class="hljs-string">.../</span>&gt;<br>&lt;<span class="hljs-string">/jsp</span><span class="hljs-function">:useBean</span>&gt;<br></code></pre></td></tr></table></figure><p>此时，jsp:setProperty只有在新建Bean实例时才会执行，如果是使用现有实例则不执行jsp:setProperty。  </p><p>jsp:setProperty动作有下面四个属性,如下表：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">name属性是必需的。它表示要设置属性的是哪个Bean。</td></tr><tr><td align="left">property</td><td align="left">property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是”*”，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr><tr><td align="left">value</td><td align="left">value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如”true”）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如”42”）通过Integer.valueOf转换。  　value和param不能同时使用，但可以使用其中任意一个。</td></tr><tr><td align="left">param</td><td align="left">param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr></tbody></table><p>**&lt;jsp:getProperty&gt;**动作提取指定Bean属性的值，转换成字符串，然后输出。语法格式如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;jsp:useBean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myName&quot;</span> ... /&gt;<br>...<br>&lt;jsp:getProperty <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;myName&quot;</span> <span class="hljs-keyword">property</span>=<span class="hljs-string">&quot;someProperty&quot;</span> .../&gt;<br></code></pre></td></tr></table></figure><p>下表是与getProperty相关联的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">要检索的Bean属性名称。Bean必须已定义。</td></tr><tr><td align="left">property</td><td align="left">表示要提取Bean属性的值</td></tr></tbody></table><h4 id="2-6、JSP九大内置对象"><a href="#2-6、JSP九大内置对象" class="headerlink" title="2.6、JSP九大内置对象"></a>2.6、JSP九大内置对象</h4><p>引入：在jsp页面里面 ，可以直接使用request和session，为什么可以直接使用？</p><p>这里request和session 就是别人已经帮我们定义好9个内置对象中的其中两个，我们直接</p><p>拿到使用就是。</p><table><thead><tr><th align="left"><strong>对象</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">request</td><td align="left"><strong>HttpServletRequest</strong>类的实例</td></tr><tr><td align="left">response</td><td align="left"><strong>HttpServletResponse</strong>类的实例</td></tr><tr><td align="left">out</td><td align="left"><strong>PrintWriter</strong>类的实例，用于把结果输出至网页上，<strong>JSPWriter</strong></td></tr><tr><td align="left">session</td><td align="left"><strong>HttpSession</strong>类的实例</td></tr><tr><td align="left">application</td><td align="left"><strong>ServletContext</strong>类的实例，与应用上下文有关</td></tr><tr><td align="left">config</td><td align="left"><strong>ServletConfig</strong>类的实例</td></tr><tr><td align="left">pageContext</td><td align="left"><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td align="left">page</td><td align="left">类似于Java类中的this关键字</td></tr><tr><td align="left">Exception</td><td align="left"><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><h4 id="2-6、JSP四大作用域对象"><a href="#2-6、JSP四大作用域对象" class="headerlink" title="2.6、JSP四大作用域对象"></a>2.6、JSP四大作用域对象</h4><table><thead><tr><th>作用域对象</th><th>类</th><th></th></tr></thead><tbody><tr><td>application</td><td>ServletContext</td><td>整个应用</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求</td></tr><tr><td>pageContext</td><td>PageContext</td><td>当前页</td></tr></tbody></table><p>JSP四大作用域对象属于9大内置对象</p><h4 id="2-7、补充内容"><a href="#2-7、补充内容" class="headerlink" title="2.7、补充内容"></a>2.7、补充内容</h4><p>在JSP动作元素中，我们只了解 jsp:include这个动作元素</p><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/jspinclude.png"></p><p>我们要用 jsp:include 来做包含页面的时候，就不能再使用<strong>片段</strong>（<code>2.4.2</code>）</p><p>面试题:动态包含(动作jsp:include)与静态包含(指令include)的区别? </p><p>什么时候用动态包含，什么时候用静态包含?</p><ul><li>静态包含先把页面包含进来,再翻译成java代码!!  (只有一个文件)</li><li>动态包含先都编译成java代码,再将内容进行包含!!  (有多个文件)</li></ul><p>有个说法：</p><ul><li>如果包含的是静态页面(html),那么使用静态包含</li><li>如果包含的是动态网页(jsp),那么使用动态包含</li></ul><p>编译的文件（\apache-tomcat-7.0.57\work\Catalina\路径下面）</p><ul><li>静态包含&lt;%@ include file=”/include/b.jsp” %&gt;</li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/clip_image001.png" alt="img"></p><ul><li>动态包含&lt;jsp:include page=”/include2/b.jsp”&gt;&lt;/ jsp:include&gt;</li></ul><p><img src="/2019/11/21/Servlet%E4%BA%A4%E4%BA%92%E4%B8%8EJSP/clip_image002.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSP</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库练习（一）</title>
    <link href="/2019/11/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/11/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>1、 部门表：DEPT</p><table><thead><tr><th><strong>No.</strong></th><th><strong>字段名称</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td>DEPTNO</td><td>BIGINT</td><td>部门编号，由两位数字所组成(主键)</td></tr><tr><td>2</td><td>DNAME</td><td>VARCHAR(20)</td><td>部门名称，由 14 位字符所组成</td></tr><tr><td>3</td><td>LOC</td><td>VARCHAR(20)</td><td>部门位置</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> DEPT ( <br>DEPTNO <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">PRIMARY</span> KEY COMMENT &quot;部门编号，有两位数据组成主键&quot;, <br>DNAME <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">20</span> ), <br>LOC <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">20</span> ) <br>);<br></code></pre></td></tr></table></figure><p>2、 雇员表：EMP</p><table><thead><tr><th><strong>No.</strong></th><th><strong>字段名称</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td>EMPNO</td><td>BIGINT</td><td>雇员编号，由四位数字所组成(主键)</td></tr><tr><td>2</td><td>ENAME</td><td>VARCHAR(20)</td><td>雇员姓名</td></tr><tr><td>3</td><td>JOB</td><td>VARCHAR(20)</td><td>职位</td></tr><tr><td>4</td><td>MGR</td><td>BIGINT</td><td>一个雇员对应的领导编号（雇员编号）</td></tr><tr><td>5</td><td>HIREDATE</td><td>DATE</td><td>雇员的雇佣日期</td></tr><tr><td>6</td><td>SAL</td><td>DOUBLE(7,2)</td><td>基本工资，由两位小数和五位整数所组成</td></tr><tr><td>7</td><td>COMM</td><td>DOUBLE(7,2)</td><td>奖金/奖金</td></tr><tr><td>8</td><td>DEPTNO</td><td>BIGINT</td><td>一个雇员所在的部门编号，与dept 表的对应</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> EMP (<br>EMPNO <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">PRIMARY</span> KEY COMMENT &quot;GUYUANBIANHAO &quot;,<br>ENAME <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">20</span> ),<br>JOB <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">20</span> ),<br>MGR <span class="hljs-type">BIGINT</span>,<br>HIREDATE <span class="hljs-type">DATE</span>,<br>SAL <span class="hljs-keyword">DOUBLE</span> ( <span class="hljs-number">7</span>, <span class="hljs-number">2</span> ),<br>COMM <span class="hljs-keyword">DOUBLE</span> ( <span class="hljs-number">7</span>, <span class="hljs-number">2</span> ),<br>DEPTNO <span class="hljs-type">BIGINT</span>,<br><span class="hljs-keyword">FOREIGN</span> KEY EMP ( DEPTNO ) <span class="hljs-keyword">REFERENCES</span> DEPT ( DEPTNO ) <br>);<br></code></pre></td></tr></table></figure><p>3、在上述两表中插入数据<br>DEPT 表数据:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`DEPT`</span> <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;ACCOUNTING&#x27;</span>, <span class="hljs-string">&#x27;NEW YORK&#x27;</span> );<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`DEPT`</span> <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;RESEARCH&#x27;</span>, <span class="hljs-string">&#x27;DALLAS&#x27;</span> );<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`DEPT`</span> <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;SALES&#x27;</span>, <span class="hljs-string">&#x27;CHICAGO&#x27;</span> );<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`DEPT`</span> <span class="hljs-keyword">VALUES</span> ( <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;OPERATIONS&#x27;</span>, <span class="hljs-string">&#x27;BOSTON&#x27;</span> );<br></code></pre></td></tr></table></figure><p>EMP 表数据:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7369</span>, <span class="hljs-string">&#x27;SMITH&#x27;</span>, <span class="hljs-string">&#x27;CLERK&#x27;</span>, <span class="hljs-number">7902</span>, <span class="hljs-string">&#x27;1980-12-17&#x27;</span>, <span class="hljs-number">800</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7499</span>, <span class="hljs-string">&#x27;ALLEN&#x27;</span>, <span class="hljs-string">&#x27;SALESMAN&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-02-20&#x27;</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">300</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7521</span>, <span class="hljs-string">&#x27;WARD&#x27;</span>, <span class="hljs-string">&#x27;SALESMAN&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-02-22&#x27;</span>, <span class="hljs-number">1250</span>, <span class="hljs-number">500</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;JONES&#x27;</span>, <span class="hljs-string">&#x27;MANAGER&#x27;</span>, <span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;1981-04-02&#x27;</span>, <span class="hljs-number">2975</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7654</span>, <span class="hljs-string">&#x27;MARTIN&#x27;</span>, <span class="hljs-string">&#x27;SALESMAN&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-09-28&#x27;</span>, <span class="hljs-number">1250</span>,  <span class="hljs-number">1400</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7698</span>,  <span class="hljs-string">&#x27;BLAKE&#x27;</span>, <span class="hljs-string">&#x27;MANAGER&#x27;</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">&#x27;1981-05-01&#x27;</span>, <span class="hljs-number">2850</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7782</span>,  <span class="hljs-string">&#x27;CLARK&#x27;</span>, <span class="hljs-string">&#x27;MANAGER&#x27;</span>, <span class="hljs-number">7839</span>,  <span class="hljs-string">&#x27;1981-06-09&#x27;</span>, <span class="hljs-number">2450</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7788</span>, <span class="hljs-string">&#x27;SCOTT&#x27;</span>, <span class="hljs-string">&#x27;ANALYST&#x27;</span>, <span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;1987-04-19&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7839</span>, <span class="hljs-string">&#x27;KING&#x27;</span>, <span class="hljs-string">&#x27;PRESIDENT&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">&#x27;1981-11-17&#x27;</span>, <span class="hljs-number">5000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7844</span>, <span class="hljs-string">&#x27;TURNER&#x27;</span>, <span class="hljs-string">&#x27;SALESMAN&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-09-08&#x27;</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7876</span>, <span class="hljs-string">&#x27;ADAMS&#x27;</span>, <span class="hljs-string">&#x27;CLERK&#x27;</span>, <span class="hljs-number">7788</span>, <span class="hljs-string">&#x27;1987-05-23&#x27;</span>, <span class="hljs-number">1100</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7900</span>,  <span class="hljs-string">&#x27;JAMES&#x27;</span>, <span class="hljs-string">&#x27;CLERK&#x27;</span>, <span class="hljs-number">7698</span>, <span class="hljs-string">&#x27;1981-12-03&#x27;</span>, <span class="hljs-number">950</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7902</span>, <span class="hljs-string">&#x27;FORD&#x27;</span>, <span class="hljs-string">&#x27;ANALYST&#x27;</span>, <span class="hljs-number">7566</span>, <span class="hljs-string">&#x27;1981-12-03&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-symbol">`EMP`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7934</span>, <span class="hljs-string">&#x27;MILLER&#x27;</span>, <span class="hljs-string">&#x27;CLERK&#x27;</span>, <span class="hljs-number">7782</span>, <span class="hljs-string">&#x27;1982-01-23&#x27;</span>, <span class="hljs-number">1300</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>4、练习下面内容：</p><table><thead><tr><th>练习下面内容：</th></tr></thead><tbody><tr><td>01.查询每个雇员的编号、姓名、职位。<br>SELECT EMPNO,ename,job FROM emp;#SQL语句所有（关键字，表，字段）大小写不敏感</td></tr><tr><td>02.查询每个雇员的职位，使用 DISTINCT消除掉显示的重复行记录。<br>SELECT DISTINCT JOB FROM EMP;</td></tr><tr><td>03.计算每个雇员的编号、姓名、基本年薪。年薪=(工资+奖金)*12，(使用  IFNULL 函数判断  NULL）<br>SELECT EMPNO,ENAME,(SAL+IFNULL(COMM,0)) *12 FROM EMP;</td></tr><tr><td>04.每个雇员每个月公司会补贴饭食  200 元，交通补助 300 元，计算年薪。<br>SELECT (SAL+IFNULL(COMM,0)+500) *12 FROM EMP;</td></tr><tr><td>05.查询基本工资高于 2000 的全部雇员信息。<br>SELECT * FROM EMP WHERE SAL&gt;2000;</td></tr><tr><td>06.查询出 smith 的信息。<br>SELECT * FROM EMP WHERE ENAME=’SMITH’;#这个SMITH需要引起来</td></tr><tr><td>07.查询出所有不是 CLERK 的详细信息。<br>SELECT * FROM EMP WHERE JOB!=’CLERK’;</td></tr><tr><td>08.查询出所有销售人员(SALESMAN)的基本信息，并且要求销售人员的工资高于 1300。<br>SELECT * FROM EMP WHERE JOB=’SALESMAN’ AND SAL&gt;1300;</td></tr><tr><td>09.查询出工资范围在 1500~3000 之间的全部雇员信息（包含 1500 和 3000）。<br>SELECT * FROM EMP WHERE SAL BETWEEN 1500 AND 3000;</td></tr><tr><td>10.查询出所有经理或者是销售人员的信息，并且要求这些人的基本工资高于  1500。<br>SELECT * FROM EMP WHERE JOB IN (‘SALESMAN’,’MANAGER’) AND SAL&gt;1500;</td></tr><tr><td>11.要求查询出所有在 1981 年雇佣的雇员信息。<br>SELECT * FROM emp where HIREDATE like ‘1981%’;</td></tr><tr><td>12.查询所有领取奖金的雇员信息（comm 不为空）。<br>SELECT * FROM EMP WHERE COMM IS NOT NULL;</td></tr><tr><td>13.查询所有领取奖金高于 100 的雇员信息。<br>SELECT * FROM EMP WHERE COMM IS NOT NULL AND COMM&gt;100;</td></tr><tr><td>14.查询出雇员编号是 7369、7566、9999 的雇员信息。<br>SELECT * FROM EMP WHERE EMPNO IN (7369,7566,9999);</td></tr><tr><td>15.查询出所有雇员姓名是以 A 开头的全部雇员信息。<br>SELECT * FROM EMP WHERE ENAME LIKE ‘A%’;</td></tr><tr><td>16.查询出雇员姓名第二个字母是 M 的全部雇员信息。<br>SELECT * FROM EMP WHERE ENAME LIKE ‘_M%’;</td></tr><tr><td>17.查询出雇员姓名任意位置上包含字母 A  的全部雇员信息。<br>SELECT * FROM EMP WHERE ENAME LIKE ‘%A%’;</td></tr><tr><td>18.查询出所有雇员的信息，要求按照工资排序。<br>SELECT * FROM EMP ORDER BY SAL;</td></tr><tr><td>19.要求查询所有雇员的信息，按照雇佣日期由先后排序。<br>SELECT * FROM EMP ORDER BY HIREDATE;</td></tr><tr><td>20.查询全部雇员信息，按照工资由高到低排序，如果工资相同，则按照雇佣日期由先后排序。<br>SELECT * FROM EMP ORDER BY SAL DESC,HIREDATE;</td></tr><tr><td>21.查询部门 30 中的所有员工。<br>SELECT * FROM EMP WHERE DEPTNO=30;</td></tr><tr><td>22.查询出所有办事员（CLERK）的姓名，编号和部门编号。<br>SELECT ENAME,EMPNO,DEPTNO FROM EMP WHERE JOB=’CLERK’;</td></tr><tr><td>23.查询出奖金高于薪金的员工。<br>SELECT * FROM EMP WHERE COMM&gt;SAL;</td></tr><tr><td>24.查询出奖金高于薪金的 60%的员工。<br>SELECT * FROM EMP WHERE COMM&gt;0.6*SAL;</td></tr><tr><td>25.查询出部门 10 中所有经理（MANAGER）和部门 20 中所有办事员（CLERK）的详细资料。<br>SELECT * FROM EMP WHERE DEPTNO=10 AND JOB=’MANAGER’ OR DEPTNO=20 AND JOB=’CLERK’;<br>SELECT * FROM EMP WHERE DEPTNO=10 AND JOB=’MANAGER’ UNION SELECT * FROM EMP WHERE DEPTNO=20 AND JOB=’CLERK’;</td></tr><tr><td>26.查询出部门 10 中所有经理，部门 20 中所有办事员，既不是经理又不是办事员但其薪金大于或等于 2000  的所有员工的信息。<br>SELECT * FROM emp where (JOB=’MANAGER’ and deptno=10) OR  (job=’CLERK’ and deptno=20 ) OR (JOB!=’MANAGER’ and job!=’CLERK’  and sal&gt;=2000)；</td></tr><tr><td>27.查询出收取奖金的员工的不同工作。<br>SELECT DISTINCT JOB FROM EMP WHERE COMM IS NOT NULL;</td></tr><tr><td>28.查询出不收取奖金或收取的奖金低于  100 的员工。<br>SELECT * FROM EMP WHERE COMM IS NULL OR COMM&lt;100;<br>#WHERE COMM&lt;100  会过先滤掉空值，在比较</td></tr><tr><td>29.查询出不带有“R”的员工的姓名。<br>SELECT * FROM EMP WHERE ENAME NOT LIKE ‘%R%’;</td></tr><tr><td>30.查询出每个雇员的姓名、职位、领导姓名。<br>SELECT A.ENAME,A.JOB,B.ENAME FROM EMP A,EMP B WHERE A.MGR=B.EMPNO;#老板没有领导，这样写会少一条老板的记录<br>SELECT A.ENAME,A.JOB,B.ENAME FROM EMP A LEFT JOIN EMP B ON A.MGR=B.EMPNO;</td></tr><tr><td>31.查询出所有员工的编号、姓名及其直接上级的编号、姓名，显示的结果按领导年工资的降序排列。<br>SELECT A.EMPNO,A.ENAME,A.JOB,A.MGR,B.ENAME FROM EMP A LEFT JOIN EMP B ON A.MGR=B.EMPNO ORDER BY B.SAL DESC;</td></tr><tr><td>32.查询出在销售部（SALES）工作的员工姓名、基本工资、雇佣日期、部门名称。（不知道销售部编号）。<br>SELECT A.ENAME,A.SAL,A.HIREDATE,B.DNAME FROM EMP A,DEPT B WHERE A.DEPTNO=B.DEPTNO AND B.DNAME=’SALES’;</td></tr><tr><td>33.查询出所有员工的姓名、部门名称和工资。<br>SELECT A.ENAME,A.SAL,A.HIREDATE,B.DNAME FROM EMP A,DEPT B WHERE A.DEPTNO=B.DEPTNO;</td></tr><tr><td>34.查询出所有员工的年工资，所在部门名称，按年薪从低到高排序。<br>SELECT (A.SAL+IFNULL(A.COMM,0)) * 12 年薪,B.DNAME FROM EMP A,DEPT B WHERE A.DEPTNO=B.DEPTNO ORDER BY 年薪 DESC;</td></tr><tr><td>35.查询出某个员工的上级主管及所在部门名称，并要求出这些主管中的薪水超过  3000。<br>SELECT A.ENAME,B.ENAME,C.DNAME FROM EMP A LEFT JOIN EMP B ON A.MGR=B.EMPNO LEFT JOIN DEPT C ON A.DEPTNO=C.DEPTNO WHERE B.SAL&gt;3000;</td></tr><tr><td>36.查询出公司的最高和最低工资。<br>SELECT MAX(SAL),MIN(SAL) FROM EMP;</td></tr><tr><td>37.查询出每个部门的人数、平均工资，只显示部门编号。<br>SELECT DEPTNO,COUNT(1),AVG(SAL) FROM EMP GROUP BY DEPTNO;</td></tr><tr><td>38.查询出每种职位的最高和最低工资。<br>SELECT JOB,MAX(SAL),MIN(SAL) FROM EMP GROUP BY JOB;</td></tr><tr><td>39.查询平均工资高于 2000 的职位信息，以及从事此职位的雇员人数、平均工资。<br>SELECT JOB,COUNT(1),AVG(SAL) FROM EMP GROUP BY JOB HAVING AVG(SAL)&gt;2000;</td></tr><tr><td>40.查询员工编号大于其领导编号的每个员工的姓名、职位、领导名称。<br>SELECT A.ENAME,A.JOB,B.ENAME FROM EMP A LEFT JOIN EMP B ON A.MGR=B.EMPNO WHERE A.EMPNO&gt;A.MGR;<br>SELECT e.ename,e.job,p.ename,e.empno,p.empno FROM  emp AS e LEFT JOIN emp AS p ON e.mgr = p.empno  where  e.empno&gt;p.empno</td></tr><tr><td>*41 查询出至少有一个员工的所有部门编号、名称，并统计出这些部门的平均工资、最低工资、最高工资。<br>SELECT d.deptno,d.dname,avg(p.sal),min(p.sal),max(p.sal) FROM emp AS p join dept AS d ON p.deptno = d.deptno  GROUP BY d.deptno HAVING count(p.deptno)&gt;=1</td></tr><tr><td>*42.查询出部门名称和这些部门的员工信息（数量、平均工资），同时列出那些没有员工的部门。<br>SELECT d.dname,e.ename,count(e.empno),avg(e.sal) FROM dept AS d left JOIN emp AS e on d.deptno=e.deptno GROUP BY  d.deptno</td></tr><tr><td>43.查询工资比smith 更高的全部员工信息。<br>SELECT * FROM EMP WHERE SAL&gt;(SELECT SAL FROM EMP WHERE ENAME=’SMITH’);</td></tr><tr><td>44.查询工资和职位和smith 相同的所有员工信息。<br>select * from emp where (sal,job)=(select sal,job from emp where ename=’SMITH’);</td></tr><tr><td>*45.查询各部门的部门编号，部门名词，部门地址，员工人数和平均工资。<br>select d.deptno,d.dname,d.loc,count(e.empno),IFNULL(avg(e.sal),0) from dept AS d  left JOIN emp  AS e ON d.deptno=e.deptno GROUP BY d.deptno;</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>数据库练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件测试</title>
    <link href="/2019/11/19/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    <url>/2019/11/19/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1、软件测试一些概念"><a href="#1、软件测试一些概念" class="headerlink" title="1、软件测试一些概念"></a>1、软件测试一些概念</h3><p><strong>按是否查看程序内部结构分为</strong></p><p>黑盒测试（black-box testing）：只关心输入和输出的结果，黑盒测试分为功能测试和性能测试<br>白盒测试（white-box testing）：去研究里面的源代码和程序结构</p><p><strong>按是否运行程序分为：静态测试、动态测试</strong></p><p>静态测试（static testing）</p><p>是指不实际运行被测软件，而只是静态地检查程序代码、界面或文档可能存在的错误的过程。包括：</p><ul><li>对于代码测试，主要是测试代码是否符合相应的标准和规范。</li><li>对于界面测试，主要测试软件的实际界面与需求中的说明是否相符。</li><li>对于文档测试，主要测试用户手册和需求说明是否真正符合用户的实际需求。</li></ul><p>动态测试（dynamic testing）</p><p>是指实际运行被测程序，输入相应的测试数据，检查输出结果和预期结果是否相符的过程</p><p><strong>UT是单元测试，Unit Test；</strong></p><p>单元测试任务包括：1 模块接口测试；2 模块局部数据结构测试；3 模块边界条件测试；4 模块中所有独立执行通路测试；5 模块的各条错误处理通路测试。；</p><p><strong>IT是集成测试，Integration Test；</strong></p><p>集成测试阶段是以黑盒法为主，在自底向上集成的早期，白盒法测试占一定的比例，随着集成测试的不断深入，这种比例在测试过程中将越来越少，渐渐地，黑盒法测试占据主导地位。</p><p><strong>ST是系统测试，System Test；</strong></p><p>从技术角度看，系统测试是整个测试阶段的最后一步，所有的开发和测试在这一点上集中表现为生成一个具有一定功能的软件系统。该阶段主要对系统的准确性及完整性等方面进行测试。主要进行：功能确认测试、运行测试、强度测试、恢复测试、安全性测试等。系统测试的测试人员由测试组成员（或质量保证人员）或测试组成员与用户共同测试。在整个系统开发完成，即将交付用户使用前进行。在这一阶段，完全采用黑盒法对整个系统进行测试。</p><p><strong>UAT是验收测试，User Acceptance Test；</strong></p><p>验收测试是向未来的用户表明系统能够像预定要求那样工作。经集成测试后，已经按照设计把所有的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是验收测试的任务，即软件的功能和性能如同用户所合理期待的那样。 </p><p><strong>功能测试</strong></p><p>功能测试分三个阶段，第一个阶段自测，第二个阶段交叉测试，最后回归测试。交叉测试按字面意思理解就是把测试人员所测试的模块交换测试。回归测试是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。回归测试是指重复以前的全部或部分的相同测试，回归测试的重心，以关键性模组为核心。</p><h3 id="2、单元测试"><a href="#2、单元测试" class="headerlink" title="2、单元测试"></a>2、单元测试</h3><p>写了个类，要给别人用，会不会有bug？测试一下。</p><p>程序单元是应用的最小可测试部件。一个单元可能是单个程序、类、对象、方法等。</p><p>单元测试是保障业务代码质量的非常有效工具，也是提高代码可靠性的必要手段。单元测试是编写测试代码，应该准确、快速地保证程序基本模块的正确性。<br>用main方法测试的问题：不能一起运行，大多数情况下需要人为的观察输出确定是否正确。</p><p>减少Bug、快速定位Bug减少调试时间、提高代码质量、性能测试、放心重构</p><h4 id="2-1、Junit4入门"><a href="#2-1、Junit4入门" class="headerlink" title="2.1、Junit4入门"></a>2.1、Junit4入门</h4><p>JUnit是一个单元测试框架，我们可以基于它编写用来测试代码的代码，从而更方便地进行回归测试。</p><h5 id="2-1-1、导包"><a href="#2-1-1、导包" class="headerlink" title="2.1.1、导包"></a>2.1.1、导包</h5><p><strong>Eclipse</strong>自带junit包，也可导入最新的Junit包，最好是自己导入的最新的包。<a href="https://github.com/junit-team/junit4/wiki/Download-and-Install">junit4传送门</a></p><p><strong>IntelliJ IDEA</strong>创建Maven项目，添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-1-2、新建一个Test类"><a href="#2-1-2、新建一个Test类" class="headerlink" title="2.1.2、新建一个Test类"></a>2.1.2、新建一个Test类</h5><p><strong>Eclipse：</strong>New–&gt;JunitTest Case–&gt;在Junit Test Case界面中，选New Junit 4 test , Name一般为要被测试的类名+Test,Class under test可以选对哪个类进行测试、对这个类的哪些方法测试。–&gt;Finish</p><p><strong>IntelliJ IDEA</strong>：</p><p>写一个方法类，定义两个方法实现两个数的相加和相减运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JunitDemo</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span>  b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">subtract</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span>  b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a-b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下写我们的测试类：</p><p><code>assertEquals</code>方法第一个参数是预期的值，第二个参数就是调用类的方法。如果调用结果和预期不一样就会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JunitTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//测试方法必须用@Test修饰</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//测试方法必须用public void修饰，不能带参数</span><br>        assertEquals(<span class="hljs-number">6</span>, <span class="hljs-keyword">new</span> JunitDemo().add(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>));<br>    &#125;<br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//测试方法必须用@Test修饰</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSubtract</span><span class="hljs-params">()</span></span>&#123;<br>        assertEquals(<span class="hljs-number">20</span>, <span class="hljs-keyword">new</span> JunitDemo().subtract(<span class="hljs-number">30</span>, <span class="hljs-number">10</span>));<br>    &#125;<br>    <span class="hljs-comment">//每个测试方法必须可以单独测试，各方法间不要有依赖。</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-3、测试的类和开发的类分开放"><a href="#2-1-3、测试的类和开发的类分开放" class="headerlink" title="2.1.3、测试的类和开发的类分开放"></a>2.1.3、测试的类和开发的类分开放</h5><p>测试类应有单独源代码目录，不要和业务代码放在一起。</p><p>建议测试类放在test包中，使用<code>Test作为类名的后缀</code>,测试方法使用<code>test作为方法名的前缀</code>，如测试类JunitTest和测试方法testAdd。</p><p><img src="/2019/11/19/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/junitdemo.png"></p><h5 id="2-1-4、静态引入"><a href="#2-1-4、静态引入" class="headerlink" title="2.1.4、静态引入"></a>2.1.4、静态引入</h5><p>比如import static org.junit.Assert.*; 静态引入一个类，类里面有很多静态方法，可以直接调用这个类里面的静态方法，而不用在其前面加 ‘类名.’</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JunitTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//测试方法必须用@Test修饰</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//测试方法必须用public void修饰，不能带参数</span><br>        assertEquals(<span class="hljs-number">6</span>, <span class="hljs-keyword">new</span> JunitDemo().add(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>));<br>    &#125;<br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//测试方法必须用@Test修饰</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSubtract</span><span class="hljs-params">()</span></span>&#123;<br>        assertEquals(<span class="hljs-number">20</span>, <span class="hljs-keyword">new</span> JunitDemo().subtract(<span class="hljs-number">30</span>, <span class="hljs-number">10</span>));<br>    &#125;<br>    <span class="hljs-comment">//每个测试方法必须可以单独测试，各方法间不要有依赖。</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-5、运行测试"><a href="#2-1-5、运行测试" class="headerlink" title="2.1.5、运行测试"></a>2.1.5、运行测试</h5><p><strong>Eclipse：</strong>可以在测试类上或测试方法–&gt;右键–&gt;Run As–&gt;Junit Test</p><p><strong>IntelliJ IDEA：</strong>详见2.1.3图</p><h5 id="2-1-6、测试结果"><a href="#2-1-6、测试结果" class="headerlink" title="2.1.6、测试结果"></a>2.1.6、测试结果</h5><p><strong>Eclipse：</strong></p><p><code>测试通过</code></p><p><img src="/2019/11/19/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/junits.png"></p><p><code>测试失败</code></p><p><img src="/2019/11/19/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/junitf.png"></p><p><strong>IntelliJ IDEA：</strong>详见2.1.3图。</p><p>JUnit 将测试失败的情况分为两种：<code>failure</code>和 <code>error</code>。Failure 一般由单元测试使用的<code>断言方法判断失败引起</code>，它表示在测试点发现了问题；而 error 则是由<code>代码异常引起</code>，这是测试目的之外的发现，它可能产生于<code>测试代码本身</code>的错误，也可能是<code>被测试代码</code>中的一个隐藏的 bug。</p><h5 id="2-1-7、Assert断言"><a href="#2-1-7、Assert断言" class="headerlink" title="2.1.7、Assert断言"></a>2.1.7、Assert断言</h5><p>①Assert类里面有很多静态方法，查阅相关文档：<a href="https://junit.org/junit4/javadoc/latest/org/junit/Assert.html">https://junit.org/junit4/javadoc/latest/org/junit/Assert.html</a></p><p>②有的函数的第一个参数String message在断言没有通过，会显示出来，用来自定义提示错误。</p><p>列如：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">assert</span><span class="hljs-constructor">Equals(String <span class="hljs-params">message</span>, <span class="hljs-params">double</span> <span class="hljs-params">expected</span>, <span class="hljs-params">double</span> <span class="hljs-params">actual</span>)</span><br></code></pre></td></tr></table></figure><p><code>③assertThat可以替代其他所有的assert</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">assert</span><span class="hljs-constructor">That(T <span class="hljs-params">actual</span>,<span class="hljs-params">org</span>.<span class="hljs-params">hamcrest</span>.Matcher&lt;T&gt; <span class="hljs-params">matcher</span>)</span>    <br><span class="hljs-keyword">assert</span><span class="hljs-constructor">That(String <span class="hljs-params">reason</span>,T <span class="hljs-params">actual</span>,<span class="hljs-params">org</span>.<span class="hljs-params">hamcrest</span>.Matcher&lt;T&gt; <span class="hljs-params">matcher</span>)</span>    <br></code></pre></td></tr></table></figure><p>需要hamcrest-cose-x.jar和hamcrest-library-x.jar，使用了这两个包后，junit包最好不要用eclipse自带的，会出错。包的下载地址：[hamcrest传送门](<a href="http://search.maven.org/#search|ga|1|g%3Aorg.hamcrest">http://search.maven.org/#search|ga|1|g%3Aorg.hamcrest</a>    hamcrest)</p><p>hamcrest帮助文档<a href="http://hamcrest.org/JavaHamcrest/javadoc/2.0.0.0/">http://hamcrest.org/JavaHamcrest/javadoc/2.0.0.0/</a>    </p><p>Matcher常用的方法见文章第四大点</p><h4 id="2-2、Junit4注解"><a href="#2-2、Junit4注解" class="headerlink" title="2.2、Junit4注解"></a>2.2、Junit4注解</h4><blockquote><p>@Test：讲一个普通方法修饰为测试方法<br>@BeforeClass：在所有方法执行前执行一次<br>@Before：在每一个方法执行前执行一次<br>@After：在每一个方法执行后执行一次<br>@AfterClass：在所有方法执行后执行一次。<br>@Ignore：修饰的方法会在测试运行时被忽略<br>@RunWith：修改测试运行器</p></blockquote><h5 id="2-2-1、-Test：测试方法"><a href="#2-2-1、-Test：测试方法" class="headerlink" title="2.2.1、@Test：测试方法"></a>2.2.1、@Test：测试方法</h5><p>@Test表示是测试方法，测试方法必须使用注解 <code>org.junit.Test </code>修饰。测试方法必须使用 public void 修饰，而且不能带有任何参数。</p><p><strong>异常以及时间测试</strong></p><p>注解<code>org.junit.Test</code>中有两个非常有用的参数：<code>expected</code> 和 <code>timeout</code>。</p><p>参数 <strong>expected</strong> 代表测试方法期望抛出指定的异常，如果运行测试并没有抛出这个异常，则JUnit 会认为这个测试没有通过。这为验证被测试方法在错误的情况下是否会抛出预定的异常提供了便利。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//当测试方法抛出NullPointerException时测试成功  </span><br><span class="hljs-variable">@Test</span>(expected = NullPointerException.class) <br><br><span class="hljs-comment">//如果代码里抛出了不止一处错误，不好区分，可以使用JUnit的ExpectedException Rule来解决</span><br><span class="hljs-variable">@Rule</span>  <br>public ExpectedException expectedException = ExpectedException.none();  <br></code></pre></td></tr></table></figure><p>另一个参数 <strong>timeout</strong>，指定被测试方法被允许运行的最长时间应该是多少，如果测试方法运行时间超过了指定的毫秒数，则 JUnit 认为测试失败。这个参数对于性能测试有一定的帮助。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//设置1000ms的超时时间，当超过这个时间测试还没执行完毕则失败  </span><br><span class="hljs-variable">@Test</span>(timeout = <span class="hljs-number">1000</span>) <br><br><span class="hljs-comment">//使用Timeout Rule设定全局的超时时间</span><br><span class="hljs-variable">@Rule</span>  <br>public Timeout timeout = new Timeout(<span class="hljs-number">1000</span>);  <br></code></pre></td></tr></table></figure><h5 id="2-2-3、忽略测试方法"><a href="#2-2-3、忽略测试方法" class="headerlink" title="2.2.3、忽略测试方法"></a>2.2.3、忽略测试方法</h5><p>注解 <code>org.junit.Ignore</code> 用于暂时忽略某个测试方法，因为有时候由于测试环境受限，并不能保证每一个测试方法都能正确运行。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//忽略该测试，参数为输出信息  </span><br><span class="hljs-meta">@Ignore(<span class="hljs-meta-string">&quot;Temporary ignored as no changes.&quot;</span>)</span>  <br></code></pre></td></tr></table></figure><p>执行类里的所有测试，会输出以下信息，表示该测试被忽略了。</p><blockquote><p>…… ,ignored (Temporary ignored as no changes.)</p></blockquote><h5 id="2-2-4、Fixture"><a href="#2-2-4、Fixture" class="headerlink" title="2.2.4、Fixture"></a>2.2.4、Fixture</h5><p>Fixture是指在执行一个或者多个测试方法时需要的一系列公共资源或者数据，例如测试环境，测试数据等等。JUnit 专门提供了设置公共 Fixture 的方法，同一测试类中的所有测试方法都可以共用它来初始化 Fixture 和注销 Fixture。</p><p>①方法级别的Fixture：</p><p>使用注解<code> org,junit.Before</code> 修饰用于<code>初始化 Fixture 的方法</code>。每一个测试方法之前运行使用注解 <code>org.junit.After </code>修饰用于<code>注销 Fixture 的方法</code>。每一个测试方法之后运行保证这两种方法都使用 public void 修饰，而且不能带有任何参数。</p><p>②类级别的 Fixture</p><p>使用注解<code>org,junit.BeforeClass</code>修饰用于初始Fixture 的方法。所有测试方法开始之前运行，它比较适合加载配置文件,进行初始化等等使用注解<code>org.junit.AfterClass</code>修饰用于注销 Fixture 的方法。所有测试方法开始之后运行，通常用来对资源的清理,如关闭数据库的连接保证这两种方法都使用 public static void 修饰，而且不能带有任何参数。</p><h5 id="2-2-5、测试运行器"><a href="#2-2-5、测试运行器" class="headerlink" title="2.2.5、测试运行器"></a>2.2.5、测试运行器</h5><p>可以定制自己的运行器（所有的运行器都继承自<code>org.junit.runner.Runner</code>）使用注解 <code>org.junit.runner.RunWith</code> 在测试类上显式的声明要使用的运行器</p><h5 id="2-2-6、测试套件"><a href="#2-2-6、测试套件" class="headerlink" title="2.2.6、测试套件"></a>2.2.6、测试套件</h5><p>Unit 提供的一种批量（一次执行多个测试类）运行测试类的方法，测试套件的写法遵循以下规则：</p><p>​    ①创建一个空类作为测试套件的入口。</p><p>​    ②使用注解<code>org.junit.runner.RunWith</code>和<code>org.junit.runners.Suite.SuiteClasses</code>修饰这个空类。</p><p>​    ③将<code>org.junit.runners.Suite</code>作为参数传入注解 RunWith，以提示 JUnit 为此类使用套件运行器执行。</p><p>​    ④将需要放入此测试套件的测试类组成数组作为注解 SuiteClasses 的参数。</p><p>​    ⑤保证这个空类使用 public 修饰，而且存在公开的不带有任何参数的构造函数。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.junit.runners.Suite;<br><br><span class="hljs-keyword">@RunWith</span>(Suite.<span class="hljs-keyword">class</span>)  <br><span class="hljs-keyword">@Suite</span>.SuiteClasses(&#123;TaskTest1.<span class="hljs-keyword">class</span>,TaskTest2.<span class="hljs-keyword">class</span>,...&#125;)  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> SuiteTest &#123; ... &#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-7、多个测试类同时运行"><a href="#2-2-7、多个测试类同时运行" class="headerlink" title="2.2.7、多个测试类同时运行"></a>2.2.7、多个测试类同时运行</h5><p>选择任意一个测试类–&gt;Run As–&gt;RunConfigurations–&gt;选择Run all tests in the selected project, package or source folder–&gt;Run</p><h5 id="2-2-8、参数化测试"><a href="#2-2-8、参数化测试" class="headerlink" title="2.2.8、参数化测试"></a>2.2.8、参数化测试</h5><p>参数化测试将测试方法中相同的代码结构提取出来，提高代码的重用度。参数化测试的编写：</p><p>​    ①为准备使用参数化测试的测试类指定特殊的运行器 <code>org.junit.runners.Parameterized</code>。</p><p>​    ②为测试类声明几个变量，分别用于存放期望值和测试所用数据。</p><p>​    ③为测试类声明一个使用注解<code>org.junit.runners.Parameterized.Parameters</code>修饰的，返回值为<code>java.util.Collection</code>的公共静态方法，并在此方法中初始化所有需要测试的参数对。</p><p>​    ④为测试类声明一个带有参数的公共构造函数，并在其中为第二个环节中声明的几个变量赋值。        ⑤编写测试方法，使用定义的变量作为参数进行测试。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 第一步</span><br><span class="hljs-meta">@RunWith</span>(Parameterized.class)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestWordDealUtilWithParam</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-comment">// 第二步</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> expected;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> target;<br><span class="hljs-comment">// 第三步</span><br><span class="hljs-meta">@Parameters</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Collection words()<br>&#123;<br><span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>[][]<br>&#123;<br>&#123; <span class="hljs-string">&quot;employee_info&quot;</span>, <span class="hljs-string">&quot;employeeInfo&quot;</span> &#125;, <span class="hljs-comment">// 测试一般的处理情况</span><br>&#123; <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span> &#125;, <span class="hljs-comment">// 测试 null 时的处理情况</span><br>&#125;);<br>&#125;<br><span class="hljs-comment">// 第四步</span><br><span class="hljs-keyword">public</span> TestWordDealUtilWithParam(<span class="hljs-built_in">String</span> expected, <span class="hljs-built_in">String</span> target)<br>&#123;<br><span class="hljs-built_in">this</span>.expected = expected;<br><span class="hljs-built_in">this</span>.target = target;<br>&#125;<br><span class="hljs-comment">// 第五步</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> wordFormat4DB()<br>&#123;<br>assertEquals(expected, WordDealUtil.wordFormat4DB(target));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3、assertThat"><a href="#2-3、assertThat" class="headerlink" title="2.3、assertThat"></a>2.3、assertThat</h4><h5 id="2-3-1、一般匹配符"><a href="#2-3-1、一般匹配符" class="headerlink" title="2.3.1、一般匹配符"></a>2.3.1、一般匹配符</h5><p>1、assertThat( testedNumber, allOf( greaterThan(8), lessThan(16) ) );</p><p>注释： allOf匹配符表明如果接下来的所有条件必须都成立测试才通过，相当于“与”（&amp;&amp;）</p><p>2、assertThat( testedNumber, anyOf( greaterThan(16), lessThan(8) ) );</p><p>注释：anyOf匹配符表明如果接下来的所有条件只要有一个成立则测试通过，相当于“或”（||）</p><p>3、assertThat( testedNumber, anything() );</p><p>注释：anything匹配符表明无论什么条件，永远为true</p><p>4、assertThat( testedString, is( “developerWorks” ) );</p><p>注释： is匹配符表明如果前面待测的object等于后面给出的object，则测试通过</p><p>5、assertThat( testedString, not( “developerWorks” ) );</p><p>注释：not匹配符和is匹配符正好相反，表明如果前面待测的object不等于后面给出的object，则测试通过</p><h5 id="2-3-2、字符串相关匹配符"><a href="#2-3-2、字符串相关匹配符" class="headerlink" title="2.3.2、字符串相关匹配符"></a>2.3.2、字符串相关匹配符</h5><p>1、assertThat( testedString, containsString( “developerWorks” ) );</p><p>注释：containsString匹配符表明如果测试的字符串testedString包含子字符串”developerWorks”则测试通过</p><p>2、assertThat( testedString, endsWith( “developerWorks” ) ); </p><p>注释：endsWith匹配符表明如果测试的字符串testedString以子字符串”developerWorks”结尾则测试通过</p><p>3、assertThat( testedString, startsWith( “developerWorks” ) ); </p><p>注释：startsWith匹配符表明如果测试的字符串testedString以子字符串”developerWorks”开始则测试通过</p><p>4、assertThat( testedValue, equalTo( expectedValue ) ); </p><p>注释： equalTo匹配符表明如果测试的testedValue等于expectedValue则测试通过，equalTo可以测试数值之间，字符串之间和对象之间是否相等，相当于Object的equals方法</p><p>5、assertThat( testedString, equalToIgnoringCase( “developerWorks” ) ); </p><p>注释：equalToIgnoringCase匹配符表明如果测试的字符串testedString在忽略大小写的情况下等于”developerWorks”则测试通过</p><p>6、assertThat( testedString, equalToIgnoringWhiteSpace( “developerWorks” ) );</p><p>注释：equalToIgnoringWhiteSpace匹配符表明如果测试的字符串testedString在忽略头尾的任意个空格的情况下等于”developerWorks”则测试通过，注意：字符串中的空格不能被忽略</p><h5 id="2-3-3、数值相关匹配符"><a href="#2-3-3、数值相关匹配符" class="headerlink" title="2.3.3、数值相关匹配符"></a>2.3.3、数值相关匹配符</h5><p>1、assertThat( testedDouble, closeTo( 20.0, 0.5 ) );</p><p>注释：closeTo匹配符表明如果所测试的浮点型数testedDouble在20.0±0.5范围之内则测试通过</p><p>2、assertThat( testedNumber, greaterThan(16.0) );</p><p>注释：greaterThan匹配符表明如果所测试的数值testedNumber大于16.0则测试通过</p><p>3、assertThat( testedNumber, lessThan (16.0) );</p><p>注释：lessThan匹配符表明如果所测试的数值testedNumber小于16.0则测试通过</p><p>4、assertThat( testedNumber, greaterThanOrEqualTo (16.0) );</p><p>注释： greaterThanOrEqualTo匹配符表明如果所测试的数值testedNumber大于等于16.0则测试通过</p><p>5、assertThat( testedNumber, lessThanOrEqualTo (16.0) );</p><p>注释：lessThanOrEqualTo匹配符表明如果所测试的数值testedNumber小于等于16.0则测试通过</p><h5 id="2-3-4、collection相关匹配符"><a href="#2-3-4、collection相关匹配符" class="headerlink" title="2.3.4、collection相关匹配符"></a>2.3.4、collection相关匹配符</h5><p>1、assertThat( mapObject, hasEntry( “key”, “value” ) );</p><p>注释：hasEntry匹配符表明如果测试的Map对象mapObject含有一个键值为”key”对应元素值为”value”的Entry项则测试通过</p><p>2、assertThat( iterableObject, hasItem ( “element” ) );</p><p>注释：hasItem匹配符表明如果测试的迭代对象iterableObject含有元素“element”项则测试通过</p><p>3、assertThat( mapObject, hasKey ( “key” ) );</p><p>注释： hasKey匹配符表明如果测试的Map对象mapObject含有键值“key”则测试通过</p><p>4、assertThat( mapObject, hasValue ( “key” ) );</p><p>注释：hasValue匹配符表明如果测试的Map对象mapObject含有元素值“value”则测试通过</p><p><a href="https://blog.csdn.net/qq_43520650/article/details/101308036">https://blog.csdn.net/qq_43520650/article/details/101308036</a></p>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库</title>
    <link href="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h3 id="1、数据库介绍"><a href="#1、数据库介绍" class="headerlink" title="1、数据库介绍"></a>1、数据库介绍</h3><h4 id="1-1、数据库发展历史"><a href="#1-1、数据库发展历史" class="headerlink" title="1.1、数据库发展历史"></a>1.1、数据库发展历史</h4><p>通常按照<strong>数据模型</strong>的特点将传统数据库系统分成<strong>网状数据库</strong>（Network database）、<strong>层次数据库</strong>（Hierarchical database）和<strong>关系数据库</strong>（Relational database）三类。</p><p>最早出现的是<strong>网状DBMS</strong>，是美国通用电气公司Bachman等人在1961年开发成功的<strong>IDS</strong>（IntegratedData Store）。</p><p>IBM 公司在1968 年开发的<strong>IMS</strong>（InformationManagement System），一种适合其主机的<strong>层次数据库</strong>。</p><p>网状数据库模型对于层次和非层次结构的事物都能比较自然的模拟，在关系数据库出现之前网状DBMS要比层次DBMS用得普遍。在数据库发展史上，网状数据库占有重要地位。层次型DBMS是紧随网络型数据库而出现的。</p><p>网状数据库和层次数据库已经很好地解决了数据的集中和共享问题，但是在<strong>数据独立性</strong>和<strong>抽象级别</strong>上仍有很大欠缺。为了解决这个问题，关系型数据库就诞生了。代表作：oracle、db2等</p><p>事实上关系型数据库也有缺点，就是针对复杂类型的数据的处理不太擅长。也就是当前<strong>大数据阶段</strong>，也可以称呼为<strong>后关系型数据库阶段</strong>。</p><p>面向对象型的关系型数据库和非关系型数据库【NOSQL】，前者不太成熟，后者发展势头很好。</p><p>常见的NoSQL数据库分为四大类：</p><blockquote><p>1):键值存储数据库：Oracle BDB,<strong>Redis</strong>,BeansDB</p><p>2):列式储数数据库：HBase,Cassandra,Riak</p><p>3):文档型数据库：<strong>MongoDB</strong>,CouchDB</p><p>4):图形数据库：Neo4J,InfoGrid,Infinite Graph</p></blockquote><p>当前我们主要学习的是<strong>关系型数据库</strong>，那么常见的关系型数据库有哪些呢？</p><table><thead><tr><th>系统</th><th>公司</th><th>特点</th></tr></thead><tbody><tr><td>Oracle</td><td>Oracle(甲骨文/神域)   Kolina</td><td>运行稳定，可移植性高，功能齐全，性能超群！适用于大型企业领域</td></tr><tr><td>DB2</td><td>IBM</td><td>速度快、可靠性好，适于海量数据，恢复性极强。适用于大中型企业领域。</td></tr><tr><td>SQL SERVER</td><td>微软</td><td>全面，效率高，界面友好，操作容易，但是不跨平台。适用于于中小型企业领域。</td></tr><tr><td>MYSQL</td><td>AB–&gt;SUN–&gt;Oracle</td><td>开源，体积小，速度快。适用于于中小型企业领域。</td></tr></tbody></table><h4 id="1-2、数据库-DataBase：DB"><a href="#1-2、数据库-DataBase：DB" class="headerlink" title="1.2、数据库(DataBase：DB)"></a>1.2、数据库(DataBase：<strong>DB</strong>)</h4><p>物理层面讲，数据库是按照数据结构来组织、存储和管理数据的仓库，也就是存储和管理数据的仓库。通常是由一些文件组成，毕竟数据最终是需要落实到实体文件上才能保存。物理构成详见下图：</p><p><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/db.png"></p><h4 id="1-3、数据库管理系统（Database-Management-System：DBMS）"><a href="#1-3、数据库管理系统（Database-Management-System：DBMS）" class="headerlink" title="1.3、数据库管理系统（Database Management System：DBMS）"></a>1.3、数据库管理系统（Database Management System：<strong>DBMS</strong>）</h4><p>软件层面讲，专门用于管理数据库的计算机系统<strong>软件</strong>。数据库管理系统能够为数据库提供数据的定义、建立、维护、查询和统计等操作功能，并完成对数据完整性、安全性进行控制的功能。</p><p><strong>注意：</strong>我们通常说的数据库，就是指的<strong>DBMS</strong>: 数据库服务器</p><p>我们马上要学习的MySql以就个维护数据库管理系统</p><p>概念见下图：</p><p><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/dbms.png"></p><h4 id="1-4、数据表"><a href="#1-4、数据表" class="headerlink" title="1.4、数据表"></a>1.4、数据表</h4><p>名词解释的时候，我们明确了数据库其实是由实质性的文件组成，这是在物理层面，那么在DBMS系统中，这些存储在文件中的数据又是怎么展现出来的呢？其实在DBMS中，我们是通过表来展示这些数据的。</p><p>见下图：</p><p><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/table.png"></p><p>二维表是同类实体的各种属性的集合，每个实体对应于表中的一行，在关系中称为元组（元组就是指表中每一行），相当于通常的一条记录；</p><p>表中的表头表示属性，称为Field，相当于通常记录中的一个数据项，也叫列、字段。</p><h4 id="1-5、数据库、表、数据之间在软件中的关系："><a href="#1-5、数据库、表、数据之间在软件中的关系：" class="headerlink" title="1.5、数据库、表、数据之间在软件中的关系："></a>1.5、数据库、表、数据之间在软件中的关系：</h4><p><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/dbs.png"></p><h4 id="1-6、数据库应用系统（Database-Application-System：DBAS）"><a href="#1-6、数据库应用系统（Database-Application-System：DBAS）" class="headerlink" title="1.6、数据库应用系统（Database Application System：DBAS）"></a>1.6、数据库应用系统（Database Application System：<strong>DBAS</strong>）</h4><p>使用数据库技术的系统；也就是研发出的<strong>软件</strong>使<strong>用的有数据库</strong>，都称之为数据库应用系统</p><p><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/dbas.png"></p><h3 id="2、表关系设计"><a href="#2、表关系设计" class="headerlink" title="2、表关系设计"></a>2、表关系设计</h3><p>本节的核心是如何将现实中的关系使用表格的主键、外键、唯一键表达出来。</p><p>在表的关系里：一对一；多对一，一对多；多对多。</p><p>在做表设计的时候：首先分析对象之间的关系，然后去套用我们讲的三种关系的表的设计。</p><h4 id="2-1、关系"><a href="#2-1、关系" class="headerlink" title="2.1、关系"></a>2.1、关系</h4><p>这个点对我们后面学习<code>JPA</code>会有比较大的影响。  </p><p>一对一 ：学号和学生</p><p>多对一|一对多 ：学生与院系（一个学生是属于一个院系，一个院系可以包含多个学生）</p><p>多对多 ：老师与学生 一个老师会教多个学生，一个学生有多个老师教</p><h4 id="2-2、关系设计套路"><a href="#2-2、关系设计套路" class="headerlink" title="2.2、关系设计套路"></a>2.2、关系设计套路</h4><h5 id="2-2-1、一对一设计"><a href="#2-2-1、一对一设计" class="headerlink" title="2.2.1、一对一设计"></a>2.2.1、一对一设计</h5><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/11.png"><h5 id="2-2-2、多对一or一对多"><a href="#2-2-2、多对一or一对多" class="headerlink" title="2.2.2、多对一or一对多"></a>2.2.2、多对一or一对多</h5><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/1n.png" style="zoom:150%;"><h5 id="2-2-3、多对多设计"><a href="#2-2-3、多对多设计" class="headerlink" title="2.2.3、多对多设计"></a>2.2.3、多对多设计</h5><img src="/2019/11/18/%E6%95%B0%E6%8D%AE%E5%BA%93/nn.png" style="zoom:150%;"><h3 id="3、数据库三范式"><a href="#3、数据库三范式" class="headerlink" title="3、数据库三范式"></a>3、数据库三范式</h3><p>第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</p><p> 是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。</p><p>一张表有固定的列与不定的行，每列名称不能重复且只存在一个值</p><p>第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。</p><p>要求每张表必需要有主键</p><p>第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p><p>外键关联，只能存关连表的主键(唯一)信息</p><p>反三范式设计（根据特定的场景来提高查询效率，当然也有风险）</p><h3 id="4、数据库字段类型与Java语言数据类型的对应"><a href="#4、数据库字段类型与Java语言数据类型的对应" class="headerlink" title="4、数据库字段类型与Java语言数据类型的对应"></a>4、数据库字段类型与Java语言数据类型的对应</h3><table><thead><tr><th align="left"><strong>JDBC 类型</strong></th><th align="left"><strong>Java 类型</strong></th></tr></thead><tbody><tr><td align="left"><code>CHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>VARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>LONGVARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>NUMERIC</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>DECIMAL</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>BIT</code></td><td align="left"><code>boolean</code></td></tr><tr><td align="left"><code>TINYINT</code></td><td align="left"><code>byte</code></td></tr><tr><td align="left"><code>SMALLINT</code></td><td align="left"><code>short</code></td></tr><tr><td align="left"><code>INTEGER</code></td><td align="left"><code>int</code></td></tr><tr><td align="left"><code>BIGINT</code></td><td align="left"><code>long</code></td></tr><tr><td align="left"><code>REAL</code></td><td align="left"><code>float</code></td></tr><tr><td align="left"><code>FLOAT</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>DOUBLE</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>BINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>VARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>LONGVARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>DATE</code></td><td align="left"><code>java.sql.Date</code></td></tr><tr><td align="left"><code>TIME</code></td><td align="left"><code>java.sql.Time</code></td></tr><tr><td align="left"><code>TIMESTAMP</code></td><td align="left"><code>java.sql.Timestamp</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库原理及应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub上传ssh-key</title>
    <link href="/2019/11/17/GitHub%E4%B8%8A%E4%BC%A0ssh-key/"/>
    <url>/2019/11/17/GitHub%E4%B8%8A%E4%BC%A0ssh-key/</url>
    
    <content type="html"><![CDATA[<h4 id="1、给git添加-ssh-key"><a href="#1、给git添加-ssh-key" class="headerlink" title="1、给git添加 ssh-key"></a>1、给git添加 ssh-key</h4><p><img src="/2019/11/17/GitHub%E4%B8%8A%E4%BC%A0ssh-key/yuanli.png" alt="1"></p><h5 id="1-1、查看是否C-Users-USERNAME-ssh目录，以及该目录下是否有生成的key"><a href="#1-1、查看是否C-Users-USERNAME-ssh目录，以及该目录下是否有生成的key" class="headerlink" title="1.1、查看是否C:\Users\USERNAME\.ssh目录，以及该目录下是否有生成的key"></a>1.1、查看是否<code>C:\Users\USERNAME\.ssh</code>目录，以及该目录下是否有生成的key</h5><p><img src="/2019/11/17/GitHub%E4%B8%8A%E4%BC%A0ssh-key/dirssh.png" alt="1"></p><p>若没有则生成一个ssh-key</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;email@mail.com&quot;</span><br></code></pre></td></tr></table></figure><h5 id="1-2、将-ssh-id-rsa-pub内容加入你的github中"><a href="#1-2、将-ssh-id-rsa-pub内容加入你的github中" class="headerlink" title="1.2、将.~/ssh/id_rsa.pub内容加入你的github中"></a>1.2、将.~/ssh/id_rsa.pub内容加入你的github中</h5><p><img src="/2019/11/17/GitHub%E4%B8%8A%E4%BC%A0ssh-key/githubssh.png" alt="1"></p><h5 id="1-3、设置你的git用户名及邮箱"><a href="#1-3、设置你的git用户名及邮箱" class="headerlink" title="1.3、设置你的git用户名及邮箱"></a>1.3、设置你的git用户名及邮箱</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;name&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;email@mail.com&quot;</span><br></code></pre></td></tr></table></figure><h5 id="1-6、测试你的ssh-key"><a href="#1-6、测试你的ssh-key" class="headerlink" title="1.6、测试你的ssh-key"></a>1.6、测试你的ssh-key</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><p>输入yes后若显示以下内容，则代表成功</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Hi xxx! You’ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access. <br></code></pre></td></tr></table></figure><h4 id="2、解决github上传ssh-key后仍须输入密码的问题"><a href="#2、解决github上传ssh-key后仍须输入密码的问题" class="headerlink" title="2、解决github上传ssh-key后仍须输入密码的问题"></a>2、解决github上传ssh-key后仍须输入密码的问题</h4><p>这种情况绝大多数是因为用的是<code>https</code>而不是<code>ssh</code>，更新为<code>ssh</code>格式<br> <code>HTTPS</code>的格式为：<code>https://github.com/用户名/仓库名.git</code><br> <code>SSH</code>的格式为：<code>git@github.com:用户名/仓库名.git</code></p><p>2.1、这种事情通常发生在更换机器后克隆自己仓库的时候，通常我们会使用https方式克隆</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Name/</span>project.git<br></code></pre></td></tr></table></figure><p>2.2、这样便会在你git push时候要求输入用户名和密码<br>解决的方法是使用ssh方式克隆仓库</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:Name/project.git<br></code></pre></td></tr></table></figure><p>2.3、当如，如果你已经用https方式克隆了仓库，就不必删除仓库重新克隆，只需将本地仓库 .git/config文件中的 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url = https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Name/</span>project.git <br></code></pre></td></tr></table></figure><p>一行改为 </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">url</span> = git@github.com:Name/project.git <br></code></pre></td></tr></table></figure><p>即可。</p><p>来自苏生不惑问题及热心驻圈大佬的解答：<a href="https://segmentfault.com/q/1010000000599327">设置ssh key后push为什么还要输入用户名和密码</a></p><p><img src="/GitHub%E4%B8%8A%E4%BC%A0ssh-key/http_s.png" alt="1"></p><p><a href="https://blog.csdn.net/GreatTang/article/details/88431737">https://blog.csdn.net/GreatTang/article/details/88431737</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>ssh-key</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/11/16/MySQL/"/>
    <url>/2019/11/16/MySQL/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left"><strong>JDBC 类型</strong></th><th align="left"><strong>Java 类型</strong></th></tr></thead><tbody><tr><td align="left"><code>CHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>VARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>LONGVARCHAR</code></td><td align="left"><code>String</code></td></tr><tr><td align="left"><code>NUMERIC</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>DECIMAL</code></td><td align="left"><code>java.math.BigDecimal</code></td></tr><tr><td align="left"><code>BIT</code></td><td align="left"><code>boolean</code></td></tr><tr><td align="left"><code>TINYINT</code></td><td align="left"><code>byte</code></td></tr><tr><td align="left"><code>SMALLINT</code></td><td align="left"><code>short</code></td></tr><tr><td align="left"><code>INTEGER</code></td><td align="left"><code>int</code></td></tr><tr><td align="left"><code>BIGINT</code></td><td align="left"><code>long</code></td></tr><tr><td align="left"><code>REAL</code></td><td align="left"><code>float</code></td></tr><tr><td align="left"><code>FLOAT</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>DOUBLE</code></td><td align="left"><code>double</code></td></tr><tr><td align="left"><code>BINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>VARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>LONGVARBINARY</code></td><td align="left"><code>byte[]</code></td></tr><tr><td align="left"><code>DATE</code></td><td align="left"><code>java.sql.Date</code></td></tr><tr><td align="left"><code>TIME</code></td><td align="left"><code>java.sql.Time</code></td></tr><tr><td align="left"><code>TIMESTAMP</code></td><td align="left"><code>java.sql.Timestamp</code></td></tr></tbody></table><h3 id="1、安装MySQL"><a href="#1、安装MySQL" class="headerlink" title="1、安装MySQL"></a>1、安装MySQL</h3><p><img src="/2019/11/16/MySQL/MySQL.png" alt="1"></p><h3 id="2、数据库引擎"><a href="#2、数据库引擎" class="headerlink" title="2、数据库引擎"></a>2、数据库引擎</h3><h4 id="2-1、数据库引擎有两种："><a href="#2-1、数据库引擎有两种：" class="headerlink" title="2.1、数据库引擎有两种："></a>2.1、数据库引擎有两种：</h4><p>InnoDB:        支持事务的引擎(安全)</p><p>MyISAM：    不支持事务的引擎(速度更快)</p><h4 id="2-2、数据库引擎的选择"><a href="#2-2、数据库引擎的选择" class="headerlink" title="2.2、数据库引擎的选择"></a>2.2、数据库引擎的选择</h4><p>MySQL中的数据用各种不同的技术存储在文件（或者内存）中。这些技术中的都使用不同的<code>存储机制</code>、<code>索引技巧</code>、<code>锁定水平</code>并且最终提供不同的功能和能力。</p><p>通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。</p><ul><li><p>MyISAM：拥有较高的插入，查询速度，但不支持事务，不支持外键。</p></li><li><p>InnoDB：支持事务，支持外键，支持行级锁定，性能较低。</p></li></ul><p><strong>InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但对比MyISAM，处理效率差，且会占用更多的磁盘空间以保留数据和索引。</strong></p><h3 id="3、数据库的操作"><a href="#3、数据库的操作" class="headerlink" title="3、数据库的操作"></a>3、数据库的操作</h3><p><strong>SQL</strong> (<strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage) 结构化查询语言是关系型数据库<strong>标准语言</strong>，直白的讲SQL语句：具备灵活、简单、易用的特点。</p><h4 id="3-1、SQL又分为"><a href="#3-1、SQL又分为" class="headerlink" title="3.1、SQL又分为"></a>3.1、SQL又分为</h4><h5 id="3-1-1、数据查询语言（DQL）"><a href="#3-1-1、数据查询语言（DQL）" class="headerlink" title="*3.1.1、数据查询语言（DQL）"></a>*3.1.1、数据查询语言（DQL）</h5><p>也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字<code>SELECT</code>是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有<code>WHERE</code>，<code>ORDER BY</code>，<code>GROUP BY</code>和<code>HAVING</code>。这些DQL保留字常与其他类型的SQL语句一起使用。</p><h5 id="3-1-2、数据操纵语言（DML）"><a href="#3-1-2、数据操纵语言（DML）" class="headerlink" title="*3.1.2、数据操纵语言（DML）"></a>*3.1.2、数据操纵语言（DML）</h5><p>其语句包括动词<code>INSERT</code>，<code>UPDATE</code>和<code>DELETE</code>。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。</p><h5 id="3-1-3、DBA的事务处理语言（TPL）"><a href="#3-1-3、DBA的事务处理语言（TPL）" class="headerlink" title="3.1.3、DBA的事务处理语言（TPL）"></a>3.1.3、DBA的事务处理语言（TPL）</h5><p>它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括<code>BEGIN TRANSACTION</code>，<code>COMMIT</code>和<code>ROLLBACK</code>。</p><h5 id="3-1-4、数据控制语言（DCL）"><a href="#3-1-4、数据控制语言（DCL）" class="headerlink" title="3.1.4、数据控制语言（DCL）"></a>3.1.4、数据控制语言（DCL）</h5><p>它的语句通过<code>GRANT</code>或<code>REVOKE</code>获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。</p><h5 id="3-1-5-、数据定义语言（DDL）"><a href="#3-1-5-、数据定义语言（DDL）" class="headerlink" title="3.1.5*、数据定义语言（DDL）"></a>3.1.5*、数据定义语言（DDL）</h5><p>其语句包括动词<code>CREATE</code>和<code>DROP</code>。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。</p><h5 id="3-1-6、指针控制语言（CCL）"><a href="#3-1-6、指针控制语言（CCL）" class="headerlink" title="3.1.6、指针控制语言（CCL）"></a>3.1.6、指针控制语言（CCL）</h5><p>它的语句，像<code>DECLARE CURSOR</code>，<code>FETCH INTO</code>和<code>UPDATE WHERE CURRENT</code>用于对一个或多个表单独行的操作。</p><h4 id="3-2、SQL书写的注意事项"><a href="#3-2、SQL书写的注意事项" class="headerlink" title="3.2、SQL书写的注意事项"></a>3.2、SQL书写的注意事项</h4><ol><li><p>在MySQL数据库中，SQL语句大小写不敏感SQL语句可单行或多行书写</p><p>​        a)    Select   SELECT</p></li><li><p>在SQL语句中，关键字不能跨多行或缩写</p></li><li><p>为了提高可读性一般关键字大写，其他小写,优化sql目的</p></li><li><p>空格和缩进使程序易读</p></li></ol><h3 id="4、启动-amp-连接数据库"><a href="#4、启动-amp-连接数据库" class="headerlink" title="4、启动&amp;连接数据库"></a>4、启动&amp;连接数据库</h3><h4 id="4-1、检查MYSQL服务"><a href="#4-1、检查MYSQL服务" class="headerlink" title="4.1、检查MYSQL服务"></a>4.1、检查MYSQL服务</h4><p>打开数据库连接之前：一定要保证MySQL服务已经开启。若没开启，就需要去操作系统中检查服务是否开启</p><p>检查MySQL的服务是否已经打开：</p><ol><li>WIN + R 打开运行：services.msc</li><li>控制面板-管理工具-服务</li><li>使用命令行命令开启和启动MYSQL服务</li></ol><ul><li>net start 服务名称：开启一个服务，如:<code>net start MySQL</code><ul><li>net stop 服务名称：关闭一个服务器，如:<code>net stop MySQL</code></li></ul></li></ul><h4 id="4-2、连接数据库"><a href="#4-2、连接数据库" class="headerlink" title="4.2、连接数据库"></a>4.2、连接数据库</h4><h5 id="4-2-1、命令行连接"><a href="#4-2-1、命令行连接" class="headerlink" title="4.2.1、命令行连接"></a>4.2.1、命令行连接</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql –u【用户名】 -<span class="hljs-selector-tag">p</span>【密码】 –h【IP】 -<span class="hljs-selector-tag">P</span>【端口，默认一般为<span class="hljs-number">3306</span>】<br>本机上有两种写法：<br>mysql –u用户名 –<span class="hljs-selector-tag">p</span>密码 –hlocalhost –P3306<br>mysql –u用户名 –<span class="hljs-selector-tag">p</span>密码 –h127.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> –P3306<br><br>若是在本机登录&amp;端口没有改变，可省略IP和端口的写法：<br>mysql –u用户名 –<span class="hljs-selector-tag">p</span>密码<br><br>也可使用安装好的mysql的命令行窗口：<br>mysql –uroot –<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>如果cmd或terminal中使用上述命令提示MYSQL命令不存在的情况，检查安装MYSQL的时候的环境变量配置是否有误。注：terminal指类UNIX系统的命令行。</p><h5 id="4-2-2、可视化界面启动和连接数据库"><a href="#4-2-2、可视化界面启动和连接数据库" class="headerlink" title="4.2.2、可视化界面启动和连接数据库"></a>4.2.2、可视化界面启动和连接数据库</h5><p><img src="/2019/11/16/MySQL/workbench.png" alt="1"></p><h3 id="5、数据库创建、删除、使用及查看"><a href="#5、数据库创建、删除、使用及查看" class="headerlink" title="5、数据库创建、删除、使用及查看"></a>5、数据库创建、删除、使用及查看</h3><h4 id="5-1、系统数据库"><a href="#5-1、系统数据库" class="headerlink" title="5.1、系统数据库"></a>5.1、系统数据库</h4><p>系统自带的数据库：不能修改，不能删除，具体的内容到别处查去</p><blockquote><ol><li>information_schema：存储数据库对象信息，如：用户表信息，列信息，权限，字符，分区等信息；</li><li>performance_schema：存储数据库服务器性能参数信息；</li><li>mysql：存储数据库用户权限信息；</li><li>test：任何用户都可以使用的测试数据库；</li><li>sys：sys库所有的数据源自：performance_schema（创建在performance_schema的视图）。</li></ol></blockquote><h4 id="5-2、用户数据库"><a href="#5-2、用户数据库" class="headerlink" title="5.2、用户数据库"></a>5.2、用户数据库</h4><p>用户自定义的数据库：一般的，一个项目一个用户数据库。  </p><h4 id="5-3、查看-amp-使用数据库"><a href="#5-3、查看-amp-使用数据库" class="headerlink" title="5.3、查看&amp;使用数据库"></a>5.3、查看&amp;使用数据库</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">show databases;   <span class="hljs-regexp">//</span>查看数据库<br>use 数据库名;   <span class="hljs-regexp">//</span>使用数据库<br></code></pre></td></tr></table></figure><h4 id="5-4、创建数据库"><a href="#5-4、创建数据库" class="headerlink" title="5.4、创建数据库"></a>5.4、创建数据库</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> 数据库名;<br></code></pre></td></tr></table></figure><h4 id="5-6、删除数据库"><a href="#5-6、删除数据库" class="headerlink" title="5.6、删除数据库"></a>5.6、删除数据库</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> 数据库名;<br></code></pre></td></tr></table></figure><p>如果没有完备的数据库备份和恢复机制，请慎重考虑使用数据库删除命令，否则误删库的话请节哀：</p><p><img src="/2019/11/16/MySQL/shanku.png" alt="1"></p><h4 id="5-7、可视化操作"><a href="#5-7、可视化操作" class="headerlink" title="5.7、可视化操作"></a>5.7、可视化操作</h4><p>除命令行界面，我们还可以利用第三方工具可视化的数据库查看、使用、创建、删除 。 </p><p><img src="/2019/11/16/MySQL/navicat.png" alt="1"></p><h3 id="6、数据库中表的创建、查询、修改及删除"><a href="#6、数据库中表的创建、查询、修改及删除" class="headerlink" title="6、数据库中表的创建、查询、修改及删除"></a>6、数据库中表的创建、查询、修改及删除</h3><h4 id="6-1、表字段类型"><a href="#6-1、表字段类型" class="headerlink" title="6.1、表字段类型"></a>6.1、表字段类型</h4><p>MySQL支持多种列类型：数值类型、日期/时间类型和字符（串）类型。</p><p>高级语言基本数据类型 与 数据库表字段类型 对照表</p><table><thead><tr><th>JAVA</th><th align="left">Java备注</th><th>MYSQL</th><th>MYSQL备注</th></tr></thead><tbody><tr><td>Int/Integer</td><td align="left">短整型</td><td>int</td><td>短整型</td></tr><tr><td>long</td><td align="left">长整型</td><td>bigint</td><td>长整型</td></tr><tr><td>float</td><td align="left">单精度</td><td>float</td><td>单精度</td></tr><tr><td>double</td><td align="left">双精度</td><td>double</td><td>双精度</td></tr><tr><td>bigdecimal</td><td align="left">金融数据</td><td>decimal</td><td>金融数据</td></tr><tr><td>String</td><td align="left">字符串</td><td>char</td><td>不可变字符串</td></tr><tr><td></td><td align="left"></td><td>varchar</td><td>可变字符串</td></tr><tr><td>Boolean</td><td align="left">布尔值</td><td>Bit</td><td>取值0和1</td></tr></tbody></table><p><code>float(5,2)</code>表示一个有效位最多5位的浮点数，小数占两位，最大表示范围 ± 999.99。</p><p>在开发的过程中<code>float和double</code>都是用的比较少的，因为他们精确度不够高，所以在今后用到小数都推荐使用<code>decimal(m,n)</code>。</p><h5 id="6-1-1、日期类型"><a href="#6-1-1、日期类型" class="headerlink" title="6.1.1、日期类型"></a>6.1.1、日期类型</h5><blockquote><p>1、DATETIME，年月日时分秒<br>2、DATE，年月日<br>3、TIMESTAMP，（时间戳[19700101080001,20381191111407]，基本不会用到它，只作了解）<br>4、TIME，时分秒<br>5、YEAR，年</p></blockquote><p>注意：在MySQL中，日期时间值使用单引号引起来。相当于Java中的Date（主要），Calender。</p><h5 id="6-1-2、二进制类型"><a href="#6-1-2、二进制类型" class="headerlink" title="6.1.2、二进制类型"></a>6.1.2、二进制类型</h5><p><strong>为什么要存放二进制类型？</strong></p><p>项目中可能会保存图片，电影和音乐等二进制内容，因为数据库中没有图片类型和电影类型，存的时候使用数据流存储，读取也是通过数据流读取。</p><p><strong>开发中，我们一般存储二进制文件保存路径</strong></p><p>BIT、我们一般存储0或1，存储Java中Boolean类型的值。MySQL没有Boolean型，有BIT型；</p><p>BLOB、保存的时候根据自己的大小，选择使用的类型，一般使用BLOB就够；</p><p>不建议把大的数据文件存放到数据库中，如果文件太大，会影响查询和修改速度，而且在备份数据库的时候速度慢。</p><p>如果有保存图片和电影等大文件的需求，应该将文件放到磁盘上，将文件的路径存放的数据库中。</p><p>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB：存放图片、声音和影响等二进制对象，0-4GB。</p><p>大量文本的存储还可以使用TEXT文本。</p><h4 id="6-2、创建表"><a href="#6-2、创建表" class="headerlink" title="6.2、创建表"></a>6.2、创建表</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">create <span class="hljs-selector-tag">table</span> 表名(<br>列名<span class="hljs-number">1</span> 类型(长度) <span class="hljs-selector-attr">[约束]</span>,<br>列名2 类型(长度) <span class="hljs-selector-attr">[约束]</span>,<br>……<br>);<br></code></pre></td></tr></table></figure><p>使用SQL语句创建表，需要指定表名，表中字段名和各字段的类型，约束选项是可选的，多个字段中间用逗号’,’分开。</p><p>创建表时，表名字段名尽量使用英文，最忌讳英汉合拼。</p><h5 id="6-2-1、数据库字段类型的长度区别"><a href="#6-2-1、数据库字段类型的长度区别" class="headerlink" title="6.2.1、数据库字段类型的长度区别"></a>6.2.1、数据库字段类型的长度区别</h5><p>int类型带长度，如int(5)：不影响存取值，即使设定的值超出了长度的范畴，也能存，如果没有达到设定的长度，则使用空格自动填充到设定的长度；</p><p>char类型，如char(5)：不可变字符，设定的长度就是规定当前字段能存的数据的最大长度，若超出长度，则会报错，若没有达到长度，使用空格填充到设定的长度；</p><p>varchar，如varchar(10)：可变字符，设定的长度同样是规定当前字段能存的数据的最大长度，若超出长度，则会报错，若没有达到长度，不会使用空格填充，实际多长就是多长。</p><h5 id="6-2-2、约束"><a href="#6-2-2、约束" class="headerlink" title="6.2.2、约束"></a>6.2.2、约束</h5><p>约束就是给表中的数据规定取值的规定，比如能否为空，能否重复取值等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名  类型(长度) <span class="hljs-keyword">Not</span> <span class="hljs-keyword">Null</span>,<br>字段名  类型(长度) <span class="hljs-keyword">unique</span>,<br></code></pre></td></tr></table></figure><p>Null值在被unique约束的字段中是否可以存在多个，是因数据库类型而异的。Null值是可以插入多次的</p><h5 id="6-2-3、默认值"><a href="#6-2-3、默认值" class="headerlink" title="6.2.3、默认值"></a>6.2.3、默认值</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">字段名  类型(长度) default 默认值,<br></code></pre></td></tr></table></figure><h5 id="6-2-4、主键约束"><a href="#6-2-4、主键约束" class="headerlink" title="6.2.4、主键约束"></a>6.2.4、主键约束</h5><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">字段名  类型(长度) <span class="hljs-meta">primary</span> <span class="hljs-meta">key</span>,<br></code></pre></td></tr></table></figure><p>主键约束就是唯一并且非空，关键字primary key</p><p><strong>主键约束的分类：</strong></p><ol><li>主键的设计一般来说是选取某一列作为主键（推荐做法）</li><li>选取多列作为主键称之为复合主键（不推荐的做法）</li><li>自然主键：你的主键是有业务意义的，比如：身份证号等</li><li>代理主键：它没有任何意义(推荐都使用代理主键)</li></ol><p>为什么推荐使用与业务无关的数据作为主键？</p><blockquote><p>在实际项目当中，推荐使用代理主键，因为如果和业务相关了，那么当有一天要求数据可以重复了，那么这个字段就不能再作为主键了</p></blockquote><h5 id="6-2-5、主键递增"><a href="#6-2-5、主键递增" class="headerlink" title="6.2.5、主键递增"></a>6.2.5、主键递增</h5><h5 id="6-2-6、外键约束"><a href="#6-2-6、外键约束" class="headerlink" title="6.2.6、外键约束"></a>6.2.6、外键约束</h5><p>外键本质上就是通过一个表的字段与其他表建立联系，保证数据完整性，假设有表A和表B，若表A的某字段x取值限定使用表B的某字段y的值，那么B表y字段是A表的外键。</p><p>我们可以在需要的时候，在DBMS上建立起这么一条约束来防止数据关联出错，但在真实项目中也可能不会去创建，而仅仅是在口头上约定，只是在代码实现的时候注意。</p><p>创建外键约束要求两张表的引擎为InnoDB，否则无法成功，因为在MySQL中，InnoDB支持事务和外键，而MyISAM 不支持事务和外键。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 ENGINE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;InnoDB&#x27;</span>;   <span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改引擎<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>已有表基础上<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名<br><span class="hljs-keyword">ADD</span> CONSTRAIN 外键名 <span class="hljs-keyword">FOREIGN</span> KEY (主表字段) <span class="hljs-keyword">REFERENCES</span> 从表(从表主键);<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>新建表时给出<br><span class="hljs-keyword">FOREIGN</span> KEY 主表(主表字段) <span class="hljs-keyword">REFERENCES</span> 从表(从表主键);<br></code></pre></td></tr></table></figure><h4 id="6-3、查看表"><a href="#6-3、查看表" class="headerlink" title="6.3、查看表"></a>6.3、查看表</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">desc 表名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/16/MySQL/desc.png"></p><h4 id="6-4、修改表结构"><a href="#6-4、修改表结构" class="headerlink" title="6.4、修改表结构"></a>6.4、修改表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名;#更改原有表结构<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 列名 新列名 类型;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 列名 列名 新类型;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 modify 列名 新类型;#和第三条作用一致<br></code></pre></td></tr></table></figure><p>修改操作在正式的开发过程中极少的使用，因为开发之前相关表的创建就应当已经确定。若开发中途出现针对表字段等的修改，可能会影响到整个研发的流程。</p><h4 id="6-5、删除表"><a href="#6-5、删除表" class="headerlink" title="6.5、删除表"></a>6.5、删除表</h4><p>回顾5.6内容</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">drop</span> <span class="hljs-built_in">table</span> 表名;<br></code></pre></td></tr></table></figure><h4 id="6-6、数据查询-单表查询"><a href="#6-6、数据查询-单表查询" class="headerlink" title="6.6、数据查询-单表查询"></a>6.6、数据查询-单表查询</h4><p><a href="MySQL/product.sql">product表下载</a></p><p>product表，如下：</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>product_name</td><td>产品名称</td></tr><tr><td>category_id</td><td>分类编码</td></tr><tr><td>sale_price</td><td>零售价</td></tr><tr><td>supplier</td><td>供应商</td></tr><tr><td>brand</td><td>品牌</td></tr><tr><td>cutoff</td><td>折扣</td></tr><tr><td>cost_price</td><td>成本价</td></tr></tbody></table><h5 id="6-6-1、SELECT-…-FROM-…"><a href="#6-6-1、SELECT-…-FROM-…" class="headerlink" title="6.6.1、SELECT … FROM …"></a>6.6.1、SELECT … FROM …</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名;          <span class="hljs-comment">//代表查询表中全部信息</span><br><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名;   <span class="hljs-comment">//代表查询表中指定列的信息</span><br></code></pre></td></tr></table></figure><p>SQL语句中使用select关键字表示选择查询列表，而from后紧跟要查询的数据源，<code>*</code> 查询出列显示的数据和建表时的列的数据一致。<code>MYSQL语句的执行顺序是：先from表，在select。</code></p><blockquote><p>查询所有货品信息：<code>Select * from product</code></p><p>查询货品id，名称：<code>Select id from product</code></p><p>查询供应商信息：<code>Select supplier from product</code></p></blockquote><h5 id="6-6-2、DISTINCT-数据去重"><a href="#6-6-2、DISTINCT-数据去重" class="headerlink" title="6.6.2、DISTINCT-数据去重"></a>6.6.2、DISTINCT-数据去重</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 列,... <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><blockquote><p>查询供应商信息，去掉重复数据：<code>Select distinct supplier from product</code></p></blockquote><h5 id="6-6-3、CONCAT-函数-拼接结果"><a href="#6-6-3、CONCAT-函数-拼接结果" class="headerlink" title="6.6.3、CONCAT()函数-拼接结果"></a>6.6.3、CONCAT()函数-拼接结果</h5><p>将不同的列拼成一列显示</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">concat</span>(<span class="hljs-params">列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,.....</span>) <span class="hljs-keyword">from</span> 表名</span>;<br></code></pre></td></tr></table></figure><blockquote><p>查询结果为：xxx商品的零售价为：xxx</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">concat</span>(<span class="hljs-params">product_name,<span class="hljs-string">&quot;商品的零售价为：&quot;</span>,sale_price</span>) <span class="hljs-keyword">from</span> product</span>;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/16/MySQL/concat&as.png" alt="1"></p></blockquote><h5 id="6-6-4、数据查询的数学运算"><a href="#6-6-4、数据查询的数学运算" class="headerlink" title="6.6.4、数据查询的数学运算"></a>6.6.4、数据查询的数学运算</h5><ul><li><p>对NUMBER类型数据可以使用算数操作符创建表达式（+-*/）</p></li><li><p>对DATE数据类型使用部分算数操作符创建表达式（+ -）</p></li></ul><ul><li>运算优先级：同四则运算</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> 列<span class="hljs-number">1</span>[+-*/]列<span class="hljs-number">2</span> from 表名;<br></code></pre></td></tr></table></figure><blockquote><p>查询所有货品的id，名称和批发价(批发价=卖价*折扣)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select <span class="hljs-built_in">id</span>,product_name,sale_price*cutoff <span class="hljs-keyword">from</span> product;<br></code></pre></td></tr></table></figure><p>查询所有货品的id，名称，和各进50个的成本价(成本=costPirce)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select <span class="hljs-built_in">id</span>,product_name,<span class="hljs-number">50</span>*cost_price <span class="hljs-keyword">from</span> product;<br></code></pre></td></tr></table></figure><p>查询所有货品的id，名称，各进50个，并且每个运费1元的成本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> id,product_name,<span class="hljs-number">50</span>*cost_price+<span class="hljs-number">1</span> from product;<br></code></pre></td></tr></table></figure></blockquote><h5 id="6-6-5、定义字段别名"><a href="#6-6-5、定义字段别名" class="headerlink" title="6.6.5、定义字段别名"></a>6.6.5、定义字段别名</h5><p>别名是用于改变最终查询显示的列名，可以给任意列设定</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 列 <span class="hljs-keyword">as</span> 别名 <span class="hljs-keyword">from</span> 表名;  <span class="hljs-comment">//使用as关键字</span><br><span class="hljs-keyword">select</span> 列 别名 <span class="hljs-keyword">from</span> 表名;    <span class="hljs-comment">//省略AS关键字</span><br></code></pre></td></tr></table></figure><p>别名的定义很简单，有两种方式，一种是使用AS关键字，一种是省略AS关键字</p><p>刚刚进行的数学运算的需求中加上别名</p><h5 id><a href="#" class="headerlink" title></a><img src="/2019/11/16/MySQL/concat&as.png"></h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean">#select concat(<span class="hljs-string">&quot;姓名：&quot;</span>,first_name,last_name) <span class="hljs-string">&quot;信息&quot;</span> <span class="hljs-keyword">from</span> actor;<br>#OK，查询结果表头是：信息<br><br>#select concat(<span class="hljs-string">&quot;姓名：&quot;</span>,first_name,last_name) 信息 <span class="hljs-keyword">from</span> actor;<br>#OK，查询结果表头是：信息<br><br>#select concat(<span class="hljs-string">&quot;姓名：&quot;</span>,first_name,last_name) information <span class="hljs-keyword">from</span> actor;<br>#OK，查询结果表头是：information<br><br>#select concat(information,first_name,last_name) <span class="hljs-string">&quot;信息&quot;</span> <span class="hljs-keyword">from</span> actor;<br>#ERROR:&gt; <span class="hljs-number">1054</span> - Unknown column <span class="hljs-string">&#x27;information&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;field list&#x27;</span><br><br>#select concat(<span class="hljs-string">&quot;姓名：&quot;</span>,<span class="hljs-string">&#x27;first_name&#x27;</span>,last_name) information <span class="hljs-keyword">from</span> actor;<br>#OK，查询结果表头是：information 数据内容是：姓名：first_nameAKROYD<br></code></pre></td></tr></table></figure><h5 id="6-6-6、带条件的查询"><a href="#6-6-6、带条件的查询" class="headerlink" title="6.6.6、带条件的查询"></a>6.6.6、带条件的查询</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 列… <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件;  <span class="hljs-comment">//使用where关键字</span><br></code></pre></td></tr></table></figure><p>SQL语句中条件分类有许多种，不同的条件写法也可能达到相同的效果。</p><h6 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h6><table><thead><tr><th>比较运算符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>!=(&lt;&gt;)</td><td>不等于</td></tr></tbody></table><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Where 列  比较运算符  值<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>字符串、日期需使用<code>单引号括起来</code></p><p><code>执行顺序：from—&gt;where—&gt;select</code></p><p><strong>别名是否可用于where条件？</strong></p><blockquote><p>查询货品零售价为119的所有货品信息</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> sale_price=<span class="hljs-number">119</span>;<br></code></pre></td></tr></table></figure><p>查询货品名为罗技G9X的所有货品信息</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> product_name=<span class="hljs-string">&#x27;罗技G9X&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询货品名不为罗技G9X的所有货品信息</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> product_name!=<span class="hljs-string">&#x27;罗技G9X&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询分类编号不等于2的货品信息</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> category_id!=<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>查询货品名称,零售价小于等于200的货品</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> product_name <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> sale_price&lt;=<span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure><p>查询id，货品名称，批发价（salePrice*cutoff）大于350的货品</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">select</span> id,product_name <span class="hljs-meta">from</span> product <span class="hljs-meta">where</span> sale_price<span class="hljs-comment">*cutoff&gt;=350;</span><br></code></pre></td></tr></table></figure></blockquote><h6 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h6><p>比较运算符的时候，我们基本上只带了一个条件进行查询，那么当遇到多个条件的时候，我们应当怎么办呢？</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Where 条件<span class="hljs-number">1</span>  逻辑运算符  条件<span class="hljs-number">2</span>;   <span class="hljs-regexp">//</span>and  or<br>Where not 条件;  <span class="hljs-regexp">//</span>not的使用<br></code></pre></td></tr></table></figure><table><thead><tr><th>逻辑运算符</th><th>含义</th></tr></thead><tbody><tr><td>AND(&amp;, &amp;&amp;)</td><td>如果组合的条件都是true，返回true</td></tr><tr><td>OR(|, ||)</td><td>如果组合的条件之一是true，返回true</td></tr><tr><td>NOT(!)</td><td>如果条件false，返回true</td></tr></tbody></table><blockquote><p>选择id，货品名称，批发价(saleprice*cutoff)在300-400之间的货品</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">select</span> id,product_name <span class="hljs-meta">from</span> product <span class="hljs-meta">where</span> sale_price<span class="hljs-comment">*cutoff&gt;=300 and sale_price*cutoff&lt;=400;</span><br></code></pre></td></tr></table></figure><p>选择id，货品名称，分类编号为2,4的所有货品</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select <span class="hljs-built_in">id</span>,product_name <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> category_id = <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> category_id=<span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p>选择id，货品名称，分类编号的货品，零售价(saleprice)大于等于250或者是成本(costprice)大于等于200</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select <span class="hljs-built_in">id</span>,product_name,category_id <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> sale_price &gt;= <span class="hljs-number">250</span> <span class="hljs-keyword">or</span> cost_price &gt;= <span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure></blockquote><h6 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h6><p><strong>1、BETWEEN…AND…</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Where 列 <span class="hljs-keyword">between </span>条件<span class="hljs-number">1</span>  <span class="hljs-keyword">and </span>条件<span class="hljs-number">2</span><span class="hljs-comment">;     //列在这个区间的值，即[m, n]</span><br>Where 列 not <span class="hljs-keyword">between </span>条件<span class="hljs-number">1</span> <span class="hljs-keyword">and </span>条件<span class="hljs-number">2</span><span class="hljs-comment">;  //不在这个区间，即(-∞, m)U(n, +∞)</span><br>Where !( 列 <span class="hljs-keyword">between </span>条件<span class="hljs-number">1</span> <span class="hljs-keyword">and </span>条件<span class="hljs-number">2</span> )<span class="hljs-comment">; //同样表示不在这个区间</span><br></code></pre></td></tr></table></figure><blockquote><p>选择id，货品名称，批发价在300-400之间的货品</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> product_name <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> cost_price <span class="hljs-keyword">between</span> <span class="hljs-number">300</span> <span class="hljs-keyword">and</span> <span class="hljs-number">400</span>;<br></code></pre></td></tr></table></figure><p>选择id，货品名称，批发价不在300-400之间的货品</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> product_name <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> !(cost_price <span class="hljs-keyword">between</span> <span class="hljs-number">300</span> <span class="hljs-keyword">and</span> <span class="hljs-number">400</span>);<br><span class="hljs-keyword">select</span> product_name <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> cost_price <span class="hljs-keyword">not</span> <span class="hljs-keyword">between</span> <span class="hljs-number">300</span> <span class="hljs-keyword">and</span> <span class="hljs-number">400</span>;<br></code></pre></td></tr></table></figure><p><strong>2、IN-集合查询</strong></p></blockquote><p>使用IN运算符，判断列的值是否在指定的集合中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Where</span> 列 in(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>);       //列中的数据是in后的值里面的<br><span class="hljs-attribute">Where</span> 列 not in(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>);  //不是in中指定值的数据<br></code></pre></td></tr></table></figure><blockquote><p>选择id，货品名称和分类编号，分类编号为2,4的所有货品</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> id,product_name,<span class="hljs-function">category_id <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> category_id <span class="hljs-title">in</span> (<span class="hljs-params"><span class="hljs-number">2</span>,<span class="hljs-number">4</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>选择id，货品名称，分类编号不为2,4的所有货品</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> id,product_name,<span class="hljs-function">category_id <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> category_id <span class="hljs-keyword">not</span> <span class="hljs-title">in</span> (<span class="hljs-params"><span class="hljs-number">2</span>,<span class="hljs-number">4</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>事实上要实现范围查询，我们还可以将比较运算符和逻辑运算符结合起来使用</p></blockquote><h6 id="NULL值的查询"><a href="#NULL值的查询" class="headerlink" title="NULL值的查询"></a>NULL值的查询</h6><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">where</span> 列 <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//查询列中值为null的数据</span><br><span class="hljs-keyword">where</span> 列 <span class="hljs-keyword">is</span> not <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>注意：<strong>列中值为null不能使用=去查询</strong></p><blockquote><p>查询商品名为null的所有商品信息</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> product_name <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure></blockquote><h6 id="模糊匹配查询"><a href="#模糊匹配查询" class="headerlink" title="模糊匹配查询"></a>模糊匹配查询</h6><p>当需要查询的数据不太确定的时候，可以使用模糊查询，例如：查询姓张的学员，并没有明确指定某一个学员</p><p>模糊查询使用like关键字，搭配通配符%和_使用</p><p>**%**：表示0到多个字符，示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">Where 列 like <span class="hljs-string">&#x27;%0&#x27;</span>;  <span class="hljs-regexp">//</span>表示以<span class="hljs-number">0</span>结尾<br>Where 列 like <span class="hljs-string">&#x27;0%&#x27;</span>;  <span class="hljs-regexp">//</span>表示以<span class="hljs-number">0</span>开头<br>Where 列 like <span class="hljs-string">&#x27;%0%&#x27;</span>;  <span class="hljs-regexp">//</span>表示数据中包含<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>_</strong>：表示一个字符，可多次使用，示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Where 列 like <span class="hljs-string">&#x27;%0_&#x27;</span>;  <span class="hljs-regexp">//</span>数据结尾第二位是<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><blockquote><p>查询id，货品名称，货品名称匹配’%罗技M9_’</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> id,product_name <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> product_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%罗技M9_&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询id，货品名称，分类编号,零售价大于等于200并且货品名称匹配’%罗技M1__’</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> id,product_name,category_id <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> sale_price&gt;=<span class="hljs-number">80</span> and product_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%罗技M1__&#x27;</span>;<br></code></pre></td></tr></table></figure></blockquote><h5 id="6-6-7、结果排列"><a href="#6-6-7、结果排列" class="headerlink" title="6.6.7、结果排列"></a>6.6.7、结果排列</h5><p>排序就是对查询出的结果按照一列或多列进行升序还是降序排列，使用关键字<strong>order by</strong>，</p><p>默认是<strong>升序ASC</strong>，<strong>降序DESC</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Where</span> 条件 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 列 [<span class="hljs-keyword">asc</span>/<span class="hljs-keyword">desc</span>]<br></code></pre></td></tr></table></figure><p>注意：<strong>不能使用中文的别名排序</strong></p><p>执行顺序：from—&gt;where—&gt;select—&gt;order by 别名</p><blockquote><p>查询M系列并按照批发价排序(加上别名)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> product_name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%罗技M%&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cost_price <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></table></figure><p>查询分类为2并按照批发价排序(加上别名)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> category_id=<span class="hljs-number">2</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> cost_price <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></table></figure><p>为什么排序可以使用别名？</p></blockquote><p>order by是作用到select的结果上，在生成排序结果的</p><h5 id="6-6-8、分页查询"><a href="#6-6-8、分页查询" class="headerlink" title="6.6.8、分页查询"></a>6.6.8、分页查询</h5><p>每次查询数据都是将所有数据显示出来，若数据量过大，那么看起来就很不方便，怎么解决？</p><p>可以对数据进行分页显示，SQL中分页是一个常见功能，需要认真对待。MYSQL中进行数据的分页查询使用的关键字是：<strong>limit</strong>，分页查询比较特殊，各个数据库不太一样。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Where</span> [条件] <span class="hljs-keyword">limit</span> beginIndex,pageSize;<br></code></pre></td></tr></table></figure><p>Limit关键字后跟两个参数<strong>beginIndex</strong>和<strong>pageSize</strong>。</p><p><strong>beginIndex</strong>：表示从第多少条数据开始</p><p><strong>pageSize</strong>：表示每页显示的数据条数</p><p>每页显示3条数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">第一页: <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>, <span class="hljs-number">3</span> -<span class="hljs-number">-0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span><br>第二页: <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">3</span>, <span class="hljs-number">3</span> -<span class="hljs-number">-3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br>第三页: <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">6</span>, <span class="hljs-number">3</span> -<span class="hljs-number">-6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span><br>第四页: <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">9</span>, <span class="hljs-number">3</span> -<span class="hljs-number">-9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span><br>...<br>第七页: <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">18</span>,<span class="hljs-number">3</span> -<span class="hljs-number">-18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>根据上面的SQL语句，我们可以发现实际上beginIndex可以被公式推算出：*<em>（当前页数-1）</em>pageSize**</p><h5 id="6-6-9、聚合函数"><a href="#6-6-9、聚合函数" class="headerlink" title="6.6.9、聚合函数"></a>6.6.9、聚合函数</h5><p>2，4，6，7，8 一组数据中，最大数8，最小数2，一共多少数 5个，它们的总和27，平均数27/5，若要在MYSQL中对以上数据筛选最大值、最小值、平均值等操作，应当怎么办？</p><p><strong>聚集函数：</strong>作用于一组数据，并对一组数据返回一个值。  </p><ul><li>COUNT：统计结果记录数，若统计的是列，列中为Null，那么count将不会计算值</li><li>MAX： 统计计算最大值</li><li>MIN： 统计计算最小值</li><li>SUM： 统计计算求和</li><li>AVG： 统计计算平均值</li></ul><blockquote><p>查询所有商品平均零售价</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(salePrice) <span class="hljs-keyword">from</span> product;<br></code></pre></td></tr></table></figure><p>查询商品总记录数(注意在Java中必须使用long接收)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> product;<br></code></pre></td></tr></table></figure><p>查询分类为2的商品总数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> dir_id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>查询商品的最小零售价，最高零售价，以及所有商品零售价总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(sale_price),<span class="hljs-built_in">max</span>(sale_price),<span class="hljs-built_in">sum</span>(sale_price) <span class="hljs-keyword">from</span> product;<br></code></pre></td></tr></table></figure></blockquote><p><a href="https://www.cnblogs.com/liyingxiao/p/10754671.html"><strong>深入理解COUNT()</strong></a></p><p>1、count(*)、count(主键ID)和count(1)表示返回满足条件的结果集的总行数</p><p>2、count(主键ID)、count(字段)、count(1)、count(*)的区别和性能差异（分析性能差别的原则）</p><blockquote><p> 1、server层要什么就给什么 </p><p> 2、InnoDB只给必要的值</p><p> 3、现在的优化器对count(*)的取行数做了优化，其他没有做优化</p></blockquote><p>3、count(主键ID)比count(1)慢的原因:</p><blockquote><p>1、对于 count(主键 ID) 来说，InnoDB 引擎会遍历主键索引树，把每一行的ID值取出来，返回给server层，server层拿到ID后，判断是不可能为空的，按行累加加1，最后返回累计值。</p><p>2、对于count(1)，InnoDB引擎会扫描主键索引树，但不取值，server层对于返回的每一行，按行累计加1，判断不可能为NULL，返回累计值。</p><p>3、从InnoDB引擎层返回ID会涉及到解析数据行、拷贝字段值的操作，因此count(主键 ID)执行要比count(1)执行慢。</p></blockquote><p>4、count()用于统计某列数据总量，若列中数据为NULL，count会统计吗？</p><blockquote><p>count(）聚合函数统计非NULL与NULL值的区别：</p><p> 1、count(字段)不统计NULL记录，即表示满足条件的数据行里参数字段不为NULL的行</p><p> 2、count(1)和count(*)会记录NULL值</p></blockquote><p>5、count(字段)：</p><blockquote><p> 1、如果这个字段定义为not null的话，一行行地从记录里面读出这个字段，判断不能为null，按行累计加 </p><p> 2、如果这个字段定义允许为null，一行行地从记录里面读出这个字段，执行的时候还要判断是否为null，不为null的按行累计加1，返回累加值</p></blockquote><p>6、count(主键id)走主键索引的时候效率较count(*)差的原因？</p><blockquote><p>1、平时我们检索一列的时候，基本上等值或范围查询，那么索引基数大的索引必然效率很高(符合走主键索引查找速度最快的原则)。</p><p>2、但是在做count(*)的时候并没有检索具体的一行或者一个范围，那么选择基数小的索引对count操作效率会更高。在做count操作的时候，mysql会遍历每个叶子节点，所以基数越小，效率越高。mysql非聚簇索引叶子节点保存指向主键ID的指针，所以需要检索两遍索引。但是这里相对于遍历主键索引,即使检索两遍索引效率也比单纯的检索主键索引快。</p><p>3、Innodb是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值，索引普通索引树小很多，索引长度越小树的大小就越小。</p></blockquote><p>7、MyISAM与InnoDB，正如在不同的存储引擎中，count(*)函数的执行是不同的</p><blockquote><p>1、在MyISAM存储引擎中，count()函数是直接读取数据表保存的行记录数并返回,效率很高，但是如果添加了where条件的话，MyISAM表也不能返回得很快。 </p><p>2、在InnoDB存储引擎中，count(*)函数是先从内存中读取表中的数据到内存缓冲区，然后扫描全表获得行记录数。在使用count函数中加上where条件时，在两个存储引擎中的效果是一样的，都会扫描全表计算某字段有值项的次数。</p></blockquote><h5 id="6-6-10、分组函数"><a href="#6-6-10、分组函数" class="headerlink" title="6.6.10、分组函数"></a>6.6.10、分组函数</h5><p><strong>Group by</strong> ：group表示组，by 依靠什么分组；</p><p>可以使用GROUP BY 子句将表中的数据分成若干组，再对分组之后的数据做统计计算，一般使用聚集函数才使用GROUP BY。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">Select</span> 聚集函数 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> [条件] <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 列 <span class="hljs-keyword">having</span> 分组后的条件<br></code></pre></td></tr></table></figure><p>如果说要对分组后的数据进行筛选，那么必须使用having关键字，条件写在having后</p><p>Group by 一般搭配聚集函数使用，而having则是必须在数据分组后才能使用</p><p>执行顺序：FROM—&gt; WHERE—&gt;group by—-&gt;Having—&gt;SELECT–&gt;ORDER BY</p><p>注意： 使用having的时候，它也是可以使用别名的</p><p><strong>Where和having的区别：</strong></p><ul><li><p>Where针对的是元组，挑选满足条件的元组。</p></li><li><p>Having 先分组,在对每组进行计算,根据得到结果在过滤(分组把数据算出之后，在过滤)</p></li></ul><blockquote><p>查询每个商品分类编号和每个商品分类各自的平均零售价（求2，3，4每类商品的平均零售价）</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> category_id,<span class="hljs-keyword">avg</span>(sale_price) <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> category_id <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> category_id;<br></code></pre></td></tr></table></figure><p>查询每个商品分类编号和每个商品分类各自的商品总数。（求2，3，4每类商品的总数）</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> category_id,<span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> category_id <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>) <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> category_id;<br></code></pre></td></tr></table></figure><p>查询每个商品分类编号和每个商品分类中零售价大于100的商品总数（疑问：是要列出所有商品分类吗？）</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> category_id,<span class="hljs-keyword">count</span>(id) <span class="hljs-keyword">from</span> product <span class="hljs-keyword">where</span> sale_price &gt;<span class="hljs-number">100</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> category_id;<br><span class="hljs-meta">#过滤掉了没有商品零售价大于100的商品分类</span><br></code></pre></td></tr></table></figure><p>查询零售价总和大于1500的商品分类编号以及总零售价和;（根据分类编号查零售价的总和，然后零售价总和大于1500）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> category_id, <span class="hljs-built_in">sum</span>(sale_price) <span class="hljs-keyword">from</span> product <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> category_id <span class="hljs-keyword">having</span>(<span class="hljs-built_in">sum</span>(sale_price)<span class="hljs-operator">&gt;=</span><span class="hljs-number">1500</span>);<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-7、数据查询-多表查询"><a href="#6-7、数据查询-多表查询" class="headerlink" title="6.7、数据查询-多表查询"></a>6.7、数据查询-多表查询</h4><p><a href="MySQL/product_stock.sql">product_stock.sql文件下载</a></p><p><a href="MySQL/product_category.sql">product_category.sql文件下载</a></p><p>多个表相互连接看作新的查询表，这个连接是<strong>横向连接</strong>区别于UNION的<strong>纵向拼接</strong></p><p><img src="/2019/11/16/MySQL/joins.png"></p><h5 id="6-7-1、交叉连接"><a href="#6-7-1、交叉连接" class="headerlink" title="6.7.1、交叉连接"></a>6.7.1、交叉连接</h5><p>交叉连接：是没有连接条件的表关系，返回的结果是个笛卡尔积；</p><p>笛卡尔积是一个数学概念，用于多表查询得到的数据总量结果将会是两张表各自记录数目的乘积</p><p>使用交叉连接可能会产生大量错误表记录组合，这些错误组合可以用条件子句排除掉得到正确查询结果。</p><p>假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为</p><p>{(a, 0), (a, 1), (a, 2),</p><p> (b, 0), (b, 1), (b, 2)}。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#交叉连接，不带条件子句的查询</span><br><span class="hljs-attribute">Select</span> * from 表<span class="hljs-number">1</span>,表<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/16/MySQL/duobiao.png"></p><h5 id="6-7-2、内连接"><a href="#6-7-2、内连接" class="headerlink" title="6.7.2、内连接"></a>6.7.2、内连接</h5><p>内连接又称等值连接，查询结果实际上是两张表数据的<code>交集部分</code>，这个交集部分使用条件筛选出来的，内连接分为<strong>显示内连接</strong>和<strong>隐式内连接</strong>。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>,表<span class="hljs-number">2</span>  <span class="hljs-keyword">where</span> 表<span class="hljs-number">1</span>.字段=表<span class="hljs-number">2</span>.字段;  <span class="hljs-comment">//隐式内连接</span><br><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> [inner] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 表<span class="hljs-number">1</span>.字段=表<span class="hljs-number">2</span>.字段;  <span class="hljs-comment">//显式内连接，推荐写法</span><br></code></pre></td></tr></table></figure><p>二者只有语法写法的差别，隐式内连接使用where条件消除笛卡尔积。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">#在做等值连接的时候,若A表中和B表中的列名相对。则可以简写:<br><span class="hljs-keyword">SELECT</span>&lt;selectList&gt;<br><span class="hljs-keyword">FROM</span>A [<span class="hljs-keyword">INNER</span>] <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">USING</span>(同名的列)<br><br>#前提:在emp和dept表中都有deptno列. 并且是外键关系。<br>#如: <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">USING</span> (deptno)<br></code></pre></td></tr></table></figure><p>在显示内连接中，中括号INNER可以被省略，也就是可以只使用join…on关键字即可，on相当于隐式内连接中的where，后跟多表的关联关系</p><p>如果是多张表，则一直在join..on…后，依次添加join..on…即可</p><blockquote><p>查询所有商品的名称和分类名称【两种语法】</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">SELECT</span><br>product_name,<br>category_name <br>FROM<br><span class="hljs-built_in">product</span>,<br>product_category <br><span class="hljs-keyword">WHERE</span><br><span class="hljs-built_in">product</span>.category_id = product_category.id;<br><br><br><span class="hljs-keyword">SELECT</span><br>product_name,<br>category_name <br>FROM<br><span class="hljs-built_in">product</span><br>JOIN product_category ON <span class="hljs-built_in">product</span>.category_id = product_category.id;<br></code></pre></td></tr></table></figure><p>查询货品id，货品名称，货品所属分类名称</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">SELECT</span><br><span class="hljs-built_in">product</span>.id,<br>product_name,<br>category_name <br>FROM<br><span class="hljs-built_in">product</span><br>JOIN product_category ON <span class="hljs-built_in">product</span>.category_id = product_category.id;<br></code></pre></td></tr></table></figure><p>查询零售价大于200的无线鼠标【使用别名】</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>a.id,<br>product_name,<br>category_name <br><span class="hljs-keyword">FROM</span><br>product a<br><span class="hljs-keyword">JOIN</span> product_category b <span class="hljs-keyword">ON</span> a.category_id = b.id <br><span class="hljs-keyword">WHERE</span><br>category_name = <span class="hljs-string">&#x27;无线鼠标&#x27;</span> <br><span class="hljs-keyword">AND</span> sale_price &gt; <span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure><p>查询每个货品对应的分类以及对应的库存（连接三张表）</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>product_name,<br>store_num <br><span class="hljs-keyword">FROM</span><br>product<br><span class="hljs-keyword">JOIN</span> product_category<br><span class="hljs-keyword">JOIN</span> product_stock <span class="hljs-keyword">ON</span> product.category_id = product_category.id <br><span class="hljs-keyword">AND</span> product.id = product_stock.id;<br></code></pre></td></tr></table></figure><p>如果库存货品都销售完成（库存里面的东西卖完）,按照利润((零售价-成本价)*数量)从高到低查询货品名称,零售价,货品分类（三张表）。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>product_name,<br>sale_price,<br>category_name,<br>( sale_price - cost_price ) * store_num 净利润 <br><span class="hljs-keyword">FROM</span><br>product<br><span class="hljs-keyword">JOIN</span> product_category<br><span class="hljs-keyword">JOIN</span> product_stock <span class="hljs-keyword">ON</span> product.category_id = product_category.id <br><span class="hljs-keyword">AND</span> product.id = product_stock.id <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>( sale_price - cost_price ) * store_num <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure></blockquote><h5 id="6-7-3、外连接"><a href="#6-7-3、外连接" class="headerlink" title="6.7.3、外连接"></a>6.7.3、外连接</h5><p>外连接分为：<code>左外连接</code>、<code>右外连接</code>、<code>全外连接</code></p><p><strong>左外连接</strong>：以左边表为主，返回左边表中所有数据，若右表<code>无法完全满足</code>与主表间连接条件，则无法满足的部分用NULL填充，请参考实际查询结果来理解</p><p><img src="/2019/11/16/MySQL/leftjoin.png"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">left</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 表<span class="hljs-number">1.</span>字段=表<span class="hljs-number">2.</span>字段;<br></code></pre></td></tr></table></figure><p><strong>右外连接</strong>：与左连接相反，以右边表为主，返回右表中所有数据，若左表中无数据，则显示为NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">right</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 表<span class="hljs-number">1.</span>字段<span class="hljs-operator">=</span>表<span class="hljs-number">2.</span>字段;<br></code></pre></td></tr></table></figure><blockquote><p>案例：查询每种商品名称，分类的名称和包含的具体商品总数（store_num）ifnull</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Select product_name,category_name,IFNULL(store_num,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> product p;<br>Left join product_category dir <span class="hljs-keyword">on</span> p.category_id = dir.<span class="hljs-built_in">id</span>;<br>Left join product_stock stock <span class="hljs-keyword">on</span> stock.<span class="hljs-built_in">id</span> = p.<span class="hljs-built_in">id</span>;<br></code></pre></td></tr></table></figure><p><strong>全外连接</strong>：返回涉及的多表中的所有数据，MYSQL中不支持该查询，仅限了解</p></blockquote><h5 id="6-7-4、自连接"><a href="#6-7-4、自连接" class="headerlink" title="6.7.4、自连接"></a>6.7.4、自连接</h5><p>仅用一张表作多表查询，直白的讲就是一张表中数据含有多种关系，使用多表查询的语法，来查询一张表，查询过程中必须使用别名；</p><p>多用在分类数据、省市县分类数据、权限…</p><p>举例如下：</p><p>内连接：</p><p><img src="/2019/11/16/MySQL/inner.png"></p><p><img src="/2019/11/16/MySQL/inner2.png"></p><p>外连接：</p><p><img src="/2019/11/16/MySQL/inner1.png"></p><p><img src="/2019/11/16/MySQL/leftinner.png"></p><h5 id="6-7-5、子查询"><a href="#6-7-5、子查询" class="headerlink" title="6.7.5、子查询"></a>6.7.5、子查询</h5><p>子查询：将一个查询结果作为另一个查询的对象，直白的讲就是SQL语句嵌套</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表)#真的有意义吗？看本小节后面的例子<br><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> 表 <span class="hljs-keyword">where</span> 条件-&gt;条件中包含查询语句<br></code></pre></td></tr></table></figure><blockquote><p>查询零售价比罗技MX1100更高的所有商品信息。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">WHERE</span> sale_price&gt;(<span class="hljs-keyword">SELECT</span> sale_price <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">WHERE</span> product_name=<span class="hljs-string">&#x27;罗技MX1100&#x27;</span>);<br></code></pre></td></tr></table></figure><p>查询分类编号和折扣与罗技M100相同的所有商品信息。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">WHERE</span> (dir_id,cutoff)=<br>(<span class="hljs-keyword">SELECT</span> dir_id,cutoff <span class="hljs-keyword">FROM</span> product <span class="hljs-keyword">WHERE</span> productName = <span class="hljs-string">&#x27;罗技M100&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Select * from (select * from 表)；这样查询有意思吗？好像没有</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> product a) b;#Every derived <span class="hljs-keyword">table</span> must have its own <span class="hljs-keyword">alias</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/16/MySQL/zichasample.png"></p><h5 id="6-7-6、UNION联合查询"><a href="#6-7-6、UNION联合查询" class="headerlink" title="6.7.6、UNION联合查询"></a>6.7.6、UNION联合查询</h5><p>作用：UNION可以<strong>把多组结构相同的SELECT查询结果纵向合并</strong>。</p><p>1、合并的数据结构必须结构相等；</p><p>2、需要查询结果的结构相同即可，与查询的字段、字段别名及类型的设置无关；</p><p>3、UNOIN联合查询返回的列名是由第一个SELECT查询的字段名确定。  </p><p>4、<code>UNION</code>（不允许重复值） 和<code>UNION ALL</code>（允许重复值，性能高）。</p><p>5、有排序需求时，每个SELECT语句需要使用<code>()</code>和<code>LIMIT子句</code>。</p><p><strong>为什么需要使用UNOIN：</strong></p><p>有的系统，它表里面的数据量是非常大的，我们这时候就可能为了优化数据库提高查询速度，将比如说将表通过年/季度/类型把一张表分成多张表，如：</p><p> {order2014、 order2015 、order2016 }、{shop_sc 、 shop_bj 、shop_sh }</p><p><img src="/2019/11/16/MySQL/union.png"></p><p>案例，如下：</p><p>（1）准备两张表：order2014与order2015</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> order2014(id <span class="hljs-type">int</span>,`<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2014(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;订单一&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2014(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;订单二&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2014(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;订单三&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2014(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;订单四&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2014(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;订单五&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> order2015(id <span class="hljs-type">int</span>,`<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>));<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2015(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;订单六&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2015(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;订单七&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2015(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;订单八&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2015(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;订单九&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> order2015(id,<span class="hljs-type">name</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;订单四&#x27;</span>);<br></code></pre></td></tr></table></figure><p>（2）执行UNION的代码：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> order2014 <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> order2015;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/16/MySQL/union1.png"></p><p>（3）<code>失败：</code>将两个不同结构的查询结果UNION导致查询失败：</p><p><img src="/2019/11/16/MySQL/wrongunion.png"></p><h3 id="7、数据操纵"><a href="#7、数据操纵" class="headerlink" title="7、数据操纵"></a>7、数据操纵</h3><h4 id="7-1、添加记录"><a href="#7-1、添加记录" class="headerlink" title="7.1、添加记录"></a>7.1、添加记录</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Insert</span> into 表(字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>..) values(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>…)  //推荐写法<br></code></pre></td></tr></table></figure><p>如果插入的表中的主键是自增类型的，可以不用插入值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> 表(字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>)<span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入多条数据【MYSQL】<br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> 表 <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>)  <span class="hljs-operator">/</span><span class="hljs-operator">/</span>针对表所有字段进行插入操作<br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> 表(字段) <span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> 表<span class="hljs-number">2</span>  <span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询结果插入<br><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> 表 <span class="hljs-keyword">select</span> 字段 <span class="hljs-keyword">from</span> 表<span class="hljs-number">2</span>  <span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询结果，全表插入<br></code></pre></td></tr></table></figure><p>在进行数据添加的过程中，必须将插入的字段和值相对应，否则会报错。</p><h4 id="7-2、修改数据"><a href="#7-2、修改数据" class="headerlink" title="7.2、修改数据"></a>7.2、修改数据</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Update 表 <span class="hljs-keyword">set</span> 字段=值 <span class="hljs-keyword">where</span> 条件  <span class="hljs-comment">//修改数据仅能单字段修改；带条件修改，否则修改全表</span><br></code></pre></td></tr></table></figure><blockquote><p>将零售价大于300的货品零售价上调0.2倍</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UPDATE</span>  product SET sale_price = sale_price * <span class="hljs-number">1</span>.<span class="hljs-number">2</span> WHERE sale_price &gt; <span class="hljs-number">300</span>;<br></code></pre></td></tr></table></figure><p>将零售价大于300的有线鼠标的货品零售价上调0.1倍</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">UPDATE</span> product p <span class="hljs-keyword">JOIN</span> product_category pd <span class="hljs-keyword">ON</span> p.category_id = pd.id<br><span class="hljs-keyword">SET</span> p.sale_price = p.sale_price * <span class="hljs-number">1.1</span><br><span class="hljs-keyword">WHERE</span> sale_price &gt; <span class="hljs-number">300</span> <span class="hljs-keyword">AND</span> pd.category_name =<span class="hljs-string">&quot;有线鼠标&quot;</span>;<br></code></pre></td></tr></table></figure></blockquote><h4 id="7-3、删除数据"><a href="#7-3、删除数据" class="headerlink" title="7.3、删除数据"></a>7.3、删除数据</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表 <span class="hljs-keyword">WHERE</span> 条件  //删除数据带<span class="hljs-keyword">where</span>条件子句，否则删除全表数据<br></code></pre></td></tr></table></figure><h3 id="8、索引INDEX"><a href="#8、索引INDEX" class="headerlink" title="8、索引INDEX"></a>8、索引INDEX</h3><p>在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。</p><h4 id="8-1、使用索引的注意点"><a href="#8-1、使用索引的注意点" class="headerlink" title="8.1、使用索引的注意点"></a>8.1、使用索引的注意点</h4><blockquote><p>1、索引也是数据库中的数据库对象；<br>2、在数据库中用来加速对表的查询；<br>3、通过使用快速路径访问方法快速定位数据,减少了磁盘的I/O；<br>4、与表独立存放（还会占用一定的存储空间），以空间换时间；<br>5、但是并不是所有字段都加上索引好，索引的维护(添删改)是比较耗费性能的；<br>7、常见索引失效的情况：</p><blockquote><ol><li>like的”nihao%”这种形式以外的其他形式都会导致索引失效(因此查询的速度是非常慢的)</li><li>Select * from sss where 1=1 ：索引失效</li><li>Sql注入 </li></ol></blockquote></blockquote><h4 id="8-2、什么列适合建索引"><a href="#8-2、什么列适合建索引" class="headerlink" title="8.2、什么列适合建索引"></a>8.2、什么列适合建索引</h4><p>索引的维护(添删改)是比较耗费性能的，根据查询与添删改的的频率来确定，一般经常查询，不经常修改的列，这个列中的重复数据比较多的情况，可以加索引。</p><blockquote><p>1、表的主键、外键必须有索引；<br>2、数据量超过30000的表应该有索引；<br>3、经常与其他表进行连接的表，在连接字段上应该建立索引；<br>4、经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；<br>5、索引应该建在选择性高的字段上；<br>6、索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；</p></blockquote><h4 id="8-3、创建索引"><a href="#8-3、创建索引" class="headerlink" title="8.3、创建索引:"></a>8.3、创建索引:</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> 索引名称 <span class="hljs-keyword">ON</span> 表名 (列名)<br></code></pre></td></tr></table></figure><h4 id="8-4、删除索引"><a href="#8-4、删除索引" class="headerlink" title="8.4、删除索引:"></a>8.4、删除索引:</h4><p>方式一：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> 索引名 <span class="hljs-keyword">ON</span> 表名 <br></code></pre></td></tr></table></figure><p>方式二: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> 索引名<br></code></pre></td></tr></table></figure><h3 id="9、视图VIEW"><a href="#9、视图VIEW" class="headerlink" title="9、视图VIEW"></a>9、视图VIEW</h3><p>视图是由<strong>SELECT语句</strong>组成的<code>虚拟表</code>。</p><p>1、视图的名字必须唯一，不能和其它表或视图重名；<br>2、视图可以嵌套使用，也就是在一个视图基础上继续定义新的视图；<br>3、视图创建和删除只影响视图本身，不影响所使用的基本表。</p><p><img src="/2019/11/16/MySQL/view.png"></p><h4 id="9-1、为什么要使用视图"><a href="#9-1、为什么要使用视图" class="headerlink" title="9.1、为什么要使用视图"></a>9.1、为什么要使用视图</h4><ol><li><strong>简化复杂的查询</strong>，将常用的、比较复杂的SELECT语句，创建一个视图，就能方便以后多次调用。</li><li><strong>安全原因</strong>，比如，只想让权限低的用户看到一个表的部分字段，而隐藏机密的部分。</li></ol><h4 id="9-2、视图应用场景"><a href="#9-2、视图应用场景" class="headerlink" title="9.2、视图应用场景"></a>9.2、视图应用场景</h4><p>视图主要使用在<strong>查询的场景中</strong>。一般不使用视图进行增删改的操作</p><p><img src="/2019/11/16/MySQL/view1.png"></p><h4 id="9-3、使用视图"><a href="#9-3、使用视图" class="headerlink" title="9.3、使用视图"></a>9.3、使用视图</h4><p><img src="/2019/11/16/MySQL/view3.png"></p><h5 id="9-3-1、创建视图"><a href="#9-3-1、创建视图" class="headerlink" title="9.3.1、创建视图"></a>9.3.1、创建视图</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> 视图名 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> 查询语句;<br></code></pre></td></tr></table></figure><h5 id="9-3-2、视图查询"><a href="#9-3-2、视图查询" class="headerlink" title="9.3.2、视图查询"></a>9.3.2、视图查询</h5><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Select</span> 字段名 from 视图名 <span class="hljs-keyword">where</span> 子句 <span class="hljs-params">...</span>;<br></code></pre></td></tr></table></figure><h5 id="9-3-3、修改视图"><a href="#9-3-3、修改视图" class="headerlink" title="9.3.3、修改视图"></a>9.3.3、修改视图</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">view</span> 视图名 <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> 查询语句;<br></code></pre></td></tr></table></figure><h5 id="9-3-4、删除视图"><a href="#9-3-4、删除视图" class="headerlink" title="9.3.4、删除视图"></a>9.3.4、删除视图</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">drop</span> <span class="hljs-built_in">view</span> 视图名;<br></code></pre></td></tr></table></figure><h3 id="10、事务"><a href="#10、事务" class="headerlink" title="10、事务"></a>10、事务</h3><blockquote><p>在没有接触事务之前。。。</p><p>注意：MySQL默认是自动提交模式，也就是一条SQL语句完成后，系统就自动提交了。</p><p>查看当前的模式是否为自动提交模式：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;%autocommit&#x27;</span>;<br></code></pre></td></tr></table></figure><p>开启自动提交模式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">autocommit</span>=1;<br></code></pre></td></tr></table></figure><p>关闭自动提交模式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">autocommit</span>=0;<br></code></pre></td></tr></table></figure></blockquote><p>MySQL的表类型必须是InnoDB，才能支持事务。</p><p>事务是数据库商用最基本最重要的特点。</p><p>事务是保证数据库数据完整性和安全性最重要的技术。</p><p>事务是要求一组连续的SQL语句要么全部成功执行，要么数据返回到开启事务前的状态。不允许部分SQL语句成功，部分不成功。</p><p>10.1、事务特性（ACID）：</p><blockquote><p>1、原子性(Atomicity):事务中的多个操作，不可分割，要么都成功，要么都失败。<br>2、一致性(Consistency): 事务操作之后, 数据库所处的状态和业务规则是一致的; 比如a,b账户相互转账之后，总金额不变。<br>3、隔离性(Isolation):事务必须与其他事务进行的数据更改相隔离。这意味着没有其他操作可以改变中间态(没有提交的)的数据。为了避免中间态数据被更改，事务必须要么等待来自其他事务的更改被提交，要么只能查看到处于上一个提交状态的数据。<br>4、持久性(Durability):在一个事务完成，这些更改的数据将永久存在。</p></blockquote><p>10.2、事务使用场景：</p><blockquote><ol><li>操作步骤需要回滚的。比如，银行转账、购物下单等。</li><li>遇到异常情况，数据需要回滚的。比如，断电、磁盘坏死等。</li></ol></blockquote><p>10.3、事务的使用：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>;<br><span class="hljs-keyword">insert</span> 语句<br><span class="hljs-keyword">delete</span> 语句<br><span class="hljs-keyword">update</span> 语句<br><span class="hljs-keyword">select</span> 语句<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>10.3.1、开始事务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>;<br></code></pre></td></tr></table></figure><p>10.3.2、撤销事务</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">rollback<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>10.3.3、提交事务</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">commit<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>举例：</p><blockquote><p>刘备向曹操借2000元钱。</p><p>分析：</p><p>第一步，先开启事务。</p><p>第二步，先判断曹操的账户值是大于等于2000，如果判断为假，回滚事务。如果判断为真，继续。</p><p>第三步，更新曹操的账户值，减2000。如果执行失败，回滚事务。如果执行成功，继续。</p><p>第四步，更新刘备的账户值，加2000。如果执行失败，回滚事务。如果执行成功，继续。</p><p>第五步，提交事务。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-type">money</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stu_id=<span class="hljs-number">14</span>;<br><span class="hljs-meta">#rollback;</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> <span class="hljs-type">money</span>=<span class="hljs-type">money</span><span class="hljs-number">-2000</span> <span class="hljs-keyword">where</span> stu_id=<span class="hljs-number">14</span>;<br><span class="hljs-meta">#rollback;</span><br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> <span class="hljs-type">money</span>=<span class="hljs-type">money</span>+<span class="hljs-number">2000</span> <span class="hljs-keyword">where</span> stu_id=<span class="hljs-number">17</span>;<br><span class="hljs-meta">#rollback;</span><br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><h3 id="11、函数"><a href="#11、函数" class="headerlink" title="11、函数"></a>11、函数</h3><h4 id="2-1、聚集函数"><a href="#2-1、聚集函数" class="headerlink" title="2.1、聚集函数"></a>2.1、聚集函数</h4><p>1、Count:总记录数字</p><p>2、Sum：求和</p><p>3、Avg：平均值</p><p>4、Max：最大值</p><p>5、Min：最小值</p><h4 id="2-2、CAST-函数"><a href="#2-2、CAST-函数" class="headerlink" title="2.2、CAST()函数"></a>2.2、CAST()函数</h4><p>数据类型转换可以通过CAST()和CONVERT()函数来实现。大多数情况下，这两个函数是重叠的，它们反映了SQL语言的演化历史。这两个函数的功能相似，不过它们的语法不同。虽然并非所有类型的值都能转变为其他数据类型，但总的来说，任何可以转换的值都可以用简单的函数实现转换。</p><p>CAST()函数的参数是一个表达式，它包括用AS关键字分隔的源值和目标数据类型。语法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">cast</span><span class="hljs-params">(值 as 类型)</span></span><br><span class="hljs-function"><span class="hljs-title">cast</span><span class="hljs-params">(<span class="hljs-string">&#x27;123&#x27;</span> as SIGNED)</span></span> 将<span class="hljs-number">123</span>转换为int类型，返回值为整型类型<br></code></pre></td></tr></table></figure><p><strong>思考：</strong>若如果试图将一个代表小数的字符串转换为整型值，又会出现什么情况呢？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">cast</span><span class="hljs-params">(<span class="hljs-string">&#x27;123.4&#x27;</span> as SIGNED)</span></span><br></code></pre></td></tr></table></figure><p>CAST()函数和CONVERT()函数都不能执行四舍五入或截断操作。由于123.4不能用int数据类型来表示，所以对这个函数调用将产生一个错误。要返回一个合法的数值，就必须使用能处理这个值的数据类型。对于这个例子，存在多个可用的数据类型。如果通过CAST()函数将这个值转换为<strong>decimal类型</strong>，需要首先定义decimal值的精度与小数位数。</p><h4 id="2-3、DECIMAL类型"><a href="#2-3、DECIMAL类型" class="headerlink" title="2.3、DECIMAL类型"></a>2.3、DECIMAL类型</h4><p>MySQL DECIMAL数据类型用于在数据库中存储精确的数值。我们经常将DECIMAL数据类型用于保留准确精确度的列，例如会计系统中的货币数据。</p><p>要定义数据类型为DECIMAL的列，请使用以下语法：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">column</span> <span class="hljs-built_in">decimal</span>(P,D)<br></code></pre></td></tr></table></figure><p>在上面的语法中：</p><ul><li>  P是表示有效数字数的精度。 P范围为<code>1〜65</code>。</li><li>  D是表示小数点后的位数。 D的范围是<code>0~30</code>。MySQL要求D&lt;=P。</li></ul><p>DECIMAL(P，D)表示列可以存储D位小数的P位数。十进制列的实际范围取决于精度和刻度。</p><p>综上，可以将上述小数转换为整数：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> cast(<span class="hljs-string">&#x27;123.4&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">decimal</span>(P,D))<br></code></pre></td></tr></table></figure><h4 id="2-4、convert-函数"><a href="#2-4、convert-函数" class="headerlink" title="2.4、convert()函数"></a>2.4、convert()函数</h4><p>对于简单类型转换，CONVERT()函数和CAST()函数的功能相同，只是语法不同。CAST()函数一般更容易使用，其功能也更简单。语法如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> convert(expr, <span class="hljs-keyword">type</span>)<br><span class="hljs-keyword">select</span> convert(<span class="hljs-string">&#x27;123&#x27;</span>,signed)<br></code></pre></td></tr></table></figure><p>可以转换的类型是有限制的。这个类型可以是以下值其中的一个：</p><ul><li>  二进制，同带binary前缀的效果 : BINARY  </li><li>  字符型，可带参数 : CHAR()   </li><li>  日期 : DATE   </li><li>  时间: TIME   </li><li>  日期时间型 : DATETIME   </li><li>  浮点数 : DECIMAL   </li><li>  整数 : SIGNED   </li><li>  无符号整数 : UNSIGNED</li></ul><h4 id="2-5、IFNULL"><a href="#2-5、IFNULL" class="headerlink" title="2.5、IFNULL"></a>2.5、IFNULL</h4><p>IFNULL() 函数用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。</p><p>IFNULL() 函数语法格式为：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">IFNULL(<span class="hljs-params">expression</span>, <span class="hljs-params">alt_value</span>)</span><br></code></pre></td></tr></table></figure><p>如果第一个参数的表达式 expression 为 NULL，则返回第二个参数的备用值。</p><h4 id="2-6、自定义函数"><a href="#2-6、自定义函数" class="headerlink" title="2.6、自定义函数"></a>2.6、自定义函数</h4><p>语法格式：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">create <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(参数名 参数类型,<span class="hljs-rest_arg">...) </span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-rest_arg">returns</span> 返回值类型</span></span><br><span class="hljs-function"><span class="hljs-params">begin</span></span><br><span class="hljs-function"><span class="hljs-params">sql<span class="hljs-rest_arg">...</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-rest_arg">return</span> 0;</span></span><br><span class="hljs-function"><span class="hljs-params">end;</span></span><br></code></pre></td></tr></table></figure><p>调用方式：</p><p>和使用MySQL自带的函数一样的方式</p><p>示例代码:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> mysum(num1 <span class="hljs-type">int</span>,num2 <span class="hljs-type">int</span>) <br><span class="hljs-keyword">returns</span> <span class="hljs-type">int</span> <br><span class="hljs-keyword">begin</span><br><br><span class="hljs-keyword">return</span> num1+num2;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">select</span> mysum(<span class="hljs-number">123</span>,<span class="hljs-number">234</span>);<br></code></pre></td></tr></table></figure><h3 id="12、存储过程"><a href="#12、存储过程" class="headerlink" title="12、存储过程"></a>12、存储过程</h3><h4 id="12-1、什么是存储过程"><a href="#12-1、什么是存储过程" class="headerlink" title="12.1、什么是存储过程"></a>12.1、什么是存储过程</h4><p>存储过程(Stored Procedure)：一组可编程的函数，是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。</p><h4 id="12-2、为什么存储过程"><a href="#12-2、为什么存储过程" class="headerlink" title="12.2、为什么存储过程"></a>12.2、为什么存储过程</h4><p>①将重复性很高的一些操作，封装到一个存储过程中，简化了对这些SQL的调用</p><p>②批量处理：SQL+循环，减少流量，也就是“跑批”</p><p>③统一接口，确保数据的安全</p><p>④性能比较高</p><p>相对于oracle数据库来说，MySQL的存储过程相对功能较弱，使用较少。</p><h4 id="12-3、如何使用存储过程"><a href="#12-3、如何使用存储过程" class="headerlink" title="12.3、如何使用存储过程"></a>12.3、如何使用存储过程</h4><h5 id="12-3-1、创建存储过程"><a href="#12-3-1、创建存储过程" class="headerlink" title="12.3.1、创建存储过程"></a>12.3.1、创建存储过程</h5><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">DELIMITER <span class="hljs-comment">//</span><br><span class="hljs-keyword">create</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> 存储过程名<span class="hljs-params">([存储过程参数列表])</span></span><br><span class="hljs-function"><span class="hljs-title">begin</span></span><br><span class="hljs-function"><span class="hljs-title">set</span> 参数名=参数;</span><br>SQL语句<br><span class="hljs-keyword">end</span> <span class="hljs-comment">//</span><br><br></code></pre></td></tr></table></figure><h5 id="12-3-2、为什么使用delimiter？"><a href="#12-3-2、为什么使用delimiter？" class="headerlink" title="12.3.2、为什么使用delimiter？"></a>12.3.2、为什么使用delimiter？</h5><p>mysql默认以分号作为sql语句的结束来进行执行，当我们在创建存储过程时，为了不让完整的存储过程语句由于分号而提前执行，需要临时规定以//或者$$来作为结束符号。这样的话，创建存储过程时，中间的分号会被忽略，直到遇到//符号才执行语句。</p><h5 id="12-3-3、存储过程参数分类"><a href="#12-3-3、存储过程参数分类" class="headerlink" title="12.3.3、存储过程参数分类"></a>12.3.3、存储过程参数分类</h5><p>存储过程可以有0个或多个参数，用于存储过程的定义。</p><p>3种参数类型：</p><p><strong>IN输入参数</strong>：表示调用者向过程传入值（传入值可以是字面量或变量）</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">delimiter <span class="hljs-comment">//</span><br><span class="hljs-keyword">create</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> 存储过程<span class="hljs-params">(<span class="hljs-keyword">in</span> 变量名 类型)</span></span><br><span class="hljs-function"><span class="hljs-title">begin</span></span><br><span class="hljs-function"><span class="hljs-title">set</span> 变量名=值;</span><br>SQL语句<br><span class="hljs-keyword">end</span> <span class="hljs-comment">//</span><br><br>call 存储过程名(参数值)<br></code></pre></td></tr></table></figure><p><strong>OUT输出参数</strong>：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">delimiter <span class="hljs-comment">//</span><br><span class="hljs-keyword">create</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> 存储过程<span class="hljs-params">(<span class="hljs-keyword">out</span> 变量名 类型)</span></span><br><span class="hljs-function"><span class="hljs-title">begin</span></span><br><span class="hljs-function">    <span class="hljs-title">set</span> 变量名=值;</span><br>    SQL语句<br><span class="hljs-keyword">end</span> <span class="hljs-comment">//</span><br>call 存储过程名(参数值)<br></code></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">out_param</span><span class="hljs-params">(<span class="hljs-keyword">out</span> p_out int)</span></span><br><span class="hljs-function">      <span class="hljs-title">begin</span></span><br><span class="hljs-function">        <span class="hljs-title">select</span> <span class="hljs-title">p_out</span>;</span><br>        <span class="hljs-keyword">set</span> p_out=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">select</span> p_out;<br>      <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">set</span> @p_out=<span class="hljs-number">1</span>;<br>call out_param(@p_out);<br><span class="hljs-keyword">select</span> @p_out;<br></code></pre></td></tr></table></figure><p><strong>INOUT输入输出参数</strong>：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">out_param</span><span class="hljs-params">(inout p_out int)</span></span><br><span class="hljs-function">  <span class="hljs-title">begin</span></span><br><span class="hljs-function">   <span class="hljs-title">select</span> <span class="hljs-title">p_out</span>;</span><br>   <span class="hljs-keyword">set</span> p_out=<span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">select</span> p_out;<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">set</span> @p_out=<span class="hljs-number">1</span>;<br>call out_param(@p_out);<br><span class="hljs-keyword">select</span> @p_out;<br></code></pre></td></tr></table></figure><h5 id="12-3-4、调用存储过程"><a href="#12-3-4、调用存储过程" class="headerlink" title="12.3.4、调用存储过程"></a>12.3.4、调用存储过程</h5><p>调用存储过程语法</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">set</span> @参数名<br><span class="hljs-keyword">call</span> 存储过程名字([参数])<br></code></pre></td></tr></table></figure><h3 id="13、正则表达式"><a href="#13、正则表达式" class="headerlink" title="13、正则表达式"></a>13、正则表达式</h3><p>在前面的章节我们已经了解到MySQL可以通过 LIKE …%来进行模糊匹配。 </p><p>MySQL 同样也支持其他正则表达式的匹配， MySQL中使用 REGEXP 操作符来进行正则表达式匹配</p><p><img src="/2019/11/16/MySQL/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png"></p><p>需求：查找name字段中以’Y’为开头的所有数据：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> REGEXP <span class="hljs-string">&#x27;^Y&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="14、数据备份"><a href="#14、数据备份" class="headerlink" title="14、数据备份"></a>14、数据备份</h3><p>在命令行窗口进行，若操作系统版本高，则使用管理员模式</p><p>导出：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">mysqldump -u账户 -<span class="hljs-selector-tag">p</span>密码 数据库名称&gt;脚本文件存储地<br>mysqldump -uroot -padmin jdbcdemo&gt; C:/shop_bak.sql<br></code></pre></td></tr></table></figure><p>导入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u账户 -<span class="hljs-selector-tag">p</span>密码 数据库名称&lt; 脚本文件存储地址<br>mysql -uroot -padmin jdbcdemo&lt; C:/shop_bak.sql<br></code></pre></td></tr></table></figure><p>使用可视化导入导出，Navicat工具的导入和导出/Navicat工具的备份和还原</p><h3 id="15、从容面试"><a href="#15、从容面试" class="headerlink" title="15、从容面试"></a>15、从容面试</h3><p>1、说说自连接的应用场景；</p><p>2、你一般都使用什么方式进行数据备份，在你之前的项目中备份的周期都是多少？</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FTP服务搭建</title>
    <link href="/2019/11/15/FTP%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <url>/2019/11/15/FTP%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="FTP服务搭建"><a href="#FTP服务搭建" class="headerlink" title="FTP服务搭建"></a>FTP服务搭建</h2><p><a href="https://baike.baidu.com/item/FTP%E5%8D%8F%E8%AE%AE">FTP协议</a>（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。</p><p>FTP协议两部分组成，<code>FTP服务器</code>和<code>FTP客户端</code>。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。</p><p>在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上。此外，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议。</p><p>默认情况下FTP协议使用TCP端口中的 <code>20[传输数据]</code>和<code>21[传输控制信息]</code>这两个端口。<strong>但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关</strong>。</p><p>FTP支持两种传输模式，如果采用<code>主动模式（Standard也就是 PORT方式）</code>，那么数据传输端口就是20；如果采用<code>被动模式 （Passive也就是PASV方式）</code>，则具体最终使用哪个端口要<code>服务器端和客户端协商决定</code>。</p><blockquote><p><strong>Standard模式：</strong>FTP 客户端首先和FTP服务器的TCP 21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送PORT命令。 PORT命令包含了<code>客户端用什么端口接收数据</code>，在传送数据的时候，<code>服务器端通过自己的TCP 20端口</code>连接至客户端的指定端口发送数据， FTP server必须和客户端建立这样一个新的连接用来传送数据。</p><p><strong>Passive模式：</strong>在建立控制通道的时候和Standard模式类似，但建立连接后发送的不是Port命令，而是Pasv命令。FTP服务器收到Pasv命令后，随机打开一个高端端口（<a href="https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3%E5%8F%B7">端口号</a>大于1024）并且通知客户端在这个端口上传送数据，客户端通过<code>三次握手</code>与FTP服务器指定的这个端口<code>建立数据通道</code>，FTP服务器将通过这个端口进行数据的传送。</p><p>很多<a href="https://baike.baidu.com/item/%E9%98%B2%E7%81%AB%E5%A2%99">防火墙</a>在设置的时候都是不允许接受外部发起的连接的，所以许多位于防火墙后或内网的FTP服务器不支持PASV模式，因为客户端无法穿过防火墙打开FTP服务器的高端端口；而许多内网的客户端不能用PORT模式登陆FTP服务器，因为从服务器的TCP 20无法和内部网络的客户端建立一个新的连接，造成无法工作。</p></blockquote><p>同大多数Internet服务一样，FTP也是一个客户/服务器系统。依照 FTP 协议提供服务，进行文件传送的计算机就是 FTP服务器，而连接FTP服务器，遵循FTP协议与服务器传送文件的电脑就是FTP客户端。用户要连上FTP 服务器，就要用到 FTP 的客户端软件，通常 Windows自带“ftp”命令，这是一个命令行的 FTP客户程序，另外常用的 FTP 客户程序还有FileZilla、 CuteFTP、Ws_FTP、Flashfxp、LeapFTP等。</p><p>互联网中有很大一部分 FTP 服务器被称为<code>“匿名”（Anonymous）FTP 服务器</code>。这类服务器的目的是向公众提供文件拷贝服务，不要求用户事先在该服务器进行登记注册，也不用取得FTP服务器的授权。虽然目前使用WWW环境已取代匿名FTP成为最主要的信息查询方式，但是匿名FTP仍是 Internet上传输分发软件的一种基本方法。如red hat 、autodesk等公司的匿名站点。</p><p>FTP协议的任务是从一台计算机将文件传送到另一台计算机，它与这两台计算机所处的位置、联接的方式、甚至是是否使用相同的操作系统无关。假设两台计算机通过ftp协议对话，并且能访问Internet，你可以用ftp命令来传输文件。尽管每种操作系统使用上有某一些细微差别，但是每种协议基本的命令结构是相同的。</p><p>FTP的传输数据有两种方式：<code>ASCII传输模式</code>和<code>二进制数据传输模式</code>。注意传输二进制文件和文本文件所用的数据传输模式。 在大多数计算机上，ASCII方式一般假设每一字符的第一有效位无意义，因为ASCII字符组合不使用它。如果你传输二进制文件，所有的位都是重要的。 </p><h3 id="1、在CentOS上安装FTP服务"><a href="#1、在CentOS上安装FTP服务" class="headerlink" title="1、在CentOS上安装FTP服务"></a>1、在CentOS上安装FTP服务</h3><p>vsftpd(very secure FTP daemon),是一个UNIX类操作系统上运行FTP协议的服务器。</p><p>检测系统是否已安装过vsftpd：        <strong>rpm -q vsftpd</strong>或<strong>vsftpd -v</strong><br>安装：        <strong>yum -y install vsftpd</strong><br>查看安装位置：    <strong>whereis vsftpd</strong><br>开机自启动：    <strong>systemctl enable vsftpd.service</strong></p><blockquote><p>Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.<br>如果想让一个进程开机自启动，使用 systemctl enable XXXX.service 命令就是了<br>让这个程序自己的启动配置创建一个链接到系统的启动配置文件下，系统开机的时候就能运行 /usr/lib/systemd/system/ 文件下的配置文件对应的程序。</p></blockquote><p>服务启动/重启/停止：    <strong>systemctl start/restart/stop vsftpd</strong><br>查看服务状态：    <strong>systemctl status vsftpd</strong></p><h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p>vim /etc/vsftpd/vsftpd.conf</p><p>vim编辑器:set number显示行号</p><p>注意：vsftpd 配置文件如果修改，需要重新启动 vsftpd ：systemctl restart vsftpd.service</p><h4 id="2-1、匿名权限控制"><a href="#2-1、匿名权限控制" class="headerlink" title="2.1、匿名权限控制"></a>2.1、匿名权限控制</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">anonymous_enable</span>=<span class="hljs-literal">NO</span><span class="hljs-comment">#是否允许匿名访问，NO禁用匿名登录</span><br><span class="hljs-attr">no_anon_password</span>=<span class="hljs-literal">YES</span><span class="hljs-comment">#匿名用户login时不询问口令</span><br></code></pre></td></tr></table></figure><p>下面这四个主要语句控制这文件和文件夹的上传、下载、创建、删除和重命名</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">anon_upload_enable</span>=<span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span><span class="hljs-comment">#控制匿名用户对文件（非目录）上传权限。</span><br><span class="hljs-attr">anon_world_readable_only</span>=<span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span> <span class="hljs-comment">#控制匿名用户对文件的下载权限</span><br><span class="hljs-attr">anon_mkdir_write_enable</span>=<span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span> <span class="hljs-comment">#控制匿名用户对文件夹的创建权限</span><br><span class="hljs-attr">anon_other_write_enable</span>=<span class="hljs-literal">yes</span>|<span class="hljs-literal">no</span> <span class="hljs-comment">#控制匿名用户对文件和文件夹的删除和重命名</span><br></code></pre></td></tr></table></figure><p>注：匿名用户下载是使用的是nobody这个用户，所以相应的o这个位置要有r权限才能被下载。若想让匿名用户能上传和删除权限，必需设置。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile">write_enable=YES<span class="hljs-comment">#全局设置，是否容许写入（无论是匿名还是本地用户，若要写入的话，就要开启）</span><br>anon_root=&#x27;dir&#x27;<span class="hljs-comment">#匿名用户主目录，默认/var/ftp/</span><br>anon_max_rate＝<span class="hljs-comment">#匿名用户速度限制，单位b/s</span><br>anon_umask＝077<span class="hljs-comment">#匿名用户上传文件的掩码(若使匿名用户上传的文件能直接被匿名下载，就设置这里为073)</span><br>chown_uploads=YES<span class="hljs-comment">#所有匿名上传的文件的所属用户将会被更改成chown_username</span><br>chown_username=whoever <span class="hljs-comment">#上传文件所属的用户</span><br></code></pre></td></tr></table></figure><h4 id="2-2、本地用户权限控制"><a href="#2-2、本地用户权限控制" class="headerlink" title="2.2、本地用户权限控制"></a>2.2、本地用户权限控制</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile">write_enable=YES <span class="hljs-comment">#可以上传(全局控制) 删除，重命名</span><br>local_umask=022  <span class="hljs-comment">#设置本地用户上传文件默认文件掩码022</span><br><span class="hljs-comment">#FTP上本地的文件权限，默认是077，不过vsftpd安装后的配置文件里默认是022</span><br><br>local_root=  <span class="hljs-comment">#设置一个本地用户登录后进入到的目录</span><br>download_enable=  <span class="hljs-comment">#限制用户的下载权限</span><br><br>userlist_enable=YES <span class="hljs-comment">#限制了这里的用户不能访问</span><br>userlist_file=/etc/vsftpd/user_list <span class="hljs-comment">#在文件中指定限制的用户</span><br><span class="hljs-comment"># vsftpd userlist</span><br><span class="hljs-comment"># If userlist_deny=NO, only allow users in this file</span><br><span class="hljs-comment"># If userlist_deny=YES (default), never allow users in this file, and</span><br><span class="hljs-comment"># do not even prompt for a password.</span><br><span class="hljs-comment"># Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers</span><br><span class="hljs-comment"># for users that are denied.</span><br></code></pre></td></tr></table></figure><p>可以通过以下配置项来控制用户切换目录。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">chroot_list_enable</span>=<span class="hljs-literal">YES</span>　<span class="hljs-comment">#如果启动这项功能，则所有列在chroot_list_file之中的使用者不能更改根目录</span><br><span class="hljs-attr">chroot_list_file</span>=/etc/vsftpd/chroot_list <span class="hljs-comment">#指定限制的用户文件，指出被锁定在自家目录中的用户</span><br></code></pre></td></tr></table></figure><p>通过与chroot_local_user=YES|NO搭配能实现以下几种效果：<br>1、当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。<br>2、当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。<br>3、当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。<br>4、当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-attr">user_config_dir=</span> <span class="hljs-comment">#后面跟存放配置文件的目录</span><br><span class="hljs-comment">#在这个目录中，创建用户的单独配置文件，用哪个帐户登陆就用哪个帐户命名，用来实现不同用户不同权限。</span><br><br><span class="hljs-comment">#在每个用户单独的配置文件中，用下边的配置各用户的命令执行权限</span><br>cmds_allowed＝[ABOR,ACCT,APPE,CWD,CDUP,DELE,HELP,LIST,MODE,MDTM,MKD,NOOP,NLST,PASS,PASV,PORT,PWD,QUIT,REIN,RETR,RMD,RNFR,RNTO,SITE,SIZE,STOR,STAT,STOU,STRU,SYST,<span class="hljs-keyword">TYPE</span>,USER]<span class="hljs-comment">#指令权限设置</span><br></code></pre></td></tr></table></figure><p>1、不能下载、删除、重命名，只能上传</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cmds_allowed＝FEAT,REST,CWD,<span class="hljs-keyword">LIST</span>,MDTM,MKD,NLST,PASS,PASV,PORT,<span class="hljs-keyword">PWD</span>,QUIT,RMD,SIZE,STOR,<span class="hljs-keyword">TYPE</span>,USER,ACCT,<span class="hljs-keyword">APPE</span>,CDUP,<span class="hljs-keyword">HELP</span>,MODE,NOOP,REIN,STAT,STOU,STRU,SYST<br></code></pre></td></tr></table></figure><p>2、不能上传、删除、重命名，只能下载</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">write_enable</span>=<span class="hljs-literal">NO</span><br></code></pre></td></tr></table></figure><p>3、只能上传、删除和重命名，不能下载</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">download_enable＝<span class="hljs-keyword">NO</span><br></code></pre></td></tr></table></figure><p>4、只能下载、删除和重命名，不能上传</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cmds_allowed=FEAT,REST,CWD,<span class="hljs-keyword">LIST</span>,MDTM,MKD,NLST,PASS,PASV,PORT,<span class="hljs-keyword">PWD</span>,QUIT,RMD,RNFR,RNTO,RETR,DELE,SIZE,<span class="hljs-keyword">TYPE</span>,USER,ACCT,<span class="hljs-keyword">APPE</span>,CDUP,<span class="hljs-keyword">HELP</span>,MODE,NOOP,REIN,STAT,STOU,STRU,SYST<br></code></pre></td></tr></table></figure><blockquote><p>参数的详细解释：<br>ABOR - abort a file transfer 取消文件传输<br>CWD - change working directory 更改目录<br>DELE - delete a remote file 删除文件<br>LIST - list remote files 列目录<br>MDTM - return the modification time of a file 返回文件的更新时间<br>MKD - make a remote directory 新建文件夹<br>NLST - name list of remote directory<br>PASS - send password<br>PASV - enter passive mode<br>PORT - open a data port 打开一个传输端口<br>PWD - print working directory 显示当前工作目录<br>QUIT - terminate the connection 退出<br>RETR - retrieve a remote file 下载文件<br>RMD - remove a remote directory<br>RNFR - rename from<br>RNTO - rename to<br>SITE - site-specific commands<br>SIZE - return the size of a file 返回文件大小<br>STOR - store a file on the remote host 上传文件<br>TYPE - set transfer type<br>USER - send username<br> less common commands:<br>ACCT - send account information<br>APPE - append to a remote file<br>CDUP - CWD to the parent of the current directory<br>HELP - return help on using the server<br>MODE - set transfer mode<br>NOOP - do nothing<br>REIN - reinitialize the connection<br>STAT - return server status<br>STOU - store a file uniquely<br>STRU - set file transfer structure<br>SYST - return system type</p></blockquote><h4 id="2-3、虚拟用户设置"><a href="#2-3、虚拟用户设置" class="headerlink" title="2.3、虚拟用户设置"></a>2.3、虚拟用户设置</h4><p>虚拟用户使用PAM认证方式</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pam_service_name</span>=vsftpd<span class="hljs-comment">#设置PAM使用的名称，默认值为/etc/pam.d/vsftpd</span><br><span class="hljs-attr">check_shell</span>=<span class="hljs-literal">YES</span>   <span class="hljs-comment">#注意：仅在没有pam验证版本时有用,是否检查用户有一个有效的shell来登录</span><br><span class="hljs-attr">guest_enable</span>= <span class="hljs-literal">YES</span>|<span class="hljs-literal">NO</span>  <span class="hljs-comment">#启用虚拟用户，默认值为NO</span><br><span class="hljs-attr">guest_username</span>=ftp  <span class="hljs-comment">#映射虚拟用户，默认值为ftp；把虚拟用户映射到本地用户，虚拟用户=本地用户</span><br><br><span class="hljs-attr">virtual_use_local_privs</span>=<span class="hljs-literal">YES</span>|<span class="hljs-literal">NO</span> <br><span class="hljs-comment">#当该参数激活YES时，虚拟用户使用与本地用户相同的权限，当此参数关闭NO时，虚拟用户使用与匿名用户相同的权限，默认情况下此参数是关闭的（NO）。</span><br></code></pre></td></tr></table></figure><h4 id="2-4、访问控制设置"><a href="#2-4、访问控制设置" class="headerlink" title="2.4、访问控制设置"></a>2.4、访问控制设置</h4><p>两种控制方式：一种控制主机访问，另一种控制用户访问</p><h5 id="2-4-1、控制主机访问："><a href="#2-4-1、控制主机访问：" class="headerlink" title="2.4.1、控制主机访问："></a>2.4.1、控制主机访问：</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tcp_wrappers</span>=<span class="hljs-literal">YES</span>|<span class="hljs-literal">NO</span><br></code></pre></td></tr></table></figure><p>设置vsftpd是否与tcp wrapper相结合来进行主机的访问控制。默认值为YES。如果启用，则vsftpd服务器会检查/etc/hosts.allow 和/etc/hosts.deny 中的设置，来决定请求连接的主机，是否允许访问该FTP服务器。这两个文件可以起到简易的防火墙功能。</p><p>比如：若要仅允许192.168.10.1—192.168.10.254的用户可以连接FTP服务器，则在<br>/etc/hosts.allow<br>/etc/hosts.deny<br>文件中添加以下内容：</p><p>其格式: 限制的服务：ip(网段)<br>vsftpd:192.168.1.<br>vsftpd:192.168.1.12<br>vsftpd:192.168.1.0/255.255.255.0    #这里不能写成192.168.1.0/24</p><h5 id="2-4-2、控制用户访问："><a href="#2-4-2、控制用户访问：" class="headerlink" title="2.4.2、控制用户访问："></a>2.4.2、控制用户访问：</h5><p>/etc/vsftpd/下ftpusers和user_list文件    #用于保存不允许进行FTP登录的本地用户帐号，就是vsftp用户的黑名单</p><p>1、设置禁止user_list文件中的用户登录：要在主配置文件vsftpd.conf中修改如下两项，</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">userlist_enable</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">userlist_deny</span>=<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>说明：配置完以后，除了ftpusers文件和user_list文件中记录的ftp用户不能登录vsftp服务以外，其他的ftp用户都可以登录。</p><p>2、设置只允许user_list文件中的用户登录：同样的道理要把主配置文件vsftpd.conf 中的语句修改如下两项： </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">userlist_enable</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">userlist_deny</span>=<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>说明：配置完以后，只允许vsftpd.user_list文件中记录的ftp用户能登录vsftp服务，其他的ftp用户都不可以登录。</p><h4 id="2-5、超时设置"><a href="#2-5、超时设置" class="headerlink" title="2.5、超时设置"></a>2.5、超时设置</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">idle_session_timeout</span>=<span class="hljs-number">600</span> <span class="hljs-comment">#空闲连接超时</span><br><span class="hljs-attr">data_connection_timeout</span>=<span class="hljs-number">120</span> <span class="hljs-comment">#数据传输超时</span><br><span class="hljs-attr">ACCEPT_TIMEOUT</span>=<span class="hljs-number">60</span>  <span class="hljs-comment">#PAVS请求超时</span><br><span class="hljs-attr">connect_timeout</span>=<span class="hljs-number">60</span>  <span class="hljs-comment">#PROT模式连接超时</span><br></code></pre></td></tr></table></figure><h4 id="2-6、服务器功能选项"><a href="#2-6、服务器功能选项" class="headerlink" title="2.6、服务器功能选项"></a>2.6、服务器功能选项</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile">xferlog_enable=YES<span class="hljs-comment">#开启日记功能</span><br>xferlog_std_format=YES<span class="hljs-comment">#使用标准格式</span><br>log_ftp_protocol=NO<span class="hljs-comment">#当xferlog_std_format关闭且本选项开启时,记录所有ftp请求和回复,常作调试用</span><br>pasv_enable=YES<span class="hljs-comment">#允许使用pasv模式</span><br>pasv_promiscuous=NO<span class="hljs-comment">#关闭安全检查，请慎重考虑</span><br>port_enable=YES<span class="hljs-comment">#允许使用port模式</span><br>tcp_wrappers=YES<span class="hljs-comment">#开启tcp_wrappers支持</span><br>pam_service_name=vsftpd<span class="hljs-comment">#定义PAM 所使用的名称，预设为vsftpd</span><br>nopriv_user=nobody<span class="hljs-comment">#当服务器运行于最底层时使用的用户名</span><br>pasv_address=<span class="hljs-comment">#使vsftpd在pasv命令回复时跳转到指定的IP地址。【服务器联接跳转？？？】</span><br></code></pre></td></tr></table></figure><h4 id="2-7、服务器性能选项"><a href="#2-7、服务器性能选项" class="headerlink" title="2.7、服务器性能选项"></a>2.7、服务器性能选项</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile">ls_recurse_enable=YES<span class="hljs-comment">#是否能使用ls -R命令以防止浪费大量的服务器资源</span><br>one_process_model<span class="hljs-comment">#是否使用单进程模式</span><br>listen=YES<span class="hljs-comment">#绑定到listen_port指定的端口,暨端口常都开,亦即standalone模式</span><br><br>text_userdb_names=NO<br><span class="hljs-comment">#当使用者登入后使用ls -al 之类的指令查询该档案的管理权时，预设会出现拥有者的UID，而不是该档案拥有者的名   #称。若是希望出现拥有者的名称，则将此功能开启。</span><br><br>use_localtime=NO<span class="hljs-comment">#显示目录清单时是用本地时间还是GMT时间,可以通过mdtm命令来达到一样的效果</span><br>use_sendfile=YES<span class="hljs-comment">#测试平台优化</span><br></code></pre></td></tr></table></figure><h4 id="2-8、信息类设置"><a href="#2-8、信息类设置" class="headerlink" title="2.8、信息类设置"></a>2.8、信息类设置</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ftpd_banner</span>=welcome to FTP<span class="hljs-comment">#login时显示欢迎信息.如果设置了banner_file则此设置无效</span><br><span class="hljs-attr">dirmessage_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-comment">#允许为目录配置显示信息,显示每个目录下面的message_file文件的内容</span><br><span class="hljs-attr">setproctitle_enable</span>=<span class="hljs-literal">YES</span><span class="hljs-comment">#显示会话状态信息,默认关</span><br></code></pre></td></tr></table></figure><h4 id="2-9、文件定义"><a href="#2-9、文件定义" class="headerlink" title="2.9、文件定义"></a>2.9、文件定义</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">chroot_list_file</span>=/etc/vsftpd/vsftpd.chroot_list<span class="hljs-comment">#定义不能更改用户主目录的文件</span><br><span class="hljs-attr">userlist_file</span>=/etc/vsftpd/vsftpd.user_list<span class="hljs-comment">#定义限制/允许用户登录的文件</span><br><span class="hljs-attr">banner_file</span>=/etc/vsftpd/banner<span class="hljs-comment">#定义登录信息文件的位置</span><br><span class="hljs-attr">banned_email_file</span>=/etc/vsftpd.banned_emails<span class="hljs-comment">#禁止使用的匿名用户登陆时作为密码的电子邮件地址</span><br><span class="hljs-attr">xferlog_file</span>=/var/log/vsftpd.log<span class="hljs-comment">#日志文件位置</span><br><span class="hljs-attr">message_file</span>=.message<span class="hljs-comment">#目录信息文件</span><br></code></pre></td></tr></table></figure><h4 id="2-10、目录定义"><a href="#2-10、目录定义" class="headerlink" title="2.10、目录定义"></a>2.10、目录定义</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">user_config_dir=<span class="hljs-regexp">/etc/</span>vsftpd/userconf<span class="hljs-comment">#定义用户配置文件的目录</span><br>local_root=<span class="hljs-comment">#此项设置每个用户登陆后的根目录</span><br><span class="hljs-comment">#定义本地用户登陆的根目录，注意定义根目录可以是相对路径也可以是绝对路径，相对路径是针对用户家目录来说的</span><br>anon_root=<span class="hljs-regexp">/var/</span>ftp<span class="hljs-comment">#匿名用户登陆后的根目录，默认/var/ftp</span><br></code></pre></td></tr></table></figure><h4 id="2-11、用户连接选项"><a href="#2-11、用户连接选项" class="headerlink" title="2.11、用户连接选项"></a>2.11、用户连接选项</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">max_clients</span>=<span class="hljs-number">100</span><span class="hljs-comment">#可接受的最大client数目</span><br><span class="hljs-attr">max_per_ip</span>=<span class="hljs-number">5</span><span class="hljs-comment">#每个ip的最大client数目</span><br><span class="hljs-attr">connect_from_port_20</span>=<span class="hljs-literal">YES</span><span class="hljs-comment">#使用标准的20端口来连接ftp</span><br><span class="hljs-attr">listen_address</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">0.2</span><span class="hljs-comment">#绑定到某个IP,其它IP不能访问</span><br><span class="hljs-attr">listen_port</span>=<span class="hljs-number">2121</span><span class="hljs-comment">#绑定到某个端口</span><br><span class="hljs-attr">ftp_data_port</span>=<span class="hljs-number">2020</span><span class="hljs-comment">#数据传输端口</span><br><span class="hljs-attr">pasv_max_port</span>=<span class="hljs-number">0</span><span class="hljs-comment">#pasv连接模式时可以使用port 范围的上界，默认值0表示任意</span><br><span class="hljs-attr">pasv_min_port</span>=<span class="hljs-number">0</span><span class="hljs-comment">#pasv连接模式时可以使用port 范围的下界，默认值0表示任意</span><br></code></pre></td></tr></table></figure><h4 id="2-12、数据传输选项"><a href="#2-12、数据传输选项" class="headerlink" title="2.12、数据传输选项"></a>2.12、数据传输选项</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">anon_max_rate</span>=<span class="hljs-number">51200</span>  <span class="hljs-comment">#匿名用户的传输比率(b/s)</span><br><span class="hljs-attr">local_max_rate</span>=<span class="hljs-number">5120000</span>  <span class="hljs-comment">#本地用户的传输比率(b/s)</span><br></code></pre></td></tr></table></figure><h4 id="2-13、安全选项"><a href="#2-13、安全选项" class="headerlink" title="2.13、安全选项"></a>2.13、安全选项</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">idle_session_timeout</span>=<span class="hljs-number">600</span> <span class="hljs-comment">#用户会话空闲后10分钟</span><br><span class="hljs-attr">data_connection_timeout</span>=<span class="hljs-number">120</span> <span class="hljs-comment">#将数据连接空闲2分钟断</span><br><span class="hljs-attr">accept_timeout</span>=<span class="hljs-number">60</span>  <span class="hljs-comment">#将客户端空闲1分钟后断</span><br><span class="hljs-attr">connect_timeout</span>=<span class="hljs-number">60</span>  <span class="hljs-comment">#中断1分钟后又重新连接</span><br><span class="hljs-attr">local_max_rate</span>=<span class="hljs-number">50000</span>  <span class="hljs-comment">#本地用户传输率50K</span><br><span class="hljs-attr">anon_max_rate</span>=<span class="hljs-number">30000</span>  <span class="hljs-comment">#匿名用户传输率30K</span><br><span class="hljs-attr">pasv_min_port</span>=<span class="hljs-number">50000</span>  <span class="hljs-comment">#将客户端的数据连接端口改在</span><br><span class="hljs-attr">pasv_max_port</span>=<span class="hljs-number">60000</span>  <span class="hljs-comment">#50000—60000之间</span><br><span class="hljs-attr">max_clients</span>=<span class="hljs-number">200</span>   <span class="hljs-comment">#FTP的最大连接数</span><br><span class="hljs-attr">max_per_ip</span>=<span class="hljs-number">4</span>   <span class="hljs-comment">#每IP的最大连接数</span><br><span class="hljs-attr">listen_port</span>=<span class="hljs-number">5555</span>  <span class="hljs-comment">#从5555端口进行数据连接</span><br><span class="hljs-attr">local_enable</span>=<span class="hljs-literal">YES</span>      <span class="hljs-comment"># 允许使用本地帐户进行FTP用户登录验证</span><br><span class="hljs-attr">allow_writeable_chroot</span>=<span class="hljs-literal">YES</span> <span class="hljs-comment"># 如果启用了限定用户在其主目录下需要添加这个配置，解决报错 500 OOPS: vsftpd: refusing to run with writable root inside chroot()</span><br></code></pre></td></tr></table></figure><h4 id="2-14、“不安全的服务，不支持FTP-over-TLS”"><a href="#2-14、“不安全的服务，不支持FTP-over-TLS”" class="headerlink" title="2.14、“不安全的服务，不支持FTP over TLS”"></a>2.14、“不安全的服务，不支持FTP over TLS”</h4><p>配置vsftpd在centos上使用SSL/TLS</p><h5 id="2-14-1、建立vsftpd使用的凭证数据，CentOS建立凭证的地方-etc-pki-tls-certs"><a href="#2-14-1、建立vsftpd使用的凭证数据，CentOS建立凭证的地方-etc-pki-tls-certs" class="headerlink" title="2.14.1、建立vsftpd使用的凭证数据，CentOS建立凭证的地方/etc/pki/tls/certs/"></a>2.14.1、建立vsftpd使用的凭证数据，CentOS建立凭证的地方/etc/pki/tls/certs/</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/tls/</span>certs/<br><br>make vsftpd.pem<span class="hljs-comment">#建立证书解析配置</span><br>Country Name:CN<br>State or Province Name:CHINA<br>Locality Name:<br>Organization Name: <br>...<br>Common Name:kongweiliao<br>Email Address []:lia*****ei@outlook.com<br><br>cp -a vsftpd.pem <span class="hljs-regexp">/etc/</span>vsftpsd/<br>ll <span class="hljs-regexp">/etc/</span>vsftpd/vsftpd.pem<br></code></pre></td></tr></table></figure><h5 id="2-14-2、修改vsftpd-conf"><a href="#2-14-2、修改vsftpd-conf" class="headerlink" title="2.14.2、修改vsftpd.conf"></a>2.14.2、修改vsftpd.conf</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">+<br><span class="hljs-attribute">ssl_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">force_anon_data_ssl</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">force_anon_logins_ssl</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">force_local_data_ssl</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">force_local_logins_ssl</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">ssl_tlsv1</span>=<span class="hljs-literal">YES</span>#tlsv1,tlsv2,tlsv3; 首选tlsv1,默认<span class="hljs-literal">YES</span>；次选tlsv2,tlsv3，默认<span class="hljs-literal">NO</span><br><span class="hljs-attribute">rsa_cert_file</span>=/etc/vsftpd/vsftpd.pem<br></code></pre></td></tr></table></figure><p><img src="/2019/11/15/FTP%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/filezillaFTPoverSTL.png" alt="1"></p><h3 id="3、防火墙设置"><a href="#3、防火墙设置" class="headerlink" title="3、防火墙设置"></a>3、防火墙设置</h3><p>查看防火墙状态：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># systemctl status firewalld.service</span><br></code></pre></td></tr></table></figure><p>一般情况下，如果外部无法链接 vsftp ，排除网络的问题，很有可能是防火墙在作祟。</p><p>开启防火墙：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># systemctl start firewalld.service</span><br></code></pre></td></tr></table></figure><p>关闭防火墙：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># systemctl stop firewalld.service</span><br></code></pre></td></tr></table></figure><p>重启防火墙：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># systemctl restart firewalld.service</span><br></code></pre></td></tr></table></figure><p>禁止开机启动：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># systemctl disable firewalld.service</span><br></code></pre></td></tr></table></figure><p>开启开机启动：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># systemctl enable firewalld.service</span><br></code></pre></td></tr></table></figure><p>说明：如果你不愿意关闭防火墙，需要防火墙添加FTP服务。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">zone=public</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">service=ftp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span> <br></code></pre></td></tr></table></figure><h3 id="4、检测能否连接成功"><a href="#4、检测能否连接成功" class="headerlink" title="4、检测能否连接成功"></a>4、检测能否连接成功</h3><p>先在 linux 系统上进行检测：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># ftp localhost（本主机名称）</span><br></code></pre></td></tr></table></figure><p>出现提示登录用户名，使用匿名用户登录 anonymous（密码未设置，所以为空），输入 ls 命令可显示信息，效果如图：</p><p>在Windows上访问：</p><p>使用 windows ping 一下 linux 服务器，检查是否能联网</p><p>从下图可以看出，windows 能与 linux 网络联通，当可以正常联通网络再进行 ftp 链接测试，</p><p>也可使用 root 帐号进行登录，root 帐号登录之后可以操作系统内任意文件。以下章节列出可以链接之后通过 ftp 软件链接后出现的一些常见问题解决方案。</p><h3 id="5、SELinux状态"><a href="#5、SELinux状态" class="headerlink" title="5、SELinux状态"></a>5、SELinux状态</h3><p>链接 ftp 的时候如果出现无法访问目录列表问题：<br>查看ftp的Selinux状态：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># sestatus -b | grep ftp</span><br></code></pre></td></tr></table></figure><p>将状态改为on：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@localhost ~]</span># setsebool -<span class="hljs-selector-tag">P</span> tftp_home_dir on （注意：<span class="hljs-selector-tag">P</span>为大写）<br><span class="hljs-selector-attr">[root@localhost ~]</span># setsebool -<span class="hljs-selector-tag">P</span> ftpd_full_access on （注意：<span class="hljs-selector-tag">P</span>为大写） <br></code></pre></td></tr></table></figure><h3 id="6、FTP连接常见错误代码"><a href="#6、FTP连接常见错误代码" class="headerlink" title="6、FTP连接常见错误代码"></a>6、FTP连接常见错误代码</h3><p>说明： 配置的ftp无法连接，会返回错误代码。具体错误代码又代表了什么呢？</p><h4 id="6-1、Connect-连接被拒绝："><a href="#6-1、Connect-连接被拒绝：" class="headerlink" title="6.1、Connect 连接被拒绝："></a>6.1、Connect 连接被拒绝：</h4><blockquote><p>可能原因是vsftpd服务没被启动</p></blockquote><h4 id="6-2、500-OOPS"><a href="#6-2、500-OOPS" class="headerlink" title="6.2、500 OOPS:"></a>6.2、500 OOPS:</h4><h5 id="6-2-1、cannot-open-user-list-file："><a href="#6-2-1、cannot-open-user-list-file：" class="headerlink" title="6.2.1、cannot open user list file："></a>6.2.1、cannot open user list file：</h5><blockquote><p>可能原因是不存在文件“/etc/vsftpd/user_list”或文件中不存在该帐户，解决：解决: cho username &gt;&gt; /etc/vsftpd/user_list</p></blockquote><h5 id="6-2-2、cannot-open-chroot-user-list-file-500-OOPS-could-not-read-chroot-list-file-etc-vsftpd-chroot-list："><a href="#6-2-2、cannot-open-chroot-user-list-file-500-OOPS-could-not-read-chroot-list-file-etc-vsftpd-chroot-list：" class="headerlink" title="6.2.2、cannot open chroot() user list file | 500 OOPS: could not read chroot() list file:/etc/vsftpd/chroot_list："></a>6.2.2、cannot open chroot() user list file | 500 OOPS: could not read chroot() list file:/etc/vsftpd/chroot_list：</h5><blockquote><p>可能原因是不存在文件“/etc/vsftpd/chroot_list”</p></blockquote><h5 id="6-2-3、missing-value-in-config-file"><a href="#6-2-3、missing-value-in-config-file" class="headerlink" title="6.2.3、missing value in config file:"></a>6.2.3、missing value in config file:</h5><blockquote><p>可能原因是配置文件“=”等号前值有问题，或只有一个空格</p></blockquote><h5 id="6-2-4、bad-bool-value-in-config-file"><a href="#6-2-4、bad-bool-value-in-config-file" class="headerlink" title="6.2.4、bad bool value in config file:"></a>6.2.4、bad bool value in config file:</h5><blockquote><p>可能原因是配置文件=”等号后值有问题</p></blockquote><h5 id="6-2-5、unrecognised-variable-in-config-file"><a href="#6-2-5、unrecognised-variable-in-config-file" class="headerlink" title="6.2.5、unrecognised variable in config file:"></a>6.2.5、unrecognised variable in config file:</h5><blockquote><p>可能原因是参数前有空格</p></blockquote><h5 id="6-2-6、chdir，child-died-chroot："><a href="#6-2-6、chdir，child-died-chroot：" class="headerlink" title="6.2.6、chdir，child died, chroot："></a>6.2.6、chdir，child died, chroot：</h5><blockquote><p>可能原因是用户主目录没有权限或没有主目录，或者还是selinux影响的</p></blockquote><h5 id="6-2-7、vsftpd-both-local-and-anonymous-access-disabled"><a href="#6-2-7、vsftpd-both-local-and-anonymous-access-disabled" class="headerlink" title="6.2.7、vsftpd: both local and anonymous access disabled!"></a>6.2.7、vsftpd: both local and anonymous access disabled!</h5><blockquote><p>匿名用户和本地用户登录都被禁用</p></blockquote><h5 id="6-2-8、vsftpd-refusing-to-run-with-writable-root-inside-chroot-："><a href="#6-2-8、vsftpd-refusing-to-run-with-writable-root-inside-chroot-：" class="headerlink" title="6.2.8、vsftpd: refusing to run with writable root inside chroot() ："></a>6.2.8、vsftpd: refusing to run with writable root inside chroot() ：</h5><blockquote><p>如果启用了限定用户在其主目录下需要添加这个配置，解决报错  allow_writeable_chroot=YES </p></blockquote><h4 id="6-3、522"><a href="#6-3、522" class="headerlink" title="6.3、522"></a>6.3、522</h4><p>522 SSL connection failed; session reuse required: see require_ssl_reuse option in vsftpd.conf man page。原来是FTP的require_ssl_reuse=YES导致的，当选项<strong>require_ssl_reuse</strong>设置为<code>YES</code>时，所有SSL数据连接都需要显示SSL会话重用;证明他们知道与控制信道相同的主秘钥。 </p><p>这个问题可能导致客户端到服务器能够正常连接，但是客户端看不到服务器上的任何内容。</p><h4 id="6-3、530-："><a href="#6-3、530-：" class="headerlink" title="6.3、530 ："></a>6.3、530 ：</h4><h5 id="6-3-1、Permission-denied："><a href="#6-3-1、Permission-denied：" class="headerlink" title="6.3.1、Permission denied："></a>6.3.1、Permission denied：</h5><blockquote><p>可能原因是userlist_enable=YES并且/etc/vsftpd/user_list中包含要登录的ftp用户名，即user_list禁止了该用户的登录、或者可能是没有指定userlist_file=/etc/vsftpd/user_list</p></blockquote><h5 id="6-3-2、Login-incorrect："><a href="#6-3-2、Login-incorrect：" class="headerlink" title="6.3.2、Login incorrect："></a>6.3.2、Login incorrect：</h5><blockquote><p>要确保用户名、密码是正确的；</p><p>可能原因是登录的ftp用户名被包含在禁止登录列表/etc/vsftpd/ftpusers中  ；</p><p>也可能是配置文件中少了一行pam_service_name=vsftpd ；</p></blockquote><p>Linux-PAM（即linux可插入认证模块）</p><blockquote><p>检查/etc/pam.d/vsftpd 文件里面lib的路径；</p><p>检查/etc/pam.d/vsftpd 文件内容是否导致local用户和虚拟用户登录冲突（具体的见之后配置虚拟用户的案例7.1.3）；</p><p>编辑/etc/pam.d/vsftp文件，注释掉auth required pam_shells.so（这个语句的意思是只有包含shell的用户才能登录）；</p></blockquote><h5 id="6-3-3、Non-anonymous-sessions-must-use-encryption："><a href="#6-3-3、Non-anonymous-sessions-must-use-encryption：" class="headerlink" title="6.3.3、Non-anonymous sessions must use encryption："></a>6.3.3、Non-anonymous sessions must use encryption：</h5><blockquote><p>服务器的强制，非匿名用户必须使用加密连接</p></blockquote><h4 id="6-4、GnuTLS-error-12-A-TLS-fatal-alert-has-been-received："><a href="#6-4、GnuTLS-error-12-A-TLS-fatal-alert-has-been-received：" class="headerlink" title="6.4、GnuTLS error -12: A TLS fatal alert has been received："></a>6.4、GnuTLS error -12: A TLS fatal alert has been received：</h4><blockquote><p>Filezilla最新版本认为vsftpd默认的加密算法”DES-CBC3-SHA”不够安全而拒绝连接导致的。有两种办法解决该问题，一是降级你的Filezilla客户端版本到3.5.3以下，二是更改服务器端vsftpd的配置,增加参数：ssl_ciphers=HIGH</p></blockquote><h4 id="6-5、ECONNREFUSED-–-Connection-refused-by-server："><a href="#6-5、ECONNREFUSED-–-Connection-refused-by-server：" class="headerlink" title="6.5、ECONNREFUSED – Connection refused by server："></a>6.5、ECONNREFUSED – Connection refused by server：</h4><blockquote><p>当启用隐式ssl连接，用filezilla、winscp客户端连接时报错，因为vsftpd此时服务器端的端口还是21，但是客户端确以990来连接。修改客户端连接时使用的参数或者服务器的通过参数listen_port设置端口为990，问题解决</p></blockquote><h3 id="7、案例"><a href="#7、案例" class="headerlink" title="7、案例"></a>7、案例</h3><h4 id="7-1、案例一、建立基于虚拟用户的FTP服务器，并根据以下要求配置FTP服务器。"><a href="#7-1、案例一、建立基于虚拟用户的FTP服务器，并根据以下要求配置FTP服务器。" class="headerlink" title="7.1、案例一、建立基于虚拟用户的FTP服务器，并根据以下要求配置FTP服务器。"></a>7.1、案例一、建立基于虚拟用户的FTP服务器，并根据以下要求配置FTP服务器。</h4><blockquote><p>配置FTP匿名用户的主目录为/var/ftp/anon；下载带宽限制为100kB/s ；建立一个名为abc，口令为xyz的FTP账户；下载带宽限制为500kB/s；设置FTP服务器同时登录到FTP服务器的最大链接数为100；每个IP最大链接数为3；用户空闲时间超过限值为5分钟。</p></blockquote><h5 id="7-1-1、创建目录-var-fpt-anon"><a href="#7-1-1、创建目录-var-fpt-anon" class="headerlink" title="7.1.1、创建目录/var/fpt/anon"></a>7.1.1、创建目录/var/fpt/anon</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">mkdir</span> /var/fpt/anon <br>建立一个名为<span class="hljs-keyword">abc</span>，口令为xyz的FTP账户<br>useradd <span class="hljs-keyword">abc</span><br>passwd <span class="hljs-keyword">abc</span> <br></code></pre></td></tr></table></figure><h5 id="7-1-2、本地的Local用户配置"><a href="#7-1-2、本地的Local用户配置" class="headerlink" title="7.1.2、本地的Local用户配置"></a>7.1.2、本地的Local用户配置</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /etc/vsftpd/vsftpd.conf<br>-&gt;<br><span class="hljs-attribute">anonymous_enable</span>=<span class="hljs-literal">YES</span>#允许匿名登录<br><span class="hljs-attribute">anon_root</span>=/var/ftp/anon#配置FTP匿名用户的主目录为/var/ftp/anon<br><span class="hljs-attribute">anon_max_rate</span>=100#下载带宽限制为100kB/s<br><span class="hljs-attribute">local_enable</span>=<span class="hljs-literal">YES</span>#允许本地用户登录<br><span class="hljs-attribute">local_max_rate</span>=500下载带宽限制为500kB/s<br><span class="hljs-attribute">max_clients</span>=100#设置FTP服务器同时登录到FTP服务器的最大链接数为100<br><span class="hljs-attribute">max_per_ip</span>=3#每个IP最大链接数为3<br><span class="hljs-attribute">connect_timeout</span>=300#用户空闲时间超过限值为5分钟<br></code></pre></td></tr></table></figure><h5 id="7-1-3、下面是虚拟用户配置"><a href="#7-1-3、下面是虚拟用户配置" class="headerlink" title="7.1.3、下面是虚拟用户配置"></a>7.1.3、下面是虚拟用户配置</h5><p>添加虚拟用户口令文件</p><p>添加虚拟用户名和密码，一行用户名，一行密码，以此类推。奇数行为用户名，偶数行为密码。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>vsftpd/virtuser<br>-&gt;<br>tom<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>将virtuser文件的其他用户访问权限改成0，防止其他用户轻易的得到密码。<br>修改之前：-rw-r–r– 1 root root    47 Nov 15 16:14 virtusers 其它用户对此文件可读。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod <span class="hljs-number">640</span> <span class="hljs-regexp">/etc/</span>vsftpd/virtuser<br></code></pre></td></tr></table></figure><p>生成数据库文件</p><p>使用db_load命令生成虚拟用户口令认证文件，如果不能使用db_load命令请先安装db4_utils</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> –qa |grep db<span class="hljs-number">4</span>-utils#查看是否安装<br><span class="hljs-attribute">rpm</span> –ivh db<span class="hljs-number">4</span>-utils-<span class="hljs-number">4</span>.<span class="hljs-number">3</span>.<span class="hljs-number">29</span>-<span class="hljs-number">9</span>.fc<span class="hljs-number">6</span>.i<span class="hljs-number">386</span>.rpm#安装<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">db_load -T -t hash -f <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/virtuser /</span>etc<span class="hljs-regexp">/vsftpd/</span>virtuser.db<br>chmod <span class="hljs-number">600</span> <span class="hljs-regexp">/etc/</span>vsftpd/vuser.db<br></code></pre></td></tr></table></figure><p>编辑/etc/pam.d/vsftpd</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>pam.d/vsftpd<br>-&gt;<br>auth      sufficient   pam_userdb.so  db=<span class="hljs-regexp">/etc/</span>vsftpd/virtuser<br>account   sufficient   pam_userdb.so  db=<span class="hljs-regexp">/etc/</span>vsftpd/virtuser<br></code></pre></td></tr></table></figure><blockquote><p>误区：网上查阅过许多配置虚拟用户的资料，大多都是说将/etc/pam.d/vsftpd中的原来的auth和account内容注释掉，但是这样做的话会导致local用户无法访问ftp服务。<br>加入以下：<br>auth      required   pam_userdb.so  db=/etc/vsftpd/virtuser<br>account   required   pam_userdb.so  db=/etc/vsftpd/virtuser</p><p>若要虚拟和本地用户都能够访问ftp服务<br>加入以下：<br>auth      sufficient   pam_userdb.so  db=/etc/vsftpd/virtuser<br>account   sufficient   pam_userdb.so  db=/etc/vsftpd/virtuser<br>除此之外，还应该注意新添加的这两行在文件中的位置</p></blockquote><p>编辑vsftpd.conf映射虚拟用户</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /etc/vsftpd/vsftpd.conf<br>-&gt;<br><span class="hljs-attribute">guest_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">guest_username</span>=abc<br></code></pre></td></tr></table></figure><p><img src="/2019/11/15/FTP%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/ftp.png" alt="1"></p><h4 id="7-2、案例二、一个简单的公司部门FTP服务"><a href="#7-2、案例二、一个简单的公司部门FTP服务" class="headerlink" title="7.2、案例二、一个简单的公司部门FTP服务"></a>7.2、案例二、一个简单的公司部门FTP服务</h4><p>1、新建一分区，10G空间，ext3 文件系统，挂在到 /ftp下，作为 ftp服务器数据存放地方。<br>2、四个部门：dep1，dep2， dep3， dep4，分别对应目录 /ftp/dep1，/ftp/dep2，/ftp/dep3，/ftp/dep4。另外设定一个公共目录 /ftp/public。<br>3、五个用户：admin，user1，user2，user3，user4。其中：user 1/2/3/4分别对应部门dep 1/2/3/4，他们只能访问自己所属部门的目录和public目录。如：user1只能访问dep1和public目录，不能访问其它目录。admin为管理员用户，可以访问 ftp 服务器上的任何目录。<br>4、用户访问权限限制：user1/2/3/4在所能访问的目录，具有上传文件、下载文件的功能，但是不能够删除文件、更改文件权限等功能。admin管理员用户对所有目录具有文件上传、下载、删除、权限更改等功能。<br>5、对每个部门定制一个 quota，设置该账户的文件配额为1000个；磁盘配额为2G。<br>6、匿名用户不能访问。</p><h5 id="7-2-1、增加一块硬盘，然后分区，把分区挂载情况写入-etc-fstab"><a href="#7-2-1、增加一块硬盘，然后分区，把分区挂载情况写入-etc-fstab" class="headerlink" title="7.2.1、增加一块硬盘，然后分区，把分区挂载情况写入/etc/fstab"></a>7.2.1、增加一块硬盘，然后分区，把分区挂载情况写入/etc/fstab</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">fdisk <span class="hljs-regexp">/dev/</span>hdb<br>mkfs ext3 <span class="hljs-regexp">/dev/</span>hdb1<br>mkidr /ftp<br>mount <span class="hljs-regexp">/dev/</span>hdb1 /ftp -o usrquota,grpquota <br>vim <span class="hljs-regexp">/etc/</span>fstab<br>加入下面一句:<br><span class="hljs-regexp">/dev/</span>hdb1       /ftp      ext3     defaults,usrquota,grpquota      <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><h5 id="7-2-2、建立用户组和用户和相应的文件夹并更改权限，达到题目要求"><a href="#7-2-2、建立用户组和用户和相应的文件夹并更改权限，达到题目要求" class="headerlink" title="7.2.2、建立用户组和用户和相应的文件夹并更改权限，达到题目要求"></a>7.2.2、建立用户组和用户和相应的文件夹并更改权限，达到题目要求</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">groupadd</span> dep<span class="hljs-number">1</span><br><span class="hljs-attribute">groupadd</span> dep<span class="hljs-number">2</span><br><span class="hljs-attribute">groupadd</span> dep<span class="hljs-number">3</span><br><span class="hljs-attribute">groupadd</span> dep<span class="hljs-number">4</span><br><span class="hljs-attribute">groupadd</span> **e <br><span class="hljs-attribute">usradd</span>  -G dep<span class="hljs-number">1</span>,**e user<span class="hljs-number">1</span><br><span class="hljs-attribute">usradd</span>  -G dep<span class="hljs-number">2</span>,**e user<span class="hljs-number">2</span><br><span class="hljs-attribute">usradd</span>  -G dep<span class="hljs-number">3</span>,**e user<span class="hljs-number">3</span><br><span class="hljs-attribute">usradd</span>  -G dep<span class="hljs-number">4</span>,**e user<span class="hljs-number">4</span><br><span class="hljs-attribute">usradd</span>  -G dep<span class="hljs-number">1</span>,dep<span class="hljs-number">2</span>,dep<span class="hljs-number">3</span>,dep<span class="hljs-number">4</span>,**e admin <br><span class="hljs-attribute">passwd</span> user<span class="hljs-number">1</span><br><span class="hljs-attribute">passwd</span> user<span class="hljs-number">2</span><br><span class="hljs-attribute">passwd</span> user<span class="hljs-number">3</span><br><span class="hljs-attribute">passwd</span> user<span class="hljs-number">4</span><br><span class="hljs-attribute">passwd</span> admin <br><span class="hljs-attribute">mkdir</span> /ftp/dep<span class="hljs-number">1</span><br><span class="hljs-attribute">mkdir</span> /ftp/dep<span class="hljs-number">2</span><br><span class="hljs-attribute">mkdir</span> /ftp/dep<span class="hljs-number">3</span><br><span class="hljs-attribute">mkdir</span> /ftp/dep<span class="hljs-number">4</span><br><span class="hljs-attribute">mkdir</span> /ftp/public <br><span class="hljs-attribute">chmod</span> uesr<span class="hljs-number">1</span>:dep<span class="hljs-number">1</span> /ftp/dep<span class="hljs-number">1</span><br><span class="hljs-attribute">chmod</span> uesr<span class="hljs-number">2</span>:dep<span class="hljs-number">2</span> /ftp/dep<span class="hljs-number">2</span><br><span class="hljs-attribute">chmod</span> uesr<span class="hljs-number">3</span>:dep<span class="hljs-number">3</span> /ftp/dep<span class="hljs-number">3</span><br><span class="hljs-attribute">chmod</span> uesr<span class="hljs-number">4</span>:dep<span class="hljs-number">4</span> /ftp/dep<span class="hljs-number">4</span><br><span class="hljs-attribute">chmod</span> admin:**e /ftp/public <br><span class="hljs-attribute">chmod</span> <span class="hljs-number">770</span> /ftp/dep<span class="hljs-number">1</span><br><span class="hljs-attribute">chmod</span> <span class="hljs-number">770</span> /ftp/dep<span class="hljs-number">2</span><br><span class="hljs-attribute">chmod</span> <span class="hljs-number">770</span> /ftp/dep<span class="hljs-number">3</span><br><span class="hljs-attribute">chmod</span> <span class="hljs-number">770</span> /ftp/dep<span class="hljs-number">4</span><br><span class="hljs-attribute">chmod</span> <span class="hljs-number">770</span> /ftp/pubic <br></code></pre></td></tr></table></figure><p>最终结果如下 :</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">-rw-------<span class="hljs-number"> 1 </span>root  root     <span class="hljs-number"> 8192 </span>Jul<span class="hljs-number"> 26 </span>11:46 aquota.group<br>-rw-------<span class="hljs-number"> 1 </span>root  root     <span class="hljs-number"> 7168 </span>Jul<span class="hljs-number"> 26 </span>11:46 aquota.user<br>drwxrwx---<span class="hljs-number"> 2 </span>user1 dep1     <span class="hljs-number"> 4096 </span>Jul<span class="hljs-number"> 25 </span>20:47 dep1<br>drwxrwx---<span class="hljs-number"> 2 </span>user2 dep2     <span class="hljs-number"> 4096 </span>Jul<span class="hljs-number"> 25 </span>20:47 dep2<br>drwxrwx---<span class="hljs-number"> 2 </span>user3 dep3     <span class="hljs-number"> 4096 </span>Jul<span class="hljs-number"> 25 </span>20:47 dep3<br>drwxrwx---<span class="hljs-number"> 2 </span>user4 dep4     <span class="hljs-number"> 4096 </span>Jul<span class="hljs-number"> 25 </span>20:47 dep4<br>drwx------<span class="hljs-number"> 2 </span>root  root    <span class="hljs-number"> 16384 </span>Jul<span class="hljs-number"> 25 </span>20:44 lost+found<br>drwxrwx---<span class="hljs-number"> 2 </span>admin **e <span class="hljs-number"> 4096 </span>Jul<span class="hljs-number"> 25 </span>20:48 public <br></code></pre></td></tr></table></figure><h5 id="7-2-3、创建quota，配置磁盘配额"><a href="#7-2-3、创建quota，配置磁盘配额" class="headerlink" title="7.2.3、创建quota，配置磁盘配额"></a>7.2.3、创建quota，配置磁盘配额</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mount <span class="hljs-regexp">/dev/</span>hdb1 /ftp -o usrquota,grpquota<br>quotacheck -cuvg <span class="hljs-regexp">/dev/</span>sdb1<br>quotaon -a<br>edquota -g dep1 <br>-&gt;Disk quotas <span class="hljs-keyword">for</span> <span class="hljs-keyword">group</span> dep1 (gid <span class="hljs-number">503</span>):<br>  Filesystem                   blocks       soft       hard     inodes     soft     hard<br>  <span class="hljs-regexp">/dev/</span>hdb1                         <span class="hljs-number">0</span>    <span class="hljs-number">1024000</span>    <span class="hljs-number">2048000</span>          <span class="hljs-number">0</span>      <span class="hljs-number">500</span>     <span class="hljs-number">1000</span> <br>edquota -g -p dep1 dep2 dep3 dep4(-u -g将源用户组和群组的quota设置套用至其他用户或群组。) <br></code></pre></td></tr></table></figure><h5 id="7-2-4、编辑vsftpd配置文件"><a href="#7-2-4、编辑vsftpd配置文件" class="headerlink" title="7.2.4、编辑vsftpd配置文件"></a>7.2.4、编辑vsftpd配置文件</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># vim /etc/vsftpd/vsftpd.conf </span><br><span class="hljs-attribute">anonymous_enable</span>=<span class="hljs-literal">NO</span> <br>加入<br><span class="hljs-attribute">local_root</span>=/ftp<br><span class="hljs-attribute">user_config_dir</span>=/etc/vsftpd/ftp_config_dir  <br><br>开启chroot <br><span class="hljs-attribute">chroot_list_enable</span>=<span class="hljs-literal">YES</span><br><span class="hljs-attribute">chroot_list_file</span>=/etc/vsftpd/chroot_list <br></code></pre></td></tr></table></figure><h5 id="7-2-5、建立用户的独立配置文件"><a href="#7-2-5、建立用户的独立配置文件" class="headerlink" title="7.2.5、建立用户的独立配置文件"></a>7.2.5、建立用户的独立配置文件</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mkdir <span class="hljs-regexp">/etc/</span>vsftpd/ftp_config_dir<br>vim <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/ftp_config_dir/u</span>ser1 <br><br>-&gt;cmds_allowed=ABOR,ACCT,APPE,CWD,CDUP,HELP,LIST,MODE,MDTM,NOOP,NLST,PASS,PASV,PORT,PWD,QUIT,REIN,RETR,SITE,<span class="hljs-keyword">SIZE</span>,STOR,STAT,STOU,STRU,SYST,TYPE,USER <br><br>cp <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/ftp_config_dir/u</span>ser1 <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/ftp_config_dir/u</span>ser2<br>cp <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/ftp_config_dir/u</span>ser1 <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/ftp_config_dir/u</span>ser3<br>cp <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/ftp_config_dir/u</span>ser1 <span class="hljs-regexp">/etc/</span>vsftpd<span class="hljs-regexp">/ftp_config_dir/u</span>ser4<br></code></pre></td></tr></table></figure><h4 id="7-3、案例三、userlist-enable和userlist-deny配置项"><a href="#7-3、案例三、userlist-enable和userlist-deny配置项" class="headerlink" title="7.3、案例三、userlist_enable和userlist_deny配置项"></a>7.3、案例三、userlist_enable和userlist_deny配置项</h4><p>建立三个用户chkin1 、chkin2、 chkin3，将chkin1添加到/etc/vsftpd/ftpusers文件中，将chkin2添加到/etc/vsftpd/user_list文件中，chkin3不添加到这两个文件中。</p><p>1、当userlist_enable=NO时，ftpusers文件中的用户将被禁止访问ftp服务。此时只有chkin2和chkin3能够访问ftp服务。</p><p>2、当userlist_enable=YES，userlist_deny=NO时,FTP服务器只允许user_list中的用户访问。此时只有chkin2能够访问ftp服务。</p><p>3、当userlist_enable=YES，userlist_deny=YES时，user_list和ftpusers中的用户均不能访问FTP服务。此时仅chkin3能访问FTP服务。</p><h3 id="8、补充内容"><a href="#8、补充内容" class="headerlink" title="8、补充内容"></a>8、补充内容</h3><h4 id="8-1、如何对磁盘限额"><a href="#8-1、如何对磁盘限额" class="headerlink" title="8.1、如何对磁盘限额"></a>8.1、如何对磁盘限额</h4><p>用quota对/etc/fstab进行限制，然后对特定用户进行限制</p><h4 id="8-2、如何让绑定IP到vsFTP？"><a href="#8-2、如何让绑定IP到vsFTP？" class="headerlink" title="8.2、如何让绑定IP到vsFTP？"></a>8.2、如何让绑定IP到vsFTP？</h4><p>也就是说，如何让用户只能通过某个IP来访问FTP。其实这个功能很有意思。如果绑定的是内网的IP，外部是没有办法访问的。如果绑定的是对外服务的IP，内网也只能通过对外服务的IP来访问FTP 。</p><p>在/etc/vsftpd/vsftpd.conf中加一行，以我的局域网为例，请看第一帖中的操作环境，这样外网就不能访问我的FTP了，内网也可能通过192.168.0.2来访问FTP<br>listen_address=192.168.0.2 </p><p>加完后，要重启vsFTP服务器 </p><h4 id="8-3、Linux-PAM"><a href="#8-3、Linux-PAM" class="headerlink" title="8.3、Linux-PAM"></a>8.3、Linux-PAM</h4><p>Linux-PAM（即linux可插入认证模块）是一套共享库,使本地系统管理员可以随意选择程序的认证方式。</p><p><a href="https://www.cnblogs.com/kevingrace/p/8671964.html">Linux下PAM模块学习总结</a></p><p><a href="https://www.ibm.com/developerworks/cn/linux/l-pam/">了解和配置PAM</a></p><p><strong>虚拟用户和本地用户不能共存的错误排除过程</strong></p><p>网上大部分教程教建立虚拟用户，将/etc/pam.d/vsftpd中的原来的auth和account内容注释掉，加入以下内容：</p><blockquote><p>auth      required   pam_userdb.so  db=/etc/vsftpd/virtuser<br>account   required   pam_userdb.so  db=/etc/vsftpd/virtuser</p></blockquote><p>1、在配置vsftpd的过程中，听信了网上的妖言，把vsftpd配了一遍，发现配完，虚拟用户和本地用户不能共存，即虚拟用户可以登录ftp，但是本地用户不能登录的ftp。</p><p>2、上网找过很多内容都找不到解决方法，大家貌似都没有这样的问题，或者找不到解决办法。</p><p>3、在看众多教程中有看到过和本方法一样的配置，但是那份内容里面完全没有提到/etc/pam.d/vsftpd里面为什么要这样写</p><p>4、本地用户无法登录，那应该是pam验证的时候就没有给本地用户过</p><p>如果把**/etc/pam.d/vsftpd** 中的<strong>auth required pam_userdb.so db=/etc/vsftpd/vuser_passwd</strong>和<strong>account required pam_userdb.so db=/etc/vsftpd/vuser_passwd</strong>注释掉，然后把里面其它的内容都打开注释。</p><p>这时候再尝试，发现本地用户能登录</p><p>5、这也证明了是pam模块认证配置冲突的问题让虚拟用户和本地用户不能共存</p><p><strong>required：</strong>堆栈中的所有 Required 模块必须看作一个成功的结果。如果一个或多个 Required 模块失败，则实现堆栈中的所有 Required 模块，但是将返回第一个错误。</p><p>也就意味着，required需要所有内容都满足才行，当我们前两条配置虚拟用户登录验证通过后，继续向下面的配置条目进行验证，验证是否是本地用户时结果发现不是，又因为，验证本地用户的control_flag也为required，所以这时候，就会返回错误，也即验证不成功。</p><p>6、所以我们不能同时设置虚拟用户和本地用户的control_flag为required。按照上面的网址所说：</p><p><strong>sufficient：</strong>如果标记为 sufficient 的模块成功并且先前没有 Required 或 sufficient 模块失败，则忽略堆栈中的所有其余模块并返回成功。</p><p>7、我们可以把虚拟用户的验证配置放在最前面，且把control_flag设为sufficient。这样的话，如果遇到是虚拟用户，那么可以通过验证，如果是本地用户，忽略掉sufficient的两条配置规则，只要满足required就行，所以也能通过验证。</p><p><img src="/2019/11/15/FTP%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/ftp.png" alt="2"></p><h4 id="8-4、MySql数据库中创建用户口令数据库"><a href="#8-4、MySql数据库中创建用户口令数据库" class="headerlink" title="8.4、MySql数据库中创建用户口令数据库"></a>8.4、MySql数据库中创建用户口令数据库</h4><h5 id="8-4-1、安装MySql"><a href="#8-4-1、安装MySql" class="headerlink" title="8.4.1、安装MySql"></a>8.4.1、安装MySql</h5><h5 id="8-4-2、建立本地映射用户并设置宿主目录权限"><a href="#8-4-2、建立本地映射用户并设置宿主目录权限" class="headerlink" title="8.4.2、建立本地映射用户并设置宿主目录权限"></a>8.4.2、建立本地映射用户并设置宿主目录权限</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@CentOS <span class="hljs-regexp">/]#useradd –d /</span>home<span class="hljs-regexp">/vftpsite –s /</span>sbin/nologin vftpuser<br>[root@CentOS <span class="hljs-regexp">/]#chmod 700 /</span>home/vftpsite<br></code></pre></td></tr></table></figure><h5 id="8-4-3、配置vsftpd-conf（设置虚拟用户配置项）"><a href="#8-4-3、配置vsftpd-conf（设置虚拟用户配置项）" class="headerlink" title="8.4.3、配置vsftpd.conf（设置虚拟用户配置项）"></a>8.4.3、配置vsftpd.conf（设置虚拟用户配置项）</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@CentOS /]</span><span class="hljs-comment">#vi /etc/vsftpd/vsftpd.conf</span><br><span class="hljs-attr">guest_enable</span>=<span class="hljs-literal">YES</span> <span class="hljs-comment">#开启虚拟用户</span><br><span class="hljs-attr">guest_username</span>=vftpuser <span class="hljs-comment">#FTP虚拟用户对应的系统用户</span><br><span class="hljs-attr">pam_service_name</span>=vsftpd <span class="hljs-comment">#PAM认证文件</span><br></code></pre></td></tr></table></figure><h5 id="8-4-4、建立虚拟用户数据库，数据库名如vftpusers"><a href="#8-4-4、建立虚拟用户数据库，数据库名如vftpusers" class="headerlink" title="8.4.4、建立虚拟用户数据库，数据库名如vftpusers"></a>8.4.4、建立虚拟用户数据库，数据库名如vftpusers</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@CentOS /</span>]<span class="hljs-meta">#mysql –u root –p</span><br>mysql&gt; create database vftpuser;   <span class="hljs-meta">#建立虚拟用户数据库，库名vftpuser</span><br>mysql&gt; use vftpuser;  <span class="hljs-meta">#进入vftpuser数据库</span><br><br><span class="hljs-meta">#建立虚拟用户口令表，表名users</span><br>mysql&gt; <span class="hljs-function">create table <span class="hljs-title">users</span>(<span class="hljs-params">name <span class="hljs-built_in">char</span>(<span class="hljs-number">16</span></span>) binary,passwd <span class="hljs-title">char</span>(<span class="hljs-params"><span class="hljs-number">16</span></span>) binary)</span>;  <br><br><span class="hljs-meta">#建立两个虚拟用户，bobyuan和markwang</span><br>mysql&gt; <span class="hljs-function">insert <span class="hljs-keyword">into</span> <span class="hljs-title">users</span> (<span class="hljs-params">name,passwd</span>) <span class="hljs-title">values</span> (<span class="hljs-params"><span class="hljs-string">&#x27;bobyuan&#x27;</span>,password(<span class="hljs-string">&#x27;111&#x27;</span></span>))</span>; <br>mysql&gt; <span class="hljs-function">insert <span class="hljs-keyword">into</span> <span class="hljs-title">users</span> (<span class="hljs-params">name,passwd</span>) <span class="hljs-title">values</span> (<span class="hljs-params"><span class="hljs-string">&#x27;markwang&#x27;</span>,password(<span class="hljs-string">&#x27;111&#x27;</span></span>))</span>;<br><span class="hljs-meta">#注：在这里我用这种方法添加的虚拟用户密码都是经过MySQL加密的，加密后的密码pam-mysql不能识</span><br><span class="hljs-meta">#别（MySQL和pam-mysql兼容性有些问题），因此本次实验使用明文保存密码。</span><br><br><span class="hljs-meta">#逐个添加用户</span><br>mysql&gt; <span class="hljs-function">insert <span class="hljs-keyword">into</span> <span class="hljs-title">users</span> (<span class="hljs-params">name,passwd</span>) <span class="hljs-title">values</span> (<span class="hljs-params"><span class="hljs-string">&#x27;bobyuan&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span></span>)</span>;<br>mysql&gt; <span class="hljs-function">insert <span class="hljs-keyword">into</span> <span class="hljs-title">users</span> (<span class="hljs-params">name,passwd</span>) <span class="hljs-title">values</span> (<span class="hljs-params"><span class="hljs-string">&#x27;markwang&#x27;</span>,‘<span class="hljs-number">111&#x27;</span></span>)</span>;<br><br><span class="hljs-meta">#批量添加用户</span><br>[<span class="hljs-meta">root@CentOS /</span>]<span class="hljs-meta">#vim vftpuser.txt</span><br><span class="hljs-meta">#添加用户名和密码，注意字段数据之间要用Tab键隔开。</span><br>bobyuan  <span class="hljs-number">111</span><br>markwang <span class="hljs-number">111</span><br><br>mysql&gt;use vftpuser;<br>mysql&gt;load data local infile <span class="hljs-string">&quot;/vftpuser.txt&quot;</span> <span class="hljs-keyword">into</span> table users;<br>mysql&gt;flush privileges;<br><br>mysql&gt; grant <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> vftpuser.users to vftpuser@localhost identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;111111&#x27;</span>;  <span class="hljs-meta">#授权vftpuser这个账号可以读取vftpuser数据库的user表</span><br><br></code></pre></td></tr></table></figure><h5 id="8-4-5、验证设置是否成功"><a href="#8-4-5、验证设置是否成功" class="headerlink" title="8.4.5、验证设置是否成功"></a>8.4.5、验证设置是否成功</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@CentOS /]#mysql –u vftpuser –p<br>mysql&gt;<span class="hljs-keyword">show</span> databases;<br>mysql&gt;use vftpuser;<br>mysql&gt;<span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br>mysql&gt;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users;<br>mysql&gt;quit<br></code></pre></td></tr></table></figure><h5 id="8-4-6、编译MySql的PAM认证模块"><a href="#8-4-6、编译MySql的PAM认证模块" class="headerlink" title="8.4.6、编译MySql的PAM认证模块"></a>8.4.6、编译MySql的PAM认证模块</h5><p>查看/usr/lib64/security目录下有没有MySQL对应的PAM模块pam-mysql。</p><p>如果没有则下载pam-mysql安装（<a href="http://sourceforge.net/projects/pam-mysql%EF%BC%89%EF%BC%8C">http://sourceforge.net/projects/pam-mysql），</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>prdownloads.sourceforge.net<span class="hljs-regexp">/pam-mysql/</span>pam_mysql-<span class="hljs-number">0.7</span>RC1.tar.gz<br></code></pre></td></tr></table></figure><p>我下载的是pam_mysql-0.7RC1.tar.gz。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@CentOS</span> /]<span class="hljs-meta">#cd /usr/local/src</span><br>[root<span class="hljs-symbol">@CentOS</span> src]<span class="hljs-meta">#tar –zxvf pam_mysql-0.7RC1.tar.gz</span><br>[root<span class="hljs-symbol">@CentOS</span> src]<span class="hljs-meta">#cd pam_mysql-0.7RC1</span><br>[root<span class="hljs-symbol">@CentOS</span> pam_mysql<span class="hljs-number">-0.7</span>RC1]<span class="hljs-meta"># ./configure --with-pam=/usr --with-mysql=/usr --with-pam-mods-dir=/usr/lib64/security</span><br>[root<span class="hljs-symbol">@CentOS</span> pam_mysql<span class="hljs-number">-0.7</span>RC1]<span class="hljs-meta">#make</span><br>[root<span class="hljs-symbol">@CentOS</span> pam_mysql<span class="hljs-number">-0.7</span>RC1]<span class="hljs-meta">#make install</span><br></code></pre></td></tr></table></figure><h5 id="8-4-7、编辑vsftpd的PAM认证文件"><a href="#8-4-7、编辑vsftpd的PAM认证文件" class="headerlink" title="8.4.7、编辑vsftpd的PAM认证文件"></a>8.4.7、编辑vsftpd的PAM认证文件</h5><p><strong>方法一、在现有的vsftpd文件中</strong></p><p>在/etc/pam.d目录下，编辑vsftpd文件，将里面其他的都注释掉（又是这？不用理它看前面的），添加下面这两行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">auth required pam_mysql.so <span class="hljs-attribute">user</span>=vftpuser <span class="hljs-attribute">passwd</span>=111111 <span class="hljs-attribute">host</span>=localhost <span class="hljs-attribute">db</span>=vftpuser <span class="hljs-attribute">table</span>=users <span class="hljs-attribute">usercolumn</span>=name <span class="hljs-attribute">passwdcolumn</span>=passwd <span class="hljs-attribute">crypt</span>=0<br><br>account required pam_mysql.so <span class="hljs-attribute">user</span>=vftpuser <span class="hljs-attribute">passwd</span>=111111 <span class="hljs-attribute">host</span>=localhost <span class="hljs-attribute">db</span>=vftpuser <span class="hljs-attribute">table</span>=users <span class="hljs-attribute">usercolumn</span>=name <span class="hljs-attribute">passwdcolumn</span>=passwd <span class="hljs-attribute">crypt</span>=0<br></code></pre></td></tr></table></figure><p>crypt=0：表示口令使用明文方式保存在数据库中<br>crypt=1：表示口令使用UNIX的DES加密方式加密后保存在数据库中<br>crypt=2：表示口令使用MySQL的password()函数加密后保存在数据库中<br>crypt=3：表示口令使用MD5散列值的方式保存在数据库中</p><p><strong>方法二、新建用于认证的配置文件/etc/pam.d/vsftpd.vusers</strong></p><p>/usr/local/src/pam_mysql-0.7RC1/README  这个文件有详细解释</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">auth required /usr/lib64/security/pam_mysql.so <span class="hljs-attribute">user</span>=vsftpd <span class="hljs-attribute">passwd</span>=vsftpd  <span class="hljs-attribute">host</span>=127.0.0.1 <span class="hljs-attribute">db</span>=vsftpd <span class="hljs-attribute">table</span>=users <span class="hljs-attribute">usercolumn</span>=name <span class="hljs-attribute">passwdcolumn</span>=password <span class="hljs-attribute">crypt</span>=2<br>account required /usr/lib64/security/pam_mysql.so <span class="hljs-attribute">user</span>=vsftpd <span class="hljs-attribute">passwd</span>=vsftpd <span class="hljs-attribute">host</span>=127.0.0.1 <span class="hljs-attribute">db</span>=vsftpd <span class="hljs-attribute">table</span>=users <span class="hljs-attribute">usercolumn</span>=name <span class="hljs-attribute">passwdcolumn</span>=password <span class="hljs-attribute">crypt</span>=2<br></code></pre></td></tr></table></figure><p>修改主配置文件/etc/vsftpd/vsftpd.conf</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pam_service_name</span>=vsftpd.vusers  <span class="hljs-comment">##这个是上一步我们创建的文件的文件名</span><br></code></pre></td></tr></table></figure><h5 id="8-4-8、重启vsftpd服务"><a href="#8-4-8、重启vsftpd服务" class="headerlink" title="8.4.8、重启vsftpd服务"></a>8.4.8、重启vsftpd服务</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@CentOS</span> /]<span class="hljs-meta">#systemctl restart vsftpd</span><br></code></pre></td></tr></table></figure><h5 id="8-4-9、测试虚拟用户登录FTP"><a href="#8-4-9、测试虚拟用户登录FTP" class="headerlink" title="8.4.9、测试虚拟用户登录FTP"></a>8.4.9、测试虚拟用户登录FTP</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">C:\User\Administrator&gt;<span class="hljs-keyword">ftp</span> <span class="hljs-number">192.168</span><span class="hljs-number">.120</span><span class="hljs-number">.240</span><br>Connected <span class="hljs-built_in">to</span> <span class="hljs-number">192.168</span><span class="hljs-number">.120</span><span class="hljs-number">.240</span>.<br><span class="hljs-number">220</span> Welcome <span class="hljs-built_in">to</span> BOB FTP server<br>User (<span class="hljs-number">192.168</span><span class="hljs-number">.120</span><span class="hljs-number">.240</span>:(<span class="hljs-literal">none</span>)): bobyuan<br><span class="hljs-number">331</span> Please specify <span class="hljs-keyword">the</span> password.<br>Password:<br><span class="hljs-number">230</span> Login successful.<br><span class="hljs-keyword">ftp</span>&gt; quit<br><span class="hljs-number">221</span> Goodbye.<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/116970u/p/10788285.html">解决服务器发回了不可路由的地址。使用服务器地址代替的问题</a>             </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FTP</tag>
      
      <tag>Linux</tag>
      
      <tag>vsftpd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/2019/11/14/Maven/"/>
    <url>/2019/11/14/Maven/</url>
    
    <content type="html"><![CDATA[<h3 id="1、Maven-一个优秀的项目构建工具"><a href="#1、Maven-一个优秀的项目构建工具" class="headerlink" title="1、Maven:一个优秀的项目构建工具"></a>1、Maven:一个优秀的项目构建工具</h3><h4 id="1-1、什么是Maven"><a href="#1-1、什么是Maven" class="headerlink" title="1.1、什么是Maven"></a>1.1、什么是Maven</h4><p>Maven的含义：**<a href="https://baike.baidu.com/item/Maven">Maven</a>**项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">项目管理工具</a>。</p><p>Maven 是一个项目管理和整合工具。Maven 为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为 Maven 使用了一个标准的目录结构和一个默认的构建生命周期。</p><p>在有多个开发团队环境的情况下，Maven 能够在很短的时间内使得每项工作都按照标准进行。因为大部分的工程配置操作都非常简单并且可复用，在创建报告、检查、构建和测试自动配置时，Maven 可以让开发者的工作变得更简单。</p><p><strong>Maven</strong>的优势:<strong><code>自动构建</code>,<code>jar包依赖管理</code>,<code>契约编程</code></strong></p><p><img src="/2019/11/14/Maven/story.png" alt="story"></p><blockquote><ul><li>POM：project object model 项目对象模型</li><li>DOM document object model 文档对象模型</li><li>pom.xml是maven的核心配置文件，构建过程相关的一切设置都在这个文件中配置，相当于动态web工程的web.xml文件</li></ul></blockquote><h5 id="1-1-1、自动构建"><a href="#1-1-1、自动构建" class="headerlink" title="1.1.1、自动构建"></a>1.1.1、自动构建</h5><p>使用Maven可以为我们完成很多相应的功能：清理代码，自动编译，完成测试，生成站点报告，进行打包(jar,war)，项目部署。</p><ol><li>清理代码:相当于我们运行clear的效果</li><li>自动编译:可以为咱们自动完成编译(类似于执行javac生成class文件)</li><li>完成测试:实现测试功能，帮咱们完成</li><li>生成报告:可以较为方便的实现对项目的管理</li><li>打包:普通项目打jar包，web项目打成war包</li><li>项目部署:只需要一句命令<strong>mvn jetty:run</strong>即可实现项目的部署</li></ol><p><img src="/2019/11/14/Maven/autoc.png" alt="1"></p><h5 id="1-1-2、Jar包依赖管理"><a href="#1-1-2、Jar包依赖管理" class="headerlink" title="1.1.2、Jar包依赖管理"></a>1.1.2、Jar包依赖管理</h5><p>咱们刚学过框架的集成，导包确实是一个比较痛苦的过程。特别是我们导入一个功能jar包，而它又依赖于其它的jar包【但我们怎么知道有哪些依赖包】，靠死记硬背，即花时间又没有太大的意义，而Maven完美的解决了这个问题，我们只需要导入功能包，它会为我们<strong>自动把对应的依赖包导入</strong>。</p><p>不过使用maven导包需要我们进行相应的xml配置(<strong>pom.xml</strong>),好吧，对初学者来说这个xml配置看起来也确实是比较麻烦，不过大家不用担心。等你学了Maven的仓库，一切都会变得easy起来。</p><h5 id="1-1-3、契约编程"><a href="#1-1-3、契约编程" class="headerlink" title="1.1.3、契约编程"></a>1.1.3、契约编程</h5><p>约定好项目的基本结构。咱们使用Maven，项目的结构就必需是Maven要求的结构，刚开始使用这种结构确实让人很别扭，但是，这种契约编程却让代码结构有<strong>统一的规范</strong>,让多人(多团队)开发变得更加的简单。</p><p><img src="/2019/11/14/Maven/tools.png" alt="1"></p><h4 id="1-2、Maven的安装与配置"><a href="#1-2、Maven的安装与配置" class="headerlink" title="1.2、Maven的安装与配置"></a>1.2、Maven的安装与配置</h4><p>Maven是一个基于Java的工具，所以第一件事就是安装JDK。</p><h5 id="1-2-1、安装JDK，已经安装可跳过！"><a href="#1-2-1、安装JDK，已经安装可跳过！" class="headerlink" title="1.2.1、安装JDK，已经安装可跳过！"></a>1.2.1、安装JDK，已经安装可跳过！</h5><p>JDK下载地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>配置环境变量：</p><p>JAVA_HOME</p><p>Path+=%JAVA_HOME%\bin</p><p>测试：cmd&lt;java -version</p><h5 id="1-2-2、安装Maven"><a href="#1-2-2、安装Maven" class="headerlink" title="1.2.2、安装Maven"></a>1.2.2、安装Maven</h5><p>从网上下载 Maven：<strong><a href="http://maven.apache.org/download.html">http://maven.apache.org/download.html</a></strong></p><p>解压安装、配置环境变量</p><p>测试：mvn -v</p><p>mvn会在当前路径寻找src和pom.xml</p><p>自动生成两个文件夹：C:\Users\Administrator.m2\repository 本地仓库目录  </p><h5 id="1-2-3、配置本地仓库"><a href="#1-2-3、配置本地仓库" class="headerlink" title="1.2.3、配置本地仓库"></a>1.2.3、配置本地仓库</h5><p>Maven会自动为我们添加相应的jar包，而这个jar包会先在<strong>本地仓库</strong>中查找，如果本地仓库中找不到，则会在中央仓库（网络上）去进行下载。</p><p>注意：最好将本地仓库配置在非系统盘。</p><p>本地的默认仓库在C盘（系统盘）中，<strong>用户家目录的.m2目录下</strong>。</p><h6 id="第一步：移动settings-xml文件"><a href="#第一步：移动settings-xml文件" class="headerlink" title="第一步：移动settings.xml文件"></a><strong>第一步：移动settings.xml文件</strong></h6><p><strong>全局的配置文件：</strong>找到你的Maven安装路径，进入MAVEN_HOME/conf/settings.xml</p><p><strong>用户的配置文件：</strong>用户根路径C:\Users\Administrator/.m2/settings.xml 单个用户的,修改</p><p>修改settings.xml文件，将中央仓库切换为阿里远程仓库</p><blockquote><p>中央仓库:Maven的默认的远程仓库(<a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a>)</p><p>私服:是一种特殊的远程仓库，它是架设在局域网内的仓库</p><p>镜像：用来替代中央仓库，速度一般比中央仓库快(百度 csdn，oschina,<strong>阿里云</strong>)</p></blockquote><p>在maven的settings.xml文件里的mirrors结点，添加如下子节点：（两个settings.xml文件都要修改）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/14/Maven/settings.png" alt="1"></p><h6 id="第二步：准备好本地仓库"><a href="#第二步：准备好本地仓库" class="headerlink" title="第二步：准备好本地仓库"></a>第二步：准备好本地仓库</h6><p>创建一个文件夹作为本地仓库，如：D:\Program Files\apache-maven-3.6.1\repo</p><p><img src="/2019/11/14/Maven/repo.png" alt="1"></p><h6 id="第三步：配置文件中设置路径到本地仓库"><a href="#第三步：配置文件中设置路径到本地仓库" class="headerlink" title="第三步：配置文件中设置路径到本地仓库"></a>第三步：配置文件中设置路径到本地仓库</h6><p>settings.xml文件中：</p><p>增加<localRepository>D:/OpenSource/repository</localRepository>，如图所示：</p><p><img src="/2019/11/14/Maven/repo1.png" alt="1"></p><p><img src="/2019/11/14/Maven/repo2.png" alt="1"></p><h4 id="1-3、Maven常用命令"><a href="#1-3、Maven常用命令" class="headerlink" title="1.3、Maven常用命令"></a>1.3、Maven常用命令</h4><h5 id="1-3-1、测试Maven常用命令（重点）"><a href="#1-3-1、测试Maven常用命令（重点）" class="headerlink" title="1.3.1、测试Maven常用命令（重点）"></a>1.3.1、测试Maven常用命令（重点）</h5><p>注：前面几步只是环境搭建，命令才是我们需要掌握的重点</p><p>CMD进入工程目录pom.xml同级一层目录，有编译、测试、打包。。。</p><blockquote><ol><li>   编译主程序：执行 mvn compile命令，查看根目录变化</li><li>   编译测试程序：执行mvn test-compile</li><li>   清理：mvn clean命令，然后再次查看根目录变化</li><li>   mvn clean compile命令, 查看根目录变化</li><li>   mvn clean test命令，查看根目录变化</li><li>   打包：mvn clean package命令,查看根目录变化</li><li>   mvn source:jar命令,查看根目录变化,源码包</li><li>   生成站点：mvn clean site命令,查看根目录变化</li><li>   安装：mvn install命令,查看本地仓库变化，将自己的mvn安装到仓库，解决以来某些依赖问题</li><li>   生成Eclipse的需要2个文件mvn eclipse:eclipse</li><li>   maven打包不执行测试用例的命令mvn package -D maven.test.skip=true</li></ol></blockquote><h4 id="1-4、Maven导包"><a href="#1-4、Maven导包" class="headerlink" title="1.4、Maven导包"></a>1.4、Maven导包</h4><h5 id="1-4-1、认识pom-xml的基本配置（重点）"><a href="#1-4-1、认识pom-xml的基本配置（重点）" class="headerlink" title="1.4.1、认识pom.xml的基本配置（重点）"></a>1.4.1、认识pom.xml的基本配置（重点）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 组id：包名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.itsource.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 模块名：和工程名一致 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 版本号 --&gt;</span><br>SNAPSHOT快照，不稳定，随时都在修改bug<br>RELEASE 释放，稳定版本<br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 项目名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- jar文件依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 只能在测试里面使用src/test/java --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-4-2、（依赖）修改pom-xml的导包配置"><a href="#1-4-2、（依赖）修改pom-xml的导包配置" class="headerlink" title="1.4.2、（依赖）修改pom.xml的导包配置"></a>1.4.2、（依赖）修改pom.xml的导包配置</h5><p>maven解析依赖信息时会到本地仓库中查找被以来的jar包，有时自己编写的jar并未安装在本地仓库中</p><p>mvn install 将自己的mvn安装到仓库，解决以来某些依赖问题</p><pre><code>依赖范围：&lt;scope&gt;compile|test|provided&lt;/scope&gt;    compile:典型的有spring-core:【主程序[yes]、测试程序[yes]、参与打包[yes]、开发[yes]、参与部署[yes]、运行[yes]】    test:以juint为例：test范围，测试范围对主程序无用 【主程序[no]、测试程序[yes]、参与打包[no]、参与部署[no]】    provided:与compile比较：以提供的servlet-api.jar来看，开发时没有servlet环境，而部署运行时不需要提供 【参与开发[yes]、参与部署[no]、参与运行[no]】依赖的传递性：    直接依赖   和   传递依赖    可传递依赖不必在每个模块工程中都重复声明，在最 “下面” 的工程依赖一次即可    非compile范围的依赖不能传递，需要在各模块各自依赖依赖排除(小概率情况)：排除不稳定的依赖jar包，不希望加入当前工程    &lt;exclusions&gt;&lt;exclusion&gt;&lt;groupId&gt;&lt;artifactId&gt;依赖原则：解决模块工程之间的jar包冲突问题    情景一：所需依赖不同层级，路径最短优先    情景二：所需依赖同一层， 先声明的dependency优先统一管理依赖版本：    情景一：spring-*-4.0.0.*个版本spring依赖包版本都是4.0.0，如若统一升级到4.1.1        手工逐个更改        配置更改&lt;properties&gt;&lt;自定义标签名&gt;4.1.1.RELEASE&lt;/自定义标签名&gt;&lt;/properties&gt;            &lt;dependency&gt;...&lt;version&gt;$&#123;自定义标签名&#125;&lt;/version&gt;&lt;/dependency&gt;    properties并不是只能用于依赖版本控制</code></pre><p>加入导包配置（环境）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- jar文件依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加入导包配置后的jar包：确定本地仓库有相应的jar包从本地导入，否则若电脑有联网可以从中央库下载。</p><p><img src="/2019/11/14/Maven/pom.png" alt="1"></p><h5 id="1-4-3、（坐标）互联网搜索坐标（网络连接畅通）"><a href="#1-4-3、（坐标）互联网搜索坐标（网络连接畅通）" class="headerlink" title="1.4.3、（坐标）互联网搜索坐标（网络连接畅通）"></a>1.4.3、（坐标）互联网搜索坐标（网络连接畅通）</h5><p>坐标的组成：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>上述，坐标与仓库定位:org/springframework/spring-orm/3.0.5.RELEASE/spring-orm-3.0.5.RELEASE.jar</p><p><strong><groupId></groupId></strong> 组id：定义当前Maven项目隶属项目,包名，一般是公司、组织名称倒叙+项目包名</p><p><strong><artifactId></artifactId></strong> 模块id：定义实际项目中的一个模块,模块名(工程名称)</p><p>**<version>**：定义当前项目的当前版本</version></p><p><strong>SNAPSHOT</strong>快照版本，就是开发版本</p><p><strong>RELEASE</strong>释放版本，正式版本，稳定 使用其他机构提供的jar文件,必须使用释放版本</p><p><strong>packaging</strong>：定义该项目的打包方式(jar/war) 默认值jar</p></blockquote><p>咱们只需要加一个包，它就会把这个包以及对应的依赖包全部导入，这确实是太棒了，但是又有同学会觉得，即便是这样，引入这一个包的xml也还是挺麻烦的。</p><p>其实，对于这个引入，也是可以直接在网上搜索：</p><p>网址：<a href="http://mvnrepository.com/">http://mvnrepository.com/</a></p><p>进入网站直接进行搜索：</p><p><img src="/2019/11/14/Maven/mvnrepo.png" alt="img"></p><p>从搜索结果中选择一个自己需要的：</p><p><img src="/2019/11/14/Maven/mvnrepo1.png" alt="img"></p><p>选择一个相应版本：</p><p><img src="/2019/11/14/Maven/mvnrepo2.png" alt="1"></p><p>将数据拷贝过来即可：</p><p><img src="/2019/11/14/Maven/mvnrepo3.png" alt="1"></p><h5 id="1-4-4、生命周期-插件-目标"><a href="#1-4-4、生命周期-插件-目标" class="headerlink" title="1.4.4、生命周期/插件/目标"></a>1.4.4、生命周期/插件/目标</h5><p>各构件环节执行顺序</p><ul><li>maven核心程序中定义抽象的生命周期，生命周期中各阶段的具体任务由插件来完成</li><li>maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中的各个阶段，不论现在要执行生命周期的哪一阶段，都是从这个生命周期的最初的位置开始执行的。</li><li>插件和目标：<pre><code>生命周期的各个阶段仅仅定义要执行的任务是什么各个阶段和插件的目标是对应的相似的目标由特定的插件来完成</code></pre></li></ul><h5 id="1-4-5、继承"><a href="#1-4-5、继承" class="headerlink" title="1.4.5、继承"></a>1.4.5、继承</h5><pre><code>现状：    hello        依赖junit4.0    helloFriend    依赖junit4.0    helloFriends    依赖junit4.9需求：统一管理各模块中对junit依赖的版本解决思路：将junit依赖统一提取到“父”工程中，在子工程声明junit依赖时不声明版本，以父工程统一设定为准    步骤：创建maven父工程，打包方式pom        --》子工程声明对父工程的引用&lt;parent&gt;&lt;groupId&gt;&lt;artifactId&gt;&lt;relativePath&gt;以当前基准的父工程的pom.xml路径        --》删除子工程坐标重复        --》父工程统一junit依赖&lt;dependencyManagement&gt;&lt;dependencies&gt;&lt;denpendency&gt;&lt;groupId&gt;&lt;artifactId&gt;&lt;version&gt;        --》删除子工程junit版本号控制</code></pre><p><img src="/2019/11/14/Maven/inh.png" alt="1"></p><h5 id="1-4-6、聚合"><a href="#1-4-6、聚合" class="headerlink" title="1.4.6、聚合"></a>1.4.6、聚合</h5><p>一键安装各个参与聚合的模块</p><p><modules><module>指定各子工程的相对路径，并且不需要考虑顺序</module><module></module>…</modules></p><h4 id="1-5、Maven的插件"><a href="#1-5、Maven的插件" class="headerlink" title="1.5、Maven的插件"></a>1.5、Maven的插件</h4><p>其实Maven的本质是一个插件框架，它的核心并不执行任何具体的构建任务，所以这些任务都是交给插件还完成的，例如编译源代码是由maven- compiler-plugin完成的。</p><p>Maven 插件通常被用来：</p><blockquote><p>1、创建 jar 文件    2、创建 war 文件    3、编译代码文件    </p><p>4、代码单元测试    5、创建工程文档    6、创建工程报告</p></blockquote><p>下面是插件代码：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> //这是一顶层标签，内容有省略</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>pss<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">              <span class="hljs-comment">&lt;!-- Maven的编译插件--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml">               <span class="hljs-comment">&lt;!-- jetty插件--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mortbay.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.1.15.v20140411<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">webAppConfig</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">contextPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">contextPath</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">webAppConfig</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="1-6、仓库的认识"><a href="#1-6、仓库的认识" class="headerlink" title="1.6、仓库的认识"></a>1.6、仓库的认识</h4><p>在 Maven 的术语中，仓库是一个位置（place），例如目录，可以存储所有的工程 jar 文件、library jar 文件、插件或任何其他的工程指定的文件。</p><p>Maven的仓库有两种:<code>本地仓库</code>与<code>远程仓库</code></p><h5 id="1-6-1、本地仓库："><a href="#1-6-1、本地仓库：" class="headerlink" title="1.6.1、本地仓库："></a>1.6.1、本地仓库：</h5><blockquote><ul><li>解释:当前电脑上部署的仓库目录，为当前电脑提供maven工程服务</li><li>默认路径:~/.m2/repository/</li><li>注:每个用户只有一个本地仓库 </li></ul></blockquote><h5 id="1-6-2、远程仓库："><a href="#1-6-2、远程仓库：" class="headerlink" title="1.6.2、远程仓库："></a>1.6.2、远程仓库：</h5><blockquote><ul><li>私服(Nexus)：局域网环境</li><li>中央仓库：Internet上，为世界maven工程服务</li><li>中央仓库的镜像：分担中央仓库的流量压力，提升访问速度</li></ul></blockquote><h5 id="1-6-3、仓库内容："><a href="#1-6-3、仓库内容：" class="headerlink" title="1.6.3、仓库内容："></a>1.6.3、仓库内容：</h5><blockquote><ul><li>maven工程</li><li>maven自身需要的插件</li><li>第三方的框架工具jar</li><li>我们自己的maven工程 mvn install 将自己的mvn安装到仓库，解决以来某些依赖问题</li></ul></blockquote><h4 id="1-7、Maven项目创建"><a href="#1-7、Maven项目创建" class="headerlink" title="1.7、Maven项目创建"></a>1.7、Maven项目创建</h4><h5 id="1-7-1、创建一个新项目"><a href="#1-7-1、创建一个新项目" class="headerlink" title="1.7.1、创建一个新项目"></a>1.7.1、创建一个新项目</h5><p><img src="/2019/11/14/Maven/new1.png" alt="1"></p><h5 id="1-7-2、选择对应的Maven项目"><a href="#1-7-2、选择对应的Maven项目" class="headerlink" title="1.7.2、选择对应的Maven项目"></a>1.7.2、选择对应的Maven项目</h5><p><img src="/2019/11/14/Maven/new2.png" alt="1"></p><h5 id="1-7-3、填写组id（GroupId）与模块id（ArtifactId）"><a href="#1-7-3、填写组id（GroupId）与模块id（ArtifactId）" class="headerlink" title="1.7.3、填写组id（GroupId）与模块id（ArtifactId）"></a>1.7.3、填写组id（GroupId）与模块id（ArtifactId）</h5><p><img src="/2019/11/14/Maven/new3.png" alt="1"></p><h5 id="1-7-4、直接创建（选择Maven仓库设置，有的IDE集成的有Maven有的是自己安装的Maven）"><a href="#1-7-4、直接创建（选择Maven仓库设置，有的IDE集成的有Maven有的是自己安装的Maven）" class="headerlink" title="1.7.4、直接创建（选择Maven仓库设置，有的IDE集成的有Maven有的是自己安装的Maven）"></a>1.7.4、直接创建（选择Maven仓库设置，有的IDE集成的有Maven有的是自己安装的Maven）</h5><p><img src="/2019/11/14/Maven/new4.png" alt="1"></p><h5 id="1-7-5、项目名与项目位置"><a href="#1-7-5、项目名与项目位置" class="headerlink" title="1.7.5、项目名与项目位置"></a>1.7.5、项目名与项目位置</h5><p>建议放在非系统盘</p><p><img src="/2019/11/14/Maven/new5.png" alt="1"></p><h5 id="1-7-6、创建成功后的目录结构"><a href="#1-7-6、创建成功后的目录结构" class="headerlink" title="1.7.6、创建成功后的目录结构"></a>1.7.6、创建成功后的目录结构</h5><p><img src="/2019/11/14/Maven/new6.png" alt="1"></p><h5 id="1-7-7、解决Maven项目目录结构不正确的问题"><a href="#1-7-7、解决Maven项目目录结构不正确的问题" class="headerlink" title="1.7.7、解决Maven项目目录结构不正确的问题"></a>1.7.7、解决Maven项目目录结构不正确的问题</h5><p>约定的目录结构：为什么要遵守约定的目录结构？</p><p>maven负责这个项目的自动化构建，以编译为例，maven要想自动进行编译，那么他必须要知道Java源文件存放位置。自定义以配置形式告知</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hello//工程名<br>|<span class="hljs-params">---src//</span>源码<br>|<span class="hljs-params">---</span>|<span class="hljs-params">---main//</span>存放主程序<br>|<span class="hljs-params">---</span>|<span class="hljs-params">---</span>|<span class="hljs-params">---java//</span>存放java源文件<br>|<span class="hljs-params">---</span>|<span class="hljs-params">---</span>|<span class="hljs-params">---resources//</span>存放框架或其它工具的配置文件<br>|<span class="hljs-params">---</span>|<span class="hljs-params">---test//</span>存放测试程序<br>|<span class="hljs-params">---</span>|<span class="hljs-params">---</span>|<span class="hljs-params">---java</span><br>|<span class="hljs-params">---</span>|<span class="hljs-params">---</span>|<span class="hljs-params">---resources</span><br>|<span class="hljs-params">---pom</span>.xml/<span class="hljs-string">/maven</span>工程的核心配置文件<br></code></pre></td></tr></table></figure><p>在使用IDEA创建maven-archetype-webapp项目的时候，我们会发现main文件夹下少了一个java资源文件夹，那么，我们接下来就说一下它的解决方案：</p><p><img src="/2019/11/14/Maven/new7.png" alt="1"></p><p>第一步：选择File-&gt;Project Structure…</p><p><img src="/2019/11/14/Maven/new8.png" alt="1"></p><p>第二步：选择Modules选项卡下面的Sources项，在main文件夹上右键，选择New Folder…并点击OK ,</p><p>输入要创建的文件夹名称确认创建，</p><p>选择创建的文件夹鼠标右键，</p><p>根据目的选择Sources（源文件）、Tests（测试文件）和Resources（资源文件）等。</p><p><img src="/2019/11/14/Maven/new9.png" alt="1"></p><p>设置完成后的目录结构：</p><p><img src="/2019/11/14/Maven/new10.png" alt="1"></p><h5 id="1-7-8、解决创建项目的JDK版本问题"><a href="#1-7-8、解决创建项目的JDK版本问题" class="headerlink" title="1.7.8、解决创建项目的JDK版本问题"></a>1.7.8、解决创建项目的JDK版本问题</h5><p>这个问题在有的idea中会出现，就是创建好项目后，jdk的版本对应不上，那么解决方案有两个:</p><h6 id="方案一-指定maven的配置文件（一劳永逸-建议使用）"><a href="#方案一-指定maven的配置文件（一劳永逸-建议使用）" class="headerlink" title="方案一:指定maven的配置文件（一劳永逸,建议使用）"></a>方案一:指定maven的配置文件（一劳永逸,建议使用）</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">直接修改maven的setting.xml文件<br>在里面添加如下内容：<br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>                             <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span> <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/2019/11/14/Maven/new11.png" alt="1"></p><h6 id="方案二-针对maven-项目的-pom-文件制定jdk"><a href="#方案二-针对maven-项目的-pom-文件制定jdk" class="headerlink" title="方案二:针对maven 项目的 pom 文件制定jdk"></a>方案二:针对maven 项目的 pom 文件制定jdk</h6><p>摘自网络:<a href="http://blog.csdn.net/geekun/article/details/51325510">http://blog.csdn.net/geekun/article/details/51325510</a></p><p>在<strong>IntelliJ IDEA 15</strong>中使用Maven时，IDEA将默认的编译版本、源码版本设置为jdk5。编译项目的时候出现警告：”Warning:java: 源值1.5已过时, 将在未来所有发行版中删除”，并且无法编译jdk1.5以上的代码。</p><p>出现这样的原因应该是Maven插件的默认配置有问题。解决方法是在”pom.xml”里加入如下代码：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-symbol">&lt;properties&gt;</span><br>    &lt;maven.<span class="hljs-keyword">compiler</span>.<span class="hljs-keyword">source</span>&gt;<span class="hljs-number">1.8</span>&lt;/maven.<span class="hljs-keyword">compiler</span>.<span class="hljs-keyword">source</span>&gt;<br>&lt;maven.<span class="hljs-keyword">compiler</span>.target&gt;<span class="hljs-number">1.8</span>&lt;/maven.<span class="hljs-keyword">compiler</span>.target&gt;<br>&lt;/properties&gt;<br></code></pre></td></tr></table></figure><p>然后按”Ctrl+Shift+Alt+S”打开项目配置，设置Modules的Language Level为”8”：</p><p><img src="/2019/11/14/Maven/new12.png" alt="1"></p><p>最后按”Ctrl+Alt+S”打开设置，搜索”Java Compiler”，将默认jdk和当前modual的jdk版本切换为1.8即可：</p><p><img src="/2019/11/14/Maven/new13.png" alt="1">   </p><p>写段JDK8的代码，运行测试一下是否正常：</p><p>注：alt+Enter组合快捷键可以导包</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        List&lt;<span class="hljs-keyword">String</span>&gt; <span class="hljs-built_in">list</span> = Arrays.asList(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;World!&quot;</span>);<br>        <span class="hljs-built_in">list</span>.stream().forEach(System.out::<span class="hljs-built_in">println</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-7-9、Tomcat中运行Maven项目"><a href="#1-7-9、Tomcat中运行Maven项目" class="headerlink" title="1.7.9、Tomcat中运行Maven项目"></a>1.7.9、Tomcat中运行Maven项目</h5><h6 id="1、Run-gt-Edit-Configurations"><a href="#1、Run-gt-Edit-Configurations" class="headerlink" title="1、Run-&gt;Edit Configurations"></a>1、Run-&gt;Edit Configurations</h6><p><img src="/2019/11/14/Maven/new14.png" alt="1"></p><h6 id="2、填写Tomcat-Server配置名称"><a href="#2、填写Tomcat-Server配置名称" class="headerlink" title="2、填写Tomcat Server配置名称"></a>2、填写Tomcat Server配置名称</h6><p><img src="/2019/11/14/Maven/new15.png" alt="1"></p><h6 id="3、点击deployMent选项卡下的-号，把要发布的项目添加进去"><a href="#3、点击deployMent选项卡下的-号，把要发布的项目添加进去" class="headerlink" title="3、点击deployMent选项卡下的+号，把要发布的项目添加进去"></a>3、点击deployMent选项卡下的+号，把要发布的项目添加进去</h6><p><img src="/2019/11/14/Maven/new16.png" alt="1"></p><p><img src="/2019/11/14/Maven/new17.png" alt="1"></p><h6 id="4、到这我们已经配置完成了，在右上角选择刚刚配置完成的运行项，点击运行即可"><a href="#4、到这我们已经配置完成了，在右上角选择刚刚配置完成的运行项，点击运行即可" class="headerlink" title="4、到这我们已经配置完成了，在右上角选择刚刚配置完成的运行项，点击运行即可"></a>4、到这我们已经配置完成了，在右上角选择刚刚配置完成的运行项，点击运行即可</h6><p><img src="/2019/11/14/Maven/new18.png" alt="1"></p><p><img src="/2019/11/14/Maven/new19.png" alt="1"></p><h4 id="1-8、注意事项"><a href="#1-8、注意事项" class="headerlink" title="1.8、注意事项"></a>1.8、注意事项</h4><p>1、maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件完成。<br>插件本身并不包含在maven的核心程序中。<br>2、当我们执行maven命令需要用到某些插件时，maven核心程序首先到本地仓库中查找。<br>3、本地仓库的【默认】位置：家目录.m2\repository<br>4、maven找不到的插件，自动连接外网到中央仓库下载<br>5、无网络连接会导致构建失败<br>6、修改默认本地仓库的位置到事先准备好的目录下查找插件<br>    修改maven\conf\setting.xml  <localRepository>标签 内容改为目的目录</localRepository></p><h4 id="1-9、Eclipse中使用Maven"><a href="#1-9、Eclipse中使用Maven" class="headerlink" title="1.9、Eclipse中使用Maven"></a>1.9、Eclipse中使用Maven</h4><pre><code>已经内置maven不许安装maven插件设置：一般内置的有一个完整的maven核心程序，但鉴于稳定性欠佳一般不用这个内置的，而是添加    使用外部安装的maven核心程序。window-》preference-》maven-》installation-》addwindow-》preference-》maven-》user setting指定conf/settings.xml 进而获取本地仓库目录基本操作：创建maven版Java程序、创建maven版web程序、执行maven命令    file-&gt;new-&gt;maven project-&gt;create a simple project-&gt;...-&gt;finish    maven命令执行 pom.xml鼠标右run as &#123;build|clean|install|...&#125;maven中compile范围的jsp-api.jar与tomcat中jsp-api.jar冲突maven项目导入eclipse，依靠pom.xml识别maven工程，【导入之后同时会创建eclipse工程识别项】</code></pre>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java异常处理</title>
    <link href="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="Java异常处理"><a href="#Java异常处理" class="headerlink" title="Java异常处理"></a>Java异常处理</h3><p>​         一般来说发生异常之后，会终止之前本应该执行的流程  </p><h4 id="1、什么是Java中的异常"><a href="#1、什么是Java中的异常" class="headerlink" title="1、什么是Java中的异常"></a>1、什么是Java中的异常</h4><p>① Java代码在 <strong>编译</strong> 或 <strong>运行时期</strong> 发生的错误就是异常。  </p><p>② 也可以看成是导致程序终止的一种错误指令流（一旦发生可能会终止程序）</p><p>③ <strong>Exception类：</strong>Java把异常信息封装成了一个类，用来表示Java程序中可能会产生的异常，<strong>创建异常类对象抛出异常相关的信息</strong>（如异常出现的<strong>位置</strong>、<strong>类型</strong>和<strong>原因</strong>等），并要求对产生的异常进行合理的异常处理。</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/Exception.png" alt="1"></p><p>④ <strong>Throwable</strong>是Java 语言中所有错误或异常的超类，即<strong>祖宗类</strong>。  </p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/Throwable.png" alt="1"></p><p>另外，在异常Exception类中，有一个子类要特殊说明一下，<strong>RuntimeException</strong>子类，RuntimeException及它的子类只能在<strong>Java程序运行过程中出现</strong>。</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/Error.png" alt="1"></p><p><strong>与异常Exception平级的有一个Error</strong>，它是Throwable的子类，它用来表示java程序中可能会产生的严重错误<strong>（不应该被捕获的严重问题）</strong>。解决办法只有一个，修改代码避免Error错误的产生。</p><h4 id="2、最近我们遇到过的异常"><a href="#2、最近我们遇到过的异常" class="headerlink" title="2、最近我们遇到过的异常"></a>2、最近我们遇到过的异常</h4><h5 id="①-数组越界-ArrayIndexOutOfBoundsException"><a href="#①-数组越界-ArrayIndexOutOfBoundsException" class="headerlink" title="① 数组越界: ArrayIndexOutOfBoundsException"></a>① 数组越界: <strong>ArrayIndexOutOfBoundsException</strong></h5><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/AIOB.png" alt="aiob"></p><h5 id="②-除数为0-ArithmeticException-by-zero"><a href="#②-除数为0-ArithmeticException-by-zero" class="headerlink" title="② 除数为0: **ArithmeticException: / by zero  **"></a>② 除数为0: **ArithmeticException: / by zero  **</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span><span class="hljs-operator"> / </span><span class="hljs-number">0</span>;<br><span class="hljs-comment">//Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br>at cn.kongwei_liao.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ExceptionDemo</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ExceptionDemo</span>.</span></span>java:<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>一旦发生了异常，就终止了jvm的运行，除数为0，出现了异常，jvm终止了运行。下面输出”end”就没有运行了。</p><h5 id="③-空指针异常-NullPointerException"><a href="#③-空指针异常-NullPointerException" class="headerlink" title="③ 空指针异常: NullPointerException"></a>③ 空指针异常: <strong>NullPointerException</strong></h5><h5 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h5><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/throwable1.png" alt="1"></p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/Exception1.png" alt="1"></p><p><strong>小结：</strong></p><p>1、一般来说一个异常类就表示一种异常情况，Java中定义了很多异常类表示很多的异常情况。</p><p>2、在实际开发中异常情况有很多，Java不可能把所有的异常情况都列出来，所以我们可以自定义异常类来处理我们自己关心的异常。</p><p>3、处理异常目的：</p><ol><li><p>给用户有良好的反馈</p></li><li><p>不能让异常影响程序下面正常的运行</p></li></ol><p>4、出现异常时，异常被一层一层向上抛出，最终抛给JVM，但是一般不要抛给JVM，而是应该在某一层被<strong>异常处理程序</strong>处理掉。</p><h4 id="3、异常的处理方式"><a href="#3、异常的处理方式" class="headerlink" title="3、异常的处理方式"></a>3、异常的处理方式</h4><p>程序出现了异常，我们需要处理，保证功能能顺利完成。怎么处理？<strong>有两种方式</strong></p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/liangzhong.png" alt="1"></p><p>看下面一张截图：</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/exception.jpg" alt="ex"></p><p>分析：</p><p>1、本希望第一句和第三句都正常执行，但是： 在第二句遇到了异常，程序就终止了</p><p>2、为什么程序就终止了呢？</p><p>第10行产生一个异常对象，我们没有做任何的处理，被交由JVM处理的。JVM的处理方式就是把异常信息打印到控制台，并且退出JVM。</p><p>3、如何使第二句出现异常后，不退出JVM？把出现异常的原因记录起来或者打印出来，方便开发者定位问题，然后继续运行第三句代码。</p><p>4、我们可以catch它，然后根据catch到的异常做对应的异常处理，这样便不必退出JVM。</p><p>例如，计算器，发现除数为0后，按照正常情况下，应该终止计算器，关闭它。但是没有，人家处理了，你还可以继续运算。因为计算器自己处理了这个异常。</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/clip_image001.png" alt="img"></p><h5 id="方式一：try-catch-finally结构处理异常"><a href="#方式一：try-catch-finally结构处理异常" class="headerlink" title="方式一：try-catch-finally结构处理异常"></a>方式一：try-catch-finally结构处理异常</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk">try&#123;<br><span class="hljs-regexp">//</span> 写可能出现异常的代码，可以有很多句代码<br><br><span class="hljs-regexp">//</span>throw new Exception();<br><span class="hljs-regexp">//</span>产生异常，直接捕获处理，throw后不能再有语句，语句不可达，编译器拒绝编译<br>&#125;catch(异常类型 变量名)&#123;<br><span class="hljs-regexp">//</span> 处理异常，并不是把上面的代码改正确。<br><span class="hljs-regexp">//</span> 常见的一些方式：<br><span class="hljs-regexp">//</span> ①打印异常的信息到控制台；<br><span class="hljs-regexp">//</span>处理方式<span class="hljs-number">1</span> ：异常原因  一般处理后给前台页面返回，给用户提示问题原因 <br>String message = e.getMessage();<br>System.out.println(message);<br><br><span class="hljs-regexp">//</span>处理方式<span class="hljs-number">2</span> ：异常类型和异常原因<br>String str = e.toString();<br>System.out.println(str);<br><br><span class="hljs-regexp">//</span>处理方式<span class="hljs-number">3</span>：打印日志 推荐 给程序员看的<br>e.printStackTrace(); <br><br><span class="hljs-regexp">//</span>② 可以把异常信息保存到一个文件中，可以持久的存储起来；<br><span class="hljs-regexp">//</span> 因为实际项目有可能有很多异常打印到控制台，不能随时关注，这时就需要将日志保存。<br><br><span class="hljs-regexp">//</span>③ 可以抓住之后，向外在抛出另外的一个异常（了解），就是谁调用谁处理。<br>&#125;finally&#123;<br><span class="hljs-regexp">//</span>不论有无异常一定会被执行的语句；<br><span class="hljs-regexp">//</span>这里一般放：关闭流或者释放资源的代码<br><br><span class="hljs-regexp">//</span>在return之前执行，但是return的还是执行finally块之前的内容；<br><span class="hljs-regexp">//</span>此处不应该放任何的业务代码，尤其是返回一个数据（很多面试题里可能会方法）<br><br><span class="hljs-regexp">//</span>不管上面是否有异常产生，这里的代码都会执行（除非前面有执行退出JVM的代码如System.<span class="hljs-keyword">exit</span>()）<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/clip_image002.jpg" alt="img"></p><h5 id="获得异常信息的方式"><a href="#获得异常信息的方式" class="headerlink" title="获得异常信息的方式"></a>获得异常信息的方式</h5><p>在API中随意查看一个异常类，比如ArithmeticException或者在eclipse中查看源码，发现<strong>异常类中基本上全是构造方法，所有的方法都在超类Throwable中。</strong></p><p>也就是说，有关我们的代码出现了异常，这些所有的异常信息都被封装到Throwable中，我们去Throwable中找对应的方法，看源码(api)发现：</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/throwable1.png" alt="1"></p><h6 id="①-在Throwable类中定义了一个字段：-保存异常描述信息"><a href="#①-在Throwable类中定义了一个字段：-保存异常描述信息" class="headerlink" title="① 在Throwable类中定义了一个字段： 保存异常描述信息"></a>① 在Throwable类中定义了一个字段： 保存异常描述信息</h6><p>通过<strong>ArithmeticException</strong>源码<strong>一直跟踪super方法</strong>，直到异常的顶层<strong>Throwable类</strong>发现一个<strong>detailMessage字段</strong>，这个字段来存储异常信息。</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/detailMessage.png" alt="1"></p><h6 id="②-在Throwable父类中定义了多个方法用来获得对象中的异常描述信息"><a href="#②-在Throwable父类中定义了多个方法用来获得对象中的异常描述信息" class="headerlink" title="② 在Throwable父类中定义了多个方法用来获得对象中的异常描述信息"></a>② 在Throwable父类中定义了多个方法用来获得对象中的异常描述信息</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">String</span> getMessage()  返回此 <span class="hljs-built_in">throwable</span> 的详细消息字符串 <br><span class="hljs-keyword">String</span> toString() 返回此 <span class="hljs-built_in">throwable</span> 的简短描述 <br><span class="hljs-keyword">void</span> printStackTrace() 调用此方法会把完整异常信息打印到控制台<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">try &#123;<br><span class="hljs-attribute">System.out.println(1 / 0);</span><br><span class="hljs-attribute">&#125; catch (ArithmeticException e) &#123;</span><br><span class="hljs-attribute">System.out.println(e.getMessage());//返回此 throwable 的详细消息字符串</span>: by zero<br>System<span class="hljs-variable">.out</span><span class="hljs-variable">.println</span>(e<span class="hljs-variable">.toString</span>());//返回此 <span class="hljs-attribute">throwable 的简短描述</span>:java<span class="hljs-variable">.lang</span><span class="hljs-variable">.ArithmeticException</span>: / by zero<br>e<span class="hljs-variable">.printStackTrace</span>();//将此 <span class="hljs-attribute">throwable 及其追踪输出至标准错误流</span>:<br>/**<br> * java<span class="hljs-variable">.lang</span><span class="hljs-variable">.ArithmeticException</span>: / by zero at cn<span class="hljs-variable">.itsource</span><span class="hljs-variable">.wrapper</span><span class="hljs-variable">.Test</span><span class="hljs-variable">.main</span>(Test<span class="hljs-variable">.java</span>:7)<br> */<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="我们在开发中一般怎么用异常信息呢？"><a href="#我们在开发中一般怎么用异常信息呢？" class="headerlink" title="我们在开发中一般怎么用异常信息呢？"></a>我们在开发中一般怎么用异常信息呢？</h5><p>错误信息越详细越好，帮助我们快速定位和解决问题。</p><p>当然也要考虑容量问题。假如打印过多的信息，会占用服务器资源和影响执行效率(开发遇坑，导致性能很低下。)</p><p>一般使用：e.printStackTrace();但是会把这个信息<strong>单独记录在其他位置</strong>，方便维护。<strong>具体看自己公司的架构而定。</strong></p><h5 id="多异常处理以及执行流程分析"><a href="#多异常处理以及执行流程分析" class="headerlink" title="多异常处理以及执行流程分析"></a>多异常处理以及执行流程分析</h5><h6 id="①：什么是多异常？"><a href="#①：什么是多异常？" class="headerlink" title="①：什么是多异常？"></a>①：什么是多异常？</h6><p>就是说我们写一个功能代码，里面可能出现<strong>多种类型的异常</strong>。就要多异常。我们怎么处理呢？</p><h6 id="②：多异常的处理"><a href="#②：多异常的处理" class="headerlink" title="②：多异常的处理"></a>②：多异常的处理</h6><p><strong>A、笼统：可以写一个大的（父类）异常来捕获异常，就是用Exception。</strong></p><p>但是这样不好，要被扣工资的，你自己写的代码都知不道可能会出现什么问题，以后维护、交接或者测试的时候就不能尽量的避免已知的问题。</p><p>上句言外之意就是：提前告知测试人员或者同事：注意哈！我这里可能出问题哦，我也不晓得除啥子问题，反正呢，这个地方你注意点就是了，除了问题不要来找我，我是提前给你说了的哈（推卸责任，不负责）；</p><p>所以在负责任的情况下应尽量告知他人此处可能出现的<strong>具体何种异常</strong>，不应笼统。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//举例如下：定义个除法，计算两个参数的熵。<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(div(&quot;2&quot;, &quot;0&quot;));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(div(&quot;a&quot;, &quot;0&quot;));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(div(&quot;10&quot;, &quot;2&quot;));<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算两个整数的商的方法 String ---》 int / Integer</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> static <span class="hljs-type">int</span> div(String a, String b) &#123;<br><span class="hljs-type">Integer</span> ret = <span class="hljs-number">0</span>;<br>try &#123;<br><span class="hljs-type">Integer</span> i1 = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(a);<br><span class="hljs-type">Integer</span> i2 = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(b);<br>ret = i1 / i2;<br>&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/clip_image003.jpg" alt="img"></p><p><strong>B、尽量细化异常，一层一层的catch。</strong></p><p>只有当你不能明确知道自己的代码会出现什么异常，万不得已情况下才使用一个最大的Exception来捕获异常。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//举例如下：定义个除法，计算两个参数的熵。</span><br><span class="hljs-comment">//main方法省略，具体见之前的例子</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">int</span> div(<span class="hljs-keyword">String</span> a, <span class="hljs-keyword">String</span> b) &#123;<br><span class="hljs-keyword">Integer</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">Integer</span> i1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Integer</span>(a);<br><span class="hljs-keyword">Integer</span> i2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Integer</span>(b);<br>ret = i1 / i2;<br>&#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">&quot;数字解析错误&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">&quot;亲，除数不能为0哦&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> e) &#123;<br>e.printStackTrace();<br>System.out.println(<span class="hljs-string">&quot;未知错误！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/clip_image004.jpg" alt="img"></p><h6 id="多异常处理分析总结如下"><a href="#多异常处理分析总结如下" class="headerlink" title="多异常处理分析总结如下"></a>多异常处理分析总结如下</h6><p>1、多异常处理的结构，可以有多个catch;</p><p>2、多个catch中的异常类型，子类放在前面，父类在后面</p><p>3、一旦try中产生了一个异常对象，立即就会从第一个catch开始匹配，一旦被抓住就执行catch中的代码，然后整个try-catch块就结束</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">/*<br>catch细化规则：<br>要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，平级之间没有顺序关系。<br>*/<br>try&#123;<br>throw new Exception();<span class="hljs-regexp">//</span>产生异常，直接捕获处理<br><span class="hljs-regexp">//</span>throw后不能再有语句，语句不可达，编译器拒绝编译<br>&#125;catch(XxxException e)&#123;<span class="hljs-regexp">//</span>子<br><span class="hljs-regexp">//</span>处理方式<br>&#125;catch(YyyException e)&#123;<span class="hljs-regexp">//</span>父<br><span class="hljs-regexp">//</span>处理方式<br>&#125;catch(ZzzException e)&#123;<span class="hljs-regexp">//</span>祖<br><span class="hljs-regexp">//</span>处理方式<br>&#125;<br></code></pre></td></tr></table></figure><p>4、如果所有的catch都抓不住，可能就相当于我们没有处理到，又可能由JVM处理</p><h5 id="finally结构"><a href="#finally结构" class="headerlink" title="finally结构"></a>finally结构</h5><p>finally这个里面的代码，表示无论如何，都要执行，除非**System.exit()**退出JVM  </p><p>实例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//main方法省略，具体见之前的例子<br><span class="hljs-built_in">public</span> static <span class="hljs-type">int</span> div(String a, String b) &#123;<br><span class="hljs-type">Integer</span> ret = <span class="hljs-number">0</span>;<br>try &#123;<br><span class="hljs-type">Integer</span> i1 = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(a);<br><span class="hljs-type">Integer</span> i2 = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(b);<br>ret = i1 / i2;<br>&#125; catch (NumberFormatException e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;数字解析错误&quot;);<br>&#125; catch (ArithmeticException e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;亲，除数不能为0哦&quot;);<br>&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;未知错误！&quot;);<br>&#125;finally&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;我是Finally:&quot;+&quot;a=&quot;+a+&quot;;b=&quot;+b);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/clip_image005.jpg" alt="img"></p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">try</span><span class="hljs-meta">&#123;...&#125;</span>catch(异常类型 e)<span class="hljs-meta">&#123;...&#125;</span><span class="hljs-keyword">finally</span><span class="hljs-meta">&#123;...&#125;</span><br><br>或者（有时候为了释放某些资源（例如锁），但必须保证异常往上层抛出，可以采用）<br><span class="hljs-keyword">try</span><span class="hljs-meta">&#123;...&#125;</span><span class="hljs-keyword">finally</span><span class="hljs-meta">&#123;...//释放锁操作&#125;</span><br></code></pre></td></tr></table></figure><h5 id="方式二：Throws向上层抛出异常"><a href="#方式二：Throws向上层抛出异常" class="headerlink" title="方式二：Throws向上层抛出异常"></a>方式二：Throws向上层抛出异常</h5><p>当我们有些异常自己处理不了，或者不方便处理，或者其他原因，我们就把异常抛出去，<strong>抛给方法的调用者处理</strong>。</p><p>调用者调用一个会向外抛异常的函数时，需要对该函数进行异常处理（继续向上抛出或者try-catch处理）。</p><p>目前，大家能处理的异常就处理，尽量不要抛。  </p><p>关键字：throws</p><p>语法：在方法上，<strong>“{”前写关键字throws</strong> ，后面写异常类，**可以同时抛多种异常类(用,分隔)**。  </p><p>实例：</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/clip_image006.jpg" alt="img"></p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/clip_image007.jpg" alt="img"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//main方法省略，详见之前案例</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">int</span> div(<span class="hljs-keyword">String</span> a, <span class="hljs-keyword">String</span> b) throws NumberFormatException, ArithmeticException&#123;<br><span class="hljs-comment">//方法内部不提供异常处理，而是将异常向外抛出</span><br><span class="hljs-keyword">Integer</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">Integer</span> i1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Integer</span>(a);<br><span class="hljs-keyword">Integer</span> i2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Integer</span>(b);<br>ret = i1 / i2;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、异常的分类"><a href="#4、异常的分类" class="headerlink" title="4、异常的分类"></a>4、异常的分类</h4><h5 id="①-运行时异常：-RuntimeException以及它的所有的子类"><a href="#①-运行时异常：-RuntimeException以及它的所有的子类" class="headerlink" title="① 运行时异常： RuntimeException以及它的所有的子类"></a>① 运行时异常： RuntimeException以及它的所有的子类</h5><p>方法中抛出运行时期异常，方法定义中无throws声明，调用者也无异常处理运行时期异常（调用者可以用try进行运行时异常处理）一旦发生,需要程序人员修改源代码.</p><p>在代码编译的时候不会提示错误，比如我们常见的NullPointerException，ArrayIndexOutOfBoundsException等  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = <span class="hljs-keyword">null</span>;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>.length());<span class="hljs-comment">//编译的时候，不会报错，运行后就会报错。因为str没有创建对象</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="②-非运行时异常-：-Exception以及它的所有子类除去RuntimeException体系的其它异常"><a href="#②-非运行时异常-：-Exception以及它的所有子类除去RuntimeException体系的其它异常" class="headerlink" title="② 非运行时异常 ： Exception以及它的所有子类除去RuntimeException体系的其它异常"></a>② 非运行时异常 ： Exception以及它的所有子类除去RuntimeException体系的其它异常</h5><p>此类异常在编译时期必须处理  ；</p><p>在IDE编译的时候<strong>会有提示</strong>： 要么try处理，要么throws向外抛出</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat();<br><span class="hljs-keyword">try</span> &#123;<br>sdf.parse(<span class="hljs-string">&quot;2017-04-24&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：不要太过意的记住哪些是运行时哪些时非运行时异常，在写的时候，如果是非运行时异常，会有错误提示(红色)对异常的处理。</p><h4 id="5、自定义异常"><a href="#5、自定义异常" class="headerlink" title="5、自定义异常"></a>5、自定义异常</h4><p>我们见到的上面提到的异常是Java列出的常见的，而实际开发中还有更多更多的异常情况，java中不可能有所有情况的异常；</p><p>有的时候不能满足我们的需要，此时我们可以继承Exception类，实现自定义异常。</p><h5 id="自定义异常的流程-amp-自定义异常的语法："><a href="#自定义异常的流程-amp-自定义异常的语法：" class="headerlink" title="自定义异常的流程&amp;自定义异常的语法："></a>自定义异常的流程&amp;自定义异常的语法：</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//继承其它异常，编写自定义异常</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">异常类名</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><span class="hljs-keyword">private</span> static <span class="hljs-keyword">final</span> long serialVersionUID = 自动生成;<span class="hljs-comment">//用于序列化</span><br>写两个构造（自动生成）<br>无参构造<br>有参构造<br>&#125;<br></code></pre></td></tr></table></figure><p>1、自定义一个异常类</p><p>例如： <strong>Java中设计好的</strong>一个异常类 NumberFormatException</p><p>2、设计一段代码（方法），这里面就会产生上面的一个异常对象</p><p>例如：Java中在写Integer的构造方法的时候，其内部就会创建一个异常对象并向外抛出</p><p>3、有人调用上面的方法，然后对异常进行处理</p><p>例如： 我们自己在调用构造方法创建对象</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">try&#123;<br><span class="hljs-type">Integer</span> i = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(&quot;abc&quot;);<br>&#125;catch(NumberFormatException e)&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“出异常了”);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h5><p>我们需要做上面的3件事情</p><p>1、自定义一个异常类MultipleException：假设当我们用户注册的时候，如果用户名已经存在了</p><p>语法：</p><p>① 自定义一个类    ② 继承 <strong>Exception</strong> 或者 <strong>RuntimeException</strong>    </p><p>③ 提供一个公共无参数的构造方法和一个String参数的构造方法（比如参考：NumberFormatException）</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/NumberFormatException.png" alt="1"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//参照NumberFormatException自定写一个自定义的多用户异常类</span><br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultipleException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br><span class="hljs-keyword">private</span> static <span class="hljs-keyword">final</span> long serialVersionUID = <span class="hljs-number">1</span>L;<br><br><span class="hljs-comment">//无参的构造方法</span><br>public <span class="hljs-type">MultipleException</span>() &#123;<br><span class="hljs-keyword">super</span>();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 有参的构造方法</span><br><span class="hljs-comment"> * @param s 信息提示</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-type">MultipleException</span>(<span class="hljs-type">String</span> s) &#123;<br><span class="hljs-keyword">super</span>(s);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、设计一个注册Register的方法，根据条件判断在适当的时候抛出（产生）一个上面1的异常对象，抛出去。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//用户注册</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Register</span> &#123;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span>[] users = &#123; <span class="hljs-string">&quot;小王&quot;</span>, <span class="hljs-string">&quot;小李&quot;</span>, <span class="hljs-string">&quot;小明&quot;</span> &#125;;<span class="hljs-comment">// 写一个数组，模拟已经注册的用户</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户注册功能</span><br><span class="hljs-comment"> * @param userName</span><br><span class="hljs-comment"> *            新注册的用户名</span><br><span class="hljs-comment"> * @throws MultipleException</span><br><span class="hljs-comment"> *             用户名存在的异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(<span class="hljs-keyword">String</span> userName)</span> throws MultipleException </span>&#123;<br><span class="hljs-comment">// 遍历已经存在的用户名，判断是否新注册的用户名已经存在</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; users.length; i++) &#123;<br><span class="hljs-comment">// 条件判断，如果用户名不为空，且已经存在，则抛出一个MultipleException异常</span><br><span class="hljs-keyword">if</span> (userName != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; userName.equals(users[i])) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MultipleException(<span class="hljs-string">&quot;亲，用户名：&quot;</span> + userName + <span class="hljs-string">&quot;已经注册，请重新输入!&quot;</span>);<br><span class="hljs-comment">// throw:在方法里向调用者抛出异常</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//没有重复，则注册成功</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;恭喜你，注册成功!玩的开心！！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、我们去调用注册的方法来注册一个账号  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Register.<span class="hljs-keyword">register</span>(<span class="hljs-string">&quot;小刚&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (MultipleException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Register.<span class="hljs-keyword">register</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (MultipleException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、throw和throws"><a href="#6、throw和throws" class="headerlink" title="6、throw和throws"></a>6、throw和throws</h4><p>用throw主动制造异常，throw后不能再有语句，语句不可达，编译器拒绝编译；</p><p>如果抛出（throw）的是<strong>编译时期（必须要处理的）异常</strong>，必须在方法声明处抛出（throws）；</p><p>声明throws的方法被调用者调用时必须异常处理（继续抛出或就地try-catch处理），无论运行异常编译异常  。</p><p><img src="/2019/11/14/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/throws.png" alt="1"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java异常处理</tag>
      
      <tag>Exception</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试题集汇总</title>
    <link href="/2019/11/13/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E6%B1%87%E6%80%BB/"/>
    <url>/2019/11/13/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>1、<a href="https://www.cnblogs.com/xiaoxi/p/7364623.html">java 面试题整理（不定期更新）</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java垃圾回收</title>
    <link href="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="堆-Heap-和非堆-Non-heap-内存"><a href="#堆-Heap-和非堆-Non-heap-内存" class="headerlink" title="堆(Heap)和非堆(Non-heap)内存"></a><strong>堆(Heap)和非堆(Non-heap)内存</strong></h3><p>按照官方的说法：“Java 虚拟机具有一个堆，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在 Java 虚拟机启动时创建的。”</p><p>“在JVM中堆之外的内存称为非堆内存(Non-heap memory)”。</p><p>可以看出JVM主要管理两种类型的内存：堆和非堆。简单来说堆就是Java代码可及的内存，是留给开发人员使用的，非堆就是JVM留给自己用的，</p><h3 id="什么是自动垃圾回收？"><a href="#什么是自动垃圾回收？" class="headerlink" title="什么是自动垃圾回收？"></a><strong>什么是自动垃圾回收？</strong></h3><p>自动垃圾回收是一种在堆内存中找出哪些对象在被使用，还有哪些对象没被使用，并且将后者删掉的机制。所谓使用中的对象（已引用对象），指的是程序中有指针指向的对象；而未使用中的对象（未引用对象），则没有被任何指针给指向，因此占用的内存也可以被回收掉。</p><p>在用 C 之类的编程语言时，程序员需要自己手动分配和释放内存。而 Java 不一样，它有垃圾回收器，释放内存由回收器负责。本文接下来将介绍垃圾回收机制的基本过程。</p><h3 id="垃圾回收机制的基本过程"><a href="#垃圾回收机制的基本过程" class="headerlink" title="垃圾回收机制的基本过程"></a>垃圾回收机制的基本过程</h3><h4 id="第一步：标记（发现无用对象）"><a href="#第一步：标记（发现无用对象）" class="headerlink" title="第一步：标记（发现无用对象）"></a><strong>第一步：标记（发现无用对象）</strong></h4><p>垃圾回收的第一步是标记。垃圾回收器此时会找出哪些内存在使用中，还有哪些不是。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/a.jpg" alt="img"></p><p>上图中，蓝色表示已引用对象，橙色表示未引用对象。垃圾回收器要检查完所有的对象，才能知道哪些有被引用，哪些没。如果系统里所有的对象都要检查，那这一步可能会相当耗时间。</p><h4 id="第二步：清除（回收被无用对象占用的内存空间）"><a href="#第二步：清除（回收被无用对象占用的内存空间）" class="headerlink" title="第二步：清除（回收被无用对象占用的内存空间）"></a><strong>第二步：清除（回收被无用对象占用的内存空间）</strong></h4><p>回收被无用对象占用的内存空间–jvm堆内存（运行时数据区，用以保存类的实例，即对象），使之再次被程序使用(<strong>一般是在CPU空闲或者内存不足时</strong>)。</p><p>Java语言没有显式的提供分配内存和删除内存的方法，一些开发人员将<code>引用对象设置为null</code>或者<code>调用System.gc()</code>或者<code>Runtime.getRuntime.gc()</code>来释放内存(<strong>后两种方法仅是建议，慎重使用</strong>)；</p><p>注：事实上，除了释放没用对象占用的内存空间外，垃圾回收也可以清除内存纪录碎片（由于创建对象和垃圾回收器释放丢弃对象所占的内存空间）</p><p>删掉标记出的未引用对象。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/b.jpg" alt="img"></p><p>内存分配器会保留指向可用内存的引用，以供分配新对象。</p><h4 id="第三步：压缩"><a href="#第三步：压缩" class="headerlink" title="第三步：压缩"></a><strong>第三步：压缩</strong></h4><p>为了提升性能，删除了未引用对象后，还可以将剩下的已引用对象放在一起（压缩），这样就能更简单快捷地分配新对象了。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/c.jpg" alt="img"></p><h3 id="为什么需要分代垃圾收集？"><a href="#为什么需要分代垃圾收集？" class="headerlink" title="为什么需要分代垃圾收集？"></a><strong>为什么需要分代垃圾收集？</strong></h3><p>之前说过，逐一标记和压缩 Java 虚拟机里的所有对象非常低效：分配的对象越多，垃圾回收需时就越久。不过，根据统计，大部分的对象，其实用没多久就不用了。</p><p>来看个例子吧。（下图中，竖轴代表已分配的字节，而横轴代表程序运行时间）</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/d.jpg" alt="img"></p><p>上图可见，存活（没被释放）的对象随运行时间越来越少。而图中左侧的那些峰值，也表明了大部分对象其实都挺短命的。</p><h4 id="JVM-分代"><a href="#JVM-分代" class="headerlink" title="JVM 分代"></a><strong>JVM 分代</strong></h4><p>根据之前的规律，就可以用来提升JVM的效率了。方法是，把堆分成几个部分（就是所谓的分代），分别是<code>新生代</code>、<code>老年代</code>，以及<code>永生代</code>。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/910900.png" alt="img"></p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/e.jpg" alt="img"></p><p><strong>新生代:<strong>所有新生对象会被分配在新生代内存。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。一旦新生代内存满了，就会开始对死掉的对象，进行所谓的**<em>\</em>小型垃圾回收Minor GC\</strong></strong>过程。一片新生代内存里，死掉的越多，回收过程就越快；至于那些还活着的对象，此时就会老化，并最终老到进入老年代内存。</p><p><strong>Stop the World 事件</strong>—— 小型垃圾回收属于一种叫 “Stop the World” 的事件。在这种事件发生时，所有的程序线程都要暂停，直到事件完成（比如这里就是完成了所有回收工作）为止。</p><p>**老年代:**用来保存长时间存活的对象。通常，设置一个阈值，当达到该年龄时，年轻代对象会被移动到老年代。最终老年代也会被回收。这个事件成为 Major GC。</p><p>Major GC 也会触发STW（Stop the World）。通常，Major GC会慢很多，因为它涉及到所有存活对象。所以，对于响应性的应用程序，应该尽量避免Major GC。还要注意，Major GC的STW的时长受年老代垃圾回收器类型的影响。</p><p>**永久代:**用于存放静态文件，如今Java类、方法等包含JVM用于描述应用程序中类和方法的元数据。永久代是由JVM在运行时根据应用程序使用的类来填充的。此外，Java SE类库和方法也存储在这里。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=<N>进行设置。</N></p><p>如果JVM发现某些类不再需要，并且其他类可能需要空间，则这些类可能会被回收。</p><h4 id="世代垃圾收集过程"><a href="#世代垃圾收集过程" class="headerlink" title="世代垃圾收集过程"></a><strong>世代垃圾收集过程</strong></h4><p>现在你已经理解了为什么堆被分成不同的代，现在是时候看看这些空间是如何相互作用的。 后面的图片将介绍JVM中的对象分配和老化过程。</p><p><strong>第一、新生代：</strong>首先，将任何新对象分配给 eden 空间。 两个 survivor 空间都是空的。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/f.jpg" alt="img"></p><p>当 eden区填满时，会触发轻微的垃圾收集，还存活的对象将被复制到Survivor区。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/g.jpg" alt="img"></p><p>引用的对象被移动到第一个 survivor 空间。 清除 eden 空间时，将删除未引用的对象。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/h.jpg" alt="img"></p><p>在下一次Minor GC中，Eden区也会做同样的操作。删除未被引用的对象，并将被引用的对象移动到Survivor区。然而这里，他们被移动到了第二个Survivor区（S1）。此外，第一个Survivor区（S0）中，在上一次Minor GC幸存的对象，会增加年龄，并被移动到S1中。待所有幸存对象都被移动到S1后，<code>S0和Eden区都会被清空</code>。注意，Survivor区中<code>有了不同年龄的对象</code>。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/i.jpg" alt="img"></p><p>在下一次Minor GC中，会重复同样的操作。不过，这一次Survivor区会交换<code>(Survivor的From和To身份交替互换)</code>。被引用的对象移动到S0。幸存的对象增加年龄。Eden区和S1被清空。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/j.jpg" alt="img"></p><p>此幻灯片演示了 promotion。 在较小的GC之后，当老化的物体达到一定的<code>年龄阈值</code>（在该示例中为8）时，它们从年轻一代晋升到老一代。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/k.jpg" alt="img"></p><p><strong>第二、年老代：</strong></p><p>在<code>年轻代</code>中经历了N次垃圾回收后仍然存活的对象，就会被放到<code>年老代</code>中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/Snipaste_2019-11-13_11-17-10.png" alt="img"></p><p>所以这几乎涵盖了年轻一代的整个过程。 最终，将主要对老一代进行GC，清理并最终压缩该空间。</p><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/m.jpg" alt="img"></p><h3 id="什么情况会触发垃圾回收？"><a href="#什么情况会触发垃圾回收？" class="headerlink" title="什么情况会触发垃圾回收？"></a>什么情况会触发垃圾回收？</h3><p>由于对象进行了分代处理，因此垃圾回收区域、时间也不一样。GC有两种类型：Minor GC和Full GC。</p><h4 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC:"></a><strong>Minor GC:</strong></h4><p> 一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Minor GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区，然后整理Survivor的两个区。</p><p>这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。</p><p>因为大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。</p><h4 id="Full-GC："><a href="#Full-GC：" class="headerlink" title="Full GC："></a><strong>Full GC：</strong></h4><p>对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个对进行回收，所以比Full GC要慢，因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节。</p><p>有如下原因<code>可能导致</code>Full GC：</p><blockquote><p>1、年老代（Tenured）被写满</p><p>2、持久代（Perm）被写满</p><p>3、System.gc()被显示调用</p><p>4、上一次GC之后Heap的各域分配策略动态变化</p></blockquote><p><img src="/2019/11/13/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/Snipaste_2019-11-13_15-28-53.png" alt="m"></p><blockquote><ol><li>一个对象实例化时，先去查看Eden有没有足够的空间</li><li>如果有，不进行垃圾回收，对象直接分配在Eden存储</li><li>如果Eden内存已满，会进行一次Minor GC</li><li>然后再进行判断Eden的内存是否足够</li><li>如果仍然不足，则去看存活区的内存是否足够</li><li>如果内存足够，把Eden部分活跃对象保存再存活区，然后把对象保存在Eden</li><li>如果内存不足，向老年代发出请求，查询老年代的内存是否足够</li><li>如果老年代内存足够，将部分存活区的活跃对象存入老年代，然后把Eden的活跃对象放入存活区，新的对象依旧保存在Eden</li><li>如果老年代内存不足，会进行一次full gc,之后老年代会再进行判断 内存是否足够,如果足够 同上.</li><li>如果还不足，会抛出 OutOfMemoryError</li></ol></blockquote><p>资料查询：</p><p>1、分歧：当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个）（YGC，年轻代垃圾回收），当这个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制“年老区(Tenured)”。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来 对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。同时，根据程序需要，Survivor区是可以配置为多个的（多于两个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。</p><p>2、<a href="https://www.cnblogs.com/xiaoxi/p/6486852.html">Java垃圾回收（GC）机制详解</a></p><p>3、<a href="https://www.cnblogs.com/liuligang/p/10624077.html">java垃圾回收</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java垃圾回收</tag>
      
      <tag>Garbage Collection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>单线程</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Snipaste_2019-11-13_17-27-01.png" alt="1"></p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>用多线程只有一个目的，那就是更好的利用cpu的资源，因为所有的多线程代码都可以用单线程来实现。</p><p>说这个话其实只有一半对，因为反应“多角色”的程序代码，最起码每个角色要给他一个线程吧，否则连实际场景都无法模拟，当然也没法说能用单线程来实现：比如最常见的“生产者，消费者模型”。</p><p>很多人都对其中的一些概念不够明确，如同步、并发等等，让我们先建立一个数据字典，以免产生误会。</p><blockquote><ul><li>多线程：指的是这个程序（一个进程）运行时产生了不止一个线程</li><li>并行与并发： <ul><li>并行：多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。</li><li>并发：通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。</li></ul></li></ul></blockquote><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/CAPP.png" alt="img"></p><h4 id="并发（Concurrent）与并行（Parallel）"><a href="#并发（Concurrent）与并行（Parallel）" class="headerlink" title="并发（Concurrent）与并行（Parallel）"></a>并发（Concurrent）与并行（Parallel）</h4><blockquote><p><strong>线程安全</strong>：经常用来描绘一段代码</p><p>在同一程序中运行多个线程本身不会导致问题，问题在于多个线程访问了相同的资源。如同一内存区（变量，数组，或对象）、系统（数据库，web services等）或文件。</p><p>实际上，这些问题只有在一或多个线程向这些资源做了写操作时才有可能发生，只要资源没有发生变化，多个线程读取相同的资源就是安全的。</p><p>当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。导致竞态条件发生的代码区称作临界区。</p><p>如果一个资源的创建，使用，销毁都在同一个线程内完成，且永远不会脱离该线程的控制，则该资源的使用就是线程安全的。</p><p>反过来，线程不安全就意味着线程的调度顺序会影响最终结果，如： </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TicketThread implements Runnable &#123;<br><span class="hljs-built_in">int</span> tickets = <span class="hljs-number">100</span>;<span class="hljs-comment">//火车票数量</span><br>@Override<br>public void run<span class="hljs-literal">()</span> &#123;<br><span class="hljs-comment">//出售火车票</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">//当火车票小于0张，则停止售票</span><br><span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * t1,t2,t3</span><br><span class="hljs-comment"> * 假设只剩一张票</span><br><span class="hljs-comment"> * t1过来了，他一看有票，他就进（判断语句里）来了，但是他突然肚子不舒服，然后他就去上卫生间了</span><br><span class="hljs-comment"> * t2也过来了，他一看也有票，他也进（判断语句里）来了，但是他的肚子也不舒服，他也去上卫生间了</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * t1上完了卫生间回来了，开始售票</span><br><span class="hljs-comment"> * tickets = 0;</span><br><span class="hljs-comment"> * t2也上完卫生间回来了，他也进行售票</span><br><span class="hljs-comment"> *  tickets = -1; </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">100</span>);<br>&#125; catch (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;:&quot;</span> +tickets--);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>同步</strong>：Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。</p><p>Java中的同步块用synchronized标记。同步块在Java中是同步在某个对象上。<code>所有同步在一个对象上的同步块在同时只能被一个线程进入并执行操作</code>。所有其他等待进入该同步块的线程将被阻塞，直到执行该同步块中的线程退出。</p><p>如上面的代码简单加入<code>@synchronized</code>关键字。在保证结果准确的同时，提高性能，才是优秀的程序。线程安全的优先级高于性能。</p><ol><li>实例方法:</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br><span class="hljs-keyword">this</span>.count += value;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java实例方法同步是同步在拥有该方法的对象上。这样，每个实例其方法同步都同步在不同的对象上，即该方法所属的实例。只有一个线程能够在实例方法同步块中运行。如果有多个实例存在，那么一个线程一次可以在一个实例同步块中执行操作。一个实例一个线程。</p><ol start="2"><li>静态方法:</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>count += value;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态方法的同步是指同步在该方法所在的类对象上。因为在Java虚拟机中一个类只能对应一个类对象，所以同时只允许一个线程执行同一个类中的静态同步方法。</p><ol start="3"><li>实例方法中的同步块:</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">int value</span>)</span>&#123;<br> <span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params"><span class="hljs-built_in">this</span></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.count += value;<br> &#125;<br><span class="hljs-comment">//    Object obj=new Object();</span><br><span class="hljs-comment">//    synchronized(obj)&#123;</span><br><span class="hljs-comment">//       this.count += value;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意Java同步块构造器用括号将对象括起来。在上例中，使用了“this”，即为调用add方法的实例本身。在同步构造器中用括号括起来的对象叫做监视器对象。上述代码使用监视器对象同步，同步实例方法使用调用方法本身的实例作为监视器对象。一次只有一个线程能够在同步于同一个监视器对象的Java方法内执行。</p><p>下面两个例子都同步他们所调用的实例对象上，因此他们在同步的执行效果上是等效的。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> &#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> synchronized <span class="hljs-keyword">void</span> <span class="hljs-title">log1</span><span class="hljs-params">(<span class="hljs-keyword">String</span> msg1, <span class="hljs-keyword">String</span> msg2)</span></span>&#123;<br>   <span class="hljs-built_in">log</span>.writeln(msg1);<br>   <span class="hljs-built_in">log</span>.writeln(msg2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log2</span><span class="hljs-params">(<span class="hljs-keyword">String</span> msg1, <span class="hljs-keyword">String</span> msg2)</span></span>&#123;<br>   synchronized(<span class="hljs-keyword">this</span>)&#123;<br>      <span class="hljs-built_in">log</span>.writeln(msg1);<br>      <span class="hljs-built_in">log</span>.writeln(msg2);<br>   &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>静态方法中的同步块:</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> synchronized <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">log1</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg1, <span class="hljs-built_in">String</span> msg2</span>)</span>&#123;<br>    log.writeln(msg1);<br>    log.writeln(msg2);<br> &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">log2</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg1, <span class="hljs-built_in">String</span> msg2</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">MyClass.<span class="hljs-keyword">class</span></span>)</span>&#123;<br>       log.writeln(msg1);<br>       log.writeln(msg2);<br>    &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个方法不允许同时被线程访问。如果第二个同步块不是同步在MyClass.class这个对象上。那么这两个方法可以同时被线程访问。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 问题出现的原因：</span><br><span class="hljs-comment"> * 要有多个线程</span><br><span class="hljs-comment"> * 要有被多个线程所共享的数据</span><br><span class="hljs-comment"> * 多个线程并发的访问共享的数据</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 在火车上上厕所</span><br><span class="hljs-comment"> * 张三来了，一看门是绿的，他就进去了，把门锁上了，门就变红了</span><br><span class="hljs-comment"> * 李四来了，一看门市红色的，他就只能憋着</span><br><span class="hljs-comment"> * 张三用完了厕所，把锁打开了，门就变成了绿色</span><br><span class="hljs-comment"> * 李四一看门变绿了，他就进去了，把门锁上，门就变红了</span><br><span class="hljs-comment"> * 王五来了，一看们是红色的，他也只能憋着</span><br><span class="hljs-comment"> * 李四用完测试了，把锁打开了，肚子又不舒服了，扭头回去了，又把门锁上了，</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * synchronized:同步（锁），可以修饰代码块和方法，被修饰的代码块和方法一旦被某个线程访问，则直接锁住，其他的线程将无法访问</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 同步代码块：</span><br><span class="hljs-comment"> * synchronized(锁对象)&#123;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 注意：锁对象需要被所有的线程所共享</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 同步：安全性高，效率低</span><br><span class="hljs-comment"> * 非同步：效率高，但是安全性低</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> TicketThread implements Runnable &#123;<br><span class="hljs-built_in">int</span> tickets = <span class="hljs-number">100</span>;<span class="hljs-comment">//火车票数量</span><br>Object obj = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Object()</span>;<span class="hljs-comment">//锁对象需要被所有的线程所共享</span><br><br>@Override<br>public void run<span class="hljs-literal">()</span> &#123;<br><span class="hljs-comment">//出售火车票</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>synchronized (obj) &#123;<br><br><span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>) &#123;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">100</span>);<br>&#125; catch (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;:&quot;</span> +tickets--);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/////////////////////////////////////////////////////</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 同步方法:使用关键字synchronized修饰的方法，一旦被一个线程访问，则整个方法全部锁住，其他线程则无法访问</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * synchronized</span><br><span class="hljs-comment"> * 注意：</span><br><span class="hljs-comment"> * 非静态同步方法的锁对象是this</span><br><span class="hljs-comment"> * 静态的同步方法的锁对象是当前类的字节码对象，静态方法没有this</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> TicketThread implements Runnable &#123;<br>static <span class="hljs-built_in">int</span> tickets = <span class="hljs-number">100</span>;<span class="hljs-comment">// 火车票数量</span><br>Object obj = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Object()</span>;<br>@Override<br>public void run<span class="hljs-literal">()</span> &#123;<br><span class="hljs-comment">// 出售火车票</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">/*synchronized (obj) &#123;</span><br><span class="hljs-comment">method();</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">//method();</span><br>method2<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> synchronized void <span class="hljs-keyword">method</span><span class="hljs-literal">()</span> &#123;<br><span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123; <br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">100</span>);<br>&#125; catch (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;:&quot;</span> + tickets--);<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> static synchronized void method2<span class="hljs-literal">()</span> &#123;<br><span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">100</span>);<br>&#125; catch (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span> + <span class="hljs-string">&quot;:&quot;</span> + tickets--);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/////////////////////////////////////////////////////</span><br>public <span class="hljs-keyword">class</span> TicktetTest &#123;<br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br><span class="hljs-comment">//创建线程对象</span><br>TicketThread tt = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TicketThread()</span>;<br><br>Thread t = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">tt</span>)</span>;<br>t.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;窗口1&quot;</span>)</span>;<br>Thread t2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">tt</span>)</span>;<br>t2.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;窗口2&quot;</span>)</span>;<br>Thread t3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">tt</span>)</span>;<br>t3.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;窗口3&quot;</span>)</span>;<br><br><span class="hljs-comment">//启动线程对象</span><br>t.start<span class="hljs-literal">()</span>;<br>t2.start<span class="hljs-literal">()</span>;<br>t3.start<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="扎马步：线程的状态（线程通信）"><a href="#扎马步：线程的状态（线程通信）" class="headerlink" title="扎马步：线程的状态（线程通信）"></a>扎马步：线程的状态（线程通信）</h4><p>线程通信的目标是使线程间能够互相发送信号。另一方面，线程通信使线程能够等待其他线程的信号。</p><p>Java有一个内建的等待机制来允许线程在等待信号的时候变为非运行状态。java.lang.Object 类定义了三个方法，wait()、notify()和notifyAll()来实现这个等待机制。</p><p>一个线程一旦调用了任意对象的wait()方法，就会变为非运行状态，直到另一个线程调用了同一个对象的notify()方法。为了调用wait()或者notify()，线程必须先获得那个对象的锁。也就是说，<code>线程必须在同步块里调用wait()或者notify()</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package cn.kongwei_liao.ThreadsDemo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyWaitNotify</span> </span>&#123;<br><br><span class="hljs-comment">//MonitorObject myMonitorObject = new MonitorObject();</span><br>  <span class="hljs-built_in">boolean</span> wasSignalled = <span class="hljs-literal">false</span>;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">doWait</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//    synchronized(myMonitorObject)&#123;</span><br>  <span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params"><span class="hljs-built_in">this</span></span>)</span>&#123;<br>      <span class="hljs-keyword">while</span>(!wasSignalled)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//          myMonitorObject.wait();</span><br>        <span class="hljs-built_in">this</span>.wait();<br>         &#125; <span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>         <br>         &#125;<br>      &#125;<br>      <span class="hljs-comment">//clear signal and continue running.</span><br>      wasSignalled = <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">doNotify</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//    synchronized(myMonitorObject)&#123;</span><br>  <span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params"><span class="hljs-built_in">this</span></span>)</span>&#123;<br>      wasSignalled = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//      myMonitorObject.notify();</span><br>      <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br>  &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意以下几点：</p><blockquote><p>1、不管是等待线程还是唤醒线程都在同步块里调用wait()和notify()。这是强制性的！一个线程如果没有持有对象锁，将不能调用wait()，notify()或者notifyAll()。否则，会抛出IllegalMonitorStateException异常。</p><p>2、一旦线程调用了wait()方法，它就释放了所持有的监视器对象上的锁。这将允许其他线程也可以调用wait()或者notify()。</p><p>3、为了避免丢失信号，必须把它们保存在信号类里。如上面的wasSignalled变量。</p><p>4、假唤醒：由于莫名其妙的原因，线程有可能在没有调用过notify()和notifyAll()的情况下醒来。这就是所谓的假唤醒（spurious wakeups）。为了防止假唤醒，保存信号的成员变量将在一个while循环里接受检查，而不是在if表达式里。这样的一个while循环叫做<code>自旋锁</code>。</p><p>5、不要在字符串常量或全局对象中调用wait()。即上面MonitorObject不能是字符串常量或是全局对象。每一个MyWaitNotify的实例都拥有一个属于自己的监视器对象，而不是在空字符串上调用wait()/notify()。</p></blockquote><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/status.png" alt="img"></p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/status2.png" alt="img"></p><p>各种状态一目了然，值得一提的是“Blocked”这个状态：</p><p>线程在Running的过程中可能会遇到阻塞Blocked情况</p><blockquote><ol><li>调用join()和sleep()方法，sleep()时间结束或被打断，join()中断,IO完成都会回到Runnable状态，等待JVM的调度。</li><li>调用wait()，使该线程处于<code>等待池(wait blocked pool)</code>,直到notify()/notifyAll()，线程被唤醒被放到<code>锁定池(lock blocked pool )</code>，释放同步锁使线程回到可运行状态（Runnable）</li><li>对Running状态的线程加同步锁(Synchronized)使其进入(lock blocked pool ),同步锁被释放进入可运行状态(Runnable)。</li></ol></blockquote><p>此外，在Runnable状态的线程是处于被调度的线程，此时的调度顺序是不一定的。Thread类中的yield方法可以让一个Running状态的线程转入Runnable。</p><h4 id="练内功：每个对象都有的方法和机制"><a href="#练内功：每个对象都有的方法和机制" class="headerlink" title="练内功：每个对象都有的方法和机制"></a>练内功：每个对象都有的方法和机制</h4><h5 id="创建多线程"><a href="#创建多线程" class="headerlink" title="创建多线程"></a>创建多线程</h5><p>方法一：实现Runnable接口</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20191113163347390.png" alt="image-20191113163347390"></p><blockquote><p>1、定义类实现Runnable接口。</p><p>2、覆盖接口中的run方法。。</p><p>3、创建Thread类的对象</p><p>4、将Runnable接口的子类对象作为参数传递给Thread类的构造函数。</p><p>5、调用Thread类的start方法开启线程。</p></blockquote><p>方法摘要：</p><blockquote><p>void run()使用实现接口Runnable的对象创建一个线程时，启动线程时调用</p></blockquote><p>第一种编写线程执行代码的方式是新建一个实现了java.lang.Runnable接口的类的实例，实例中的方法可以被线程调用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ruby">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> &#123;</span><br>   public void run()&#123;<br>    System.out.println(<span class="hljs-string">&quot;MyRunnable running&quot;</span>);<br>   &#125;<br>&#125;<br> <br>Thread thread = new Thread(new MyRunnable());<br>thread.start();<br><br>/<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/匿名创建/</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>Runnable myRunnable = new Runnable()&#123;<br>   public void run()&#123;<br>     System.out.println(<span class="hljs-string">&quot;Runnable running&quot;</span>);<br>   &#125;<br>&#125;<br>Thread thread = new Thread(myRunnable);<br>thread.start();<br></code></pre></td></tr></table></figure><p>方法二：继承Thread类，重写run方法</p><blockquote><p>1.定义一个类继承Thread。</p><p>2.重写run方法。</p><p>3.创建子类对象，就是创建线程对象。</p><p>4.调用start方法，开启线程并让线程执行，同时还会告诉jvm去调用run方法</p></blockquote><p>Thread实现了java.lang.Runnable接口，创建Thread子类的一个实例并重写run方法，run方法会在调用start()方法之后被执行。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">public class MyThread extends Thread &#123;<br>   public void run()&#123;<br>     System.out.println(<span class="hljs-string">&quot;MyThread running&quot;</span>);<br>   &#125;<br>&#125;<br><br>MyThread myThread = new MyThread();<br>myTread.start();<br><br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/匿名创建/</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>/<br>Thread thread = new Thread()&#123;<br>   public void run()&#123;<br>     System.out.println(<span class="hljs-string">&quot;Thread Running&quot;</span>);<br>   &#125;<br>&#125;;<br>thread.start();<br></code></pre></td></tr></table></figure><p>synchronized, wait, notify是任何对象都具有的<code>同步工具</code>。</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/tools.png" alt="img"></p><h5 id="Monitor监视器"><a href="#Monitor监视器" class="headerlink" title="Monitor监视器"></a><strong>Monitor监视器</strong></h5><p>他们是应用于同步问题的人工线程调度工具。讲其本质，实现就要明确Monitor这个概念，Java中的每一个对象都有一个监视器，来检测并发代码的重入。在非多线程编码时该Monitor不发挥作用，反之如果在synchronized范围内，监视器发挥作用。</p><p>wait/notify必须存在于synchronized块中。并且，这三个关键字针对的是同一个监视器（某对象的监视器）。这意味着wait以后，其它线程可以进入同步块执行。</p><p>当某段代码并不持有监视器的使用权时（如图中5的状态，即脱离同步块）去wait或notify，会抛出java.lang.IllegalMonitorStateException。也包括在synchronized块中去调用另一个对象的wait/notify，因为不同对象的监视器不同，同样会抛出此异常。</p><p>再讲用法：</p><ul><li><p><strong>synchronized</strong>单独使用： </p></li><li><p>代码块：如下，在多线程环境下，synchronized块中的方法获取了lock实例的monitor，如果实例相同，那么只有一个线程能执行该块内容 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;  <br>       <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>)&#123;<br>         ..<span class="hljs-keyword">do</span> something<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>直接用于方法： 相当于上面代码中用lock来锁定的效果，实际获取的是Thread1类的monitor。更进一步，如果修饰的是static方法，则锁定该类所有实例。 </li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">  public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable1</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> &#123;</span><br>     public synchronized void run() &#123;  <br>          ..<span class="hljs-keyword">do</span> something<br>     &#125;<br>  &#125;<br>  /<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/创建线程/</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br>  public static void main(String[]args) &#123;<br>  Thread MT1=new Thread(new MyRunnable1());<br>  MT1.start();<br>  &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>synchronized, wait, notify</strong>结合:典型场景生产者消费者问题</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生产者生产出来的产品交给店员</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> synchronized void produce()<br>  &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.product &gt;= MAX_PRODUCT)<br>      &#123;<br>          <span class="hljs-keyword">try</span><br>          &#123;<br>              wait();  <br>              System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;产品已满,请稍候再生产&quot;</span>);<br>          &#125;<br>          <span class="hljs-keyword">catch</span>(InterruptedException e)<br>          &#123;<br>              e.printStackTrace();<br>          &#125;<br>          <span class="hljs-keyword">return</span>;<span class="hljs-comment">//</span><br>      &#125;<br><br>      <span class="hljs-keyword">this</span>.product++;<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;生产者生产第&quot;</span> + <span class="hljs-keyword">this</span>.product + <span class="hljs-string">&quot;个产品.&quot;</span>);<br>      notifyAll();   <span class="hljs-comment">//通知等待区的消费者可以取出产品了</span><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 消费者从店员取产品</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> synchronized void consume()<br>  &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.product &lt;= MIN_PRODUCT)<br>      &#123;<br>          <span class="hljs-keyword">try</span> <br>          &#123;<br>              wait(); <br>              System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;缺货,稍候再取&quot;</span>);<br>          &#125; <br>          <span class="hljs-keyword">catch</span> (InterruptedException e) <br>          &#123;<br>              e.printStackTrace();<br>          &#125;<br>          <span class="hljs-keyword">return</span>;<span class="hljs-comment">//</span><br>      &#125;<br><br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;消费者取走了第&quot;</span> + <span class="hljs-keyword">this</span>.product + <span class="hljs-string">&quot;个产品.&quot;</span>);<br>      <span class="hljs-keyword">this</span>.product--;<br>      notifyAll();   <span class="hljs-comment">//通知等待去的生产者可以生产产品了</span><br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a><strong>Volatile关键字</strong></h5><p>多线程的内存模型：main memory（主存）、working memory（线程栈），在处理数据时，线程会把值从主存load到本地栈，完成操作后再save回去(volatile关键词的作用：每次针对该变量的操作都激发一次<code>load and save</code>)。</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/volatile.png" alt="img"></p><p>针对多线程使用的变量如果不是volatile或者final修饰的，很有可能产生不可预知的结果（另一个线程修改了这个值，但是之后在某线程看到的是修改之前的值）。其实道理上讲同一实例的同一属性本身只有一个副本。但是多线程是会缓存值的，本质上，volatile就是不去缓存，直接取值。<code>在线程安全的情况下加volatile会牺牲性能</code>。</p><h4 id="太祖长拳：基本线程类"><a href="#太祖长拳：基本线程类" class="headerlink" title="太祖长拳：基本线程类"></a>太祖长拳：基本线程类</h4><p>基本线程类指的是Thread类，Runnable接口和Callable接口</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Thread1.png" alt="t"></p><p>方法摘要：</p><blockquote><p>构造方法：</p><ul><li>Thread()分配新的Thread对象；</li><li>Thread(Runnable target)分配新的Thread对象。</li></ul><p>成员方法：</p><ul><li>void start()使该线程开始执行；Java虚拟机调用该线程的run方法；</li><li>void run()该线程要执行的操作，需要自己来重写</li><li>String getName()返回线程名</li><li>void setName(String Name)改变线程名称</li><li>public static yield() 当前线程可转让CPU控制权，让别的就绪状态的线程运行（线程切换）</li><li>public join()在一个线程中调用other.join(),将等待other执行完后 再继续本线程。</li><li>static void sleep(long millis)在指定的毫秒数内让当前正在执行的线程休眠。</li><li>public interrupt()//后两个函数皆可以被打断</li></ul></blockquote><p>Thread类实现了Runnable接口，启动一个线程：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl">public class MyThread extends Thread &#123;<span class="hljs-regexp">//</span>继承Thread类，重写run方法<br>   public void run()&#123;<br>     System.out.println(<span class="hljs-string">&quot;MyThread running&quot;</span>);<br>   &#125;<br>&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">/创建线程/</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>/<br>MyThread <span class="hljs-keyword">my</span> = new MyThread();<br>my.start();<br></code></pre></td></tr></table></figure><h5 id><a href="#" class="headerlink" title></a></h5><h5 id="关于中断："><a href="#关于中断：" class="headerlink" title="关于中断："></a><strong>关于中断：</strong></h5><p>它并不像stop方法那样会中断一个正在运行的线程。</p><p>线程会不时地检测中断标识位，以判断线程是否应该被中断（中断标识值是否为true）。</p><p>中断只会影响到<code>wait状态、sleep状态和join状态</code>。被打断的线程会抛出InterruptedException。</p><p>Thread.interrupted()检查当前线程是否发生中断，返回boolean<br>synchronized在获锁的过程中是不能被中断的。</p><p>中断是一个状态！interrupt()方法只是将这个状态置为true而已。</p><p>所以说正常运行的程序不去检测状态，就不会终止，而wait等阻塞方法会去检查并抛出异常。</p><p>如果在正常运行的程序中添加while(!Thread.interrupted()) ，则同样可以在中断后离开代码体。</p><h5 id="Thread类最佳实践："><a href="#Thread类最佳实践：" class="headerlink" title="Thread类最佳实践："></a><strong>Thread类最佳实践</strong>：</h5><p>写的时候最好要设置线程名称 Thread.name，并设置线程组 ThreadGroup，目的是方便管理。在出现问题的时候，打印线程栈 (jstack -pid) 一眼就可以看出是哪个线程出的问题，这个线程是干什么的。</p><h5 id="如何获取线程中的异常"><a href="#如何获取线程中的异常" class="headerlink" title="如何获取线程中的异常"></a><strong>如何获取线程中的异常</strong></h5><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Thread.png" alt="img"></p><p>不能用try,catch来获取线程中的异常</p><h5 id="Runnable与Thread类似"><a href="#Runnable与Thread类似" class="headerlink" title="Runnable与Thread类似"></a><strong>Runnable</strong>与Thread类似</h5><h5 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a><strong>Callable</strong></h5><p>future模式：并发模式的一种，可以有两种形式，即<code>无阻塞</code>和<code>阻塞</code>，分别是isDone和get。其中Future对象用来存放该线程的返回值以及状态</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ExecutorService e = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">FixedThreadPool(3)</span>;<br> <span class="hljs-comment">//submit方法有多重参数版本，及支持callable也能够支持runnable接口类型.</span><br>Future future = e.submit(<span class="hljs-keyword">new</span> my<span class="hljs-constructor">Callable()</span>);<br>future.is<span class="hljs-constructor">Done()</span> <span class="hljs-comment">//return true,false 无阻塞</span><br>future.get<span class="hljs-literal">()</span> <span class="hljs-comment">// return 返回值，阻塞直到该线程运行结束</span><br></code></pre></td></tr></table></figure><h4 id="九阴正经：高级多线程控制类"><a href="#九阴正经：高级多线程控制类" class="headerlink" title="九阴正经：高级多线程控制类"></a>九阴正经：高级多线程控制类</h4><p>以上都属于内功心法，接下来是实际项目中常用到的工具了，Java1.5提供了一个非常高效实用的<code>多线程包:java.util.concurrent</code>, 提供了大量高级工具,可以帮助开发者编写高效、易维护、结构清晰的Java多线程程序。</p><h5 id="1-ThreadLocal类"><a href="#1-ThreadLocal类" class="headerlink" title="1.ThreadLocal类"></a><strong>1.ThreadLocal类</strong></h5><p>用处：保存线程的独立变量。对一个线程类（继承自Thread)<br>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。常用于用户登录控制，如记录session信息。</p><p>实现：每个Thread都持有一个TreadLocalMap类型的变量（该类是一个轻量级的Map，功能与map一样，区别是桶里放的是entry而不是entry的链表。功能还是一个map。）以本身为key，以目标为value。<br>主要方法是get()和set(T a)，set之后在map里维护一个threadLocal -&gt; a，get时将a返回。ThreadLocal是一个特殊的容器。</p><h5 id="2-原子类（AtomicInteger、AtomicBoolean……）"><a href="#2-原子类（AtomicInteger、AtomicBoolean……）" class="headerlink" title="2.原子类（AtomicInteger、AtomicBoolean……）"></a><strong>2.原子类（AtomicInteger、AtomicBoolean……）</strong></h5><p>如果使用atomic wrapper class如atomicInteger，或者使用自己保证原子的操作，则等同于synchronized</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//返回值为boolean</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AtomicInteger</span>.</span></span>compare<span class="hljs-constructor">AndSet(<span class="hljs-params">int</span> <span class="hljs-params">expect</span>,<span class="hljs-params">int</span> <span class="hljs-params">update</span>)</span><br></code></pre></td></tr></table></figure><p>该方法可用于<code>实现乐观锁</code>，考虑文中最初提到的如下场景：a给b付款10元，a扣了10元，b要加10元。此时c给b2元，但是b的加十元代码约为：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span>(b.value.compare<span class="hljs-constructor">AndSet(<span class="hljs-params">old</span>, <span class="hljs-params">value</span>)</span>)&#123;<br>   return ;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-comment">//try again</span><br>   <span class="hljs-comment">//if that fails, rollback and log</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>AtomicReference</strong><br>对于AtomicReference 来讲，也许对象会出现，属性丢失的情况，即oldObject == current，但是oldObject.getPropertyA != current.getPropertyA。<br>这时候，AtomicStampedReference就派上用场了。这也是一个很常用的思路，即加上版本号</p><h5 id="3-Lock类"><a href="#3-Lock类" class="headerlink" title="3.Lock类"></a><strong>3.Lock类</strong></h5><p>lock: 在java.util.concurrent.locks包内。共有三个类：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs julia"><span class="hljs-built_in">ReentrantLock</span><br>ReentrantReadWriteLock<br>ReentrantReadWriteLock.ReadLock<br>ReentrantReadWriteLock.WriteLock<br></code></pre></td></tr></table></figure><p>主要目的是和synchronized一样， 两者都是为了解决同步问题，处理资源争端而产生的技术。功能类似但有一些区别。</p><p>区别如下：</p><blockquote><p>lock更灵活，可以自由定义多把锁的加锁解锁顺序（synchronized要按照先加的后解顺序） 提供多种加锁方案，<code>lock 阻塞式</code>,<code> trylock 无阻塞式</code>, <code>lockInterruptily 可打断式</code>， 还有<code>trylock的带超时时间版本</code>。 本质上和监视器锁（即synchronized是一样的） 能力越大，责任越大，必须控制好加锁和解锁，否则会导致灾难。 和Condition类的结合。 性能更高，对比如下图：(Throughput吞吐量)</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/thre.png" alt="img"></p><p>synchronized和Lock性能对比</p></blockquote><h6 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a><strong>ReentrantLock</strong></h6><p>可重入的意义在于持有锁的线程可以继续持有，并且要释放对等的次数后才真正释放该锁。<br>使用方法是：</p><blockquote><p>1.先new一个实例</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">static</span> ReentrantLock r=<span class="hljs-keyword">new</span> <span class="hljs-type">ReentrantLock</span>();<br></code></pre></td></tr></table></figure><p>2.加锁</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">r</span><span class="hljs-selector-class">.lock</span>()或<span class="hljs-selector-tag">r</span><span class="hljs-selector-class">.lockInterruptibly</span>();<br></code></pre></td></tr></table></figure><p>此处也是个不同，后者可被打断。当a线程lock后，b线程阻塞，此时如果是lockInterruptibly，那么在调用b.interrupt()之后，b线程退出阻塞，并放弃对资源的争抢，进入catch块。（如果使用后者，必须throw interruptable exception 或catch）　　　　</p><p>3.释放锁　　　</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">r</span><span class="hljs-selector-class">.unlock</span>()<br></code></pre></td></tr></table></figure><p><code>必须做！何为必须做呢，要放在finally里面。</code>以防止异常跳出了正常流程，导致灾难。这里补充一个小知识点，finally是可以信任的：经过测试，哪怕是发生了OutofMemoryError，finally块中的语句执行也能够得到保证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.ThreadsDemo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyReentrantLock</span></span>&#123;<br><br><span class="hljs-keyword">boolean</span> isLocked = <span class="hljs-keyword">false</span>;<br>    Thread  lockedBy = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">int</span> lockedCount = <span class="hljs-number">0</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span></span>&#123;<br>        Thread callingThread = Thread.currentThread();<br>        <span class="hljs-keyword">while</span>(isLocked &amp;&amp; lockedBy != callingThread)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>        &#125;<br>        isLocked = <span class="hljs-keyword">true</span>;<br>        lockedCount++;<br>        lockedBy = callingThread;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(Thread.currentThread() == <span class="hljs-keyword">this</span>.lockedBy)&#123;<br>            lockedCount--;<br>            <span class="hljs-keyword">if</span>(lockedCount == <span class="hljs-number">0</span>)&#123;<br>                isLocked = <span class="hljs-keyword">false</span>;<br>                notify();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>MyReentrantLock mrl=<span class="hljs-keyword">new</span> MyReentrantLock();<br>mrl.lock();<br><span class="hljs-keyword">try</span> &#123;<br><br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>mrl.unlock();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h6 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a><strong>ReentrantReadWriteLock</strong></h6><p>可重入读写锁（读写锁的一个实现）</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">ReentrantReadWriteLock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantReadWriteLock()<br>ReadLock <span class="hljs-keyword">r</span> = <span class="hljs-keyword">lock</span>.readLock()<span class="hljs-comment">;</span><br>WriteLock <span class="hljs-keyword">w</span> = <span class="hljs-keyword">lock</span>.writeLock()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>两者都有lock,unlock方法。写写，写读互斥；读读不互斥。可以实现并发读的高效线程安全代码</p><h5 id="4-容器类"><a href="#4-容器类" class="headerlink" title="4.容器类"></a><strong>4.容器类</strong></h5><p>这里就讨论比较常用的两个：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BlockingQueue</span><br><span class="hljs-attribute">ConcurrentHashMap</span><br></code></pre></td></tr></table></figure><h6 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a><strong>BlockingQueue</strong></h6><p>阻塞队列。该类是java.util.concurrent包下的重要类，通过对Queue的学习可以得知，这个queue是单向队列，可以在队列头添加元素和在队尾删除或取出元素。类似于一个管道，特别适用于先进先出策略的一些应用场景。普通的queue接口主要实现有PriorityQueue（优先队列），有兴趣可以研究</p><p>BlockingQueue在队列的基础上添加了多线程协作的功能：</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/contain.png" alt="img"></p><p>BlockingQueue<br>除了传统的queue功能（表格左边的两列）之外，还提供了阻塞接口put和take，带超时功能的阻塞接口offer和poll。put会在队列满的时候阻塞，直到有空间时被唤醒；take在队列空的时候阻塞，直到有东西拿的时候才被唤醒。用于生产者-消费者模型尤其好用，堪称神器。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlockingQueue</span> &#123;</span><br>    <span class="hljs-keyword">private</span> List <span class="hljs-built_in">queue</span> = <span class="hljs-keyword">new</span> LinkedList();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> limit = <span class="hljs-number">10</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BlockingQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> limit)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.limit = limit;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> synchronized <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(Object item)</span> throws InterruptedException </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">this</span>.<span class="hljs-built_in">queue</span>.<span class="hljs-built_in">size</span>() == <span class="hljs-keyword">this</span>.limit) &#123;<br>            wait();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.<span class="hljs-built_in">queue</span>.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;<br>            notifyAll();<br>        &#125;<br>        <span class="hljs-keyword">this</span>.<span class="hljs-built_in">queue</span>.add(item);<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> synchronized Object <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> throws InterruptedException </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">this</span>.<span class="hljs-built_in">queue</span>.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;<br>            wait();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.<span class="hljs-built_in">queue</span>.<span class="hljs-built_in">size</span>() == <span class="hljs-keyword">this</span>.limit) &#123;<br>            notifyAll();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-built_in">queue</span>.<span class="hljs-built_in">remove</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常见的阻塞队列有：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ArrayListBlockingQueue</span><br><span class="hljs-attribute">LinkedListBlockingQueue</span><br><span class="hljs-attribute">DelayQueue</span><br><span class="hljs-attribute">SynchronousQueue</span><br></code></pre></td></tr></table></figure><h6 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a><strong>ConcurrentHashMap</strong></h6><p>高效的线程安全哈希map。请对比hashTable , concurrentHashMap, HashMap</p><h5 id="5-信号量"><a href="#5-信号量" class="headerlink" title="5.信号量"></a><strong>5.信号量</strong></h5><p>java.util.concurrent.Semaphore</p><h5 id="6-管理类"><a href="#6-管理类" class="headerlink" title="6.管理类"></a><strong>6.管理类</strong></h5><p>管理类的概念比较泛，用于管理线程，本身不是多线程的，但提供了一些机制来利用上述的工具做一些封装。<br>了解到的值得一提的管理类：ThreadPoolExecutor和 JMX框架下的系统级管理类 ThreadMXBean<br><strong>ThreadPoolExecutor</strong><br>如果不了解这个类，应该了解前面提到的ExecutorService，开一个自己的线程池非常方便：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ExecutorService e = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">CachedThreadPool()</span>;<br>ExecutorService e = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">SingleThreadExecutor()</span>;<br>ExecutorService e = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">FixedThreadPool(3)</span>;<br><span class="hljs-comment">// 第一种是可变大小线程池，按照任务数来分配线程，</span><br><span class="hljs-comment">// 第二种是单线程池，相当于FixedThreadPool(1)</span><br><span class="hljs-comment">// 第三种是固定大小线程池。</span><br><span class="hljs-comment">// 然后运行</span><br>e.execute(<span class="hljs-keyword">new</span> <span class="hljs-constructor">MyRunnableImpl()</span>);<br></code></pre></td></tr></table></figure><p>该类内部是通过ThreadPoolExecutor实现的，掌握该类有助于理解线程池的管理，本质上，他们都是ThreadPoolExecutor类的各种实现版本。请参见javadoc：</p><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/javadoc.png" alt="img"></p><p>ThreadPoolExecutor参数解释</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">corePoolSize:</span>池内线程初始值与最小值，就算是空闲状态，也会保持该数量线程。<br><span class="hljs-symbol">maximumPoolSize:</span>线程最大值，线程的增长始终不会超过该值。<br>keepAliveTime：当池内线程数高于corePoolSize时，经过多少时间多余的空闲线程才会被回收。回收前处于wait状态<br>unit：<br>时间单位，可以使用TimeUnit的实例，如TimeUnit.MILLISECONDS　<br><span class="hljs-symbol">workQueue:</span>待入任务（Runnable）的等待场所，该参数主要影响调度策略，如公平与否，是否产生饿死(starving)<br><span class="hljs-symbol">threadFactory:</span>线程工厂类，有默认实现，如果有自定义的需要则需要自己实现ThreadFactory接口并作为参数传入。<br></code></pre></td></tr></table></figure><p>Java通过Executors提供四种线程池，分别为：</p><blockquote><p>newCachedThreadPool</p><p>创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p><p>newFixedThreadPool </p><p>创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p><p>newScheduledThreadPool </p><p>创建一个大小无限制的线程池。此线程池支持定时以及周期性执行任务。</p><p>newSingleThreadExecutor</p><p>创建一个单线程的线程池。此线程池支持定时以及周期性执行任务。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p></blockquote><p><img src="/2019/11/12/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Snipaste_2019-11-13_09-26-28.png" alt="i"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java泛型</title>
    <link href="/2019/11/12/Java%E6%B3%9B%E5%9E%8B/"/>
    <url>/2019/11/12/Java%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="啥是泛型？"><a href="#啥是泛型？" class="headerlink" title="啥是泛型？"></a>啥是泛型？</h4><p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。 Java语言引入泛型的好处是安全简单。</p><p>简单的理解：就是在设计类（接口等）的时候，没有给规定具体是什么类型的参数，在实例化或调用的时候再传入具体的类型，告诉编译器这是什么类型。</p><p>注意：</p><ol><li><p>泛型不会影响程序的运行的速度，因为在编译期就会直接编译成具体的类型。</p></li><li><p>使用泛型的方法或实例化泛型的类，只能用传入引用数据类型，不能传入基本数据类型</p></li></ol><h4 id="规则限制："><a href="#规则限制：" class="headerlink" title="规则限制："></a>规则限制：</h4><p>1、泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。<br>2、同一种泛型可以对应多个版本（因为参数类型是不确定的），不同版本的泛型类实例是不兼容的。<br>3、泛型的类型参数可以有多个。<br>4、泛型的参数类型可以使用extends语句，例如<T extends superclass>。习惯上称为“有界类型”。<br>5、泛型的参数类型还可以是通配符类型。例如Class&lt;?&gt; classType = Class.forName(“java.lang.String”);</T></p><p>泛型作用</p><p>泛型的作用：在编译的时候检查<a href="https://baike.baidu.com/item/%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8/7308285">类型安全</a>，并且所有的<a href="https://baike.baidu.com/item/%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2/4463315">强制转换</a>都是自动和<a href="https://baike.baidu.com/item/%E9%9A%90%E5%BC%8F/957024">隐式</a>的，以提高代码的重用率。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">// 准备一个List用来存储公司员工对象  假设有一个类 Employee</span><br>List  emp = <span class="hljs-keyword">new</span> ArrayList();<br>emp.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;张三&quot;</span>));<br>emp.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;李三&quot;</span>));<br>emp.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;王三&quot;</span>));<br>由于List中可以存储任意类型的数据，因此可以这样<br>emp.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;王麻子&quot;</span>);<br>emp.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;旺财&quot;</span>));<br><br><br><span class="hljs-comment">// 写一个发工资的方法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">Object</span> o : emp)&#123;<br>syso(<span class="hljs-string">&quot;给&quot;</span>+o.getName() + <span class="hljs-number">50000</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">上面代码可能引发的问题： 当我们获得一个字符串  或者一条狗的时候可能就调用不出来getName()方法</span><br><span class="hljs-comment">结果： 从业务上来讲，emp集合中只应该放Employee类型的数据，但是List可以放任意的类型的数据，在编译的时候我们无法阻止</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">如何解决？使用泛型  ---》限定我们上面的emp中只能够放Employee</span><br><span class="hljs-comment">List&lt;Employee&gt;  emp = new ArrayList&lt;Employee&gt;();</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h4 id="泛型类（接口）的设计"><a href="#泛型类（接口）的设计" class="headerlink" title="泛型类（接口）的设计"></a>泛型类（接口）的设计</h4><p>需求：设计一个点类Point,其中设计字段 x y;</p><p>问题：里面的字段x y 使用什么类型好呢？ double  int  。。。</p><p>效果：需要设计上面的类，满足不同的人的需求，有些希望使用double  int..</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Point</span>&#123;<br>  <span class="hljs-built_in">double</span> x;<br>  <span class="hljs-built_in">double</span> y;<br>&#125;  <br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Point</span>&#123;<br>  <span class="hljs-built_in">int</span> x;<br>  <span class="hljs-built_in">int</span> y;<br>&#125; <br><span class="hljs-comment">//一个类本质看成是一个模板，然后希望是一个通用的模板：</span><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Point</span>&#123;<br>  数据类型 x;<br>  数据类型 y;<br>&#125; <br></code></pre></td></tr></table></figure><p>希望在设计类的时候，其中的数据类型我们就写一个符号，泛指所有的类型，但是不指具体的某种类型</p><p>当有人使用我们上面的模板来创建一个对象的时候他们自己可以指定自己的类型</p><p>怎么做：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Point</span>&lt;数据类型&gt;&#123;  <span class="hljs-comment">// 表示在类声明了一个符号 数据类型，是一种泛指</span><br>  数据类型 x;<br>  数据类型 y;<br>&#125; <br></code></pre></td></tr></table></figure><p>规范的写法应该是使用一些字母（常见的字母）：</p><p>E  Element 元素</p><p>T  Type  类型</p><p>K     Key   键</p><p>V  Value  值</p><p>也可以支持多个泛型参数例如Map&lt;K,V&gt;</p><h4 id="泛型的具体使用案例"><a href="#泛型的具体使用案例" class="headerlink" title="泛型的具体使用案例"></a>泛型的具体使用案例</h4><p>1、把学生对象存入TreeSet中，自然排序 或者 比较器</p><p>2、统计字符串中字母个数的示例</p><p><img src="/2019/11/12/Java%E6%B3%9B%E5%9E%8B/clip_image002.jpg" alt="im"></p><p>泛型的上、下限</p><p><img src="/2019/11/12/Java%E6%B3%9B%E5%9E%8B/clip_im002.jpg" alt="img"></p><p><img src="/2019/11/12/Java%E6%B3%9B%E5%9E%8B/clip_im02.jpg" alt="img"></p><h4 id="泛型方法的设计和使用"><a href="#泛型方法的设计和使用" class="headerlink" title="泛型方法的设计和使用"></a>泛型方法的设计和使用</h4><p><img src="/2019/11/12/Java%E6%B3%9B%E5%9E%8B/clip_im01.png" alt="img"></p><p>错误原因： 在类设计上面。因为被static修饰的方法，是在类加载的时候就加载的到静态区中，而这时候加载到jvm中的T类型，JVM根本就不知道是什么类型。</p><p>解决方法：在方法上加一个泛型</p><p><img src="/2019/11/12/Java%E6%B3%9B%E5%9E%8B/ge001.png" alt="img"></p><p>什么是泛型方法</p><p>1、就是把泛型类型的声明放在某个方法上面，只需将泛型参数列表置于返回值前；只能够本方法上或者内部可以使用这个符号；</p><p>2、泛型类，声明的泛型类型可以使用到整个类的</p><p>3、泛型方法来说，是再调用方法的时候传入的实际参数为真实的类型</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>限制泛型</p><blockquote><p>1）<T extends collection>这里的限定使用关键字extends，后面可以是类也可以是接口。但这里的extends已经不是继承的含义了，应该理解为T类型是实现Collection接口的类型，或者T是继承了XX类的类型。<br>2）&lt;T extends SomeClass &amp; interface1 &amp; interface2 &amp; interface3&gt;</T></p></blockquote><p>通配符泛型</p><blockquote><p>1、如果只指定了&lt;?&gt;，而没有extends，则默认是允许Object及其下的任何Java类了。也就是任意类。<br>2、通配符泛型不单可以向上限制，如&lt;? extends Collection&gt;，还可以向下限制，如&lt;? super Double&gt;，表示类型只能接受Double及其上层父类类型，如Number、Object类型的实例。<br>3、泛型类定义可以有多个泛型参数，中间用逗号隔开，还可以定义泛型接口，泛型方法。这些都与泛型类中泛型的使用规则类似。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常见类及其继承关系（三）</title>
    <link href="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>在大学期间，专门有门课程叫数据结构，那数据结构有什么用呢？</p><p>简单理解数据结构是用来存储数据的；（比如堆栈，队列，二叉树)</p><p>数据结构定义：数据结构是 计算机对数据存储的一种安排；</p><h4 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h4><h5 id="变量存储"><a href="#变量存储" class="headerlink" title="变量存储"></a>变量存储</h5><blockquote><p>注意：</p><p>值和类型匹配问题：数据类型限定了变量可以存储的数据类型</p><p>成员变量和局部变量问题：在使用局部变量之前，必须赋值</p><p>成员变量有默认值但是默认值都没有多大意义，在做项目的时候，给它赋一些值</p></blockquote><h5 id="数组存储"><a href="#数组存储" class="headerlink" title="数组存储"></a>数组存储</h5><blockquote><p>特点：长度固定，只能够是存储同种类型；  </p></blockquote><h5 id="自定义存储–顺序表"><a href="#自定义存储–顺序表" class="headerlink" title="自定义存储–顺序表"></a>自定义存储–顺序表</h5><blockquote><p>① 希望可以存储任意多个元素；</p><p>② 希望可以存储任意类型的数据;</p><p><strong>分析：———&gt;</strong></p><p>   在Java中，万物皆对象，可以设置一个类表示上面的容器，那怎么设计?</p><p><strong>提示：———&gt;</strong></p><p>   比如： Integer类 里面有个int value 变量存储值,</p><p>​       String类 里面有个 char[] value 字符数组变量存储值.</p><p>  如下图所示:</p><p>   <img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/clip_image001.png" alt="1"> <img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/clip_image002.png" alt="2"></p><p><strong>步骤：———&gt;</strong></p><p>  ①自定义一个容器类，比如（IntArray类）；</p><p>  ②先做到可以存储多个int值，内部使用int数组；</p><p>  ③类里面 创建了一个int数组，当int数组满足之后，在创建一个新的数组；并且把老的数组值拷贝到新的数组里面(<strong>实现自动扩容</strong>)；</p><p>  <img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/clip_image004.jpg" alt="im"></p><p>自定义类已经设计好了，那用户在操作的时候，怎么使用？也就是怎么存值，怎么取值?</p><ul><li>  方案一：把里面的数组设置为private，提供get，set方法；通过get就可以取得数组的值；</li><li>  方案二：在类里面提供一个方法，比如add，调用一次，就往里面添加一个值；</li></ul><p>哪种方式好，第一个种好吗，用户在调用的时候，通过get方法，取到了一个数组，在设置的时候，又需要传一个数组. 在操作的时候已经暴露出数组; 但是用户在操作的时候，并不想知道这些具体的实现；</p><p>第二种方式，直接提供方法，封装性更强更好;也就是存的时候，提供了一个add方法，调用一次add方法就向容器里面添加一个元素;</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//自定义的</span><br><span class="hljs-comment">//问题：这个自定义容器只能存放int型数据，为什么改成Object[] data;就能存放任意数据类型包括基本数据类型</span><br>package cn.kongwei_liao.DataStruct;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntArray</span> &#123;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  ① 定义一个自定义容器类 IntArray</span><br><span class="hljs-comment">        ② 创建一个存放数据的数组 比如 int[] data= new int[10];</span><br><span class="hljs-comment">        ③ 定义一个添加方法 add ，调用一次给当前容器对象添加一个元素</span><br><span class="hljs-comment">        ④ 创建自定义容器类对象，调用add方法，添加元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//private int [] data= new int[10];</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> [] data;<br><span class="hljs-comment">//定义一个计数器</span><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = <span class="hljs-number">0</span> ;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IntArray</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//data=new int[10];</span><br><span class="hljs-keyword">this</span>(<span class="hljs-number">10</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IntArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 添加方法 add 传入一个参数值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> str)</span></span>&#123;<br>     <span class="hljs-comment">//date[size] = str;</span><br>     <span class="hljs-comment">//size++;</span><br><br><span class="hljs-comment">//判断数组已满</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">size</span>==data.length) &#123;<br><span class="hljs-comment">//自动扩充2倍长度</span><br><span class="hljs-keyword">int</span>[] new1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[data.length*<span class="hljs-number">2</span>];<br><span class="hljs-comment">//将老数组内容拷贝的扩容的新数组</span><br>System.arraycopy(data, <span class="hljs-number">0</span>, new1, <span class="hljs-number">0</span>, <span class="hljs-built_in">size</span>);<br><span class="hljs-comment">//原老数组的引用指向新数组</span><br>data=new1;<br>&#125;<br><br>data[<span class="hljs-built_in">size</span>++] = str;<br><br>&#125;<br><span class="hljs-comment">//覆写toString方法</span><br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-comment">//return Arrays.toString(date);</span><br><span class="hljs-comment">//把元素数组的值，拷贝到新数组里面</span><br><span class="hljs-keyword">int</span> [] newArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-built_in">size</span>];<br>System.arraycopy(data, <span class="hljs-number">0</span>, newArr, <span class="hljs-number">0</span>, <span class="hljs-built_in">size</span>);<br><span class="hljs-keyword">return</span> Arrays.toString(newArr);<br>&#125;<br><br><span class="hljs-comment">//添加返回数组大小方法：getSize</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">size</span>;<br>&#125;<br><br><span class="hljs-comment">//自定义容器查找</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getElementByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>||index&gt;=<span class="hljs-built_in">size</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArrayIndexOutOfBoundsException(<span class="hljs-string">&quot;查找失败！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> data[index];<br>&#125;<br><br><span class="hljs-comment">//查找指定元素第一次出现的索引</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFirstIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ele)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">size</span>;i++) &#123;<br><span class="hljs-keyword">if</span>(data[i]==ele) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">//自定义容器，删除元素</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deleteElementByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br><span class="hljs-comment">//越界判断</span><br><span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>||index&gt;=<span class="hljs-built_in">size</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArrayIndexOutOfBoundsException(<span class="hljs-string">&quot;越界！&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//删除元素  原位置index+1</span><br>System.arraycopy(data, index+<span class="hljs-number">1</span>, data, index, <span class="hljs-built_in">size</span>-index<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">size</span>--;<br>Object ele =data[index];<br><span class="hljs-keyword">return</span> ele;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除指定的第一个元素</span><br><span class="hljs-comment"> * 1、查找元素的第一个下标</span><br><span class="hljs-comment"> * 2、删除第一个元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteFirstElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ele)</span> </span>&#123;<br><span class="hljs-keyword">int</span> index=<span class="hljs-keyword">this</span>.getFirstIndex(ele);<br><span class="hljs-keyword">this</span>.deleteElementByIndex(index);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/del.png" alt="del"></p></blockquote><p>补充：基本数据类型与Object的关系</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>                int  a = <span class="hljs-number">33</span>;<br>        sop(a);    <span class="hljs-comment">//可以说明基本数据类型和Object之间存在多态关系吗？</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sop</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> obj</span>)</span> &#123;<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因：java在寻找最佳匹配方法时无法找到完全匹配的参数时会进行自动提升转换或者其它相应转换。</p><p>Debug下查看：</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/debug.png" alt="de"></p><h5 id="自定义存储–链表"><a href="#自定义存储–链表" class="headerlink" title="自定义存储–链表"></a>自定义存储–链表</h5><p>已经使用变量、数组和自定义容器类存放数据；</p><blockquote><ul><li>变量：存储一个值；</li><li>数组：存储多个值；</li><li>自定义容器：在类中封装一个数组</li></ul><p>对于变量直接赋值使用; 对于数组，通过下标使用; 对于自定义容器类的操作，我们通过添加add方法，进行使用.它的原理是内部使用数组来存储实现，但是用户并不关心内部怎么实现.</p></blockquote><p>需求：</p><blockquote><p>如果在设计一个容器类（自定义一个容器类），对于容器类的操作，一般提供一个add方法，调用add方法的时候，需要传一个值，然后把值存放在容器里面，</p><p>但是现在【不用数组】, 那还可以用什么类型方式存储？</p></blockquote><p>分析：</p><blockquote><p>现在基于变量的方式来存储，比如一组零散的数据放到容器里面，对于容器类，能够准确的提供方法来添加，能够操作就可以了，我们也不关心怎么存放；</p><p>对于这些数据，可能是整型，字符串，假如现在把这些零散的数据都看成对象.</p><p>比如使用变量 :  int i1 = 11；  int i2 = 4；</p><p>如果看成对象使用Integer的写法：  Integer i11 = 11;  Integer i12 = 4;</p><p>如果看成对象来看的话，在堆栈图中是怎样的?</p><ul><li>栈里面i11，指向堆里面地址，所以操作这些地址就是相当于操作值了。现在我把这些零散的对象连起来。</li><li>第一个对象地址，比如0x1234，容器类里面存放一个变量（Integer i11），拿到i11的地址，因为跟其他对象是关联的，那它是不是也就拿到的其他关联上对象的地址。<br><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/clip_image002.jpg" alt="img"></li></ul></blockquote><p>问题：如何将4和11连接起来？</p><blockquote><p>分析：</p><p>比如现在把Integer i11 变量指向它的引用，相等于把i11存放在容器类里面了，现在</p><p>让11对象里面存放4的地址，但是都是Integer 对象，怎么存放别对象的地址？</p><p>思路: </p><p>根据刚才分析，在容器当中存放一个变量，也就是定义一个变量，指向该对象;</p><p>在对象当中，又有变量指向其他对象.这就就连接起来;</p><p>现在自定义一个类Node（相当于口袋），类里面定义两个字段，</p><ul><li> 一个Object类型存放值，</li><li> 一个Node类型字段，存放下一个Node对象地址. </li></ul><p>把11封装成一个Node对象，把对象放到容器里面，但是现在不放在容器里面，而在内部定义Node类型变量first，把first指向11地址；如果在添加一个。比如22，通过一个方法，把22封装成Node对象，然后让11和22联系起来，那怎么让11和22联系起来？</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">class <span class="hljs-keyword">Node</span><span class="hljs-title">&#123;</span><br><span class="hljs-title">Object</span> data;//用于添加数据...<br><span class="hljs-keyword">Node</span> <span class="hljs-title">node</span>;//用于保存下一个对象的地址<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在11对象中定义一个变量，让这个变量指向22这个对象，那就应该在Node类里面定义一个变量，这个变量存放什么值，就是存放Node对象，所以应该定义成Node类型。</p><p>如下图:</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/clip_image01.png" alt="img"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//自定义的</span><br><span class="hljs-keyword">package</span> cn.kongwei_liao.DataStruct;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> MyLinkedList &#123;<br><br><span class="hljs-keyword">class</span> Node&#123;<br>Object data;<span class="hljs-comment">//用于添加数据</span><br>Node <span class="hljs-keyword">next</span>;<span class="hljs-comment">//保存下一结点对象地址</span><br>Node(Object data)&#123;<br><span class="hljs-keyword">this</span>.data=data;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> Node first;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">size</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> add(Object obj) &#123;<br><span class="hljs-comment">//将用户传入的数据打包</span><br>Node n=<span class="hljs-keyword">new</span> Node(obj);<br><span class="hljs-comment">//打包好的数据挂到first上面</span><br><span class="hljs-comment">//如果是第一次添加直接挂到first上面，否则，因该挂在最后添加的Node对象上面</span><br><span class="hljs-keyword">if</span>(first==<span class="hljs-keyword">null</span>) &#123;<br>first=n;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>Node temp=first;<br><span class="hljs-keyword">while</span>(temp.<span class="hljs-keyword">next</span>!=<span class="hljs-keyword">null</span>) &#123;<br>temp=temp.<span class="hljs-keyword">next</span>;<br>&#125;<br>temp.<span class="hljs-keyword">next</span>=n;<br>&#125;<br><span class="hljs-keyword">size</span>++;<br>&#125;<br>@Override<br><span class="hljs-keyword">public</span> String toString() &#123;<br>StringBuffer sb=<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;[&quot;</span>);<br>Node temp=first;<span class="hljs-comment">//临时变量指向链表头部</span><br><span class="hljs-keyword">while</span>(temp!=<span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(temp.data!=<span class="hljs-keyword">null</span>&amp;&amp;temp.<span class="hljs-keyword">next</span>!=<span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//数据不为空，且下一结点存在</span><br>sb.<span class="hljs-keyword">append</span>(temp.data).<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>sb.<span class="hljs-keyword">append</span>(temp.data);<span class="hljs-comment">//最后一个结点</span><br>&#125;<br>temp=temp.<span class="hljs-keyword">next</span>;<span class="hljs-comment">//temp指向下一个结点</span><br>&#125;<br>sb.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;]&quot;</span>);<br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> getSize() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">size</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><blockquote><p>1、本阶段会学习：常见的Java中写好的集合框架的类和接口；</p><p>2、集合框架： 看成是学习一些Java中设计好的容器类；</p><p>3、容器：盛装东西的</p><p>4、如何创建容器对象；</p><p>5、如何把数据装到容器中—&gt; 调用方法；</p><p>6、如何把容器中的数据取出—&gt;还是调用方法；</p><p>7、可能的难点：我们会学习各种各样的集合容器类，它们有各自的存储特点，难以选择</p><p>解决：分析清楚每一个的特点，实际场景中自己的需求，如果很多都可以，那就随便选</p><p>8、在本阶段任务要求：</p><p>① 学会使用</p><p>② 了解我们提到的Java中的这些容器类的设计原理</p><p>9、最近看到类型后面有<E> <T> <K> <V>… 直接忽略，过几天学习的泛型；直接看成Object</V></K></T></E></p><p>10、集合框架中存储的元素全部都是对象，从1.5开始支持自动装箱拆箱，所以基本数据类型也可以直接添加</p></blockquote><h4 id="所有集合的超类"><a href="#所有集合的超类" class="headerlink" title="所有集合的超类"></a>所有集合的超类</h4><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/superclass.jpg" alt="img"></p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/superclass1.jpg" alt="img"></p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/clip.jpg" alt="img"></p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>基于数组，查询和修改速度快（相比于LinkedList）；</p><p>方法：添加、删除、查询、插入、修改等；</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/alf.png" alt="alf"></p><p>不是同步的（存在线程安全问题），如何解决？？</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/arrayl.png" alt="al"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs awk">package cn.kongwei_liao.DataStruct;<br><br>import java.util.ArrayList;<br>import java.util.Iterator;<br>import java.util.ListIterator;<br><br>public class ArrayListDemo &#123;<br><br>public static void main(String[] args) &#123;<br><span class="hljs-regexp">//</span> TODO Auto-generated method stub<br>ArrayList bag = new ArrayList();<br>bag.add(<span class="hljs-string">&quot;电脑&quot;</span>);<br>bag.add(<span class="hljs-number">200</span>);<br>bag.add(<span class="hljs-string">&quot;鼠标&quot;</span>);<br>bag.add(<span class="hljs-string">&quot;小人书&quot;</span>);<br>bag.add(<span class="hljs-string">&quot;教材&quot;</span>);<br>bag.add(<span class="hljs-string">&quot;牛奶&quot;</span>);<br><br><span class="hljs-regexp">//</span><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;bag.size();i++)&#123;<br><span class="hljs-regexp">//</span>System.out.println(bag.get(i));<br><span class="hljs-regexp">//</span>&#125;<br><br><span class="hljs-regexp">//</span><span class="hljs-keyword">for</span>(源中的数据类型 变量名 : 源)&#123;<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span>&#125;<br><span class="hljs-regexp">//</span>注意：源可以是数组或者集合（Iterable的实例）<br><br><span class="hljs-regexp">//</span><span class="hljs-keyword">for</span>(Object obj:bag)&#123;<span class="hljs-regexp">//</span>增强<span class="hljs-keyword">for</span>循环（foreach）<br><span class="hljs-regexp">//</span>System.out.println(obj);<br><span class="hljs-regexp">//</span>&#125;<br><br><span class="hljs-regexp">//</span>Iterator it = bag.iterator();<br><span class="hljs-regexp">//</span><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><span class="hljs-regexp">//</span>System.out.println(it.<span class="hljs-keyword">next</span>());<br><span class="hljs-regexp">//</span>&#125;<br><span class="hljs-regexp">//</span><span class="hljs-keyword">while</span>(it.hasNext())&#123;<span class="hljs-regexp">//</span>这一次迭代器遍历输出为空<br><span class="hljs-regexp">//</span>System.out.println(it.<span class="hljs-keyword">next</span>());<br><span class="hljs-regexp">//</span>&#125;<br><br>ListIterator iterator = bag.listIterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>System.out.println(iterator.<span class="hljs-keyword">next</span>());<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;------------------------------------------&quot;</span>);<br><span class="hljs-keyword">while</span>(iterator.hasPrevious())&#123;<span class="hljs-regexp">//</span>如果将上面的向后迭代注释掉，向前迭代的输出为空<br>System.out.println(iterator.previous());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>Iterator 就是一个迭代器（也是一个接口）</p><p>其中的方法如下：</p><blockquote><p>boolean hasNext() 判断是否有下一个元素，如果返回true表示有下一个；</p><p>Object next() 调用一次获得一个元素（每调用一次指针会向后移动一个）；</p><p>void remove() 会从迭代器指向的结合容器中删除一个元素</p></blockquote><p>一个迭代器，循环完毕就把指针移动到末尾了。</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/iter.jpg" alt="img"></p><h4 id="双向迭代器"><a href="#双向迭代器" class="headerlink" title="双向迭代器"></a>双向迭代器</h4><p>Iterator 单项的迭代器接口，从左到右依次获得数据，判断是否有下一个；获得下一个</p><p>​      |– ListIterator  双向的迭代器接口，它的主要方法如下：</p><p>​                             Iterator中有的它也有；</p><p>​                             boolean hasPrevious() 判断是否有上一个；</p><pre><code>                         Object previous() 获得上一个元素；</code></pre><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ListIterator iterator = bag.<span class="hljs-built_in">list</span><span class="hljs-constructor">Iterator()</span>;<br><span class="hljs-keyword">while</span>(iterator.has<span class="hljs-constructor">Next()</span>)&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(iterator.next<span class="hljs-literal">()</span>);<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;------------------------------------------&quot;</span>);<br><span class="hljs-keyword">while</span>(iterator.has<span class="hljs-constructor">Previous()</span>)&#123;<span class="hljs-comment">//如果将上面的向后迭代注释掉，向前迭代的输出为空</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(iterator.previous<span class="hljs-literal">()</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>基于链表结构，添加和删除操作效率高（相对于上面的数组结构）</p><p>内部相对于ArrayList而言多了写操作头和尾的方法</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/llf.png" alt="llf"></p><p>可以充当队列和堆栈</p><p>不是同步的（存在线程安全问题）</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/ll.png" alt="img"></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> cn.kongwei_liao.DataStruct;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> class LinkedListDemo &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[]args) &#123;<br>LinkedList list = <span class="hljs-keyword">new</span> LinkedList();<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;E&quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>(list);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-built_in">size</span>(); i++) &#123;<br>System.out.<span class="hljs-built_in">println</span>(list.pop());<span class="hljs-comment">//输出A B C，而D和E没有打印出来，因为每pop一次size减1</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/res.png" alt="rs"></p><h3 id="不重复元素的容器"><a href="#不重复元素的容器" class="headerlink" title="不重复元素的容器"></a>不重复元素的容器</h3><p><strong>如何自定义不能存放重复元素的容器</strong></p><blockquote><p>1、现在需要我们自己设计一个容器类，不能够添加重复元素（如果元素重复了就添加不进去）</p><p>2、在前面我们设计的基于数组的自定义容器类的基础上改版</p><p>3、需要在add方法内部判断重复</p><p>4、如何判断：</p><ul><li>每一次调用add会传入一个参数： 用户希望添加的元素 ele</li><li>遍历内部的数组，判断数组中是否包含ele</li></ul></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-built_in">add</span>(<span class="hljs-keyword">Object</span> <span class="hljs-built_in">str</span>)&#123;<br><span class="hljs-comment">//判断当前容器是否已经存在待插入元素</span><br><span class="hljs-comment">//方法一</span><br><span class="hljs-comment">//for(int i=0;i&lt;size;i++) &#123;</span><br><span class="hljs-comment">//if(data[i].equals(str))</span><br><span class="hljs-comment">//return false;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//方法二</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.getFirstIndex(<span class="hljs-built_in">str</span>)&gt;=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br><br>     <span class="hljs-comment">//date[size] = str;</span><br>     <span class="hljs-comment">//size++;</span><br><br><span class="hljs-comment">//判断数组已满</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">size</span>==data.length) &#123;<br><span class="hljs-comment">//自动扩充2倍长度</span><br><span class="hljs-keyword">Object</span>[] new1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">Object</span>[data.length*<span class="hljs-number">2</span>];<br><span class="hljs-comment">//将老数组内容拷贝的扩容的新数组</span><br>System.arraycopy(data, <span class="hljs-number">0</span>, new1, <span class="hljs-number">0</span>, <span class="hljs-built_in">size</span>);<br><span class="hljs-comment">//原老数组的引用指向新数组</span><br>data=new1;<br>&#125;<br><br>data[<span class="hljs-built_in">size</span>++] = <span class="hljs-built_in">str</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>特点：不重复（不添加重复元素），无序（不保证和添加顺序的一致）</p><p>成员方法：</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/HashSetFunctions.png" alt="hsf"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.kongwei_liao.DataStruct;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> HashSetDemo &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[]args) &#123;<br>HashSet set1=<span class="hljs-built_in">new</span> HashSet();<br>set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">123</span>);<br>set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">123</span>);//未插入HashSet中<br><br><span class="hljs-type">Integer</span> i1=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">123</span>);<br><span class="hljs-type">Integer</span> i2=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">123</span>);<br><span class="hljs-type">Integer</span> i3=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">456</span>);<br><span class="hljs-type">Integer</span> i4=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">456</span>);<br>set1.<span class="hljs-keyword">add</span>(i1);//未插入HashSet中<br>set1.<span class="hljs-keyword">add</span>(i2);//未插入HashSet中<br>set1.<span class="hljs-keyword">add</span>(i3);<br>set1.<span class="hljs-keyword">add</span>(i4);//未插入HashSet中<br><br>set1.<span class="hljs-keyword">add</span>(&quot;123&quot;);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(set1);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(set1.size());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*控制台打印结果</span><br><span class="hljs-comment">[123, 456, 123]</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>需要考虑，HashSet内部到底是如何判断重复的？</p><blockquote><p>① 通过添加进去的元素的hashCode+eqauls 两者进行比较</p><p>② 如果两个对象的hashCode相等 并且 两个对象调用equals结果是true 才认为两个元素重复</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/HSrepeat.jpg" alt="img"></p><p>③  验证上面的规则</p><ul><li>打印上面示例中的元素的hashCode和equals的结果</li><li>尝试自定义类，覆写hashCode 和 equals 这两个方法中的代码随便写</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//这样重写HashCode和equals方法是不对的，想想清楚为什么？？<br>//因为这样重写的是HashSet的HashCode和equals方法，其实应该重写的是待插入对象类的这两个方法<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> HashSetDemo extends HashSet&#123;<br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">int</span> hashCode() &#123;<br>Random rd=<span class="hljs-built_in">new</span> Random(<span class="hljs-keyword">System</span>.currentTimeMillis());<br><span class="hljs-keyword">return</span> rd.nextInt();<br>&#125;<br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> equals(<span class="hljs-keyword">Object</span> obj) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[]args) &#123;<br>HashSetDemo set1=<span class="hljs-built_in">new</span> HashSetDemo();<br>set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">123</span>);<br>set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">123</span>);//未插入HashSet中<br><br><span class="hljs-type">Integer</span> i1=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">123</span>);<br><span class="hljs-type">Integer</span> i2=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">123</span>);<br><span class="hljs-type">Integer</span> i3=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">456</span>);<br><span class="hljs-type">Integer</span> i4=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">456</span>);<br>set1.<span class="hljs-keyword">add</span>(i1);//未插入HashSet中<br>set1.<span class="hljs-keyword">add</span>(i2);//未插入HashSet中<br>set1.<span class="hljs-keyword">add</span>(i3);<br>set1.<span class="hljs-keyword">add</span>(i4);//未插入HashSet中<br><br>set1.<span class="hljs-keyword">add</span>(&quot;123&quot;);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(set1);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(set1.size());<br>&#125;<br>&#125;<br><span class="hljs-comment">/*本来之意是将重复元素插入HashSet，但上面的代码没有成功</span><br><span class="hljs-comment">[123, 456, 123]</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//MDZZ  上例想明白原因后就想着重写Integer类中的HashCode和equals方法，Integer是被final修饰的。</span><br><span class="hljs-comment">//正确案例</span><br><span class="hljs-comment">//public class HashSetDemo extends HashSet&#123;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashSetDemo</span></span>&#123;<br>int i;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">HashSetDemo</span>(<span class="hljs-params">int i</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.i=i;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">hashCode</span>(<span class="hljs-params"></span>)</span> &#123;<br>Random rd=<span class="hljs-keyword">new</span> Random(System.currentTimeMillis());<br><span class="hljs-keyword">return</span> rd.nextInt();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">equals</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> obj</span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>+i;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[]args</span>)</span> &#123;<br>HashSet set1=<span class="hljs-keyword">new</span> HashSet();<br><br>HashSetDemo hsd1=<span class="hljs-keyword">new</span> HashSetDemo(<span class="hljs-number">1234</span>);<br>HashSetDemo hsd2=<span class="hljs-keyword">new</span> HashSetDemo(<span class="hljs-number">1234</span>);<br>set1.add(hsd1);<br>set1.add(hsd2);<br><br>System.out.println(set1);<br>System.out.println(set1.size());<br>&#125;<br>&#125;<br><span class="hljs-comment">/*重写自定义对象的HashCode和equals方法</span><br><span class="hljs-comment">[1234, 1234]</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>④  实际开发情况分析（<strong>重点</strong>）</p><p>1、从上面的示例来看，结果两个都添加进去了，原因：hashCode不等，equals为false</p><p>2、从业务上来看（需要向源码时代学生管理系统中添加两个学生信息），觉得这两天数据是同一个人</p><p>3、应该怎么做： 在Student中覆写hashCode 和equals方法</p><p>4、怎么覆写？</p><p>覆写的时候应该参考实际业务中的比较规则，例如姓名，年龄等（还得看Student类中有哪些字段，并且这些字段是业务人员判断的标准）</p></blockquote><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>特点：无序（不保证我们添加元素的顺序）；不重复（不能添加重复元素）；</p><p>内部存储有一定的顺序</p><p>TreeSet一旦添加了第一个元素后就不能在添加其他数据类型的元素，只能添加相同数据类型的元素，除非将容器中所有的元素全部清空，才能添加新的数据类型的元素。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.kongwei_liao.DataStruct;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TreeSetDemo &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>// TODO Auto-<span class="hljs-keyword">generated</span> <span class="hljs-keyword">method</span> stub<br>TreeSet ts=<span class="hljs-built_in">new</span> TreeSet();<br>ts.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>ts.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>ts.<span class="hljs-keyword">add</span>(<span class="hljs-number">4</span>);<br>ts.<span class="hljs-keyword">add</span>(<span class="hljs-number">5</span>);<br>ts.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>);<br>ts.<span class="hljs-keyword">add</span>(<span class="hljs-number">3</span>);<br>//ts.<span class="hljs-keyword">add</span>(&quot;3&quot;);//RuntimeException<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ts);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ts.size());<br>&#125;<br>&#125;<br><span class="hljs-comment">/*明明是乱序添加的，为什么打印结果是有顺序的？</span><br><span class="hljs-comment">[1, 2, 3, 4, 5]</span><br><span class="hljs-comment">5</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果： 虽然打印结果的顺序和添加顺序可能不一致，但是感觉结果是有某种规则排序的</span><br><span class="hljs-comment">     String类也实现了Comparable接口，String对象可以调用compareTo方法</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> cn.kongwei_liao.DataStruct;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><span class="hljs-keyword">public</span> class TreeSetDemo &#123;<br><span class="hljs-built_in">int</span> i;<br><span class="hljs-keyword">public</span> TreeSetDemo(<span class="hljs-built_in">int</span> i)&#123;<br><span class="hljs-keyword">this</span>.i=i;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>TreeSet ts=<span class="hljs-keyword">new</span> TreeSet();<br><br>TreeSetDemo tsd1=<span class="hljs-keyword">new</span> TreeSetDemo(<span class="hljs-number">1</span>);<br>TreeSetDemo tsd2=<span class="hljs-keyword">new</span> TreeSetDemo(<span class="hljs-number">1</span>);<br>TreeSetDemo tsd3=<span class="hljs-keyword">new</span> TreeSetDemo(<span class="hljs-number">2</span>);<br>ts.<span class="hljs-built_in">add</span>(tsd1);<br>ts.<span class="hljs-built_in">add</span>(tsd2);<br>ts.<span class="hljs-built_in">add</span>(tsd3);<br><br>System.out.<span class="hljs-built_in">println</span>(ts);<br>System.out.<span class="hljs-built_in">println</span>(ts.<span class="hljs-built_in">size</span>());<br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果： </span><br><span class="hljs-comment">疑问1：上面的代码添加的都是同种类型的数据，为什么还报错；</span><br><span class="hljs-comment">疑问2：为什么提示要把Student转成Comparable</span><br><span class="hljs-comment">正常情况   ----》 TreeSet  或者  Comparable的文档</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/tse.png" alt="tse"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.DataStruct;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSetDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span> </span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TreeSetDemo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">this</span>.i=i;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>TreeSet ts=<span class="hljs-keyword">new</span> TreeSet();<br><br>TreeSetDemo tsd1=<span class="hljs-keyword">new</span> TreeSetDemo(<span class="hljs-number">1</span>);<br>TreeSetDemo tsd2=<span class="hljs-keyword">new</span> TreeSetDemo(<span class="hljs-number">1</span>);<br>TreeSetDemo tsd3=<span class="hljs-keyword">new</span> TreeSetDemo(<span class="hljs-number">2</span>);<br>ts.add(tsd1);<br>ts.add(tsd2);<br>ts.add(tsd3);<br><br><br>System.out.println(ts);<br>System.out.println(ts.size());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/compare.png" alt="c"></p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/ts.jpg" alt="im"></p><blockquote><p>TreeSet内部存储数据是按照大小进行排序存储的</p><p>问题：对象的大小是谁决定的？TreeSet能确定吗？</p><p>例如：</p><p>​    需要向TreeSet中添加两个对象元素</p><p>​    new Student(“ali”,18)</p><p>​    new Student(“ajie”,19)</p><p>​    TreeSet不可能也不应该自己想一个规则来决定大小，而应该有我们来指定好规则（如按年龄大小）</p><p>​    –》给所有的对象都提供一个比较大小的方法</p><p>​    TreeSet怎么比较：直接调用对象上面比较大小的方法看结果</p><p>问题：TreeSet早就写好了，我们怎么告诉他们使用哪个比较方法呢？</p><p>其实在设计TreeSet之前Java设计了一个接口   Comparable接口     有compareTo(Object obj)比较大小的方法</p><p>所以：</p><p>​    TreeSet中会调用对象的compareTo(Object obj)方法进行比较</p><p>​    我们存入TreeSet的对象必须实现了Comparable接口</p></blockquote><h3 id="自然排序和定制排序（比较器）"><a href="#自然排序和定制排序（比较器）" class="headerlink" title="自然排序和定制排序（比较器）"></a>自然排序和定制排序（比较器）</h3><h4 id="自然排序-Comparable"><a href="#自然排序-Comparable" class="headerlink" title="自然排序 Comparable"></a>自然排序 Comparable</h4><p>从TreeSet的API文档中点击 “自然排序” —》 Comparable接口中</p><blockquote><p>文档中的描述：</p><p>​    此接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法</p><p>理解：</p><p>​    如果一个类实现了Comparable接口，可以认为这个类的对象具有自然排序的能力（本质就是这个对象可以调用比较的方法compareTo），这种比较和排序的规则就是自然排序</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/clip_im.jpg" alt="img"></p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/c02.jpg" alt="img"></p></blockquote><h4 id="定制排序（比较器）Comparator"><a href="#定制排序（比较器）Comparator" class="headerlink" title="定制排序（比较器）Comparator"></a>定制排序（比较器）Comparator</h4><blockquote><p>1、根据上面的分析，如果我们的对象没有实现Comparable接口，感觉就无法添加到TreeSet中去；（这些对象就没有自然排序的能力）；</p><p>2、上面的示例设计有点问题：Student类中覆写的compareTo方法按照年龄从小到大排列的，万一有的人也是用我们的Student，希望年龄从大到小进行排列，怎么办？还例如，有人希望按照名字长度排序，怎么办？</p><p>不管Student里面使用何种规则都不能满足所有的人</p><p>3、解决办法： 可以给TreeSet单独的提供一个比较器（理解为比较的一个工具）</p><p>4、Comparator 是一个比较器的接口（标准），必须得有进行比较的方法 ：compare(Object o1,Object o2);</p><p>自定义一个类实现Comparator接口，其中写比较规则 —》 比较器的模板</p><p>我们现在需要的是一个具体的比较器对象</p></blockquote><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/cge002.jpg" alt="img"></p><h4 id="判断重复的标准"><a href="#判断重复的标准" class="headerlink" title="判断重复的标准"></a>判断重复的标准</h4><p>1、如果采用的是自然排序调用对象的compareTo方法，如果返回0 表示相等；</p><ul><li>大于且返回正数，升序排列 =&gt; 小于且返回负数，升序排列  对应</li><li>大于且返回负数，降序排列 =&gt; 小于且返回正数，降序排列      对应</li></ul><p>2、如果使用的定制排序（比较器），调用比较器的方法compare 返回0 表示相等；</p><ul><li>大于且返回正数，升序排列 =&gt; 小于且返回负数，升序排列  对应</li><li>大于且返回负数，降序排列 =&gt; 小于且返回正数，降序排列      对应</li></ul><p><strong>如果一个类已经实现了Comparable接口，然后把这个类的对象放入一个具有比较器的TreeSet,那么TreeSet会按照哪种规则来比较呢？</strong></p><h3 id="Collection体系"><a href="#Collection体系" class="headerlink" title="Collection体系"></a>Collection体系</h3><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/Collection.png" alt="1"></p><p>面试经常问的问题：</p><p>1、请说说ArrayList LinkedList HashSet  TreeSet 底层的实现原理（建议多多百度几次），目前先了解一个大概</p><p>2、请说说==和equals的区别</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="什么是Map？"><a href="#什么是Map？" class="headerlink" title="什么是Map？"></a>什么是Map？</h4><p>Map也是一种容器，API文档描述将键映射到值的对象。一个一射（一个Map对象）不能包含重复的键，每一个键只能映射到一个值。</p><p>键、值、键值对和映射</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/map.png" alt="img"></p><blockquote><p>Collection体系中，存储的都是单个的数据，数据之间没有关系。</p><p>Map和Collection是两个没有关系并列的体系（主要从代码结构来看）</p><p>Map的声明：public interface Map{}</p></blockquote><h5 id="Map的结构"><a href="#Map的结构" class="headerlink" title="Map的结构"></a>Map的结构</h5><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/MapStruct.png" alt="map"></p><p>Map场景：账号密码、情侣夫妻和二维坐标等；</p><h5 id="Map中的重要方法"><a href="#Map中的重要方法" class="headerlink" title="Map中的重要方法"></a>Map中的重要方法</h5><blockquote><p>基本方法列表：==========================</p><p>1、 Object put(Object key,Object value);  如果当前添加的这个key已经存在了，会覆盖这个键之前的值，返回的是之前的value值</p><p>2、 boolean containsKey(Object key) </p><p>3、 boolean containsValue(Object value) </p><p>4、 Object get(Object key) ;  根据指定的键key找到对应的值，如果没有找到返回 null</p><p>5、 remove(Object key) ;   删除指定key对应的那一对</p></blockquote><blockquote><p>重点方法列表：==========================</p><p>6、 Collection values()  返回一个Map中的所有的value值</p><p>7、 Set keySet()  返回所有的key值的集合</p><p>8、 Set entrySet() 返回所有的entry对象</p><p>问题： 为什么第一个是返回Collection 二三个返回的是Set?</p><p>key  entry都是不能够重复的— Set</p></blockquote><h4 id="Map的遍历"><a href="#Map的遍历" class="headerlink" title="Map的遍历"></a>Map的遍历</h4><p>使用选择：</p><ol><li>如果只是获取所有一个值，推荐使用  values()方法</li><li>如果只是获取所有的key，推荐使用keySet()方法,但是一般不会用，因为只有key，一般没有任何意义</li><li>如果获取所有的key-value，就使用entrySet()，不要用先通过keySet()获取key，再用get()获取具体的value，这样会导致二次查询，效率低下</li></ol><blockquote><p>说明： 只考虑我们自己把放进去的key-value都一个一个拿出来</p><p>1、foreach 失败了！</p><p>​    原因：Map和Iterable没有任何关系</p><p>2、普通for/ while / do-while  失败</p><p>​    原因： Map中没有通过索引来获得数据的方法</p><p>3、迭代器 失败！</p><p>​    原因： </p><p>​    ① Map没有实现Iterable接口就没有其中获得迭代器的方法；</p><p>​    ② Map中也没有自己设计一个获得迭代器的方法</p></blockquote><p>遍历方法一：</p><p>①先获得所有的key  –》 set</p><p>②遍历set ，通过调用Object get(Object key) 获得对应的value</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Map m = <span class="hljs-keyword">new</span> HashMap();<br>m.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">90</span>);<br>m.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;小马&quot;</span>, <span class="hljs-number">60</span>);<br>m.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;小郭&quot;</span>, <span class="hljs-number">60</span>);<br>Set keys = m.keySet();<br><span class="hljs-keyword">for</span> (Object k : keys) &#123;<br>System.out.<span class="hljs-built_in">println</span>(k+<span class="hljs-string">&quot;&lt;----&gt;&quot;</span>+m.<span class="hljs-built_in">get</span>(k));<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历方法二：</p><p>① 得到所有的Entry对象 ，通过调用方法 Set entrySet();</p><p>② 遍历上面的entry 的集合，依次从每一个Entry对象中取出对应的key-value</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Map m = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HashMap()</span>;<br>m.put(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">90</span>);<br>m.put(<span class="hljs-string">&quot;小马&quot;</span>, <span class="hljs-number">60</span>);<br>m.put(<span class="hljs-string">&quot;小郭&quot;</span>, <span class="hljs-number">60</span>);<br>Set entrys = m.entry<span class="hljs-constructor">Set()</span>;<br><span class="hljs-keyword">for</span> (Object en : entrys) &#123;<span class="hljs-comment">//Set实现了Iterable</span><br><span class="hljs-comment">// 需要把en强制转成 Entry类型</span><br>Entry e = (Entry)en;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e.get<span class="hljs-constructor">Key()</span>+<span class="hljs-string">&quot;--&quot;</span>+e.get<span class="hljs-constructor">Value()</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Map的特点及使用场景选择"><a href="#Map的特点及使用场景选择" class="headerlink" title="Map的特点及使用场景选择"></a>Map的特点及使用场景选择</h4><p>特点：</p><ol><li><p>HashMap中k的值没有顺序，常用来做统计。<br>jdk1.8以后hashMap源码 变了，底层优化了</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/treeify1.png" alt="img"></p><p>表示当相同hash值相同的元素大于8个时候，存储结构会变成红黑树来存储，而之前是链表结构</p></li><li><p>LinkedHashMap吧。它内部维护了一个链表，保持Key插入的顺序。迭代的时候，也是按照插入顺序迭代，而且迭代比HashMap快。</p></li><li><p>TreeMap的顺序是Key的自然顺序（如整数从小到大，默认是按键值的升序排序），也可以指定比较函数。但不是插入的顺序。</p></li><li><p>Hashtable与 HashMap类似,它继承自Dictionary类、不同的是:<code>它不允许记录的键或者值为空;</code>它支持<code>线程的同步</code>、即任一时刻只有一个线程能写Hashtable,因此也导致了 Hashtable在写入时会比较慢。</p><p>注意：LinkedHashMap在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会 比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关 </p></li></ol><p>使用选择：</p><p>一般情况下我们选用HashMap，因为HashMap的键值对在取出时是随机的，其依据键的hashCode和键的equals方法存取数据，具有很快的访问速度，所以在Map中插入、删除及索引元素时其是效率最高的实现。而TreeMap的键值对在取出时是排过序的，所以效率会低点</p><blockquote><p>1、Map中，HashMap具有超高的访问速度，如果我们只是在Map 中插入、删除和定位元素，而无关线程安全或者同步问题，HashMap 是最好的选择。</p><p>2、如果考虑线程安全或者写入速度的话，可以使用HashTable</p><p>3、如果想按怎么存的顺序怎么取，比如队列形式，排队，那么使用LinkedHashMap</p><p>4、如果需要让Map按照key进行升序或者降序排序，那就用TreeMap </p></blockquote><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/Properties.png" alt="p"></p><p>从上面的关系来看，Properties就可以当成一个特殊的Map进行使用</p><blockquote><p>① 就是一个特殊的Map,Map中的所有方法，可以调用的;</p><p>② 放入Properties中的key-value都是String类型</p><p>③ 针对于第二点Properties中提供了特殊的存值和取值的方法，尽量不要用Map的方法</p></blockquote><p>作用：</p><blockquote><ul><li>将内存中的数据写入到硬盘中</li><li>将硬盘中的数据读取到内存中</li></ul></blockquote><p>Properties的重要方法</p><blockquote><p>1、Object setProperty(String key, String value) </p><p>2、String getProperty(String key)</p><p>3、String getProperty(String key, String defaultValue) ; 如果通过key没有找到对应的键值对，返回后面的defaultValue</p><p>// 下面才是最重要的</p><p>4、void list(PrintStream out)    简单理解： 此方法可以把Properties中的数据写入磁盘文件</p><p>5、void load(InputStream inStream) 简单理解： 可以把磁盘文件中的数据读取到Properties中来</p></blockquote><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/fpro.png" alt="1"></p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/fpro2.png" alt="2"></p><p>使用场景：读写资源文件</p><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>1、static Object max(Collection coll) 返回容器中的最大值，内部会调用coll中的对象的compareTo方法进行比较大小—自然排序）</p><p>2、static Object max(Collection coll，Comparator com) 根据比较器指定的比较规则，返回容器中的最大值，内部会调用比较器的比较方法Compare方法</p><p>3、。。。</p><p> <img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/collections.png" alt="c"></p><p>队列Queue</p><p>先进先出FIFO</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/fifo.png" alt="img"></p><p>堆栈Stack</p><p>先进后出（FILO）/后进先出</p><p><img src="/2019/11/11/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89/FILO.png" alt="img"></p><p>双端队列Deque</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>自定义存储</tag>
      
      <tag>ArrayList</tag>
      
      <tag>LinkedList</tag>
      
      <tag>HashSet</tag>
      
      <tag>TreeSet</tag>
      
      <tag>Collection体系</tag>
      
      <tag>Map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常见类及其继承关系(二)</title>
    <link href="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/"/>
    <url>/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>数学相关类Math/BigInteger/BigDecimal</p><p>Math</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">System</span>.out.println(Math.<span class="hljs-built_in">PI</span>);<span class="hljs-comment">//java.lang.Math</span><br></code></pre></td></tr></table></figure><p>1、类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数<br>2、记住一点： 以后遇到1中的情况知道这里来Math类中找。</p><p>（BI）BigInteger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br></code></pre></td></tr></table></figure><p>1、能够表示比long更大的整数</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">long</span> <span class="hljs-keyword">a</span>=<span class="hljs-number">12333333333</span>L<span class="hljs-comment">;//没有超过大小</span><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">a</span>=<span class="hljs-number">1233333333333333333333333333333</span>L<span class="hljs-comment">;//超过大小了</span><br></code></pre></td></tr></table></figure><p>2、它是如何处理存储更大的值？BigInteger是一个类</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">BigInteger b=<span class="hljs-number">123456</span>;<span class="hljs-regexp">//</span>Type mismatch: cannot convert from int to BigInteger<br><span class="hljs-regexp">//</span>因为BigInteger是一个类，值太大，不能让其直接赋值，需要构造方法创建<br>BigInteger b=new BigInteger(<span class="hljs-string">&quot;9223372036854775807&quot;</span>);<span class="hljs-regexp">//</span><span class="hljs-number">9223372036854775807</span>是Long的最大值，new一个比它大<span class="hljs-number">1</span>的数<br></code></pre></td></tr></table></figure><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/Integer1.png" alt="1"></p><p>3、如何去操作</p><p>两个BigInteger相加</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">BigInteger b1=<span class="hljs-built_in">new</span> BigInteger(&quot;9223372036854775807&quot;);<br>BigInteger b2=<span class="hljs-built_in">new</span> BigInteger(&quot;9223372036854775807&quot;);<br>//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b1+b2);//The <span class="hljs-keyword">operator</span> + <span class="hljs-keyword">is</span> undefined <span class="hljs-keyword">for</span> the argument <span class="hljs-keyword">type</span>(s) java.math.BigInteger, java.math.BigInteger<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b1.<span class="hljs-keyword">add</span>(b2));//结果：<span class="hljs-number">18446744073709551614</span><br></code></pre></td></tr></table></figure><p>注意：在BigInteger中，不能直接使用+-等运算符，用已经写成的BI成员方法，具体查看API文档</p><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/BigInteger2.png" alt="2"></p><p>4、int、Integer和BigInteger之间的关系</p><p>Integer 是int 的包装类，他们之间存在自动装箱拆箱，而和BigInteger没有任何关系  </p><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/BI3.png" alt="3"></p><p>BigDecimal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br></code></pre></td></tr></table></figure><p>1、可以精确的表示小数</p><p>double、float浮点小数，无线接近于结果，不精确。这个要看使用于什么场景，是否要求精确？</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">double</span> d<span class="hljs-number">1</span>=<span class="hljs-number">0</span>.<span class="hljs-number">02</span>;<br><span class="hljs-attribute">double</span> d<span class="hljs-number">2</span>=<span class="hljs-number">0</span>.<span class="hljs-number">00002</span>;<br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>+d<span class="hljs-number">2</span>);//<span class="hljs-number">0</span>.<span class="hljs-number">02002</span><br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>-d<span class="hljs-number">2</span>);//<span class="hljs-number">0</span>.<span class="hljs-number">01998</span><br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>*d<span class="hljs-number">2</span>);//<span class="hljs-number">4</span>.<span class="hljs-number">0000000000000003</span>E-<span class="hljs-number">7</span><br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>/d<span class="hljs-number">2</span>);//<span class="hljs-number">999</span>.<span class="hljs-number">9999999999999</span>  不精确<br></code></pre></td></tr></table></figure><p>2、创建使用BigDecimal</p><p>BigDecimal是一个类（非包装类），也不是基本数据类型，需要使用new创建对象。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//BigDecimal bd=0.2;//Type mismatch: cannot convert from double to BigDecimal</span><br>BigDecimal bd1=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(<span class="hljs-number">0.02</span>);<br>BigDecimal bd2=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(<span class="hljs-number">0.00002</span>);<br><br>BigDecimal bd3=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(<span class="hljs-string">&quot;0.02&quot;</span>);<br>BigDecimal bd4=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(<span class="hljs-string">&quot;0.00002&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/%E6%9C%AC%E5%9C%B0.png" alt="4"></p><p>3、BD运算</p><p>和BigInteger一样，不能直接使用+-，已经定义成方法，详见API。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1+bd2);//The <span class="hljs-keyword">operator</span> - <span class="hljs-keyword">is</span> undefined <span class="hljs-keyword">for</span> the argument <span class="hljs-keyword">type</span>(s) java.math.BigDecimal, java.math.BigDecimal<br>//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1-bd2);<br>//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1*bd2);<br>//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1/bd2);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1.<span class="hljs-keyword">add</span>(bd2));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1.subtract(bd2));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1.multiply(bd2));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bd1.divide(bd2));<br></code></pre></td></tr></table></figure><p>注意：</p><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/BD2.png" alt="BD2"></p><p>我们看到运算出来的结果也是不准确的，甚至直接出错了。为什么还是不精确的呢？怎么处理呢？</p><p>因为我们构造d1和d2的时候，就是传入的一个不精确的double值，结果肯定不精确。</p><p>我们可以采用传入精确的值：查看API构造方法，发现可以以字符串的形式传入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">BigDecimal</span> d<span class="hljs-number">1</span>=new BigDecimal(<span class="hljs-string">&quot;0.02&quot;</span>);<br><span class="hljs-attribute">BigDecimal</span> d<span class="hljs-number">2</span>=new BigDecimal(<span class="hljs-string">&quot;0.00002&quot;</span>);<br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>.add(d<span class="hljs-number">2</span>));//<span class="hljs-number">0</span>.<span class="hljs-number">02002</span><br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>.subtract(d<span class="hljs-number">2</span>));//<span class="hljs-number">0</span>.<span class="hljs-number">01998</span><br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>.multiply(d<span class="hljs-number">2</span>));//<span class="hljs-number">4</span>E-<span class="hljs-number">7</span><br><span class="hljs-attribute">System</span>.out.println(d<span class="hljs-number">1</span>.divide(d<span class="hljs-number">2</span>));//<span class="hljs-number">1</span>E+<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>数学常用类小结(一)</p><p>1、基本数学运算的方法，如初等指数、对数、平方根和三角函数在哪里去找方法？<code>Math</code></p><p>2、BigInteger 和BigDecimal怎么运算？</p><ul><li>是什么?能干什么?<ul><li>BigInteger –》比long更大的数；</li><li>BigDecimal–》表示更精确的小数</li></ul></li><li>怎么创建一个对象?<ul><li>都是通过构造函数；</li><li>BigDecimal–》想要结果精确，那么初始值就要精确–》new　BigDecimal(String val)</li></ul></li><li>怎么干?<ul><li> 基本的+ - * /，要使用他们自身的方法</li></ul></li></ul><p>随机数</p><p>随机数的使用？</p><p>验证码，摇号，彩票，随机名字，随机播放，贪吃蛇的食物，打地鼠</p><p>Java获得随机数</p><p>1、Math类中的一个方法random，该方法返回正号介于<code>[0.0, 1.0)</code>的double值。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>random<span class="hljs-literal">()</span>);<span class="hljs-comment">//0.9468330747092099</span><br><span class="hljs-comment">//如果要用这个方法，获取100以内的整数？乘以100得到0---100的小数，再取整。</span><br></code></pre></td></tr></table></figure><p>2、Random类（有很多方法）</p><p>boolean、double、int…                [ 0, n )</p><p>构造方法：</p><table><thead><tr><th><strong>Random() 创建一个新的随机数生成器。</strong></th></tr></thead><tbody><tr><td><strong>Random<code>(long seed)</code>  使用单个 <code>long</code> 种子创建一个新的随机数生成器。</strong></td></tr></tbody></table><p>演示发现，如果使用了一个seed构造方法，每次得到的随机数是一样的。因为种子一样的嘛。那怎么办呢？我们是不是可以将种子搞成一个随机的呢？System.currentTimeMillis().</p><p>其实看源码，发现无参的构造方法也是搞了一个随机的种子的。但是，即使这样，也可能会产生相同的值，计算机够快。  </p><p>其他方法也可以得到：nextInt(n) -&gt; [ 0,  n )</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//现在要获取x—y直接的int怎么办？我们关键是要确定这个n的值。n=y-x;</span><br><span class="hljs-comment">//获取3-7之间的随机整数</span><br>Random r=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Random()</span>;<br><span class="hljs-comment">//n=7-3=4</span><br><span class="hljs-built_in">int</span> m=r.next<span class="hljs-constructor">Int(4)</span>;<span class="hljs-comment">//得到m为0到n直接的值，最后再加上n-1</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(m+<span class="hljs-number">4</span>-<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>从1.7开始Random的子类：ThreadLocalRandom</p><p>ThreadLocalRandom:nextInt( int least, int bound )</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadLocalRandom</span>.</span></span>current<span class="hljs-literal">()</span>.next<span class="hljs-constructor">Int(3, 7)</span>);<br></code></pre></td></tr></table></figure><p>UUID经常用来做唯一的标识ID（根据当前时间+机器码）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//UUID:128位的值</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UUID</span>.</span></span>random<span class="hljs-constructor">UUID()</span>);<span class="hljs-comment">//31db0a4d-4fcb-44e7-b607-fc358c28e828</span><br></code></pre></td></tr></table></figure><p>写一个方法：生成验证码</p><p>问题：调用这个方法可以获得一个指定位数的随机字符串；其内容可以是 数字 大小写字母组成</p><p> 4位随机数</p><p>分析思路：</p><blockquote><p>①准备字符串：把所有数字和大小写字母放在一个字符串或者数组中</p><p>②在①中随机获取一个值 </p><p>③遍历步骤②len次 ④返回结果</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">String</span> <span class="hljs-built_in">random</span> = getRandom(<span class="hljs-number">4</span>);<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">random</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getRandom</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span> </span>&#123;<br><span class="hljs-keyword">String</span> s = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>s += getOne();<br>&#125;<br><span class="hljs-keyword">return</span> s;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-title">getOne</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// ①准备字符串：把所有数字和大小写字母放在一个字符串或者数组中</span><br><span class="hljs-keyword">String</span> str=<span class="hljs-string">&quot;0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span>;<br><span class="hljs-comment">// ②在①中随机获取一个值  </span><br><span class="hljs-comment">//int r=ThreadLocalRandom.current().nextInt(0,str.length());</span><br>Random <span class="hljs-built_in">random</span> = <span class="hljs-keyword">new</span> Random();<br><span class="hljs-keyword">int</span> r=<span class="hljs-built_in">random</span>.nextInt(str.length());<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">String</span>.valueOf(str.charAt(r));<br>&#125;<br></code></pre></td></tr></table></figure><p>日期（时间）相关类</p><p>应用场景（使用的一些软件中使用到的地方）</p><p>闹钟，按照时间段来统计一些东西，支付订单上也用到时间，操作日志记录时间</p><p>Date类</p><p>类 Date 表示特定的瞬间，精确到毫秒。在 JDK 1.1 之前，类 Date 有两个其他的函数。它允许把日期解释为年、月、日、小时、分钟和秒值。它也允许格式化和解析日期字符串。不过，这些函数的 API 不易于实现国际化. 闰秒. 格林威治标</p><p>构造方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Date()</span>;   <span class="hljs-comment">//就表示当前系统时间对象</span><br><span class="hljs-constructor">Date(<span class="hljs-params">long</span> <span class="hljs-params">date</span>)</span>   <span class="hljs-comment">//根据指定的毫秒值创建一个指定的时间</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Date d=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(d);<span class="hljs-comment">// Wed Apr 19 14:13:47 CST 2017</span><br> <br>long time=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>Date d1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">time</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(d1);<span class="hljs-comment">// Wed Apr 19 14:13:47 CST 2017</span><br></code></pre></td></tr></table></figure><p>成员方法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">after</span><span class="hljs-params">(Date when)</span></span> <span class="hljs-comment">//测试此日期是否在指定日期之后。</span><br><span class="hljs-function"><span class="hljs-title">before</span><span class="hljs-params">(Date when)</span></span> <span class="hljs-comment">//测试此日期是否在指定日期之前。</span><br><span class="hljs-function"><span class="hljs-title">getTime</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</span><br><span class="hljs-function"><span class="hljs-title">setTime</span><span class="hljs-params">(long time)</span></span> <span class="hljs-comment">//设置此 Date 对象，以表示 1970 年 1 月 1 日 00:00:00 GMT 以后 time 毫秒的时间点。</span><br></code></pre></td></tr></table></figure><p>不直观问题：</p><p>直接打印Date对象 ：Sat Apr 01 15:28:03 GMT+08:00 2017看起来不直观，用户体验不好。希望根据不同用户的需求显示不同的效果，怎么办？需要对结构进行格式化</p><blockquote><p>2017-04-01 15:03:24</p><p>2017/04/01</p><p>2017年04月01日</p></blockquote><p>时间格式化：DateFormat和SimpleDateFormat</p><blockquote><p>1、作用一： 把一个Date对象可以转成我们希望的一个结果样式（字符串）</p><p>2、作用二： 也可以把一个字符串解析为一个Date对象</p><p>3、学习重点就是如何调用上面的提到的两个功能方法，注意怎么给他格式</p></blockquote><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/DF.png" alt="df"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat()</span>;<br>String p=<span class="hljs-string">&quot;yyyyMMdd HH:mm:ss&quot;</span>;<br>sdf.apply<span class="hljs-constructor">Pattern(<span class="hljs-params">p</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(sdf.format(d1));<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(sdf.parse(<span class="hljs-string">&quot;20170420 14:33:26&quot;</span>));<br></code></pre></td></tr></table></figure><p>Calender（日历）</p><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/Calender.png" alt="calender"></p><p>日历，Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等 日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。</p><p>字段：</p><p>类中有标识年、月、日等字段</p><p>常用方法：</p><p>①获取日历对象：static Calendar getInstance() 得一个日历。(是一个抽象类，外部和内部都不能new，不能创建对象。通过源码发现，是new 了一个子类赋值给Calendar中。)</p><p>② 获取指定字段值（年、月、日DAY_OF_MONTH等）：int get(int field) 返回给定日历字段的值。</p><p>注意：月是从0—11，所以获取后需要+1</p><p>③ 设置指定字段值：set(int field,int value)  给指定的字段设置值。</p><p>这是一种重新赋值操作，会覆盖原来的值，会自动进位</p><p>④ 给指定字段增加或者减少值：add(int field,int amount) : 这个方法和set差不多，但是把amount的值累加到当前设置的字段原有的值之上</p><p>⑤使用指定时间创建一个Calendar： setTime(Date d)  可以直接把一个Date设置进去</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">/**<br> * 把 <span class="hljs-number">2033</span>年<span class="hljs-number">3</span>月<span class="hljs-number">4</span>日 <span class="hljs-number">12</span>:<span class="hljs-number">34</span>:<span class="hljs-number">23</span> 设置给日历：<br> *   分析：可以通过<span class="hljs-keyword">set</span>方法一个个字段的设置，不建议。使用<br> *     setTime(<span class="hljs-type">Date</span> <span class="hljs-type">date</span>)一个方法搞定。<br> *     步骤：<br> *      ①把 字符串 <span class="hljs-string">&quot;2033年3月4日 12:34:23&quot;</span> 转换成<span class="hljs-type">Date</span><br> *      ②setTime设置<br> */<br><span class="hljs-type">String</span> dateStr = <span class="hljs-string">&quot;2033年3月4日 12:34:23&quot;</span>;<br>SimpleDateFormat sdf = <span class="hljs-built_in">new</span> SimpleDateFormat();<br><span class="hljs-type">String</span> pattern = <span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>;<br>sdf.applyPattern(pattern);<br><span class="hljs-type">Date</span> <span class="hljs-type">date</span> = sdf.parse(dateStr);<br><br>Calendar c = Calendar.getInstance();<br>c.setTime(<span class="hljs-type">date</span>);<br><br>System.out.println(c.<span class="hljs-keyword">get</span>(Calendar.YEAR) + <span class="hljs-string">&quot;年&quot;</span><br>+ (c.<span class="hljs-keyword">get</span>(Calendar.MONTH) + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;月&quot;</span><br>+ c.<span class="hljs-keyword">get</span>(Calendar.DAY_OF_MONTH) + <span class="hljs-string">&quot;日&quot;</span><br>+ c.<span class="hljs-keyword">get</span>(Calendar.HOUR_OF_DAY) + <span class="hljs-string">&quot;:&quot;</span> + c.<span class="hljs-keyword">get</span>(Calendar.MINUTE)<br>+ <span class="hljs-string">&quot;:&quot;</span> + c.<span class="hljs-keyword">get</span>(Calendar.SECOND));<br></code></pre></td></tr></table></figure><p>⑥ 获取一个Date对象：Date getTime()  可以获得日历对象中的当前日期对象</p><p>回顾方法覆写要求：</p><blockquote><p>①保证子类方法和父类方法的方法签名(方法名+参数列表)一致;</p><p>②访问权限 : 子类方法的访问权限(修饰符)不能够比父类方法的访问权限更低;</p><p>③返回值类型 : 子类方法的返回值类型可以是父类方法的返回值类型的子类或者相等</p><p>④子类方法抛出的异常（可以是多个）必须是父类方法抛出的异常的子类或者相等（只针对于非RuntimeException）</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//错误：子类抛出异常大于父类（将在编译期间出错）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>void test() &#123;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>void test() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//正确的子类异常抛出</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>void test() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>void test() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>&#125;<br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>void test() <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br>void test() <span class="hljs-keyword">throws</span> <span class="hljs-type">AWTException</span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>throw和throws的区别</p><p>throw</p><p>1、位置：在方法里面</p><p>2、后面只能够跟一个具体的异常对象</p><p>throws</p><p>1、位置 ： 方法上，在（）后，{}前，可以抛出多个异常，异常之间用,隔开，没有顺序之分</p><p>2、后面可以有多个异常类型</p><p><img src="/2019/11/10/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB-%E4%BA%8C/clip_image008.jpg" alt="img"></p><p>只要抛出了异常：有几种处理方式</p><p> *      1. 再向上个抛出</p><p> *      2. try catch</p><p> * 目前，先自己处理。以后学得多了在根据实际情况或抛出或捕捉</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Math</tag>
      
      <tag>BigInteger</tag>
      
      <tag>BigDecimal</tag>
      
      <tag>随机数</tag>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多态</title>
    <link href="/2019/11/06/Java%E5%A4%9A%E6%80%81/"/>
    <url>/2019/11/06/Java%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态?"></a>什么是多态?</h3><p>简单理解 : 看成一种事物多种形态</p><blockquote><p>Animal a1 = new Human();</p><p>a1是人？是动物？还是Bee？它的类型是什么？</p><ul><li>运行时类型：对象的真正类型，从上面代码来看就是等号‘=’右边的类型；</li><li>编译时类型：在编译的阶段，编译器在意的类型是等号 ‘=’ 左边的类型；</li><li>当编译时类型和运行时类型不一致时—&gt;产生多态。</li></ul></blockquote><blockquote><p>Animal a = new Human();<br>Human p = new Human();<br>多态的写法的好处 ： 可以屏蔽不同的子类之间的实现差异</p></blockquote><p><strong>字段没有覆写一说：实际开发中一般不会再子类中定义一个和父类同名的字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.Polymorphism;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">walk</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;动物出行！\n&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-type">Polymorphism</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br><span class="hljs-meta">@Override</span><br>public void walk() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Human双足行走！\n&quot;</span>);<br>&#125;<br>public void playGames() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;人类A伟又在打电动哦！\n&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-type">Polymorphism</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br><span class="hljs-meta">@Override</span><br>public void walk() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Bee飞行！\n&quot;</span>);<br>&#125;<br>public void jiMi() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;小蜜蜂采集de花蜜，维尼可爱吃了！\n&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs awk">package cn.kongwei_liao.Polymorphism;<br><br>public class Test &#123;<br><br>public static void main(String[] args) &#123;<br><span class="hljs-regexp">//</span> TODO Auto-generated method stub<br>Object obj;<br>obj = new Animal();<br><span class="hljs-regexp">//</span>obj.walk();<span class="hljs-regexp">//</span>Error:The method walk() is undefined <span class="hljs-keyword">for</span> the type Object<br><br>Animal anm=new Animal();<br>anm.walk();<br><br>anm=new Human();<br>anm.walk();<br><span class="hljs-regexp">//</span>anm.playGames();<span class="hljs-regexp">//</span>Error:The method playGames() is undefined <span class="hljs-keyword">for</span> the type Animal<br><br>anm=new Bee();<br>anm.walk();<br><br>Human hu=new Human();<br>hu.playGames();<br><br><span class="hljs-regexp">//</span>Human hum = (Human)anm;<span class="hljs-regexp">//</span>anm引用Bee类型对象<br><span class="hljs-regexp">//</span>hum.walk();<br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java.lang.ClassCastException: <br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>cn.kongwei_liao.Polymorphism.<br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>Bee cannot be cast to cn.kongwei_liao.Polymorphism.Human<br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>at cn.kongwei_liao.Polymorphism.Test.main(Test.java:<span class="hljs-number">20</span>)<br><br>Bee bee=(Bee)anm;<span class="hljs-regexp">//</span>anm当前引用Bee类型对象<br>bee.walk();<br>bee.jiMi();<br><br><span class="hljs-regexp">//</span>Human h=new Bee();<span class="hljs-regexp">//</span>Error:Type mismatch: cannot convert from Bee to Human<br><br>&#125;<br>&#125;<br>/*<br> * 编译过程：<br> * 第十四行Animal是Human的父类，编译器编译通过<br> * 第十五、十六行：(编译器把anm看成是Animal) 编译的时候会到anm的编译类型中找是否有walk方法和playGames方法;<br> * 如果没有,会继续向anm的编译类型的父类中一直向上找;<br> * 如果都没有找到,编译报错;<br> * 如果找到了编译通过(不会向下到子类中,找的时候就是编译的时候是不会执行代码的)。<br> * <br> * 运行过程：<br> * 第十五行：先到运行时类型(Person)找walk方法,如果找到就执行,否则就向上到父类中找并执行。<br> *<br> * 思考 : 有没有可能编译通过了,而运行找不到方法...    不可能!永远不会出现这种情况<br> */<br><br></code></pre></td></tr></table></figure><p><img src="/2019/11/06/Java%E5%A4%9A%E6%80%81/staticfunccx.png" alt="1"></p><p><img src="/2019/11/06/Java%E5%A4%9A%E6%80%81/1.png" alt="2"></p><h3 id="多态方法调用以及参数传递"><a href="#多态方法调用以及参数传递" class="headerlink" title="多态方法调用以及参数传递"></a>多态方法调用以及参数传递</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-type">Polymorphism</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br><span class="hljs-meta">@Override</span><br>public void walk() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Bee飞行！&quot;</span>);<br>&#125;<br>public void jiMi() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;小蜜蜂采集de花蜜，维尼可爱吃了！&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-type">Polymorphism</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bee1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bee</span></span>&#123;<br>public void jiMi() &#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Bee1采集de槐树花蜜！&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.Polymorphism;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bee2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jiMi</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Bee2采集de油菜花蜜！&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package cn.kongwei_liao.Polymorphism;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Human</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">walk</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Human双足行走！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">playGames</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;人类A伟又在打电动哦！&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">have</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-comment">//Error:The method have() of type Human must override or implement a supertype method</span><br>System.out.println(<span class="hljs-string">&quot;Human吃饭！&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">have</span>(<span class="hljs-params">Bee bee</span>)</span> &#123;<br>System.out.print(<span class="hljs-string">&quot;吃&quot;</span>);<br>bee.jiMi();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> cn.kongwei_liao.Polymorphism;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><br>Bee bee1=<span class="hljs-keyword">new</span> <span class="hljs-type">Bee</span>();<br>Bee bee2=<span class="hljs-keyword">new</span> <span class="hljs-type">Bee</span>();<br><br>hu.have(bee1);<span class="hljs-comment">//Human.have(Bee bee):传入Bee的继承类Bee1的对象，但调用的是Bee的jiMi()</span><br>hu.have(bee2);<br><br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*编译，或者传递的过程中传递的是对象的地址；</span><br><span class="hljs-comment">*运行结果：看谁（真正的对象）在调用jiMi()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/06/Java%E5%A4%9A%E6%80%81/%E5%A4%9A%E6%80%81%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8.png" alt="3"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>面对对象</tag>
      
      <tag>多态</tag>
      
      <tag>继承</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构：查找</title>
    <link href="/2019/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE/"/>
    <url>/2019/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>查找的基本概念  </p><p>查找：在数据集合中寻找满足某种条件的数据元素的过程称为查找</p><p><img src="/2019/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE/cha.png" alt="1"></p><p>查找表：用于查找的数据集合称为查找表</p><ul><li>查询某个数据元素是否在查找表</li><li>查询某个数据元素的属性</li><li>对查找表进行操作（插入或删除某个元素）</li></ul><p>静态查找表：如果一个查找表只涉及操作1和2（不涉及修改）</p><ul><li>顺序查找</li><li>折半查找</li></ul><p>动态查找表：</p><ul><li>二叉排序树</li><li>平衡二叉树</li></ul><p>数据元素往往包含除了关键字以外的很多数据，这个数据元素也叫做是记录</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct&#123;<br>            <span class="hljs-type">Elemtype</span> key;  // 关键字<br>            其他信息…<br>&#125;数据元素(记录)<br></code></pre></td></tr></table></figure><p>如果不特别说明，记录可以看作是只含关键字</p><p>关键字（即查找时比较的对象）：数据元素中某个可以唯一标识该元素的数据项</p><p>平均查找长度（ASL:Average Search Length）:在查找的过程中，一次查找长度是指需比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字比较次数的平均值。    <strong>ASL相当于是查找算法的基本操作执行次数</strong></p><p><img src="/2019/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE/ASL.png" alt="2"></p><p>顺序查找</p><p>顺序查找（线性查找），主要用于在线性表中进行查找。</p><p>从查找表的一端开始，顺序扫描查找表，依次将扫描到的关键字和待查找的值key进行比较。</p><p>如果相等，查找成功。</p><p>如果扫描结束仍未发现相等的数据元素，查找失败。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">int</span> Search1(<span class="hljs-built_in">int</span> a[ ],<span class="hljs-built_in">int</span> n,<span class="hljs-built_in">int</span> <span class="hljs-built_in">key</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;  <span class="hljs-comment">//注意从1开始</span><br>          <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-built_in">key</span>)<span class="hljs-keyword">return</span> i; <span class="hljs-comment">//查找成功</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//查找失败</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">int</span> Search2(<span class="hljs-built_in">int</span> a[ ],<span class="hljs-built_in">int</span> n,<span class="hljs-built_in">int</span> <span class="hljs-built_in">key</span>)&#123;<br>     <span class="hljs-built_in">int</span> i=n;<br>     a[<span class="hljs-number">0</span>]=<span class="hljs-built_in">key</span>; <span class="hljs-comment">//设置“哨兵”</span><br>     <span class="hljs-keyword">while</span>(a[i]!=<span class="hljs-built_in">key</span>)&#123; <span class="hljs-comment">//如果不是要找的元素</span><br>            i--;  <span class="hljs-comment">//从后往前找</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> i; <span class="hljs-comment">//如果查找失败也会返回0</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE/shunxu.png" alt="2"></p><p><img src="/2019/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE/%E9%A1%BA%E5%BA%8F%E6%88%90%E5%8A%9F.png" alt="3"></p><p><img src="/2019/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E6%9F%A5%E6%89%BE/%E9%A1%BA%E5%BA%8F%E5%A4%B1%E8%B4%A5.png" alt="4"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一讲：为什么学习网络协议</title>
    <link href="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <url>/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>第1讲 | 为什么要学习网络协议？</p><p>《圣经》中有一个通天塔的故事，大致是说，上帝为了阻止人类联合起来，就让人类说不同的语言。人类 没法儿沟通，达不成“协议”，通天塔的计划就失败了。 但是千年以后，有一种叫“程序猿”的物种，敲着一种这个群体通用的语言，连接着全世界所有的人，打 造这互联网世界的通天塔。如今的世界，正是因为互联网，才连接在一起。 当 “Hello World!” 从显示器打印出来的时候，还记得你激动的心情吗？ public class </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">HelloWorld &#123; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123; <br>    System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>); <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>如果你是程序员，一定看得懂上面这一段文字。这是每一个程序员向计算机世界说“你好，世界”的方 式。但是，你不一定知道，这段文字也是一种协议，是人类和计算机沟通的协议，只有通过这种协议，计 算机才知道我们想让它做什么。 协议三要素 当然，这种协议还是更接近人类语言，机器不能直接读懂，需要进行翻译，翻译的工作教给编译器，也就 是程序员常说的 compile。这个过程比较复杂，其中的编译原理非常复杂，我在这里不进行详述。  </p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/1.png" alt="1"></p><p>但是可以看得出，计算机语言作为程序员控制一台计算机工作的协议，具备了<code>协议的三要素</code>。</p><ul><li><code>语法</code>，就是这一段内容要符合一定的规则和格式。例如，括号要成对，结束要使用分号等。 </li><li><code>语义</code>，就是这一段内容要代表某种意义。例如数字减去数字是有意义的，数字减去文本一般来 说就没有意义。 </li><li><code>顺序</code>，就是先干啥，后干啥。例如，可以先加上某个数值，然后再减去某个数值。</li></ul><p>会了计算机语言，你就能够教给一台计算机完成你的工作了。恭喜你，入门了！ </p><p>但是，要想打造互联网世界的通天塔，只教给一台机器做什么是不够的，你需要学会教给一大片机器做什 么。这就需要网络协议。只有通过网络协议，才能使一大片机器互相协作、共同完成一件事。 </p><p>这个时候，你可能会问，网络协议长啥样，这么神奇，能干成啥事？我先拿一个简单的例子，让你尝尝鲜，然后再讲一个大事。 </p><p>当你想要买一个商品，常规的做法就是打开浏览器，输入购物网站的地址。浏览器就会给你显示一个缤纷 多彩的页面。 </p><p>那你有没有深入思考过，浏览器是如何做到这件事情的？它之所以能够显示缤纷多彩的页面，是因为它收 到了一段来自 HTTP 协议的“东西”。我拿网易考拉来举例，格式就像下面这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">HTTP/1.1 200 OK <br>Date: Tue, 27 Mar 2018 16:50:26 GMT <br>Content-Type: text/html;charset=UTF-8 <br>Content-Language: zh-CN <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pages.kaola.com/&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> 网易考拉 3 周年主会场 <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>这符合协议的三要素吗？我带你来看一下。 </p><ul><li>首先，符合语法，也就是说，只有按照上面那个格式来，浏览器才认。例如，上来是状态，然后是首部， 然后是内容。 </li><li>第二，符合语义，就是要按照约定的意思来。例如，状态 200，表述的意思是网页成功返回。如果不成功，就是我们常见的“404”。 </li><li>第三，符合顺序，你一点浏览器，就是发送出一个 HTTP 请求，然后才有上面那一串 HTTP 返回的东西。 浏览器显然按照协议商定好的做了，后一个五彩缤纷的页面就出现在你面前了。 我们常用的网络协议有哪些？ </li></ul><p>接下来揭秘我要说的大事情，“双十一”。这和我们要讲的网络协议有什么关系呢？ </p><p>在经济学领域，有个伦纳德∙里德（Leonard E. Read）创作的《铅笔的故事》。这个故事通过一个铅笔的 诞生过程，来讲述复杂的经济学理论。这里，我也用一个下单的过程，看看互联网世界的运行过程中，都 使用了哪些网络协议。 </p><p>你先在浏览器里面输入 <a href="https://www.kaola.com/">https://www.kaola.com</a> ，这是一个URL。浏览器只知道名字 是“<a href="http://www.kaola.com”,但是不知道具体的地点,所以不知道应该如何访问.于是,它打开地址簿去查/">www.kaola.com”，但是不知道具体的地点，所以不知道应该如何访问。于是，它打开地址簿去查</a> 找。可以使用一般的地址簿协议DNS（本地DNS？）去查找，还可以使用另一种更加精准的地址簿查找协议HTTPDNS（DNS服务器）。 无论用哪一种方法查找，终都会得到这个地址：106.114.138.24。这个是IP地址，是互联网世界的“门牌号”。</p><p>知道了目标地址，浏览器就开始打包它的请求。对于普通的浏览请求，往往会使用HTTP协议；但是对于购物的请求，往往需要进行加密传输，因而会使用HTTPS协议。无论是什么协议，里面都会写明“你要买什么和买多少”。 </p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/2.png" alt="2"></p><p>DNS、HTTP、HTTPS 所在的层我们称为应用层。经过应用层封装后，浏览器会将应用层的包交给下一层 去完成，通过<code> socket编程</code>来实现。下一层是传输层。传输层有两种协议，一种是<code>无连接的协议UDP</code>，一 种是<code>面向连接的协议TCP</code>。对于支付来讲，往往使用 TCP 协议。所谓的面向连接就是，TCP 会保证这个包 能够到达目的地。如果不能到达，就会重新发送，直至到达。 </p><p>TCP 协议里面会有两个<code>端口</code>，一个是<code>浏览器监听的端口</code>，一个是电商的<code>服务器监听的端口</code>。操作系统往往通过端口来判断，它得到的包应该给哪个进程。</p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/3.png" alt="3"></p><p>传输层封装完毕后，浏览器会将包交给操作系统的网络层。网络层的协议是<code> IP 协议</code>。在 IP 协议里面会有<code>源IP地址</code>，即浏览器所在机器的IP地址和<code>目标IP地址</code>，也即电商网站所在服务器的IP地址。</p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/4.png" alt="4"></p><p>操作系统既然知道了目标 IP 地址，就开始想如何根据这个门牌号找到目标机器。操作系统往往会判断，这 个目标 IP 地址是本地人，还是外地人。如果是本地人，从门牌号就能看出来，但是显然电商网站不在本 地，而在遥远的地方。</p><p>操作系统知道要离开本地去远方。虽然不知道远方在何处，但是可以这样类比一下：如果去国外要去海 关，去外地就要去网关。而操作系统启动的时候，就会被 <code>DHCP 协议配置 IP 地址</code>，以及<code>默认的网关的 IP地址 192.168.1.1</code>。 </p><p>操作系统如何将 IP 地址发给网关(网关在本地)呢？在本地通信基本靠吼，于是操作系统大吼一声，谁是 192.168.1.1  啊？网关会回答它，我就是，我的本地地址在村东头。这个本地地址就是MAC地址，而大吼的那一声是 ARP协议。</p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/5.png" alt="5"></p><p>于是操作系统将 IP 包交给了下一层，也就是MAC 层。网卡再将包发出去。由于这个包里面是有 MAC 地 址的，因而它能够到达网关。 </p><p>网关收到包之后，会根据自己的知识，判断下一步应该怎么走。<code>网关往往是一个路由器</code>，到某个 IP 地址应该怎么走，这个叫作<code>路由表</code>。 </p><p>路由器有点像玄奘西行路过的一个个国家的一个个城关。每个城关都连着两个国家，每个国家相当于一个 局域网，在每个国家内部，都可以使用本地的地址 MAC 进行通信。 </p><p>一旦跨越城关，就需要拿出 IP 头来，里面写着贫僧来自东土大唐（就是源 IP 地址），欲往西天拜佛求经 （指的是目标 IP 地址）。路过宝地，借宿一晚，明日启行，请问接下来该怎么走啊？ </p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/6.png" alt="6"></p><p>城关往往是知道这些“知识”的，因为城关和临近的城关也会经常沟通。到哪里应该怎么走，这种沟通的协议称为<code>路由协议</code>，常用的有<code>OSPF</code>和<code>BGP</code>。 </p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/7.png" alt="7"></p><p>城关与城关之间是一个国家，当网络包知道了下一步去哪个城关，还是要使用国家内部的 MAC 地址，通过下一个城关的 MAC 地址，找到下一个城关，然后再问下一步的路怎么走，一直到走出最后一个城关。 最后一个城关知道这个网络包要去的地方。于是，对着这个国家吼一声，谁是目标 IP 啊？目标服务器就会 回复一个 MAC 地址。网络包过关后，通过这个 MAC 地址就能找到目标服务器。 </p><p>目标服务器发现 MAC 地址对上了，取下 MAC 头来，发送给操作系统的网络层。发现 IP 也对上了，就取 下 IP 头。IP 头里会写上一层封装的是 TCP 协议，然后将其交给传输层，即TCP 层。</p><p>在这一层（TCP）里，对于收到的每个包，都会有一个回复的包说明收到了。这个回复的包绝非这次下单请求的结果，例如购物是否成功，扣了多少钱等，而仅仅是 TCP 层的一个说明，即收到之后的回复。当然这个回复，会沿着刚才来的方向走回去，报个平安。 </p><p>因为一旦出了国门，西行路上千难万险，如果在这个过程中，网络包走丢了，例如进了大沙漠，或者被强 盗抢劫杀害怎么办呢？因而到了要报个平安。 </p><p>如果过一段时间还是没到，发送端的 TCP 层会重新发送这个包，还是上面的过程，直到有一天收到平安到 达的回复。这个重试绝非你的浏览器重新将下单这个动作重新请求一次。对于浏览器来讲，就发送了一次 下单请求，TCP 层不断自己闷头重试。除非 TCP 这一层出了问题，例如连接断了，才轮到浏览器的应用层 重新发送下单请求。 </p><p>当网络包平安到达 TCP 层之后，TCP 头中有目标端口号，通过这个端口号，可以找到电商网站的进程正在 监听这个端口号，假设一个 Tomcat，将这个包发给电商网站。 </p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/8.png" alt="8"></p><p>电商网站的进程得到 HTTP 请求的内容，知道了要买东西，买多少。往往一个电商网站初接待请求的这 个 Tomcat 只是个接待员，负责统筹处理这个请求，而不是所有的事情都自己做。例如，这个接待员要告 诉专门管理订单的进程，登记要买某个商品，买多少，要告诉管理库存的进程，库存要减少多少，要告诉 支付的进程，应该付多少钱，等等。 </p><p>如果告诉相关的进程呢？往往通过<code>RPC 调用</code>，即远程过程调用的方式来实现。远程过程调用就是当告诉管 理订单进程的时候，接待员不用关心中间的网络互连问题，会由 RPC 框架统一处理。RPC 框架有很多种， 有基于 HTTP 协议放在 HTTP 的报文里面的，有直接封装在 TCP 报文里面的。 </p><p>当接待员发现相应的部门都处理完毕，就回复一个 HTTPS 的包，告知下单成功。这个 HTTPS 的包，会像 来的时候一样，经过千难万险到达你的个人电脑，终进入浏览器，显示支付成功。 </p><p>小结 </p><p>看到了吧，一个简简单单的下单过程，中间牵扯到这么多的协议。而管理一大片机器，更是一件特别有技 术含量的事情。除此之外，像近比较火的云计算、容器、微服务等技术，也都需要借助各种协议，来达 成大规模机器之间的合作。 </p><p>我在这里列一下之后要讲的网络协议，之后我会按照从底层到上层的顺序来讲述。 </p><p><img src="/2019/11/06/%E7%AC%AC%E4%B8%80%E8%AE%B2%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/9.png" alt="9"></p><p>上面的“双十一”故事只是为了给你一个大致的框架，这里面有些协议，我在故事里已经提到了，有些还 没有提到。在这门课的后一章，当所有的协议都讲过之后，我会再重新讲一遍这个故事，到时候你就能 明白更多的细节。</p><p>最后，学完了这一节，给你留一个问题吧。 当网络包到达一个城关的时候，可以通过路由表得到下一个城关的 IP 地址，直接通过 IP 地址找就可以 了，为什么还要通过本地的 MAC 地址呢？ 欢迎你留言和我讨论。趣谈网络协议，我们下期见！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java常见类及其继承关系(一)</title>
    <link href="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/"/>
    <url>/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="Java常见类及其继承关系"><a href="#Java常见类及其继承关系" class="headerlink" title="Java常见类及其继承关系"></a>Java常见类及其继承关系</h3><p>以后会学习很多Java中写好的类（学些什么呢？）</p><p>实际开发中经常使用到一些类，比如数组的相关方法，字符串的相关方法等等，这些使用频率很高，Java就将常用的方法为我们封装好，为开发者省事、省时间，让开发者真正的去关心自己个人化的业务逻辑实现。所以我们需要学习常用类。</p><p>关键一点目的：要看懂人家这个类是干什么的，大致有哪些方法，知道怎么用。其次，可以借鉴人家的优秀思想和规范，进一步加强自己使用api的能力。</p><blockquote><p>从类的成员入手：</p><ul><li>构造方法 ： 创建对象的，通过对象来调用方法</li><li>字段   ： 重点关注全局常量</li><li>方法      ： 重点中重点！ 一个方法看成是一个功能</li><li>学习方法：api文档，注释，实例(看不懂就实际运行起来看结果帮助理解),互联网</li></ul></blockquote><ul><li>一个类 ： <ul><li>字段 ： 私有的内部结果，一般不用管； 全局常量，直接访问使用就可以了 ，Math.PI Integer.SIZE</li><li><strong>方法 : 重点，一定会使用，需要记忆常用的方法</strong></li><li>构造方法 ： 需要调用实例方法就得先调用构造方法来创建对象</li></ul></li></ul><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>类 <code>Object</code> 是类层次结构的根类,每个类都使用 <code>Object</code> 作为超类。(和接口没有关系)</p><p>所有对象（包括数组）都实现这个类的方法 :　所有的对象都可以调用到Object中的方法;</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Student s1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Student()</span>;<br>s1.hash<span class="hljs-constructor">Code()</span>；     <span class="hljs-comment">//OK</span><br><br>String s2 = ``“等等”；<br>s2.hash<span class="hljs-constructor">Code()</span>;  <span class="hljs-comment">//OK</span><br><br><span class="hljs-built_in">int</span> i = <span class="hljs-number">5</span>;<br>i.hash<span class="hljs-constructor">Code()</span>;   <span class="hljs-comment">//NO,因为i是一个基本数据类型不是一个类</span><br><br><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-number">6</span>]</span>;<br>arr.hash<span class="hljs-constructor">Code()</span>;  <span class="hljs-comment">//OK，数组也是一个类</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/demo.png" alt="demo"></p><h4 id="Object类中的一些方法"><a href="#Object类中的一些方法" class="headerlink" title="Object类中的一些方法"></a>Object类中的一些方法</h4><blockquote><p><strong>String toString()</strong> 返回调用此方法的当前对象的字符串表示形式(把当前对象转成字符串)</p><p><strong>boolean equals(Object obj)</strong> 比较两个对象是否相等(比较调用此方法的对象是否和传入的obj”相等”)</p><p><strong>int hashCode()</strong> 把当前对象转成一个int值</p><p><strong>Class&lt;?&gt; getClass()</strong> 返回此 Object 的运行时类(获得一个对象的真正的类型) </p></blockquote><h4 id="Object中的toString-方法"><a href="#Object中的toString-方法" class="headerlink" title="Object中的toString()方法"></a>Object中的toString()方法</h4><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/toString.png" alt="to" style="zoom:150%;"><p>通过上面两种情况的测试，println打印方法内部，打印对象其实打印<code>对象.toString()方法</code>的返回值</p><h5 id="下面通过追踪源码-了解"><a href="#下面通过追踪源码-了解" class="headerlink" title="下面通过追踪源码(了解)"></a>下面通过追踪源码(了解)</h5><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/Snipaste_2019-11-05_17-18-40.png" alt="l"></p><p>分析：分析打印对象的结果为什么是 XXX@1232e3 这种格式</p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/r.png" alt="1" style="zoom:150%;"><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/q.png" alt="qq"></p><p><strong>自己覆写toString方法</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><span class="hljs-keyword">private</span> int age;<br><span class="hljs-function"><span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name,int age</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;-&quot;</span> + age;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Object中的equals-方法"><a href="#Object中的equals-方法" class="headerlink" title="Object中的equals()方法"></a>Object中的equals()方法</h5><p><strong>(equals 与 == 的区别)</strong>  </p><p>凡是new出来的对象都会在堆中开辟新的空间, 占据不同地址值的空间。</p><p>原来Object中定义的equals方法的比较规则就是==,如果我们想要写自己的规则,则需要在我们自己的类中覆写Object的此方法,在方法里面写我们自己的规则!</p><ul><li>== 和 equals 都是比较是否相等：<ul><li>相等 : a 传统的理解一般都是数字值是否相等;    b 在程序中任何东西都是数据,都会比较是否相等</li></ul></li><li><code>== </code>比较的相等：<ul><li>基本数据类型:  比较的就是值是否相等;</li><li>引用数据类型:  比较的是对象的地址是否一样;<strong>（如果说要比较两个对象的内容是否相同==便不在适用了）</strong></li></ul></li><li><code>equals()</code>比较的相等  (最初定义在根类Object中的)  ：<ul><li>基本数据类型 : 不能够使用!  基本数据类型不是对象,不能够调用Object中的方法</li><li>引用数据类型 : 在Object的源码中定义的就是==进行比较比较，通过重写equals方法进行对象内容的比较</li></ul></li><li>如果我们没有去覆写过equals方法而是直接调用到了Object中的此方法,那么结果和==比较应用数据类型一样的;</li><li>在实际开发中,我们一般比较对象都是通过对象的属性值进行比较(一般比较对象的地址没有多大用处),所以我们会经常覆写Object中的此方法,把自己的规则写在方法里面;</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs perl">//重写equals()方法<br>public boolean equals(Object obj)&#123;<br>//<span class="hljs-keyword">if</span>(this.name==obj.name &amp;&amp; this.age == obj.age)&#123;<br>//<span class="hljs-regexp">//</span>Object类中没有name和age这些属性，所以这里会报错<br>//<span class="hljs-keyword">return</span> true;<br>//&#125;<span class="hljs-keyword">else</span>&#123;<br>//<span class="hljs-keyword">return</span> false;<br>//&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>/<br>//Student s = (Student)obj;<br>//<span class="hljs-keyword">if</span>(this.name==s.name &amp;&amp; this.age == s.age)&#123;<br>//<span class="hljs-regexp">//</span>这样做仍然是不够完善的，因为类中属性字段不应该是公开public的<br>//<span class="hljs-regexp">//</span>利用get和set方法完善<br>//<span class="hljs-keyword">return</span> true;<br>//&#125;<span class="hljs-keyword">else</span>&#123;<br>//<span class="hljs-keyword">return</span> false;<br>//&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>//Student s = (Student)obj;<br>//<span class="hljs-keyword">if</span>(this.name==s.getName() &amp;&amp; this.age == s.getAge())&#123;<br>//<span class="hljs-regexp">//</span>this.name类型是String型的是引用类型，在使用==比较时比较有风险，可能比较的是地址，本应该比较的是String型的字面值,所以应该用equals方法比较<br>//<span class="hljs-keyword">return</span> true;<br>//&#125;<span class="hljs-keyword">else</span>&#123;<br>//<span class="hljs-keyword">return</span> false;<br>//&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>Student s = (Student)obj;<br><span class="hljs-keyword">if</span>(this.name.equals(s.getName()) &amp;&amp; this.age==s.getAge&#123;<br><span class="hljs-keyword">return</span> true;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> false;<br>&#125;<br>&#125;<br>//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>//****************************************************<span class="hljs-regexp">//</span><br>public boolean equals(Object obj)&#123;<br>Student s = (Student)obj;<br><span class="hljs-keyword">return</span> this.name.equals(s.getName())&amp;&amp;this.age==s.getAge();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编译器认为 ：obj中没有name， 编译器很傻，看到obj是Object类型，所有Object中是没有name的</p><p>但是我们知道obj变量中装的Student对象–&gt;所以把obj 转成Student （还原它的真实类型）</p></blockquote><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><h4 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h4><p>就是基本数据类型对应的类。提供很多方法和字段，方便我们使用。</p><p>基本数据类型：byte short int long float double char boolean==&gt;都是小写，没有方法</p><p>Java语言是一个面向对象的语言，但是Java中的基本数据类型却是不面向对象的，这在实际使用时存在很多的不便，不能像对象一样拥有很对字段和方法。为了解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样八个类和基本数据类型对应的类统称为包装类(Wrapper Class)，包装类均位于java.lang包。先通过直观的代码看看int和Integer，演示一下Integer调用方法的方便性。</p><blockquote><p>① 包装类型只是将对应基本数据类型封装成一个类而已。</p><p>② 包装类型比基本数据类型更方便操作，可以直接使用很多方法。</p><p>③ 包装类型和其对应的基本数据类型表示的范围是一样的。</p></blockquote><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/Integer%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="1"></p><h4 id="Java中的包装类有哪些？"><a href="#Java中的包装类有哪些？" class="headerlink" title="Java中的包装类有哪些？"></a>Java中的包装类有哪些？</h4><table><thead><tr><th>基本数据类型</th><th>包装类(可以在API文档中查询到)</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h4 id="包装类的继承体系"><a href="#包装类的继承体系" class="headerlink" title="包装类的继承体系"></a>包装类的继承体系</h4><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/ONI.png" alt="2"></p><h4 id="包装类对象的学习（Integer）"><a href="#包装类对象的学习（Integer）" class="headerlink" title="包装类对象的学习（Integer）"></a>包装类对象的学习（Integer）</h4><p>通过一个常用包装类Integer的学习，教会大家学习包装类的方法。主要是通过api文档来学习包装类的创建方式和常用方法的使用</p><h5 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h5><p>Integer(int value) </p><p>Integer(String s) </p><p>为什么要提供这两种转换：</p><p>Integer i1 = <strong>new</strong> Integer(123);</p><p>Integer i2 = <strong>new</strong> Integer(“123”);</p><p>因为在项目很多时候从前台传输数据到后台几乎都是字符串的形式。比如：</p><p>我们本来想传一个字符串：”00”到后台，如果不是用字符串的形式的话，以数字传到后台的话，后台接收到的就是数字0，不是”00”.</p><h5 id="常用的一些方法：以API文档为准"><a href="#常用的一些方法：以API文档为准" class="headerlink" title="常用的一些方法：以API文档为准"></a>常用的一些方法：以API文档为准</h5><p>八个基本类型的包装类中的成员方法大部分都是类似的，如下是Byte和Short的对比：</p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/Wrap.png" alt="4"></p><p>String类提供的方法：</p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/String.png" alt="5"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package cn.kongwei_liao.Classes;<br><br>public <span class="hljs-keyword">class</span> WrappersDemo &#123;<br><br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>byte b=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//Byte B=new Byte(b);</span><br><span class="hljs-comment">//Byte B=1;</span><br><span class="hljs-comment">//Byte B=new Byte(&quot;1&quot;);</span><br><span class="hljs-comment">//Byte B=Byte.valueOf(b);</span><br>Byte B=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Byte</span>.</span></span>parse<span class="hljs-constructor">Byte(<span class="hljs-string">&quot;1&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;byte b=&quot;</span>+b+<span class="hljs-string">&quot;;\t&quot;</span>+<span class="hljs-string">&quot;Byte B=&quot;</span>+B+<span class="hljs-string">&quot;;&quot;</span>);<br><br>short s=<span class="hljs-number">2</span>;<br>Short S=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Short(<span class="hljs-params">s</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;short s=&quot;</span>+s+<span class="hljs-string">&quot;;\t&quot;</span>+<span class="hljs-string">&quot;Short S=&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>short<span class="hljs-constructor">Value()</span>+<span class="hljs-string">&quot;;&quot;</span>);<br><br><span class="hljs-built_in">int</span> i=<span class="hljs-number">3</span>;<br>Integer I=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Integer(<span class="hljs-params">i</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;int i=&quot;</span>+i+<span class="hljs-string">&quot;;\t&quot;</span>+<span class="hljs-string">&quot;Integer I=&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">I</span>.</span></span>long<span class="hljs-constructor">Value()</span>+<span class="hljs-string">&quot;;&quot;</span>);<br><br>long l=<span class="hljs-number">4</span>;<br>Long L=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Long(<span class="hljs-params">l</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;long l=&quot;</span>+l+<span class="hljs-string">&quot;;\t&quot;</span>+<span class="hljs-string">&quot;Long L=&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">L</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>+<span class="hljs-string">&quot;;&quot;</span>);<br><br><span class="hljs-built_in">float</span> f=<span class="hljs-number">0.1</span>f;<br>Float F=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Float(<span class="hljs-params">f</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;float f=&quot;</span>+f+<span class="hljs-string">&quot;;\t&quot;</span>+<span class="hljs-string">&quot;Float F=&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">f</span>)</span>+<span class="hljs-string">&quot;;&quot;</span>);<br><br>double d=<span class="hljs-number">0.2</span>;<br>Double D=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Double(<span class="hljs-params">d</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;double d=&quot;</span>+d+<span class="hljs-string">&quot;;\t&quot;</span>+<span class="hljs-string">&quot;Double D=&quot;</span>+<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">D</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>+<span class="hljs-string">&quot;;&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="包装类的自动拆装箱"><a href="#包装类的自动拆装箱" class="headerlink" title="包装类的自动拆装箱"></a>包装类的自动拆装箱</h5><p>从JDK5开始支持自动拆装箱的</p><p>（自动）装箱：把一个基本数据类型的数据赋值给一个其对应的包装类的过程 </p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">Integer</span> I1 = <span class="hljs-literal">new</span> <span class="hljs-built_in">Integer</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//手动装箱</span><br><span class="hljs-built_in">Integer</span> I2 = <span class="hljs-number">1</span>;<span class="hljs-comment">//自动装箱 </span><br></code></pre></td></tr></table></figure><p>（自动）拆箱：把一个包装类对象赋值给一个其对应的基本数据类型的变量的过程</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> i1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">I1</span>.</span></span><span class="hljs-built_in">int</span><span class="hljs-constructor">Value()</span>;<span class="hljs-comment">//手动拆箱</span><br><span class="hljs-built_in">int</span> i2 = I2;<span class="hljs-comment">//自动拆箱</span><br></code></pre></td></tr></table></figure><p>注意 ：自动装箱拆箱只支持 基本数据类型和其对应的包装类  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Integer</span> i<span class="hljs-number">1</span> = <span class="hljs-number">123</span>;<br><span class="hljs-attribute">Double</span> d<span class="hljs-number">1</span> = <span class="hljs-number">123</span>.<span class="hljs-number">0</span>;<br><span class="hljs-attribute">Integer</span> integer<span class="hljs-number">1</span>=&#x27;a&#x27;;   // 不行  ‘a’是char，对应的包装类是Character<br></code></pre></td></tr></table></figure><h5 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h5><p>简单来说就是整数中(Short,Byte,Integer,Long)的几个包装类内部把常用 [-128,127] 的数据缓存起来了，浮点数是没有的，值太多了。。。</p><p>通过这个解释，一是要大家知道有这么一个东西，二是再次强调==和equals的使用，尤其是关心值的时候，请使用equals。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.kongwei_liao.Classes;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> WrapShareSrc &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><span class="hljs-type">Integer</span> i1=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">123</span>);<br><span class="hljs-type">Integer</span> i2=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1==i2);//<span class="hljs-keyword">false</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1.equals(i2));//<span class="hljs-keyword">true</span><br><br>i1=<span class="hljs-number">123</span>;<br>i2=<span class="hljs-number">123</span>;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1==i2);//<span class="hljs-keyword">true</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1.equals(i2));//<span class="hljs-keyword">true</span><br><br>i1=<span class="hljs-number">128</span>;<br>i2=<span class="hljs-number">128</span>;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1==i2);//<span class="hljs-keyword">false</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1.equals(i2));//<span class="hljs-keyword">true</span><br>&#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *享元模式：</span><br><span class="hljs-comment"> *  简单理解就是Integer中把[-128,127]中的数据缓存起来了，</span><br><span class="hljs-comment"> *  从Integer的源代码中看到一点</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/xiangyuan.png" alt="xy"></p><h5 id="包装类小结："><a href="#包装类小结：" class="headerlink" title="包装类小结："></a>包装类小结：</h5><ul><li><p>为什么需要包装类？</p><ul><li>提供了很多方法和字段，方便我们开发中直接使用</li></ul></li><li><p>基本数据类型和包装类对应关系？</p><ul><li>包装类是基本数据类型的首字母大写，除了int和char ==》Integer Character</li></ul></li><li><p>包装类的继承体系？</p><ul><li>自己看图或者查文档</li></ul></li><li><p>解决错误两种方式？</p><ul><li> 通过exception的类名来定位代码</li><li> 通过自己的错误代码信息点击过去</li></ul></li><li><p>拆装箱：</p><ul><li>装箱：基本数据类型–对应–》包装类 </li><li>拆箱：包装类–对应–》基本数据类型</li><li>自动装箱：Integer integer=3;</li><li>自动拆箱：int i =integer;</li><li>自动装箱和拆箱只能是基本数据类型和其对应的包装类。  </li></ul></li><li><p>享元模式：</p><ul><li> 数字类型：整数 Byte Short Integer Long</li><li>  [-128,127]</li></ul></li></ul><h3 id="System-Java垃圾回收机制-Runtime"><a href="#System-Java垃圾回收机制-Runtime" class="headerlink" title="System/Java垃圾回收机制/Runtime"></a>System/Java垃圾回收机制/Runtime</h3><h4 id="System中常用方法"><a href="#System中常用方法" class="headerlink" title="System中常用方法"></a>System中常用方法</h4><p>System类包含一些有用的类字段和方法，它不能被实例化。  System将构造方法私有化。</p><p>其它不能实例化的原因有：1、接口        2、抽象类        3、枚举        4、私有化构造函数</p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/System.png" alt="s"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.kongwei_liao.Classes;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> SysDemo &#123;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>// TODO Auto-<span class="hljs-keyword">generated</span> <span class="hljs-keyword">method</span> stub<br>long start = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><span class="hljs-type">int</span>[] a= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] b=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">System</span>.arraycopy(a, <span class="hljs-number">0</span>, b, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:b) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(i+&quot; &quot;);<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Start: &quot; + <span class="hljs-keyword">start</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;End: &quot; + <span class="hljs-keyword">end</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;End-Start:&quot; + (<span class="hljs-keyword">end</span>-<span class="hljs-keyword">start</span>));<br>&#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * System 类包含一些有用的类字段和方法。它不能被实例化。</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/Systemf.png" alt="sf"></p><h5 id="System-exit-0"><a href="#System-exit-0" class="headerlink" title="System.exit(0);"></a>System.exit(0);</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">public static int method()&#123;<br>try&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        System.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span><span class="hljs-number">1</span><br>        return <span class="hljs-number">0</span>;<span class="hljs-regexp">//</span><span class="hljs-number">2</span><br>        <span class="hljs-regexp">//</span>System.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span><span class="hljs-number">3</span><br>    &#125;finally&#123;<br>        System.out.println(<span class="hljs-string">&quot;good-bye&quot;</span>);<br>    &#125;<br>&#125;<br>/*<br>注掉<span class="hljs-number">3</span>打印输出：<br>Hello<br>注掉<span class="hljs-number">1</span>和<span class="hljs-number">3</span>打印输出：<br>Hello<br>good-bye<br>*/<br></code></pre></td></tr></table></figure><h4 id="Java的垃圾回收机制"><a href="#Java的垃圾回收机制" class="headerlink" title="Java的垃圾回收机制"></a>Java的垃圾回收机制</h4><ul><li><p>Java中的垃圾：当对象失去所有引用的时候，便成为占用内存的垃圾，需要回收。</p></li><li><p>Java垃圾回收机制：</p><ul><li>Java中的垃圾：没有任何引用的对象（目前java的垃圾回收机制是java的饱受争议的诟病）</li><li>JVM优化：一般就是优化的垃圾回收时间和内存分配大小</li><li>jvm回收垃圾是有自己的机制，不定时，随机的。</li><li>说白了，就是你不知道jvm到底什么时候进行回收。</li><li>但是我们也可以主动调用方法，但是呢，即使我们主动了，也不一定说jvm就马上进行垃圾回收，也是一个随机的事情，我们只是说自己去对垃圾回收这个事情进行了努力。</li></ul></li><li><p>在Java中提供了两个和垃圾回收相关的方法:</p><ul><li>Object中的<code>finalize()</code>:  所有的对象都可以调用此方法，当这个对象被回收时就会调用此方法。</li><li>System中的<code>gc()</code>:  调用此方法表示我们做了一些努力来回收垃圾。</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//覆写Object的finalize方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> GcTest &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;<br>@Override<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> finalize() <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">super</span>.finalize();<br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;我被回收了。。。。&quot;</span>+<span class="hljs-keyword">count</span>++);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//Jvm自己回收</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-comment">//参数垃圾</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Test();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/gc1.png" alt="gc1"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//人工主动回收</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Test();<br>System.gc();<span class="hljs-comment">//主动回收</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/gc2.png" alt="gc2"></p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/gc3.png" alt="gc3"></p><h4 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h4><p>每个 Java 应用程序都有一个 Runtime 类实例，使应用程序能够与其运行的环境相连接。可以通过 getRuntime 方法获取当前运行时。  </p><p>应用程序不能创建自己的 Runtime 类实例。为什么？请自己看源码</p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/Runtime.png" alt="rt"></p><h5 id="exec-String-command-方法"><a href="#exec-String-command-方法" class="headerlink" title="exec(String command)方法"></a>exec(String command)方法</h5><p>Runtime.getRuntime().exec(“notepad”);</p><p>可以指向字符串命令：必须放在c:\windows\system32</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.RuntimeDemo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RuntimeDemo</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">try</span> &#123;<br>Runtime.getRuntime().exec(<span class="hljs-string">&quot;notepad&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/Runtime1.png" alt="rt1"></p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/runtimef.png" alt="rtf"></p><h3 id="字符串相关类String-StringBuffer-StringBuilder"><a href="#字符串相关类String-StringBuffer-StringBuilder" class="headerlink" title="字符串相关类String/StringBuffer/StringBuilder"></a>字符串相关类String/StringBuffer/StringBuilder</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p><strong>转换成字符串的方式有哪些？</strong></p><blockquote><p>1、String.valueOf();</p><p>2、toString();</p><p>3、+</p><p>效率最高的方式为：toString()   &gt;   valueOf()   &gt;   +               为什么？？</p></blockquote><p>String是Java中写好的一个类：描述一个字符串，非常常用！！！</p><p><strong>String对象创建：</strong></p><blockquote><p>1、String s = “我是一个随便的字符串”;</p><p>2、通过调用String类的构造方法</p><p>​        String()</p><p>​        String(String str)</p></blockquote><p><strong>关于空字符串</strong>：</p><blockquote><p>①String str1 = null;//表示str1没有指向一个对象</p><p>②String str2 = “”; //有一个对象，对象是空</p><p>③String str3 = new String();//  和②差不多</p><p>注意一下：在实际的开发中，我们会这样直接申明一个空的而不做任何事情么？绝对不会。所以呢，大家认识到这个就行了，主要是给大家演示加强一下==(值和地址都比较 )和equals(只关心值)。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(str1==str2);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(str1==str3);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(str1.equals(str2));<span class="hljs-comment">//尽量使用一个已知的值去和未知的值比较。尽可能的避免空指针异常。</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(str2==str3);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(str2.equals(str3));<br></code></pre></td></tr></table></figure><p><strong>字符串的比较/常量池</strong>  </p><p>字符串对象引用都是存储在栈中的，如果是<code>编译期</code>已经创建好(直接用<code>双引号</code>定义的，表示这个值是已经确定的，已知的)的就存储在<code>常量池</code>中，如果是<code>运行期（new出来的）</code>才能确定的就存储在<code>堆</code>中。</p><p>(注：编译期：就是我们的javac命令，运行期就是java。Eclipse是自动编译的，就是当我把代码写出来后，就运行了javac，生成了class文件。比如：Integer i = new Integer(“A”)这句代码，在我们的编译期不会出错，就是说写了这句代码没有报错(因为能够编译成class文件)，但是运行起来后，就出错了。)</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-built_in">String</span> str1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-built_in">String</span> str2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>System.<span class="hljs-keyword">out</span>.println(str1==str2);//<span class="hljs-literal">true</span>?<span class="hljs-literal">false</span><br>System.<span class="hljs-keyword">out</span>.println(str1.equals(str2)); //<span class="hljs-literal">true</span>?<span class="hljs-literal">false</span><br><br><span class="hljs-built_in">String</span> str3=<span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-built_in">String</span> str4=<span class="hljs-string">&quot;abc&quot;</span>;<br>System.<span class="hljs-keyword">out</span>.println(str3==str4); //<span class="hljs-literal">true</span>?<span class="hljs-literal">false</span><br>System.<span class="hljs-keyword">out</span>.println(str3.equals(str4)); //<span class="hljs-literal">true</span>?<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/str.png" alt="str1"></p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/str2.png" alt="str2"></p><p>关于常量池的补充说明：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">String</span> s2=<span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-comment">//a 和b都是确定的常量，在编译期就能确定就是字母a和字母b（确定的值不是只能是字母，只要是双引号引起来的，都是确定的）这句话编译期生成的class文件相当于String s2=”ab”。如果这个时候常量池中没有ab，则在常量池中产生再将s2的引用指向常量池中ab，有就直接将s2的引用指向常量池中ab。所以不管怎么，结果就是常量池中有了ab这个常量</span><br><br><span class="hljs-keyword">String</span> s3=<span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-comment">//因为s2已经产生了ab常量，所以s3直接在常量池中就找到了，这个时候s2和s3都是指向了常量池中ab，所以s2==s3.</span><br><br>System.out.<span class="hljs-built_in">println</span>(s2==s3);<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">String</span> s=<span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-keyword">String</span> s1=<span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-comment">//都是确定的值，所以在常量池中产生a和b两个常量。</span><br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>=s+s1;<br><span class="hljs-comment">//因为String是一旦创建后就不可以改变的。这个+号操作就是说你在改变String str=s,想把它改变成s+s1.</span><br><br><span class="hljs-keyword">String</span> s3=<span class="hljs-string">&quot;ab&quot;</span>;<span class="hljs-comment">//</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>==s3);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/%E5%B8%B8%E9%87%8F%E6%B1%A0.png" alt="clc"></p><ul><li>最后记住一句话：这种对象的比较能懂就懂，不懂就算了，不要去想。实际开发中根本不会去想这些事情，没有一点用处。但是有些面试官喜欢(省略2个字)。放心，他们也说不清楚。</li><li>引用数据类型如果想比较值，使用equals</li><li>String类覆写了Object中的equals方法，比价的就是字符串的字面值</li></ul><h4 id="String中的方法："><a href="#String中的方法：" class="headerlink" title="String中的方法："></a>String中的方法：</h4><ul><li><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/String.png" alt="strf"></li></ul><h3 id="StringBuffer-StringBuilder-容器"><a href="#StringBuffer-StringBuilder-容器" class="headerlink" title="StringBuffer/StringBuilder(容器)"></a>StringBuffer/StringBuilder(容器)</h3><h4 id="拼接数字示例"><a href="#拼接数字示例" class="headerlink" title="拼接数字示例"></a>拼接数字示例</h4><p>将1到1000,1到10000,1到10w数字拼接起来，看看需要多少时间？</p><h4 id="String-StringBuffer-StringBuilder的关系"><a href="#String-StringBuffer-StringBuilder的关系" class="headerlink" title="String/StringBuffer/StringBuilder的关系"></a>String/StringBuffer/StringBuilder的关系</h4><blockquote><p>① 这3个类没有直接或者间接的继承关系<code>（不是直系亲属）</code></p><pre><code>      StringBuffer sb = “1231432234455”;  报错</code></pre><p>② 都表示字符序列（简单理解为字符串）</p><p>​        CharSequence  （字符序列的<strong>接口</strong>）</p><p>​               |— String</p><p>​               |—-StringBuffer</p><pre><code>           |----StringBuilder</code></pre><p>③ 区别</p><ul><li><p>String : 它的对象一旦被创建那么值和长度就固定不变了</p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/strc.png"></p></li><li><p>StringBuffer  : 它的对象内容是可以被改变的;</p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/strbuf.png"></p><ul><li>是线程安全的</li><li>版本是1.0</li><li>效率相对于比StringBuilder要低</li></ul></li><li><p>StringBuilder  : 它的对象内容是可以被改变的;</p><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/strbuld.png" alt="strb"></p><ul><li>是线程不安全的</li><li>版本是 1.5</li><li>相当于StringBuffer效率更高一点</li><li>效率相对于比StringBuffer要高</li></ul></li></ul></blockquote><h4 id="StringBuffer-StringBuilder中的常用方法"><a href="#StringBuffer-StringBuilder中的常用方法" class="headerlink" title="StringBuffer/StringBuilder中的常用方法"></a>StringBuffer/StringBuilder中的常用方法</h4><p>① 这两个中的方法几乎是一样的；</p><p>② 上面3个都表示字符序列，因此有很多一样的方法（暂时就忽略）</p><p>③ 今天重点关注这两个中特有的方法： 更改对象中数据的方法</p><p>思考：</p><p>  哪些操作可能会改变对象中的数据？</p><p>  插入、替换、删除、追加。。。</p><p>================================</p><p>④ 构造方法：</p><ul><li>StringBuilder() <ul><li>构造一个不带任何字符的字符串生成器，其初始容量为 16 个字符。 </li><li>初始容量什么意思？</li></ul></li><li>StringBuilder(CharSequence seq) <ul><li>构造一个字符串生成器，它包含与指定的 CharSequence 相同的字符。 </li><li>new StringBuilder(“懂了吗？”)</li><li>new StringBuilder(new StringBuffer(“这下呢？”))</li><li>new StringBuilder(new StringBuilder(“。。。。”))</li></ul></li><li>StringBuilder(int capacity) <ul><li> 构造一个不带任何字符的字符串生成器，其初始容量由 capacity 参数指定。</li></ul></li><li>StringBuilder(String str) </li></ul><p>⑤ 常用方法：</p><ul><li>StringBuilder append(….) </li><li>StringBuilder delete(int start, int end) </li><li>StringBuilder insert(插入点，插入的数据)</li><li>StringBuilder replace(int start, int end, String str) </li><li>StringBuilder reverse() 翻转</li><li>String substring(int start)    返回一个副本，本身的对象没有被改变</li><li>String substring(int start, int end) 返回一个副本，本身的对象没有被改变</li></ul><h3 id="错误与异常分析"><a href="#错误与异常分析" class="headerlink" title="错误与异常分析"></a>错误与异常分析</h3><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/Snipaste_2019-11-07_21-36-50.png" alt="3"></p><p>排错方式2种:</p><p>方式一：到API文档中查询什么意思 NumberFormatException</p><p>方式二：自己根据错误信息定位分析问题：</p><p>分析具体这行代码，哪些地方可能出错？</p><p>Integer integer = <strong>new</strong> Integer(“你给我转啊”);</p><h3 id="Java面试题："><a href="#Java面试题：" class="headerlink" title="Java面试题："></a>Java面试题：</h3><p>1、请你说说int和Integer的区别</p><p>​        Int 和 Integer它们都是一个整数，并且范围都是一样的，而int是基本数据类型，而Integer是int包装类，int是没有方法和字段，而Integer提供了大量的方法与字段</p><p>2、创建了几个字符串对象的面试题</p><p> 注意：一般这种问法不会考虑常量池中的对象，是问堆中的对象，如果是当面问，可以给他说说有常量池这么一个东西，表示你知道有这么回事。</p><p>①String s1 = “A” + “hello” // 最多创建1个，最少0个，要看常量池里面有没有Ahello</p><p>② String s2 = “A”;// 1</p><p>  String s3 = s2 + “hello”;//2</p><p>③ String s4 = new String(“A”) + new String(“hello”); 3个</p><p>3、String/StringBuffer/StringBuilder 他们的区别</p><p>String: 它表示一个字符串，字符串一旦创建了之后，它的长度与内容都是不可变的</p><p>StringBuffer:它们都是操作字符串的容器，它们的长度和大小都是可变的，StringBuffer是jdk1.0开始，是线程安全的，效率相对于StringBuilder要低，StringBuilder 是1.5开始的  是线程不安全的 效率相对于比StringBuffer要高</p><p>4、编程题体现，请看如下的代码，请说出控制台打印的结果</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br><span class="hljs-keyword">String</span> s1=<span class="hljs-string">&quot;AAA&quot;</span>;<br><span class="hljs-keyword">String</span> s2=<span class="hljs-string">&quot;KKK&quot;</span>;<br>StringBuffer sb1=<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;QQQ&quot;</span>);<br>StringBuffer sb2=<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;JJJ&quot;</span>);<br><br>change(s1,s2,sb1,sb2);<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变后s1=&quot;</span>+s1);<span class="hljs-comment">//</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变后s2=&quot;</span>+s2);<span class="hljs-comment">//</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变后sb1=&quot;</span>+sb1);<span class="hljs-comment">//</span><br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变后sb2=&quot;</span>+sb2);<span class="hljs-comment">//</span><br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> change(<span class="hljs-keyword">String</span> s1, <span class="hljs-keyword">String</span> s2, StringBuffer sb1, StringBuffer sb2) &#123;<br>s1=<span class="hljs-string">&quot;XXX&quot;</span>;<br>s2=s2.<span class="hljs-built_in">concat</span>(<span class="hljs-string">&quot;666&quot;</span>);<br>sb1.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;999&quot;</span>);<br>sb2=sb2.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;777&quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变中s1=&quot;</span>+s1);<span class="hljs-comment">//xxx</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变中s2=&quot;</span>+s2);<span class="hljs-comment">//kkk666</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变中sb1=&quot;</span>+sb1);<span class="hljs-comment">//QQQ999</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;改变中sb2=&quot;</span>+sb2);<span class="hljs-comment">//JJJ777</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/11/05/Java%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB/qw.png" alt="qw"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-title">stringReplace</span><span class="hljs-params">(<span class="hljs-keyword">String</span> <span class="hljs-built_in">text</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">text</span>.replace(<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StringBuffer <span class="hljs-title">bufferReplace</span><span class="hljs-params">(StringBuffer <span class="hljs-built_in">text</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">text</span>.append(<span class="hljs-string">&quot;c&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span> args[])</span> </span>&#123;<br><span class="hljs-keyword">String</span> textString = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>StringBuffer textBuffer = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;java&quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>(stringReplace(textString) + bufferReplace(textBuffer));<br>System.out.<span class="hljs-built_in">println</span>(textString + textBuffer);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">结果输出：</span><br><span class="hljs-comment">Lavajavac</span><br><span class="hljs-comment">javajavac</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Object</tag>
      
      <tag>包装类</tag>
      
      <tag>System</tag>
      
      <tag>Runtime</tag>
      
      <tag>String</tag>
      
      <tag>StringBuilder</tag>
      
      <tag>StringBuffer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java继承与包访问权限</title>
    <link href="/2019/11/05/Java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8C%85%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"/>
    <url>/2019/11/05/Java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8C%85%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h3 id="Java继承与包访问权限"><a href="#Java继承与包访问权限" class="headerlink" title="Java继承与包访问权限"></a>Java继承与包访问权限</h3><p><img src="/2019/11/05/Java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8C%85%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/jicheng.png" alt="jicheng"></p><p><img src="/2019/11/05/Java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8C%85%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/override.png" alt="override"></p><p><img src="/2019/11/05/Java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8C%85%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/cp.png" alt="java"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package cn.kongwei_liao.Inheritance;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> pubstr=<span class="hljs-string">&quot;Public Father String!\n&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> pristr=<span class="hljs-string">&quot;private Father String!\n&quot;</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">String</span> prostr=<span class="hljs-string">&quot;protected Father String!&quot;</span>;<br><br><span class="hljs-keyword">protected</span> Father_innerClass fif=<span class="hljs-keyword">new</span> Father_innerClass();<br><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;什么时候执行？Father类加载到内存的时候&quot;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getPubstr</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> pubstr;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setPubstr</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> pubstr</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.pubstr = pubstr;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getPristr</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> pristr;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setPristr</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> pristr</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.pristr = pristr;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getProstr</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> prostr;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setProstr</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> prostr</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.prostr = prostr;<br>&#125;<br><span class="hljs-keyword">public</span> Father_innerClass <span class="hljs-function"><span class="hljs-title">getFif</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> fif;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setFif</span>(<span class="hljs-params">Father_innerClass fif</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.fif = fif;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func1</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;private Father function 1!\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> long <span class="hljs-function"><span class="hljs-title">func2</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;public Father function 2!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func3</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;protected Father function 3!\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father_innerClass</span></span>&#123;<span class="hljs-comment">//Inner Class</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> pubstr=<span class="hljs-string">&quot;Public String!&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> pristr=<span class="hljs-string">&quot;private String!&quot;</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">String</span> prostr=<span class="hljs-string">&quot;protected String!&quot;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func1</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;private Father_innerClass_function 1!\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func2</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;public Father_innerClass_function 2!\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func3</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;protected Father_innerClass_function 3!\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//public class Father_fake&#123;</span><br><span class="hljs-comment">////Error:The public type Father_fake must be defined in its own file</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//private class Father_infile&#123;</span><br><span class="hljs-comment">////Error:Illegal modifier for the class Father_infile; only public, abstract &amp; final are permitted</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//protected class Father_protected_infile() &#123;</span><br><span class="hljs-comment">////Error:Illegal modifier for the class Father_protected_infile; only public, abstract &amp; final are permitted</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father_abstract_inOfile</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> pubstr=<span class="hljs-string">&quot;Public String!&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> pristr=<span class="hljs-string">&quot;private String!&quot;</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">String</span> prostr=<span class="hljs-string">&quot;protected String!&quot;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func1</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;private function 1!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func2</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;public function 2!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func3</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;protected function 3!&quot;</span>);<br>&#125;<br><span class="hljs-comment">//private abstract void func4();//Error:The abstract method func5 in type Father_abstract_inOfile can only set a visibility modifier, one of public or protected</span><br><span class="hljs-comment">//public final abstract void func4();//Error:The abstract method func5 in type Father_abstract_inOfile can only set a visibility modifier, one of public or protected</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> func4();<br>&#125;<br><br>final <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father_final_inOfile</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> pubstr=<span class="hljs-string">&quot;Public String!&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> pristr=<span class="hljs-string">&quot;private String!&quot;</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">String</span> prostr=<span class="hljs-string">&quot;protected String!&quot;</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func1</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;private function 1!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func2</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;public function 2!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func3</span>(<span class="hljs-params"></span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;protected function 3!&quot;</span>);<br>&#125;<br><span class="hljs-comment">//public abstract void func4();//The abstract method func4 in type Father_final_inOfile can only be defined by an abstract class</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs awk">package cn.kongwei_liao.Inheritance;<br><br>public class Son extends Father&#123;<br><span class="hljs-regexp">//</span>public String pubstr = <span class="hljs-string">&quot;public Son String!\n&quot;</span>;<br><span class="hljs-regexp">//</span>private String pristr = <span class="hljs-string">&quot;private Son String!\n&quot;</span>;<br><span class="hljs-regexp">//</span>protected String prostr = <span class="hljs-string">&quot;protected Son String!\n&quot;</span>;<br><br>public String pubSonstr;<br>private String priSonstr;<span class="hljs-regexp">//</span>属性不赋初值null<br>protected String proSonstr;<br><br>public Son() &#123;<br><span class="hljs-regexp">//</span>super();<br>System.out.println(<span class="hljs-string">&quot;new创建对象的时候执行&quot;</span>);<br>pubstr=<span class="hljs-string">&quot;从父类继承来public的pubstr!\n&quot;</span>;<br>prostr=<span class="hljs-string">&quot;从父类继承来protected的prostr!\n&quot;</span>;<br><span class="hljs-regexp">//</span>pristr=<span class="hljs-string">&quot;从父类继承不来private的pristr!\n&quot;</span>;<span class="hljs-regexp">//</span>Error:The field Father.pristr is not visible<br><br>pubSonstr=super.pubstr;<br><span class="hljs-regexp">//</span>priSonstr=super.pristr;<span class="hljs-regexp">//</span>Error:The field Father.pristr is not visible<br>proSonstr=super.prostr;<br><br>System.out.println(<span class="hljs-string">&quot;priSonstr初始化：&quot;</span> + priSonstr);<br>&#125;<br>public Son(String str)&#123;<br>this();<br><span class="hljs-regexp">//</span>super();<span class="hljs-regexp">//</span>ErrorConstructor call must be the first statement <span class="hljs-keyword">in</span> a constructor<br><span class="hljs-regexp">//</span>从上面两行代码看出this和super调用构造方法同时只能存在一个<br>&#125;<br>&#123;<br><br><span class="hljs-regexp">//</span>this();<span class="hljs-regexp">//</span>Error:Constructor call must be the first statement <span class="hljs-keyword">in</span> a constructor<br>System.out.println(<span class="hljs-string">&quot;什么时候执行？Son类加载到内存的时候&quot;</span>);<br>&#125;<br><br>@Override<br>public long func2() &#123;<br>System.out.println(<span class="hljs-string">&quot;重写父类继承来的public的func2()方法！\n&quot;</span>);<br>return <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-regexp">//</span>@Override<br><span class="hljs-regexp">//</span>public int func2() &#123;<span class="hljs-regexp">//</span>Error:The return type is incompatible with Father.func2()<br><span class="hljs-regexp">//</span>System.out.println(<span class="hljs-string">&quot;重写父类继承来的public的func2()方法！\n&quot;</span>);<br><span class="hljs-regexp">//</span>return <span class="hljs-number">0</span>;<br><span class="hljs-regexp">//</span>&#125;<br><span class="hljs-regexp">//</span>在JAVA中，可以在同一个类中存在多个函数，函数名称相同但参数列表不同（参数的数量不同、或数量相同而类型和次序不同，以方便JVM区分到底调用哪个函数）。这就是函数的重载（overlording）。这是类的多态性表现之一。<br><br><br><span class="hljs-regexp">//</span>“重载”不同于“重写”<br><span class="hljs-regexp">//</span>“重写（覆盖）”概念存在于继承关系中，子类可继承父类中的方法而不需要单独编辑，这提供便捷化。但有的时侯，子类不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写。<br><span class="hljs-regexp">//</span>父类中存在一个函数，子类中也存在一个同名函数，在了类中对函数重新编辑，做得更具体化。<br><span class="hljs-regexp">//</span>重写的规则：<br><span class="hljs-regexp">//</span><span class="hljs-number">1</span>、在子类中可以根据需要对从父类中继承来的方法进行重写。<br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>、重写的方法和被重写的方法必须具有相同方法名称、参数列表和返回类型。<br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>、重写方法不能使用比被重写的方法更严格的访问权限。<br>public void func2(String str) &#123;<br>System.out.println(<span class="hljs-string">&quot;重写父类继承来的public的func2()方法！\n&quot;</span>);<br>&#125;<br><br><br>public static void main(String[]args) &#123;<br><br>Son son=new Son();<span class="hljs-regexp">//</span>Father和Son类先后加载进内存，然后创建Son实例<br>Default dft=new Default();<br><br>System.out.print(son.pubstr);<br><span class="hljs-regexp">//</span>System.out.print(son.pristr);<span class="hljs-regexp">//</span>Error:The field Father.pristr is not visible<br>System.out.print(son.prostr);<br><br><span class="hljs-regexp">//</span>son.func1();<span class="hljs-regexp">//</span>Error:The method func1() from the type Father is not visible<br>son.func2();<br>son.func3();<br><br><span class="hljs-regexp">//</span>son.fif.func1();<span class="hljs-regexp">//</span>Error:The method func1() from the type Father_innerClass is not visible<br>son.fif.func2();<br>son.fif.func3();<br><br>System.out.println(son.getProstr());<span class="hljs-regexp">//</span>打印：从父类继承来protected的prostr!<br><br>&#125;<br>&#125;<br><br><br>class InhDefault extends Default&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> cn.kongwei_liao.Inheritance;<br><br><span class="hljs-keyword">class</span> <span class="hljs-keyword">Default</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">package cn.kongwei_liao.InhDef;<br><span class="hljs-regexp">//im</span>port cn.kongwei_liao.Inheritance.*;<br><br><span class="hljs-regexp">//</span>public class InhDef extends cn.kongwei_liao.Inheritance.Default&#123;<span class="hljs-regexp">//</span>Error:The type cn.kongwei_liao.Inheritance.Default is not visible<br><span class="hljs-regexp">//</span><br><span class="hljs-regexp">//</span>&#125;<br><br><span class="hljs-regexp">//</span>public class InhDef extends cn.kongwei_liao.Inheritance.Father&#123;<br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>OK<br><span class="hljs-regexp">//</span>&#125;<br>public class InhDef extends cn.kongwei_liao.Inheritance.Son&#123;<br><span class="hljs-regexp">//</span>Ok<br>&#125;<br><br><span class="hljs-regexp">//</span>public class InhDef extends cn.kongwei_liao.Inheritance.InhDefault&#123;<br><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span>The type cn.kongwei_liao.Inheritance.InhDefault is not visible，类InhDefault是在Son.java中编写的default类<br><span class="hljs-regexp">//</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承的注意事项："><a href="#继承的注意事项：" class="headerlink" title="继承的注意事项："></a>继承的注意事项：</h3><p>可以重复利用代码</p><p>非私有的字段（非private字段）和方法可以被继承到  </p><p>广义上来说,私有的字段… 是可以被继承到的，同过get、set方法</p><p>Java中类的继承只能够是单继承(一个类只能够有一个直接父类) 一个人只能够有一个亲爹  </p><p>可以支持多重继承(多层级的继承), 一个类可以有子类,子类还可以子类… 子子孙孙无穷尽也…</p><p>每一个类都有一个直接父类,如果没有看到显示的继承代码,那么就隐式继承就Object</p><p>子类覆写了父类的方法,子类中还有(还可以调用)父类中的方法吗?        <strong>super</strong></p><blockquote><p>@Override注解：</p><p>当注释用，方便阅读；<br>    提高可读性；<br>    让编译器执行检查方法的正确性，要求该类必须重写父类的方法，即@Override下面的方法名是否是父类中所有的，如果没有则报错；</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>public void test()&#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br><span class="hljs-meta">@Override</span><br>public void test()&#123;&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：将@Override注释去掉的话，编译器会默认创建了新的方法</p></blockquote><p>阿里的Java开发手册中将加@Override 注解规定为强制，其相应说明如下：getObject()与 get0bject()的问题。一个是字母的O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错</p><pre><code>子类与父类有符合覆写规定的方法时，不加@Override 注解，也是能够覆写的，但是在实际使用时可能会产生一些疑问，到底是调用父类的方法还是子类覆写后的方法呢。而加上注解能增加代码的可读性，看到标签就知道这是从父类重写的方法，在调用时也将调用重写后的方法。并且使用@Override可以准确判断是否覆盖成功。</code></pre><p>子类要想覆写父类的方法，除了方法名和参数列表一样之外，还有以下的注意事项：</p><pre><code>1.被覆盖方法的访问控制级别可以不一样。     例如上例父类的show方法的访问级别为protected的，而子类覆盖的show方法访问级别则为public的。    但子类的访问级别必须要高于父类被覆盖方法的访问级别，如果父类是public的而子类是protected的则是错误的。private &lt; default &lt; public2.方法被定义为private或static或final的则不能被覆盖。3.方法的返回类型。    覆写的方法名称，返回类型，参数及类型必须一致。这里，返回类型其实可以不一样，但类型有限制。    基本数据类型做返回值时，重写方法返回值必须一致。    子类的返回类型可以是更具体的对象，例如可以将Employee类的返回类型改为Object也正确。而倒过来则错误。4.在方法调用时先会在子类中找覆写的方法，如果子类中没有则会在父类中去找。5.方法主体:方法覆写,子类方法和父类方法主体是否可以一样, 可以! 但是没有什么用!</code></pre><p><strong>Static静态变量</strong></p><p>变量分类：</p><ul><li>成员变量 ： 直接定义在类中</li><li>局部变量 ： 除了成员变量之外的都是局部变量（方法内部，形参，代码块中…）</li></ul><p>-————————-</p><p>另一种分类方式：是否有static</p><p>​                    是否有static修饰     生命周期（开始）      生命周期（开始）</p><ul><li>局部变量        没有               方法被调用的时候       方法执行完了</li><li>实例变量        没有                 创建对象的时候          对象被销毁</li><li>类变量              有                  类被加载的时候            类被卸载</li></ul><p>备注：</p><p>1、实例变量和类变量都是属于成员变量</p><p>2、类成员（一般指的是有static修饰的字段或者方法）</p><p>类中的成员（字段，方法，构造方法，内部类。。。）</p><p><strong>访问权限修饰符</strong></p><p>访问权限修饰符的作用</p><p>① 成员 ： private          默认不写（default）          protected             public </p><p>② 作用 ： 主要是控制类以及<strong>类中成员</strong>的访问权限</p><table><thead><tr><th></th><th>同类</th><th>同包</th><th>子类</th><th>公共</th></tr></thead><tbody><tr><td>private(私有)</td><td>√</td><td></td><td></td><td></td></tr><tr><td>默认不写</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected(受保护)</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public(公共)</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><blockquote><p>主要是修饰类中的成员（字段、方法、构造方法、及内部类）;</p><p>public  (默认default)  可以修饰类；</p><p>private   protedted   不能够修饰类（外部类）；</p><p>所有访问权限修饰符都不能够修饰局部变量。</p></blockquote><p><img src="/2019/11/05/Java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8C%85%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/%E8%AE%BF%E6%9D%83.png" alt="fq"></p><p>访问权限的总结</p><p>① 外部类只能够使用public 或者默认不写； 一般都是public</p><p>② 类中的成员（字段，构造方法，方法）以及内部类是可以使用任何一个</p><p>③ 理论上讲，我们在个成员设置权限的使用应该有小到大逐步放开（实际开发中很多是使用private 或者public）</p><p>④ 访问方式和访问权限不是同一个东西</p><p><strong>this</strong></p><p>① this 表示当前对象(当前对象的地址);</p><p>② 如何判断当前对象时谁? 看this所在的方法正在被谁调用;</p><p>③ 使用场景-1 : 通过this访问当前对象中的成员(字段,方法);</p><p>④ 使用场景-2 :本类中构造方法之间的相互调用;</p><p>this(); 调用本类中无参数的构造方法;</p><p>this(123); 调用本类中具有一个int参数的构造方法;</p><p>必须放在构造器  中的  第一句;</p><p>⑤ 把this(当前对象)看成是一个数据, 就可以作为值返回,作为参数传递…</p><p><strong>什么是super</strong></p><p>何时会用到super? </p><p>在子类中访问父类中的成员（字段 方法 构造方法）。</p><p>①super 表示父类对象;</p><p>②使用场景-1 : 通过super访问父类对象中的成员(非私有字段和方法);</p><p>③使用场景-2 :在子类的构造方法里面访问父类的构造方法; 最常用的!!!!!!!!!!!!</p><p>super(); 调用父类无参数的构造方法;</p><p>super(123); 调用父类中具有一个int参数的构造方法;</p><p>必须是子类的构造方法中的第一句;</p><p>④ 上面的所有访问方式都必须是在有访问权限的条件之下;</p><p>⑤ 一般都会给一个类提供一个公共的无参数的构造方法便于拓展（继承）</p><p>super特殊使用场景 </p><p>在子类中的构造方法里面存在默认(隐式)的调用父类的无参数构造方法(默认只会调用无参数的构造方法);</p><p>如果有显示调用父类的构造方法,那么默认调用就不存在了;</p><p>需要测试的点: </p><p>子类中多个有参数的,默认是否调用父类=无参数的</p><p>父类中有多个构造方法</p><p>父类中只有一个有参数的,没有无参数的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span>  <span class="hljs-symbol">A</span>&#123;<br>   <span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>;   <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">B</span>&#123;<br>   <span class="hljs-built_in">int</span> x =<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Test</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">B</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">A</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> pX()&#123;<br>      <span class="hljs-comment">//System.out.println(x);//Error:The field x is ambiguous</span><br>  System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">super</span>.x);<br>  System.<span class="hljs-keyword">out</span>.println(A.x);<br>   &#125;<br>   <span class="hljs-keyword">public</span> static <span class="hljs-built_in">void</span> main(String[] args) &#123;<br>      new Test().pX();<br>   &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">打印输出：</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>继承</tag>
      
      <tag>static</tag>
      
      <tag>访问权限（private、默认、protected和public）</tag>
      
      <tag>this</tag>
      
      <tag>super</tag>
      
      <tag>方法重载与重写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射之getInterfaces()方法</title>
    <link href="/2019/11/05/Java%E5%8F%8D%E5%B0%84%E4%B9%8BgetInterfaces-%E6%96%B9%E6%B3%95/"/>
    <url>/2019/11/05/Java%E5%8F%8D%E5%B0%84%E4%B9%8BgetInterfaces-%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式:代理模式</title>
    <link href="/2019/11/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/11/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="设计模式-代理模式"><a href="#设计模式-代理模式" class="headerlink" title="设计模式:代理模式"></a>设计模式:代理模式</h3><p>分别用静态代理模式和动态代理模式实现模拟车站售票，代理车站售票。</p><p><img src="/2019/11/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/dail.png" alt="dail"></p><p>1、代理模式理解</p><ul><li><p>现实示例理解：当我们需要买火车票时，可以直接到火车站购买，可能不太便利，也可以去找附近的火车票代售点，让代售点帮我们去火车站购买。</p></li><li><p>Java中的解释：</p><ul><li>我们在调用一个类中的方法时，此时，可能需要对此方法的功能有所推展，但是并不想改变原有的封装。</li><li>此时，就是代理类进行对此方法进行功能的扩展，之后由代理类去调用目标方法。</li><li>如果不需要拓展功能，不使用代理类就可以了。</li></ul></li><li><p>代理模式涉及到四个要素：</p><ul><li>调用者：歌迷、合作商等；</li><li>代理对象：歌星助理；</li><li>目标对象（被代理对象）：歌星；</li><li>抽象对象：代理对象和目标对象都共有接口，保证代理对象和真实对象都有相应的功能，对应例子中歌星唱歌前可能需要和其他人谈合作，还要布置场地，唱歌后还要收钱等等由助理负责的事情。</li></ul></li></ul><p>2、静态代理实现：</p><ul><li>创建接口Subject，接口中创建sell()方法；</li><li>创建被代理类Station，实现Subject接口，实现sell方法；</li><li>创建代理类Proxy，实现Subject接口，属性为Station对象，实现sell方法；</li><li>创建购票者类User，创建buy()方法，调用Proxy对象的sell方法实现购票。</li></ul><p><img src="/2019/11/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/proxy.png" alt="pr"></p><p>3、动态代理实现：</p><ul><li>创建ProsyHandler代理处理类，实现由Java提供的对动态代理的支持的InvocationHandler接口，实现invoke()方法；（功能是在被代理类Station的sell()方法执行前后添加一些其它功能）</li><li>购票者类User中创建buy_dynamic()方法：<ul><li>创建Station对象station</li><li>创建ProxyHandler对象handler，调用构造方法时传入station对象作为参数；</li><li>调用<code>Java提供的Proxy类的静态方法</code>newProxyInstance()，生成代理对象proxy</li><li>调用proxy的sell()方法完成购票。</li></ul></li></ul><p>4、动态代理的特点：</p><ul><li>代理对象的生成是利用JDK的API，动态的在内存中构建代理对象（需要我们指定创建代理对象/目标对象实现的接口的类型）</li><li>于是，这里原有的方法在没有改变的情况下，对原来的方法进行了二次封装。有时候多个对象调用同一对象时，有着共同的需求，但是在共同需求里又有自己独特的需求，这时候这一部分独特的需求让代理类去处理。</li></ul><p><img src="/2019/11/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/dproxy.png" alt="dp"></p><p>技术分析</p><p>代理模式定义</p><p>静态代理模式</p><p>动态代理机制以及使用场景</p><p>代理模式实现售票功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sell</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Station</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tickets=<span class="hljs-number">10</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sell</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">if</span>(tickets&gt;<span class="hljs-number">0</span>) &#123;<br>tickets--;<br>System.out.println(<span class="hljs-string">&quot;购票成功，剩余车票&quot;</span>+tickets);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;购票失败&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span> </span>&#123;<br><span class="hljs-keyword">private</span> Subject station;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyProxy</span><span class="hljs-params">(Subject station)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.station=station;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sell</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;静态代理&quot;</span>);<br>station.sell();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.Pattern;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Object subject;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyHandler</span><span class="hljs-params">(Object subject)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.subject=subject;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy,Method method,Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;动态代理&quot;</span>);<br>method.invoke(subject, args);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs awk">package cn.kongwei_liao.Pattern;<br><br>import java.lang.reflect.Proxy;<span class="hljs-regexp">//</span>Java提供Proxy类<br><br>public class User &#123;<br><br><span class="hljs-regexp">//</span>目标对象<br>Subject station=new Station();<span class="hljs-regexp">//</span>Subject是Station实现的接口<br><br>public void buy() &#123;<br><span class="hljs-regexp">//</span>目标对象<br><span class="hljs-regexp">//</span>Subject station=new Station();<span class="hljs-regexp">//</span>Subject是Station实现的接口<br><br><span class="hljs-regexp">//</span>代理对象<br>Subject proxy=new MyProxy(station);<span class="hljs-regexp">//</span>MyProxy也实现了Subject接口<br><br>proxy.sell();<br>&#125;<br>public void buy_dynamic() &#123;<br><span class="hljs-regexp">//</span>目标对象<br><span class="hljs-regexp">//</span>Subject station=new Station();<br><br><span class="hljs-regexp">//</span>代理处理器对象<br>ProxyHandler handler=new ProxyHandler(station);<span class="hljs-regexp">//</span>ProxyHandler实现了InvocationHandler接口的invoke方法<br><br><span class="hljs-regexp">//</span>代理对象，代理Subject station对象<br><span class="hljs-regexp">//</span>Object java.lang.reflect.Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException<br><span class="hljs-regexp">//</span>station.getClass()<span class="hljs-regexp">//g</span>etClass() 返回此 Object 的运行时Class类对象<br><span class="hljs-regexp">//</span>station.getClass().getClassLoader()<span class="hljs-regexp">//</span>ClassLoader主要对类的请求提供服务，当JVM需要某类时，它根据名称向ClassLoader要求这个类，然后由ClassLoader返回 这个类的class对象。<br><span class="hljs-regexp">//</span>station.getClass().getInterfaces()<span class="hljs-regexp">//</span>获得这个对象所实现的接口<br>Subject proxy=(Subject)Proxy.newProxyInstance(station.getClass().getClassLoader(),station.getClass().getInterfaces(),handler);<br>proxy.sell();<br>&#125;<br>public static void main(String[] args) &#123;<br>User user=new User();<br>user.buy();<br>user.buy();<br>user.buy_dynamic();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2019/11/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/pattern.png" alt="pattern"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java:用dom4j解析RSS文件</title>
    <link href="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/"/>
    <url>/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="Java-用dom4j解析RSS文件"><a href="#Java-用dom4j解析RSS文件" class="headerlink" title="Java:用dom4j解析RSS文件"></a>Java:用dom4j解析RSS文件</h3><p>读取RSS存储在本机的符合RSS2.0标准格式要求的XML文件，逐条解析RSS文件中所有新闻项目并将新闻条目逐条的输出到控制台。</p><p><img src="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/example.png" alt="ex"></p><p>1、下载RSS文件：浏览器访问新浪体育<a href="http://rss.sina.com.cn/news/allnews/sports.xml%E4%B8%8B%E8%BD%BD%60(%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD%EF%BC%8C%E6%88%96%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8B%E6%BA%90%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E4%BF%9D%E5%AD%98)%60RSS%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%82">http://rss.sina.com.cn/news/allnews/sports.xml下载`(下载工具下载，或浏览器查看源代码复制粘贴保存)`RSS文件到本地。</a></p><p>2、采用dom4j解析Xml，获取dom4j依赖包，访问<a href="https://dom4j.github.io/%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%E3%80%82">https://dom4j.github.io/进行下载。</a></p><p><img src="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/dom4jdl.png" alt="dom"></p><p>3、创建工程，导入dom4j依赖包</p><p><img src="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/cj.png" alt="cj"></p><p>4、创建类，创建方法，用于实现RSS文件解析。</p><blockquote><p>（1）、读取XML文件，得到Document对象；</p><p>（2）、得到XML文档的根节点；</p><p>（3）、获得所需子节点；</p><p>（4）、获得结点内容并输出到控制台。</p></blockquote><h3 id="技术分析："><a href="#技术分析：" class="headerlink" title="技术分析："></a>技术分析：</h3><p>1、XML树结构</p><p>2、XML元素和属性</p><p>3、DOM4J解析XML</p><p><img src="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/XML%E7%BB%93%E6%9E%84.png" alt="dom"></p><p><img src="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/XML%E7%BB%93%E6%9E%842.png" alt="xm"></p><h3 id="项目完成结构"><a href="#项目完成结构" class="headerlink" title="项目完成结构"></a>项目完成结构</h3><p><img src="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/xj.png" alt="xj"></p><p><img src="/2019/11/04/Java-%E7%94%A8dom4j%E8%A7%A3%E6%9E%90RSS%E6%96%87%E4%BB%B6/xj2.png" alt="xj2"></p><p><strong>完整代码</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package cn.kongwei_liao.cnmb;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-built_in">File</span>;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParseRss</span> &#123;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> filePath=<span class="hljs-string">&quot;NewFile/sports.xml&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>ParseRss parseRss=<span class="hljs-keyword">new</span> ParseRss();<br>parseRss.parse();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parse</span><span class="hljs-params">()</span> </span>&#123;<br>Document doc=null;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//获取Xml文件</span><br><span class="hljs-built_in">File</span> fXml=<span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span>(filePath);<br><span class="hljs-comment">//判断文件是否存在</span><br><span class="hljs-keyword">if</span>(fXml.<span class="hljs-built_in">exists</span>()&amp;&amp;fXml.isFile()) &#123;<br><span class="hljs-comment">//使用Dom4j解析器</span><br>SAXReader reader=<span class="hljs-keyword">new</span> SAXReader();<br><span class="hljs-comment">//加载XML文件，得到Document对象</span><br>doc =reader.<span class="hljs-built_in">read</span>(fXml);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(DocumentException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>Element root=doc.getRootElement();<br>Element eChannel=root.element(<span class="hljs-string">&quot;channel&quot;</span>);<br>List&lt;Element&gt; itemList=eChannel.elements(<span class="hljs-string">&quot;item&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;itemList.<span class="hljs-built_in">size</span>();i++) &#123;<br>Element item = itemList.<span class="hljs-built_in">get</span>(i);<br><span class="hljs-comment">//获得内容结点</span><br><span class="hljs-keyword">String</span> title=item.elementText(<span class="hljs-string">&quot;title&quot;</span>).trim();<br><span class="hljs-keyword">String</span> author=item.elementText(<span class="hljs-string">&quot;author&quot;</span>).trim();<br><span class="hljs-keyword">String</span> pubDate=item.elementText(<span class="hljs-string">&quot;pubDate&quot;</span>).trim();<br><span class="hljs-keyword">String</span> category=item.elementText(<span class="hljs-string">&quot;category&quot;</span>).trim();<br><span class="hljs-keyword">String</span> description=item.elementText(<span class="hljs-string">&quot;description&quot;</span>).trim();<br><span class="hljs-comment">//输出到控制台</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;News:\n新闻标题：&quot;</span> + title +<br><span class="hljs-string">&quot;\n新闻作者：&quot;</span> + author + <span class="hljs-string">&quot;\n新闻板块：&quot;</span> + category + <br><span class="hljs-string">&quot;\n发布时间：&quot;</span>+pubDate + <span class="hljs-string">&quot;\n新闻描述：&quot;</span> + description + <br><span class="hljs-string">&quot;\n-----------&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>牛客剑指offer-替换空格</title>
    <link href="/2019/11/04/%E7%89%9B%E5%AE%A2%E5%89%91%E6%8C%87offer-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <url>/2019/11/04/%E7%89%9B%E5%AE%A2%E5%89%91%E6%8C%87offer-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>牛客剑指offer-数组</title>
    <link href="/2019/11/04/%E7%89%9B%E5%AE%A2%E5%89%91%E6%8C%87offer-%E6%95%B0%E7%BB%84/"/>
    <url>/2019/11/04/%E7%89%9B%E5%AE%A2%E5%89%91%E6%8C%87offer-%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><strong>题目描述</strong></h4><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//在下面中填充代码内容，完成题目求解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span>ean Find(<span class="hljs-built_in">int</span> target, <span class="hljs-built_in">int</span> [][] <span class="hljs-built_in">array</span>) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h4><h5 id="一、暴力求解"><a href="#一、暴力求解" class="headerlink" title="一、暴力求解"></a>一、暴力求解</h5><p>1、分析：挨个遍历数组，如果找到就返回true</p><p>2、代码：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span>ean Find(<span class="hljs-built_in">int</span> target, <span class="hljs-built_in">int</span> [][] <span class="hljs-built_in">array</span>) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">array</span>.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>].length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[i][j] == target)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、复杂度：</p><blockquote><p>时间复杂度：O(n^2)  </p><p>空间复杂度：O(1)</p></blockquote><h5 id="二、左下-右上元素遍历"><a href="#二、左下-右上元素遍历" class="headerlink" title="二、左下/右上元素遍历"></a>二、左下/右上元素遍历</h5><h6 id="1、分析"><a href="#1、分析" class="headerlink" title="1、分析"></a>1、分析</h6><ul><li>每一行都按照从左到右递增的顺序排序， </li><li>每一列都按照从上到下递增的顺序排序 </li></ul><p>改变个说法，即对于左下角的值 m，m 是该行最小的数，是该列最大的数<br>每次将 m 和目标值 target 比较：</p><ol><li>当 m &lt; target，由于 m 已经是该行最大的元素，想要更大只有从列考虑，取值右移一位 </li><li>当 m &gt; target，由于 m 已经是该列最小的元素，想要更小只有从行考虑，取值上移一位 </li><li>当 m = target，找到该值，返回 true </li></ol><p>用某行最小或某列最大与 target 比较，每次可剔除一整行或一整列</p><h6 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> Find(<span class="hljs-type">int</span> target, <span class="hljs-type">int</span> [][] <span class="hljs-keyword">array</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-keyword">rows</span> = <span class="hljs-keyword">array</span>.length;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">rows</span> == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-type">int</span> cols = <span class="hljs-keyword">array</span>[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">if</span>(cols == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            <br>        // 左下<br>        <span class="hljs-type">int</span> <span class="hljs-keyword">row</span> = <span class="hljs-keyword">rows</span><span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> col = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">row</span>&gt;=<span class="hljs-number">0</span> &amp;&amp; col&lt;cols)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">array</span>[<span class="hljs-keyword">row</span>][col] &lt; target)&#123;<br>                col++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">array</span>[<span class="hljs-keyword">row</span>][col] &gt; target)&#123;<br>                <span class="hljs-keyword">row</span><span class="hljs-comment">--;</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3、复杂度"><a href="#3、复杂度" class="headerlink" title="3、复杂度"></a>3、复杂度</h6><blockquote><p>时间复杂度：O(行高 + 列宽)<br>空间复杂度：O(1)</p></blockquote><h5 id="三、N行折半查找"><a href="#三、N行折半查找" class="headerlink" title="三、N行折半查找"></a>三、N行折半查找</h5><h6 id="1、分析-1"><a href="#1、分析-1" class="headerlink" title="1、分析"></a>1、分析</h6><p>也是很容易就能想到的方法，每一行都执行折半查找，持续N行，复杂度为O(N*logN) </p><h6 id="2、代码-1"><a href="#2、代码-1" class="headerlink" title="2、代码"></a>2、代码</h6><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span>ean Find(<span class="hljs-built_in">int</span> target, <span class="hljs-built_in">int</span> [][] <span class="hljs-built_in">array</span>) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">array</span>.length;i++)&#123;<span class="hljs-comment">//array.length为数组行数</span><br>            <span class="hljs-built_in">int</span> low=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">int</span> high=<span class="hljs-built_in">array</span>[i].length<span class="hljs-number">-1</span>;<span class="hljs-comment">//array[i].length第i行元素个数</span><br>            <span class="hljs-comment">//low--&gt;high</span><br>            <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>                <span class="hljs-built_in">int</span> mid=(low+high)/<span class="hljs-number">2</span>;<span class="hljs-comment">//每行元素有序，利用折半查找</span><br>                <span class="hljs-keyword">if</span>(target&gt;<span class="hljs-built_in">array</span>[i][mid])<br>                    low=mid+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&lt;<span class="hljs-built_in">array</span>[i][mid])<br>                    high=mid<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3、复杂度-1"><a href="#3、复杂度-1" class="headerlink" title="3、复杂度"></a>3、复杂度</h6><blockquote><p> O(N*logN) </p></blockquote><h5 id="四、十字分割法"><a href="#四、十字分割法" class="headerlink" title="四、十字分割法"></a>四、十字分割法</h5><p>（1）、简单的十字分割法</p><p>亲测可用，使用十字将数组等分为四个区域，中间交叉点用来判断，因为左上区域和右下区域必然冲突，所以二者必然可以排除一个，即每次至少可以排除1/4的数据，接着对剩下的三个区域进行递归操作，当然可以利用左上右下元素来判断是否落在区域内来进行优化，直到只有一个元素，递归层数为：logN，不优化的话最底层节点数为3^logN，优化后节点数会少很多，实测效率还算不错 </p><p>（2）、另一版本的十字分割法</p><p>与上一个类似，只不过这里先利用十字分割在主对角线方向上进行折半查找操作，操作结束后，终止点的左上区域与右下区域都可以排除，这样就只剩下左下、右上两个区域，然后再进行递归。感觉上效率会比上个版本好，不过这个我没有去实现验证</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//C++实现   简单的十字分割法</span><br><span class="hljs-keyword">class</span> Solution &#123;<br>public:<br>    <span class="hljs-built_in">bool</span> <span class="hljs-constructor">Find(<span class="hljs-params">int</span> <span class="hljs-params">target</span>, <span class="hljs-params">vector</span>&lt;<span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt; &gt; <span class="hljs-params">array</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>.size<span class="hljs-literal">()</span>==<span class="hljs-number">0</span><span class="hljs-operator"> || </span><span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.size<span class="hljs-literal">()</span>==<span class="hljs-number">0</span>)<br>            return <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            return find<span class="hljs-constructor">_by_ten_shape_divide(<span class="hljs-params">array</span>, <span class="hljs-params">target</span>, 0, 0, <span class="hljs-params">array</span>[0].<span class="hljs-params">size</span>()</span>-<span class="hljs-number">1</span>, <span class="hljs-built_in">array</span>.size<span class="hljs-literal">()</span>-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-built_in">bool</span> find<span class="hljs-constructor">_by_ten_shape_divide(<span class="hljs-params">vector</span>&lt;<span class="hljs-params">vector</span>&lt;<span class="hljs-params">int</span>&gt; &gt; &amp;<span class="hljs-params">datas</span>, <span class="hljs-params">int</span> <span class="hljs-params">target</span>, <span class="hljs-params">int</span> <span class="hljs-params">left</span>, <span class="hljs-params">int</span> <span class="hljs-params">top</span>, <span class="hljs-params">int</span> <span class="hljs-params">right</span>, <span class="hljs-params">int</span> <span class="hljs-params">bottom</span>)</span> &#123;<br>        <span class="hljs-comment">// 递归终止的条件：当区域被分割为只有一个元素</span><br>        <span class="hljs-keyword">if</span> (left==right<span class="hljs-operator"> &amp;&amp; </span>top==bottom) &#123;<br>            <span class="hljs-keyword">if</span> (datas<span class="hljs-literal">[<span class="hljs-identifier">top</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span><span class="hljs-operator"> == </span>target)<br>                return <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span> return <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 利用头尾数据进行优化：不在区域内的直接false，可以减少递归节点数量</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (datas<span class="hljs-literal">[<span class="hljs-identifier">top</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>&gt;target<span class="hljs-operator"> || </span>datas<span class="hljs-literal">[<span class="hljs-identifier">bottom</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>&lt;target)<br>            return <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 水平、竖直方向各自等分</span><br>            <span class="hljs-built_in">int</span> cHoriz = (left + right)<span class="hljs-operator"> / </span><span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">int</span> cVertic = (top + bottom)<span class="hljs-operator"> / </span><span class="hljs-number">2</span>;<br> <br>            <span class="hljs-keyword">if</span> (datas<span class="hljs-literal">[<span class="hljs-identifier">cVertic</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">cHoriz</span>]</span><span class="hljs-operator"> == </span>target)<br>                return <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 目标大于分割点则排除左上区域，对右下进行递归</span><br>                <span class="hljs-keyword">if</span> (datas<span class="hljs-literal">[<span class="hljs-identifier">cVertic</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">cHoriz</span>]</span> &lt; target) &#123;<br>                    <span class="hljs-keyword">if</span> (cHoriz&lt;right<span class="hljs-operator"> &amp;&amp; </span>cVertic&lt;bottom &amp;&amp;<br>                        find<span class="hljs-constructor">_by_ten_shape_divide(<span class="hljs-params">datas</span>, <span class="hljs-params">target</span>, <span class="hljs-params">cHoriz</span>+1, <span class="hljs-params">cVertic</span>+1, <span class="hljs-params">right</span>, <span class="hljs-params">bottom</span>)</span>)<br>                        return <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-comment">// 否则排除右下区域，对左上进行递归</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((left&lt;cHoriz<span class="hljs-operator"> || </span>top&lt;cVertic) &amp;&amp;<br>                         find<span class="hljs-constructor">_by_ten_shape_divide(<span class="hljs-params">datas</span>, <span class="hljs-params">target</span>, <span class="hljs-params">left</span>, <span class="hljs-params">top</span>, <span class="hljs-params">cHoriz</span>, <span class="hljs-params">cVertic</span>)</span>)<br>                    return <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">// 对右上区域进行递归</span><br>                <span class="hljs-keyword">if</span> (cHoriz &lt; right &amp;&amp;<br>                    find<span class="hljs-constructor">_by_ten_shape_divide(<span class="hljs-params">datas</span>, <span class="hljs-params">target</span>, <span class="hljs-params">cHoriz</span>+1, <span class="hljs-params">top</span>, <span class="hljs-params">right</span>, <span class="hljs-params">cVertic</span>)</span>)<br>                    return <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">// 对左下区域进行递归</span><br>                <span class="hljs-keyword">if</span> (cVertic &lt; bottom &amp;&amp;<br>                    find<span class="hljs-constructor">_by_ten_shape_divide(<span class="hljs-params">datas</span>, <span class="hljs-params">target</span>, <span class="hljs-params">left</span>, <span class="hljs-params">cVertic</span>+1, <span class="hljs-params">cHoriz</span>, <span class="hljs-params">bottom</span>)</span>)<br>                    return <span class="hljs-literal">true</span>;<br>                return <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java反射生成HTML</title>
    <link href="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/"/>
    <url>/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/</url>
    
    <content type="html"><![CDATA[<h3 id="Java反射生成HTML文件"><a href="#Java反射生成HTML文件" class="headerlink" title="Java反射生成HTML文件"></a>Java反射生成HTML文件</h3><h4 id="1、分析"><a href="#1、分析" class="headerlink" title="1、分析"></a>1、分析</h4><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/xq.png" alt="xq"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/xq2.png" alt="xq2"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/xq3.png" alt="xq3"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/xq4.png" alt="xq4"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/xq5.png" alt="xq5"></p><h4 id="2、设计思路"><a href="#2、设计思路" class="headerlink" title="2、设计思路"></a>2、设计思路</h4><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sjsl.png" alt="sjsl"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sjsl2.png" alt="sjsl2"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sjsl3.png" alt="sjsl3"></p><h4 id="3、技术分析"><a href="#3、技术分析" class="headerlink" title="3、技术分析"></a>3、技术分析</h4><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/jsfx.png" alt="jsfx"></p><h4 id="4、实现步骤"><a href="#4、实现步骤" class="headerlink" title="4、实现步骤"></a>4、实现步骤</h4><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx.png" alt="sx"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx2.png"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx3.png" alt="sx3"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx4.png" alt="sx4"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx5.png" alt="sx5"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx6.png" alt="sx6"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx7.png" alt="sx7"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx8.png" alt="sx8"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx9.png" alt="sx9"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx10.png" alt="sx10"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx11.png" alt="sx11"></p><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/sx12.png" alt="sx12"></p><h3 id="包package-cn-kongwei-liao-cnmb-下创建Person类"><a href="#包package-cn-kongwei-liao-cnmb-下创建Person类" class="headerlink" title="包package cn.kongwei_liao.cnmb;下创建Person类"></a>包package cn.kongwei_liao.cnmb;下创建Person类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package cn.kongwei_liao.cnmb;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> com.annotation.html.*;<br><br><span class="hljs-meta">@HtmlPage</span>(value=<span class="hljs-string">&quot;person.html&quot;</span>,title=<span class="hljs-string">&quot;个人信息&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br><span class="hljs-meta">@HtmlField</span>(label=<span class="hljs-string">&quot;姓名&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><br><span class="hljs-meta">@HtmlField</span>(label=<span class="hljs-string">&quot;手机&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> mobiles;<br><br><span class="hljs-meta">@HtmlField</span>(label=<span class="hljs-string">&quot;年龄&quot;</span>)<br><span class="hljs-keyword">private</span> int age;<br><br><span class="hljs-meta">@HtmlField</span>(label=<span class="hljs-string">&quot;出生年月&quot;</span>,format=<span class="hljs-string">&quot;formatBirth&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">Date</span> birth;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getMobiles</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> mobiles;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setMobiles</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> mobiles</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.mobiles = mobiles;<br>&#125;<br><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setAge</span>(<span class="hljs-params">int age</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">Date</span> <span class="hljs-function"><span class="hljs-title">getBirth</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> birth;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setBirth</span>(<span class="hljs-params"><span class="hljs-built_in">Date</span> birth</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.birth = birth;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">formatBirth</span>(<span class="hljs-params"></span>)</span> &#123;<br>SimpleDateFormat sdf=<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;y年M月d日&quot;</span>);<br><span class="hljs-keyword">return</span> sdf.format(<span class="hljs-built_in">this</span>.birth);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setBirth</span>(<span class="hljs-params">int y,int m,int d</span>)</span> &#123;<br>Calendar calendar=Calendar.getInstance();<br>calendar.set(y, m-<span class="hljs-number">1</span>, d);<br><span class="hljs-built_in">this</span>.birth=calendar.getTime();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="包package-com-annotation-html-下创建HtmlPage注解类和HtmlField注解类"><a href="#包package-com-annotation-html-下创建HtmlPage注解类和HtmlField注解类" class="headerlink" title="包package com.annotation.html;下创建HtmlPage注解类和HtmlField注解类"></a>包package com.annotation.html;下创建HtmlPage注解类和HtmlField注解类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 设计思路：</span><br><span class="hljs-comment"> * 1、通过自定义注解类，标注出页面的名称，编码规范，以及那些字段需要用来显示，每一个字段的名称和值</span><br><span class="hljs-comment"> * 2、通过Java中的反射机制，来动态获得类中的注解类对象</span><br><span class="hljs-comment"> * 3、通过读取注解类对象中的属性值作为生成HTML文件的参数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 自定义注解类</span><br><span class="hljs-comment"> * 注解页面信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.annotation.html;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.ElementType.TYPE;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-meta">@Target(TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> HtmlPage &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">lang</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;zh&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">charset</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;utf-8&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">title</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 设计思路：</span><br><span class="hljs-comment"> * 1、通过自定义注解类，标注出页面的名称，编码规范，以及那些字段需要用来显示，每一个字段的名称和值</span><br><span class="hljs-comment"> * 2、通过Java中的反射机制，来动态获得类中的注解类对象</span><br><span class="hljs-comment"> * 3、通过读取注解类对象中的属性值作为生成HTML文件的参数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 自定义注解类</span><br><span class="hljs-comment"> * 注解类中哪些字段在页面显示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.annotation.html;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Inherited;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD,ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> HtmlField &#123;<br><span class="hljs-comment">//public String value() default &quot;&quot;;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">label</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">format</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="包package-com-annotation-html-下创建HtmlGenerator类用于解析注解，生成html页面"><a href="#包package-com-annotation-html-下创建HtmlGenerator类用于解析注解，生成html页面" class="headerlink" title="包package com.annotation.html;下创建HtmlGenerator类用于解析注解，生成html页面"></a>包package com.annotation.html;下创建HtmlGenerator类用于解析注解，生成html页面</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 用来读取实体类对象中的注解信息，生成HTML</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.annotation.html;<br><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">import</span> cn.kongwei_liao.cnmb.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> HtmlGenerator &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> createDetailPage(Object obj)&#123;<br><span class="hljs-comment">//1、得到对象的类型对象</span><br><span class="hljs-keyword">Class</span>&lt;?&gt; clz=obj.getClass();<span class="hljs-comment">//反射API，获得对象类型</span><br><span class="hljs-comment">//获取实例对象对应的Class对象  有三种方法</span><br><span class="hljs-comment">//Class&lt;?&gt; clz1=null;//通过类Class的静态方法forName()</span><br><span class="hljs-comment">//try &#123;</span><br><span class="hljs-comment">//clz1=Class.forName(&quot;cn.kongwei_liao.cnmb.Person&quot;);</span><br><span class="hljs-comment">//&#125; catch (ClassNotFoundException e1) &#123;</span><br><span class="hljs-comment">//// TODO Auto-generated catch block</span><br><span class="hljs-comment">//e1.printStackTrace();</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//Class&lt;?&gt; clz2=Person.class;//直接给出对象类文件名</span><br>assert(clz!=<span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">//2、通过类型得到当前类中的HtmlPage注解类</span><br>HtmlPage htmlPage=clz.getAnnotation(HtmlPage.<span class="hljs-keyword">class</span>);<span class="hljs-comment">//反射API，获得注解对象，获取某个类型的注解</span><br><span class="hljs-comment">//Annotation[] htmlPages=clz.getDeclaredAnnotations();//获取声明的注解（不包括父类中被Inherited修饰的注解）</span><br>assert(htmlPage!=<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">//读取HtmlPage对象中的属性</span><br><span class="hljs-comment">//System.out.println(htmlPage.value());</span><br><br><span class="hljs-comment">//3、读取htmlPage中的value属性，创建html文件</span><br><span class="hljs-keyword">File</span> page =<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(htmlPage.value());<br><span class="hljs-keyword">if</span>(!page.exists()) &#123;<br><span class="hljs-comment">//System.out.println(1);</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//System.out.println(2);</span><br>assert(page.createNewFile()==<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">//System.out.println(3);</span><br>&#125;<span class="hljs-keyword">catch</span>(IOException e) &#123;<br><span class="hljs-comment">//System.out.println(4);</span><br>e.printStackTrace();<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//4、创建文件BufferWriter对象</span><br>BufferedWriter writer=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><br><span class="hljs-comment">//5、向文件中写html标签</span><br>writer=<span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(page));<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>);<br>writer.<span class="hljs-keyword">write</span>(String.format(<span class="hljs-string">&quot;&lt;html lang=\&quot;%s\&quot;&gt;\n&quot;</span>,htmlPage.lang()));<br><br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;head&gt;\n&quot;</span>);<br>writer.<span class="hljs-keyword">write</span>(String.format(<span class="hljs-string">&quot;&lt;meta charset=\&quot;%s\&quot;&gt;\n&quot;</span>,htmlPage.charset()));<br>writer.<span class="hljs-keyword">write</span>(String.format(<span class="hljs-string">&quot;&lt;title&gt;%s&lt;/title&gt;\n&quot;</span>,htmlPage.title()));<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/head&gt;\n&quot;</span>);<br><br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span>);<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;table&gt;\n&quot;</span>);<br><br>Field[] fields=clz.getDeclaredFields();<span class="hljs-comment">//反射API，获得类声明的所有字段</span><br><span class="hljs-keyword">for</span>(Field field:fields) &#123;<br>HtmlField htmlField=field.getDeclaredAnnotation(HtmlField.<span class="hljs-keyword">class</span>);<br><br><span class="hljs-keyword">if</span>(htmlField==<span class="hljs-keyword">null</span>)<br><span class="hljs-keyword">continue</span>;<br>field.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 将此对象的可访问标志设置为指示的布尔值，</span><br><span class="hljs-comment"> * 值true表示反射对象在使用时应禁止Java语言访问检查，</span><br><span class="hljs-comment"> * false值表示反射对象应强制执行Java语言访问检查。</span><br><span class="hljs-comment"> */</span><br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>);<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>);<br>writer.<span class="hljs-keyword">write</span>(htmlField.label());<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br><br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>);<br><br><span class="hljs-comment">//try &#123;</span><br><span class="hljs-comment">//Object value=field.get(obj);</span><br><span class="hljs-comment">//writer.write(value.toString());</span><br><span class="hljs-comment">//&#125;catch(IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class="hljs-comment">//e.printStackTrace();</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//注释内容的改造</span><br><br>Object value=field.get(obj);<br>String fmt=htmlField.format();<br><span class="hljs-keyword">if</span>(fmt.length()&gt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><br>Method method=clz.getMethod(fmt);<span class="hljs-comment">//反射API，获得某一个方法对象</span><br>assert(method!=<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">try</span> &#123;<br>writer.<span class="hljs-keyword">write</span>(method.invoke(obj).toString());<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException | IllegalArgumentException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(NoSuchMethodException | SecurityException | InvocationTargetException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>writer.<span class="hljs-keyword">write</span>(value.toString());<br>&#125;<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);<br>&#125;<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/table&gt;\n&quot;</span>);<br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span>);<br><br>writer.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(IOException | IllegalArgumentException | IllegalAccessException e) &#123;<br>e.printStackTrace();<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>writer.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="包package-cn-kongwei-liao-cnmb-创建Test测试类"><a href="#包package-cn-kongwei-liao-cnmb-创建Test测试类" class="headerlink" title="包package cn.kongwei_liao.cnmb;创建Test测试类"></a>包package cn.kongwei_liao.cnmb;创建Test测试类</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> cn.kongwei_liao.cnmb;<br><br><span class="hljs-keyword">import</span> com.annotation.html.HtmlGenerator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args)&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>Person person=<span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>();<br>person.setAge(<span class="hljs-number">20</span>);<br>person.setBirth(<span class="hljs-number">2008</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>);<br>person.setMobiles(<span class="hljs-string">&quot;12345678901&quot;</span>);<br>person.setName(<span class="hljs-string">&quot;王宝强&quot;</span>);<br><br>HtmlGenerator generator=<span class="hljs-keyword">new</span> <span class="hljs-type">HtmlGenerator</span>();<br>generator.createDetailPage(person);<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="运行Test生成的html代码"><a href="#运行Test生成的html代码" class="headerlink" title="运行Test生成的html代码"></a>运行Test生成的html代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王宝强<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>12345678901<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>出生年月<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2008年12月4日<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/04/Java%E5%8F%8D%E5%B0%84%E7%94%9F%E6%88%90HTML/jieguo.png" alt="jieguo"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js-III</title>
    <link href="/2019/11/02/Vue-js-III/"/>
    <url>/2019/11/02/Vue-js-III/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-III"><a href="#Vue-js-III" class="headerlink" title="Vue.js - III"></a>Vue.js - III</h1><h2 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h3></li></ul><ol><li>使用 Vue.extend 配合 Vue.component 方法：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var <span class="hljs-keyword">login</span> = Vue.extend(&#123;<br>      <span class="hljs-keyword">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;登录&lt;/h1&gt;&#x27;</span><br>    &#125;);<br>Vue.component(<span class="hljs-string">&#x27;login&#x27;</span>, <span class="hljs-keyword">login</span>);<br></code></pre></td></tr></table></figure></li><li>直接使用 Vue.component 方法：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Vue.component(<span class="hljs-string">&#x27;register&#x27;</span>, &#123;<br>      <span class="hljs-keyword">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;注册&lt;/h1&gt;&#x27;</span><br>    &#125;);<br></code></pre></td></tr></table></figure></li><li>将模板字符串，定义到script标签种：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tmpl&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;x-template&quot;</span>&gt;</span><br><span class="handlebars"><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>同时，需要使用 Vue.component 来定义组件：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Vue.component(<span class="hljs-string">&#x27;account&#x27;</span>, &#123;<br>  <span class="hljs-keyword">template</span>: <span class="hljs-string">&#x27;#tmpl&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p></blockquote></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 如果要使用组件，直接，把组件的名称，以 HTML 标签的形式，引入到页面中，即可 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">register</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">register</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tmpl</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tmpl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3><ol><li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.component(<span class="hljs-string">&#x27;account&#x27;</span>, &#123;<br>      template: <span class="hljs-string">&#x27;#tmpl&#x27;</span>,<br>      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          msg: <span class="hljs-string">&#x27;大家好！&#x27;</span><br>        &#125;<br>      &#125;,<br>      methods:&#123;<br>        <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>          alert(<span class="hljs-string">&#x27;点击了登录按钮&#x27;</span>);<br>        &#125;<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure></li><li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li></ol><h3 id="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"><a href="#【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象" class="headerlink" title="【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象"></a>【重点】为什么组件中的data属性必须定义为一个方法并返回一个对象</h3><ol><li>通过计数器案例演示</li></ol><h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h3><ol><li>组件实例定义方式：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;&#125;,</span><br><span class="xml">      methods: &#123;&#125;,</span><br><span class="xml">      components: &#123; // 定义子组件</span><br><span class="xml">        account: &#123; // account 组件</span><br><span class="xml">          template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是Account组件</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;, // 在这里使用定义的子组件</span><br><span class="xml">          components: &#123; // 定义子组件的子组件</span><br><span class="xml">            login: &#123; // login 组件</span><br><span class="xml">              template: &quot;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是登录组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&quot;</span><br><span class="xml">            &#125;</span><br><span class="xml">          &#125;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>引用组件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">account</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">account</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mycom3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom3</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;login&gt;&lt;/login&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mycom3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 在 被控制的 #app 外面,使用 template 元素,定义组件的HTML模板结构  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tmpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是通过 template 元素,在外部定义的组件结构,这个方式,有代码的只能提示和高亮<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>好用,不错!<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tmpl2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是私有的 login 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;mycom3&#x27;</span>, &#123;</span><br><span class="javascript">      template: <span class="hljs-string">&#x27;#tmpl&#x27;</span></span><br>    &#125;)<br><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br><br><span class="javascript">    <span class="hljs-keyword">var</span> vm2 = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app2&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;&#125;,<br>      filters: &#123;&#125;,<br>      directives: &#123;&#125;,<br><span class="javascript">      components: &#123; <span class="hljs-comment">// 定义实例内部私有组件的</span></span><br>        login: &#123;<br><span class="javascript">          template: <span class="hljs-string">&#x27;#tmpl2&#x27;</span></span><br>        &#125;<br>      &#125;,<br><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeCreate</span>(<span class="hljs-params"></span>)</span> &#123; &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123; &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeMount</span>(<span class="hljs-params"></span>)</span> &#123; &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123; &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeUpdate</span>(<span class="hljs-params"></span>)</span> &#123; &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span> &#123; &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> &#123; &#125;,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">destroyed</span>(<span class="hljs-params"></span>)</span> &#123; &#125;</span><br>    &#125;)<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol><li>页面结构：<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;toggle&quot;</span> @click=<span class="hljs-string">&quot;flag=!flag&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">my</span>-com1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-com1&gt;<br>    &lt;<span class="hljs-keyword">my</span>-com2 v-<span class="hljs-keyword">else</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;&lt;/<span class="hljs-keyword">my</span>-com2&gt;<br>  &lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure></li><li>Vue实例定义：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;myCom1&#x27;</span>, &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>奔波霸<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;)<br><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;myCom2&#x27;</span>, &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>霸波奔<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;)<br><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        flag: <span class="hljs-literal">true</span></span><br>      &#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;flag=true&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;flag=false&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">login</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">register</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">register</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;login&#x27;</span>, &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>登录组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;)<br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;register&#x27;</span>, &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>注册组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;)<br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        flag: <span class="hljs-literal">false</span></span><br>      &#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol><li>组件实例定义方式：<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">// 登录组件</span><br>  <span class="hljs-keyword">const</span> login = Vue.extend(&#123;<br>    template: `&lt;<span class="hljs-keyword">div</span>&gt;<br>      &lt;h3&gt;登录组件&lt;/h3&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;`<br>  &#125;);<br>  Vue.component(<span class="hljs-string">&#x27;login&#x27;</span>, login);<br><br>  <span class="hljs-comment">// 注册组件</span><br>  <span class="hljs-keyword">const</span> register = Vue.extend(&#123;<br>    template: `&lt;<span class="hljs-keyword">div</span>&gt;<br>      &lt;h3&gt;注册组件&lt;/h3&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;`<br>  &#125;);<br>  Vue.component(<span class="hljs-string">&#x27;register&#x27;</span>, register);<br><br>  <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span><br>  <span class="hljs-built_in">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    data: &#123; comName: <span class="hljs-string">&#x27;login&#x27;</span> &#125;,<br>    methods: &#123;&#125;<br>  &#125;);<br></code></pre></td></tr></table></figure></li><li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;comName=&#x27;login&#x27;&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;comName=&#x27;register&#x27;&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>添加切换样式：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  .v-enter,<br>  .v-leave-to &#123;<br><span class="css">    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">30px</span>);</span><br>  &#125;<br><br>  .v-enter-active,<br>  .v-leave-active &#123;<br><span class="css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;</span><br>  &#125;<br><br><span class="css">  <span class="hljs-selector-tag">h3</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    .v-enter,<br>    .v-leave-to &#123;<br><span class="css">      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">150px</span>);</span><br>    &#125;<br><br>    .v-enter-active,<br>    .v-leave-active &#123;<br><span class="css">      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span> ease;</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;comName=&#x27;login&#x27;&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;comName=&#x27;register&#x27;&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 通过 mode 属性,设置组件切换时候的 模式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Vue提供了 component ,来展示对应名称的组件 --&gt;</span><br><span class="hljs-comment">&lt;!-- component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;comName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 总结:当前学习了几个 Vue 提供的标签了??? --&gt;</span><br><span class="hljs-comment">&lt;!-- component,  template,  transition,  transitionGroup  --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 组件名称是 字符串</span></span><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;login&#x27;</span>, &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>登录组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;)<br><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;register&#x27;</span>, &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>注册组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;)<br><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        comName: <span class="hljs-string">&#x27;login&#x27;</span> <span class="hljs-comment">// 当前 component 中的 :is 绑定的组件的名称</span></span><br>      &#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol><li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        msg: &#x27;这是父组件中的消息&#x27;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      components: &#123;</span><br><span class="xml">        son: &#123;</span><br><span class="xml">          template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是子组件 --- </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">finfo</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;,</span><br><span class="xml">          props: [&#x27;finfo&#x27;]</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;son <span class="hljs-symbol">:finfo=<span class="hljs-string">&quot;msg&quot;</span>&gt;&lt;/son&gt;</span><br>&lt;<span class="hljs-regexp">/div&gt;</span><br></code></pre></td></tr></table></figure><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2></li><li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li><li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span> @<span class="hljs-attr">func</span>=<span class="hljs-string">&quot;getMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引用父组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">son</span> @<span class="hljs-attr">func</span>=<span class="hljs-string">&quot;getMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 组件模板定义 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;x-template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><br><span class="handlebars"><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;向父组件传值&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendMsg&quot;</span> /&gt;</span></span></span><br><span class="handlebars"><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 子组件的定义方式</span></span><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;son&#x27;</span>, &#123;</span><br><span class="javascript">      template: <span class="hljs-string">&#x27;#son&#x27;</span>, <span class="hljs-comment">// 组件模板Id</span></span><br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">sendMsg</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 按钮的点击事件</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;func&#x27;</span>, <span class="hljs-string">&#x27;OK&#x27;</span>); <span class="hljs-comment">// 调用父组件传递过来的方法，同时把数据传递出去</span></span><br>        &#125;<br>      &#125;<br>    &#125;);<br><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">getMsg</span>(<span class="hljs-params">val</span>)</span>&#123; <span class="hljs-comment">// 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span></span><br>          alert(val);<br>        &#125;<br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 父组件向子组件 传递 方法，使用的是 事件绑定机制； v-on, 当我们自定义了 一个 事件属性之后，那么，子组件就能够，通过某些方式，来调用 传递进去的 这个 方法了 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com2</span> @<span class="hljs-attr">func</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">com2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tmpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是 子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;这是子组件中的按钮 - 点击它，触发 父组件传递过来的 func 方法&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;myclick&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><br><span class="javascript">    <span class="hljs-comment">// 定义了一个字面量类型的 组件模板对象</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> com2 = &#123;</span><br><span class="javascript">      template: <span class="hljs-string">&#x27;#tmpl&#x27;</span>, <span class="hljs-comment">// 通过指定了一个 Id, 表示 说，要去加载 这个指定Id的 template 元素中的内容，当作 组件的HTML结构</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">          sonmsg: &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小头儿子&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">6</span> &#125;</span><br>        &#125;<br>      &#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">myclick</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 当点击子组件的按钮的时候，如何 拿到 父组件传递过来的 func 方法，并调用这个方法？？？</span></span><br><span class="javascript">          <span class="hljs-comment">//  emit 英文原意： 是触发，调用、发射的意思</span></span><br><span class="javascript">          <span class="hljs-comment">// this.$emit(&#x27;func123&#x27;, 123, 456)</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;func&#x27;</span>, <span class="hljs-built_in">this</span>.sonmsg)</span><br>        &#125;<br>      &#125;<br>    &#125;<br><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        datamsgFormSon: <span class="hljs-literal">null</span></span><br>      &#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params">data</span>)</span> &#123;</span><br><span class="javascript">           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;调用了父组件身上的 show 方法: --- &#x27;</span> + data)</span><br><span class="javascript">           <span class="hljs-built_in">console</span>.log(data);</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.datamsgFormSon = data</span><br>        &#125;<br>      &#125;,<br><br>      components: &#123;<br>        com2<br><span class="javascript">        <span class="hljs-comment">// com2: com2</span></span><br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="评论列表案例"><a href="#评论列表案例" class="headerlink" title="评论列表案例"></a>评论列表案例</h2><p>目标：主要练习父子组件之间传值</p><h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取元素内容&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getElement&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 ref 获取元素 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myh1&quot;</span>&gt;</span>这是一个大大的H1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 ref 获取子组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-com</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mycom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-com</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  Vue.component(<span class="hljs-string">&#x27;my-com&#x27;</span>, &#123;</span><br><span class="handlebars"><span class="xml">    template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>这是一个子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>&#x27;,</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;子组件&#x27;</span></span><br>      &#125;<br>    &#125;<br>  &#125;);<br><br><span class="javascript">  <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data: &#123;&#125;,<br>    methods: &#123;<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">getElement</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 通过 this.$refs 来获取元素</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.myh1.innerText);</span><br><span class="javascript">        <span class="hljs-comment">// 通过 this.$refs 来获取组件</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.mycom.name);</span><br>      &#125;<br>    &#125;<br>  &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>完整代码</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./lib/bootstrap-3.3.7.css&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">cmt-box</span> @<span class="hljs-attr">func</span>=<span class="hljs-string">&quot;loadComments&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cmt-box</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge&quot;</span>&gt;</span>评论人： </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.user</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.content</span> &#125;&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tmpl&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>评论人：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>评论内容：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;发表评论&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;postComment&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    var commentBox = &#123;</span><br><span class="xml">      data() &#123;</span><br><span class="xml">        return &#123;</span><br><span class="xml">          user: &#x27;&#x27;,</span><br><span class="xml">          content: &#x27;&#x27;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      template: &#x27;#tmpl&#x27;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">        postComment() &#123; // 发表评论的方法</span><br><span class="xml">          // 分析：发表评论的业务逻辑</span><br><span class="xml">          // 1. 评论数据存到哪里去？？？   存放到了 localStorage 中  localStorage.setItem(&#x27;cmts&#x27;, &#x27;&#x27;)</span><br><span class="xml">          // 2. 先组织出一个最新的评论数据对象</span><br><span class="xml">          // 3. 想办法，把 第二步中，得到的评论对象，保存到 localStorage 中：</span><br><span class="xml">          //  3.1 localStorage 只支持存放字符串数据， 要先调用 JSON.stringify </span><br><span class="xml">          //  3.2 在保存 最新的 评论数据之前，要先从 localStorage 获取到之前的评论数据（string）， 转换为 一个  数组对象， 然后，把最新的评论， push 到这个数组</span><br><span class="xml">          //  3.3 如果获取到的 localStorage 中的 评论字符串，为空不存在， 则  可以 返回一个 &#x27;[]&#x27;  让 JSON.parse 去转换</span><br><span class="xml">          //  3.4  把 最新的  评论列表数组，再次调用 JSON.stringify 转为  数组字符串，然后调用 localStorage.setItem()</span><br><br><span class="xml">          var comment = &#123; id: Date.now(), user: this.user, content: this.content &#125;</span><br><br><span class="xml">          // 从 localStorage 中获取所有的评论</span><br><span class="xml">          var list = JSON.parse(localStorage.getItem(&#x27;cmts&#x27;) || &#x27;[]&#x27;)</span><br><span class="xml">          list.unshift(comment)</span><br><span class="xml">          // 重新保存最新的 评论数据</span><br><span class="xml">          localStorage.setItem(&#x27;cmts&#x27;, JSON.stringify(list))</span><br><br><span class="xml">          this.user = this.content = &#x27;&#x27;</span><br><br><span class="xml">          // this.loadComments() // ?????</span><br><span class="xml">          this.$emit(&#x27;func&#x27;)</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;</span><br><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        list: [</span><br><span class="xml">          &#123; id: Date.now(), user: &#x27;李白&#x27;, content: &#x27;天生我材必有用&#x27; &#125;,</span><br><span class="xml">          &#123; id: Date.now(), user: &#x27;江小白&#x27;, content: &#x27;劝君更尽一杯酒&#x27; &#125;,</span><br><span class="xml">          &#123; id: Date.now(), user: &#x27;小马&#x27;, content: &#x27;我姓马， 风吹草低见牛羊的马&#x27; &#125;</span><br><span class="xml">        ]</span><br><span class="xml">      &#125;,</span><br><span class="xml">      beforeCreate()&#123; // 注意：这里不能调用 loadComments 方法，因为在执行这个钩子函数的时候，data 和 methods 都还没有被初始化好</span><br><br><span class="xml">      &#125;,</span><br><span class="xml">      created()&#123;</span><br><span class="xml">        this.loadComments()</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">        loadComments() &#123; // 从本地的 localStorage 中，加载评论列表</span><br><span class="xml">          var list = JSON.parse(localStorage.getItem(&#x27;cmts&#x27;) || &#x27;[]&#x27;)</span><br><span class="xml">          this.list = list</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      components: &#123;</span><br><span class="xml">        &#x27;cmt-box&#x27;: commentBox</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>ref获取DOM元素和组件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取元素&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getElement&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mybtn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myh3&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myh3&quot;</span>&gt;</span>哈哈哈， 今天天气太好了！！！<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">login</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mylogin&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> login = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;,</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">          msg: <span class="hljs-string">&#x27;son msg&#x27;</span></span><br>        &#125;<br>      &#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;调用了子组件的方法&#x27;</span>)</span><br>        &#125;<br>      &#125;<br>    &#125;<br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">getElement</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// console.log(document.getElementById(&#x27;myh3&#x27;).innerText)</span></span><br><br><span class="javascript">          <span class="hljs-comment">//  ref  是 英文单词 【reference】   值类型 和 引用类型  referenceError</span></span><br><span class="javascript">          <span class="hljs-comment">// console.log(this.$refs.myh3.innerText)</span></span><br><br><span class="javascript">          <span class="hljs-comment">// console.log(this.$refs.mylogin.msg)</span></span><br><span class="javascript">           <span class="hljs-built_in">this</span>.$refs.mylogin.show()</span><br>        &#125;<br>      &#125;,<br>      components: &#123;<br>        login<br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol><li><p><strong>后端路由</strong>对于<code>普通的网站</code>，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p></li><li><p><strong>前端路由</strong>对于<code>单页面应用程序</code>来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p></li><li><p>在单页面应用程序中，这种<code>通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）</code>；</p></li></ol><h2 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol><li>导入 vue-router 组件类库：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-router-2.7.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用 router-link 组件来导航<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;a href=&quot;#/login&quot;&gt;登录&lt;/a&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;a href=&quot;#/register&quot;&gt;注册&lt;/a&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- router-link 默认渲染为一个a 标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;span&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用 router-view 组件来显示匹配到的组件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class="hljs-comment">&lt;!-- 这是 vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去 --&gt;</span><br><span class="hljs-comment">&lt;!-- 所以： 我们可以把 router-view 认为是一个占位符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>创建使用<code>Vue.extend</code>创建组件<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 4.1 使用 Vue.extend 来创建登录组件</span><br><span class="hljs-keyword">var</span> login = Vue.extend(&#123;<br>  template: <span class="hljs-string">&#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 4.2 使用 Vue.extend 来创建注册组件</span><br><span class="hljs-keyword">var</span> register = Vue.extend(&#123;<br>  template: <span class="hljs-string">&#x27;&lt;h1&gt;注册组件&lt;/h1&gt;&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 组件的模板对象</span><br><span class="hljs-keyword">var</span> login = &#123;<br>  template: <span class="hljs-string">&#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> register = &#123;<br>  template: <span class="hljs-string">&#x27;&lt;h1&gt;注册组件&lt;/h1&gt;&#x27;</span><br>&#125;<br><span class="hljs-comment">/*  Vue.component(&#x27;login&#x27;, &#123;</span><br><span class="hljs-comment">   template: &#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;</span><br><span class="hljs-comment"> &#125;) */</span><br></code></pre></td></tr></table></figure></li><li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">5</span>. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<br><span class="hljs-regexp">//</span> 创建一个路由对象， 当 导入 vue-router 包之后，在 window 全局对象中，就有了一个 路由的构造函数，叫做 VueRouter<br>    <span class="hljs-regexp">//</span> 在 new 路由对象的时候，可以为 构造函数，传递一个配置对象<br>    var routerObj = new VueRouter(&#123;<br>      <span class="hljs-regexp">//</span> route <span class="hljs-regexp">//</span> 这个配置对象中的 route 表示 【路由匹配规则】 的意思<br>      routes: [ <span class="hljs-regexp">//</span> 路由匹配规则 <br>        <span class="hljs-regexp">//</span> 每个路由规则，都是一个对象，这个规则对象，身上，有两个必须的属性：<br>        <span class="hljs-regexp">//</span>  属性<span class="hljs-number">1</span> 是 path， 表示监听 哪个路由链接地址；<br>        <span class="hljs-regexp">//</span>  属性<span class="hljs-number">2</span> 是 component， 表示，如果 路由是前面匹配到的 path ，则展示 component 属性对应的那个组件<br>        <span class="hljs-regexp">//</span> 注意： component 的属性值，必须是一个 组件的模板对象， 不能是 组件的引用名称；<br>        <span class="hljs-regexp">//</span> &#123; path: <span class="hljs-string">&#x27;/&#x27;</span>, component: login &#125;,<br>        &#123; path: <span class="hljs-string">&#x27;/&#x27;</span>, redirect: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;, <span class="hljs-regexp">//</span> 这里的 redirect 和 Node 中的 redirect 完全是两码事<br>        &#123; path: <span class="hljs-string">&#x27;/login&#x27;</span>, component: login &#125;,<br>        &#123; path: <span class="hljs-string">&#x27;/register&#x27;</span>, component: register &#125;<br>      ],<br>      linkActiveClass: <span class="hljs-string">&#x27;myactive&#x27;</span><br>    &#125;)<br></code></pre></td></tr></table></figure></li><li>使用 router 属性来使用路由规则<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">// 6. 创建 Vue 实例，得到 ViewModel</span><br>    <span class="hljs-built_in">var</span> vm = <span class="hljs-literal">new</span> Vue(&#123;<br>      el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>      <span class="hljs-built_in">data</span>: &#123;&#125;,<br>      methods: &#123;&#125;,<br>      router: routerObj <span class="hljs-comment">// 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件</span><br>    &#125;);<br></code></pre></td></tr></table></figure><h2 id="设置路由高亮"><a href="#设置路由高亮" class="headerlink" title="设置路由高亮"></a>设置路由高亮</h2></li></ol><h2 id="设置路由切换动效"><a href="#设置路由切换动效" class="headerlink" title="设置路由切换动效"></a>设置路由切换动效</h2><h2 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol><li>在规则中定义参数：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123; path: <span class="hljs-string">&#x27;/register/:id&#x27;</span>, component: register &#125;<br></code></pre></td></tr></table></figure></li><li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">var register = Vue.extend(&#123;</span><br><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册组件 --- </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">this.$route.params.id</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span><br><span class="xml">    &#125;);</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-router-3.0.1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login?id=10&amp;name=zs&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性 </span><br><span class="hljs-comment">    &lt;router-link to=&quot;/login/12/ls&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="hljs-comment">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;--&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> login = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录 --- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$route.query.id</span> &#125;&#125;</span><span class="xml"> --- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$route.query.name</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;,</span></span><br><span class="handlebars"><span class="xml">      //template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录 --- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$route.params.id</span> &#125;&#125;</span><span class="xml"> --- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$route.params.name</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;,</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">          msg: <span class="hljs-string">&#x27;123&#x27;</span></span><br>        &#125;<br>      &#125;,<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">// 组件的生命周期钩子函数</span></span><br><span class="javascript">         <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route)</span><br><span class="javascript">         <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$route.query.id)</span><br><span class="javascript">         <span class="hljs-comment">//console.log(this.$route.params.id)</span></span><br>      &#125;<br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">var</span> register = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span></span><br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br>      routes: [<br><span class="javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>: login &#125;,</span><br><span class="javascript">        <span class="hljs-comment">//&#123; path: &#x27;/login/:id/:name&#x27;, component: login &#125;,</span></span><br><span class="javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">component</span>: register &#125;</span><br>      ]<br>    &#125;)<br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;&#125;,<br><span class="javascript">      <span class="hljs-comment">// router: router</span></span><br>      router<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/account&quot;</span>&gt;</span>Account<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  // 父路由中的组件</span><br><span class="xml">  const account = Vue.extend(</span><span class="xquery">&#123;</span><br><span class="xquery">    template: `<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xquery">      这是account组件</span><br><span class="xquery">      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/account/login&quot;</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span> | </span><br><span class="xquery">      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/account/register&quot;</span>&gt;</span>register<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span></span><br><span class="xquery">      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span></span><br><span class="xquery">    &lt;/div&gt;`</span><br><span class="xquery">  &#125;</span><span class="xml">);</span><br><br><span class="xml">  // 子路由中的 login 组件</span><br><span class="xml">  const login = Vue.extend(</span><span class="xquery">&#123;</span><br><span class="xquery">    template: <span class="hljs-string">&#x27;&lt;div&gt;登录组件&lt;/div&gt;&#x27;</span></span><br><span class="xquery">  &#125;</span><span class="xml">);</span><br><br><span class="xml">  // 子路由中的 register 组件</span><br><span class="xml">  const register = Vue.extend(</span><span class="xquery">&#123;</span><br><span class="xquery">    template: <span class="hljs-string">&#x27;&lt;div&gt;注册组件&lt;/div&gt;&#x27;</span></span><br><span class="xquery">  &#125;</span><span class="xml">);</span><br><br><span class="xml">  // 路由实例</span><br><span class="xml">  var router = new VueRouter(</span><span class="xquery">&#123;</span><br><span class="xquery">    routes: [</span><br><span class="xquery">      &#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, redirect: <span class="hljs-string">&#x27;/account/login&#x27;</span> &#125;</span><span class="xml">, // 使用 redirect 实现路由重定向</span><br><span class="xml">      </span><span class="xquery">&#123;</span><br><span class="xquery">       <span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;/account&#x27;</span>,</span><br><span class="xquery">        component: account,</span><br><span class="xquery">        children: [ // 通过 children 数组属性，来实现路由的嵌套</span><br><span class="xquery">          &#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;login&#x27;</span>, component: login &#125;</span><span class="xml">, // 注意，子路由的开头位置，不要加 / 路径符</span><br><span class="xml">          </span><span class="xquery">&#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;register&#x27;</span>, component: register &#125;</span><br><span class="xml">        ]</span><br><span class="xml">      &#125;</span><br><span class="xml">    ]</span><br><span class="xml">  &#125;);</span><br><br><span class="xml">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">  var vm = new Vue(</span><span class="xquery">&#123;</span><br><span class="xquery">    el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="xquery">    data: &#123;&#125;</span><span class="xml">,</span><br><span class="xml">    methods: </span><span class="xquery">&#123;&#125;</span><span class="xml">,</span><br><span class="xml">    components: </span><span class="xquery">&#123;</span><br><span class="xquery">      account</span><br><span class="xquery">    &#125;</span><span class="xml">,</span><br><span class="xml">    router: router</span><br><span class="xml">  &#125;);</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-router-3.0.1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/account&quot;</span>&gt;</span>Account<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tmpl&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是 Account 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/account/login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/account/register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 组件的模板对象</span><br><span class="xml">    var account = </span><span class="xquery">&#123;</span><br><span class="xquery">      template: <span class="hljs-string">&#x27;#tmpl&#x27;</span></span><br><span class="xquery">    &#125;</span><br><span class="xml">    var login = </span><span class="xquery">&#123;</span><br><span class="xquery">      template: <span class="hljs-string">&#x27;&lt;h3&gt;登录&lt;/h3&gt;&#x27;</span></span><br><span class="xquery">    &#125;</span><br><span class="xml">    var register = </span><span class="xquery">&#123;</span><br><span class="xquery">      template: <span class="hljs-string">&#x27;&lt;h3&gt;注册&lt;/h3&gt;&#x27;</span></span><br><span class="xquery">    &#125;</span><br><span class="xml">    var router = new VueRouter(</span><span class="xquery">&#123;</span><br><span class="xquery">      routes: [</span><br><span class="xquery">        &#123;</span><br><span class="xquery">         <span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;/account&#x27;</span>,</span><br><span class="xquery">          component: account,</span><br><span class="xquery">          // 使用 children 属性，实现子路由，同时，子路由的<span class="hljs-built_in"> path</span> 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址</span><br><span class="xquery">          children: [</span><br><span class="xquery">            &#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;login&#x27;</span>, component: login &#125;</span><span class="xml">,</span><br><span class="xml">            </span><span class="xquery">&#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;register&#x27;</span>, component: register &#125;</span><br><span class="xml">          ]</span><br><span class="xml">        &#125;</span><br><span class="xml">        // </span><span class="xquery">&#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;/account/login&#x27;</span>, component: login &#125;</span><span class="xml">,</span><br><span class="xml">        // </span><span class="xquery">&#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;/account/register&#x27;</span>, component: register &#125;</span><br><span class="xml">      ]</span><br><span class="xml">    &#125;)</span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(</span><span class="xquery">&#123;</span><br><span class="xquery">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="xquery">      data: &#123;&#125;</span><span class="xml">,</span><br><span class="xml">      methods: </span><span class="xquery">&#123;&#125;</span><span class="xml">,</span><br><span class="xml">      router</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol><li>标签代码结构：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>JS代码：<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    var header = Vue.component(&#x27;header&#x27;, </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      template: &#x27;&lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;&#x27;</span><br><span class="hljs-template-variable">    &#125;</span><span class="xml">);</span><br><br><span class="xml">    var sidebar = Vue.component(&#x27;sidebar&#x27;, </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      template: &#x27;&lt;div class=&quot;sidebar&quot;&gt;sidebar&lt;/div&gt;&#x27;</span><br><span class="hljs-template-variable">    &#125;</span><span class="xml">);</span><br><br><span class="xml">    var mainbox = Vue.component(&#x27;mainbox&#x27;, </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      template: &#x27;&lt;div class=&quot;mainbox&quot;&gt;mainbox&lt;/div&gt;&#x27;</span><br><span class="hljs-template-variable">    &#125;</span><span class="xml">);</span><br><br><span class="xml">    // 创建路由对象</span><br><span class="xml">    var router = new VueRouter(</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      routes: [</span><br><span class="hljs-template-variable">        &#123;</span><br><span class="hljs-template-variable">          path: &#x27;/&#x27;, components: &#123;</span><br><span class="hljs-template-variable">            <span class="hljs-keyword">default</span>: header,</span><br><span class="hljs-template-variable">            a: sidebar,</span><br><span class="hljs-template-variable">            b: mainbox</span><br><span class="hljs-template-variable">          &#125;</span><br><span class="xml">        &#125;</span><br><span class="xml">      ]</span><br><span class="xml">    &#125;);</span><br><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      el: &#x27;#app&#x27;,</span><br><span class="hljs-template-variable">      data: &#123;&#125;</span><span class="xml">,</span><br><span class="xml">      methods: </span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml">,</span><br><span class="xml">      router</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>CSS 样式：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  .header &#123;<br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br>  &#125;<br><br>  .content&#123;<br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br>  &#125;<br>  .sidebar &#123;<br><span class="css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br>  &#125;<br>  .mainbox&#123;<br><span class="css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">8</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>案例代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-router-3.0.1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-tag">html</span>,</span><br><span class="css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br>    &#125;<br>    .header &#123;<br><span class="css">      <span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br>    &#125;<br>    .container &#123;<br><span class="css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;</span><br>    &#125;<br>    .left &#123;<br><span class="css">      <span class="hljs-attribute">background-color</span>: lightgreen;</span><br><span class="css">      <span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span>;</span><br>    &#125;<br>    .main &#123;<br><span class="css">      <span class="hljs-attribute">background-color</span>: lightpink;</span><br><span class="css">      <span class="hljs-attribute">flex</span>: <span class="hljs-number">8</span>;</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> header = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>Header头部区域<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span></span><br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">var</span> leftBox = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>Left侧边栏区域<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span></span><br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">var</span> mainBox = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>mainBox主体区域<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span></span><br>    &#125;<br><span class="javascript">    <span class="hljs-comment">// 创建路由对象</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br>      routes: [<br>        /* &#123; path: &#x27;/&#x27;, component: header &#125;,<br><span class="javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/left&#x27;</span>, <span class="hljs-attr">component</span>: leftBox &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/main&#x27;</span>, <span class="hljs-attr">component</span>: mainBox &#125; */</span><br>        &#123;<br><span class="javascript">          path: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">components</span>: &#123;</span><br><span class="javascript">            <span class="hljs-string">&#x27;default&#x27;</span>: header,</span><br><span class="javascript">            <span class="hljs-string">&#x27;left&#x27;</span>: leftBox,</span><br><span class="javascript">            <span class="hljs-string">&#x27;main&#x27;</span>: mainBox</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;)<br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;&#125;,<br>      router<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li>监听<code>data</code>中属性的改变：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> +</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> =</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">fullName</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        firstName: &#x27;jack&#x27;,</span><br><span class="xml">        lastName: &#x27;chen&#x27;,</span><br><span class="xml">        fullName: &#x27;jack - chen&#x27;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;&#125;,</span><br><span class="xml">      watch: &#123;</span><br><span class="xml">        &#x27;firstName&#x27;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</span><br><span class="xml">          this.fullName = newVal + &#x27; - &#x27; + this.lastName;</span><br><span class="xml">        &#125;,</span><br><span class="xml">        &#x27;lastName&#x27;: function (newVal, oldVal) &#123;</span><br><span class="xml">          this.fullName = this.firstName + &#x27; - &#x27; + newVal;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>监听路由对象的改变：<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    var login = Vue.extend(</span><span class="xquery">&#123;</span><br><span class="xquery">      template: <span class="hljs-string">&#x27;&lt;h1&gt;登录组件&lt;/h1&gt;&#x27;</span></span><br><span class="xquery">    &#125;</span><span class="xml">);</span><br><br><span class="xml">    var register = Vue.extend(</span><span class="xquery">&#123;</span><br><span class="xquery">      template: <span class="hljs-string">&#x27;&lt;h1&gt;注册组件&lt;/h1&gt;&#x27;</span></span><br><span class="xquery">    &#125;</span><span class="xml">);</span><br><br><span class="xml">    var router = new VueRouter(</span><span class="xquery">&#123;</span><br><span class="xquery">      routes: [</span><br><span class="xquery">        &#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&quot;/login&quot;</span>, component: login &#125;</span><span class="xml">,</span><br><span class="xml">        </span><span class="xquery">&#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&quot;/register&quot;</span>, component: register &#125;</span><br><span class="xml">      ]</span><br><span class="xml">    &#125;);</span><br><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(</span><span class="xquery">&#123;</span><br><span class="xquery">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="xquery">      data: &#123;&#125;</span><span class="xml">,</span><br><span class="xml">      methods: </span><span class="xquery">&#123;&#125;</span><span class="xml">,</span><br><span class="xml">      router: router,</span><br><span class="xml">      watch: </span><span class="xquery">&#123;</span><br><span class="xquery">        <span class="hljs-string">&#x27;$route&#x27;</span>: <span class="hljs-keyword">function</span> (newVal, oldVal) &#123;</span><br><span class="xquery">          <span class="hljs-keyword">if</span> (newVal<span class="hljs-built_in">.path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="xquery">            console.log(<span class="hljs-string">&#x27;这是登录组件&#x27;</span>);</span><br><span class="xquery">          &#125;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1. 导入包 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-router-3.0.1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 容器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 2. 创建子组件</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> login = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是登录子组件，这个组件是 奔波霸 开发的。<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;<br><br><span class="javascript">    <span class="hljs-keyword">var</span> register = &#123;</span><br><span class="handlebars"><span class="xml">      template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是注册子组件，这个组件是 霸波奔 开发的。<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>&#x27;</span></span><br>    &#125;<br><br><span class="javascript">    <span class="hljs-comment">// 3. 创建一个路由对象</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="javascript">      routes: [ <span class="hljs-comment">// 路由规则数组</span></span><br><span class="javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>: login &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">component</span>: register &#125;</span><br>      ],<br><span class="javascript">      linkActiveClass: <span class="hljs-string">&#x27;myactive&#x27;</span> <span class="hljs-comment">// 和激活相关的类</span></span><br>    &#125;)<br><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;&#125;,<br><span class="javascript">      <span class="hljs-comment">// router: router</span></span><br>      router,<br>      watch: &#123;<br><span class="javascript">        <span class="hljs-comment">//  this.$route.path</span></span><br><span class="javascript">        <span class="hljs-string">&#x27;$route.path&#x27;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// console.log(newVal + &#x27; --- &#x27; + oldVal)</span></span><br><span class="javascript">          <span class="hljs-keyword">if</span> (newVal === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;欢迎进入登录页面&#x27;</span>)</span><br><span class="javascript">          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newVal === <span class="hljs-string">&#x27;/register&#x27;</span>) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;欢迎进入注册页面&#x27;</span>)</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol><li>默认只有<code>getter</code>的计算属性：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> +</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> =</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">fullName</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        firstName: &#x27;jack&#x27;,</span><br><span class="xml">        lastName: &#x27;chen&#x27;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;&#125;,</span><br><span class="xml">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="xml">        fullName() &#123;</span><br><span class="xml">          return this.firstName + &#x27; - &#x27; + this.lastName;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改fullName&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">fullName</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        firstName: &#x27;jack&#x27;,</span><br><span class="xml">        lastName: &#x27;chen&#x27;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">        changeName() &#123;</span><br><span class="xml">          this.fullName = &#x27;TOM - chen2&#x27;;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      computed: &#123;</span><br><span class="xml">        fullName: &#123;</span><br><span class="xml">          get: function () &#123;</span><br><span class="xml">            return this.firstName + &#x27; - &#x27; + this.lastName;</span><br><span class="xml">          &#125;,</span><br><span class="xml">          set: function (newVal) &#123;</span><br><span class="xml">            var parts = newVal.split(&#x27; - &#x27;);</span><br><span class="xml">            this.firstName = parts[0];</span><br><span class="xml">            this.lastName = parts[1];</span><br><span class="xml">          &#125;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2></li><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><blockquote><p>注意：nrm只是单纯的提供了几个常用的  下载包的  URL地址，并能够让我们在  这几个   地址之间，很方便的进行切换，但是，每次我们装包时，使用的  装包工具都还是  npm</p></blockquote><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol><li><a href="http://www.cnblogs.com/joyho/articles/4430148.html">URL中的hash（井号）</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js-II</title>
    <link href="/2019/11/02/Vue-js-II/"/>
    <url>/2019/11/02/Vue-js-II/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-II"><a href="#Vue-js-II" class="headerlink" title="Vue.js - II"></a>Vue.js - II</h1><h2 id="品牌管理案例"><a href="#品牌管理案例" class="headerlink" title="品牌管理案例"></a>品牌管理案例</h2><h3 id="添加新品牌、删除品牌、根据条件筛选品牌"><a href="#添加新品牌、删除品牌、根据条件筛选品牌" class="headerlink" title="添加新品牌、删除品牌、根据条件筛选品牌"></a>添加新品牌、删除品牌、根据条件筛选品牌</h3><ol><li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/#filterBy">filterBy - 指令</a></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list | filterBy searchName in &#x27;name&#x27;&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.id</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.ctime</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;hr&gt; 输入筛选名称：<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;searchName&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in search(searchName)&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.id</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.ctime</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">search</span>(<span class="hljs-type">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> this.list.<span class="hljs-keyword">filter</span>(x =&gt; &#123;<br>    <span class="hljs-keyword">return</span> x.name.indexOf(<span class="hljs-type">name</span>) != <span class="hljs-number">-1</span>;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>完整代码：</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./lib/bootstrap-3.3.7.css&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 需要用到Jquery吗？？？不用 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span>添加品牌<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body form-inline&quot;</span>&gt;</span></span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">          Id:</span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">          Name:</span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-comment">&lt;!-- 在Vue中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了 --&gt;</span></span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span></span><br><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">          搜索名称关键字：</span><br><span class="xml">          <span class="hljs-comment">&lt;!-- 注意： Vue中所有的指令，在调用的时候，都以 v- 开头 --&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Ctime<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Operation<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 之前， v-for 中的数据，都是直接从 data 上的list中直接渲染过来的 --&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 现在， 我们自定义了一个 search 方法，同时，把 所有的关键字，通过传参的形式，传递给了 search 方法 --&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 在 search 方法内部，通过 执行 for 循环， 把所有符合 搜索关键字的数据，保存到 一个新数组中，返回 --&gt;</span></span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in search(keywords)&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="xquery">&#123;&#123; <span class="hljs-type">item</span><span class="hljs-built_in">.id</span> &#125;</span><span class="xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;item.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="xquery">&#123;&#123; <span class="hljs-type">item</span>.ctime &#125;</span><span class="xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">          </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">            </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(</span><span class="xquery">&#123;</span><br><span class="xquery">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="xquery">      data: &#123;</span><br><span class="xquery">       <span class="hljs-built_in"> id</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="xquery">       <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="xquery">        keywords: <span class="hljs-string">&#x27;&#x27;</span>, // 搜索的关键字</span><br><span class="xquery">        list: [</span><br><span class="xquery">          &#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;奔驰&#x27;</span>, ctime: new Date() &#125;</span><span class="xml">,</span><br><span class="xml">          </span><span class="xquery">&#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;宝马&#x27;</span>, ctime: new Date() &#125;</span><br><span class="xml">        ]</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: </span><span class="xquery">&#123;</span><br><span class="xquery">        add() &#123; // 添加的方法</span><br><span class="xquery">          // console.log(<span class="hljs-string">&#x27;ok&#x27;</span>)</span><br><span class="xquery">          // 分析：</span><br><span class="xquery">          // <span class="hljs-number">1</span>. 获取到<span class="hljs-built_in"> id</span> 和<span class="hljs-built_in"> name</span> ,直接从 data 上面获取 </span><br><span class="xquery">          // <span class="hljs-number">2</span>. 组织出一个对象</span><br><span class="xquery">          // <span class="hljs-number">3</span>. 把这个对象，调用 数组的 相关方法，添加到 当前 data 上的 list 中</span><br><span class="xquery">          // <span class="hljs-number">4</span>. 注意：在Vue中，已经实现了数据的双向绑定，每当我们修改了 data 中的数据，Vue会默认监听到数据的改动，自动把最新的数据，应用到页面上；</span><br><span class="xquery">          // <span class="hljs-number">5</span>. 当我们意识到上面的第四步的时候，就证明大家已经入门Vue了，我们更多的是在进行 VM中 Model 数据的操作，同时，在操作Model数据的时候，指定的业务逻辑操作；</span><br><br><span class="xquery">          var car = &#123;<span class="hljs-built_in"> id</span>: this<span class="hljs-built_in">.id</span>,<span class="hljs-built_in"> name</span>: this<span class="hljs-built_in">.name</span>, ctime: new Date() &#125;</span><br><span class="xml">          this.list.push(car)</span><br><span class="xml">          this.id = this.name = &#x27;&#x27;</span><br><span class="xml">        &#125;,</span><br><span class="xml">        del(id) </span><span class="xquery">&#123; // 根据Id删除数据</span><br><span class="xquery">          // 分析：</span><br><span class="xquery">          // <span class="hljs-number">1</span>. 如何根据Id，找到要删除这一项的索引</span><br><span class="xquery">          // <span class="hljs-number">2</span>. 如果找到索引了，直接调用 数组的 splice 方法</span><br><br><span class="xquery">          /* this.list.<span class="hljs-keyword">some</span>((<span class="hljs-type">item</span>, i) =&gt; &#123;</span><br><span class="xquery">            <span class="hljs-keyword">if</span> (<span class="hljs-type">item</span><span class="hljs-built_in">.id</span> ==<span class="hljs-built_in"> id</span>) &#123;</span><br><span class="xquery">              this.list.splice(i, <span class="hljs-number">1</span>)</span><br><span class="xquery">              // 在 数组的 <span class="hljs-keyword">some</span> 方法中，如果 <span class="hljs-keyword">return</span><span class="hljs-built_in"> true</span>，就会立即终止这个数组的后续循环</span><br><span class="xquery">              <span class="hljs-keyword">return</span><span class="hljs-built_in"> true</span>;</span><br><span class="xquery">            &#125;</span><br><span class="xml">          &#125;) */</span><br><br><span class="xml">          var index = this.list.findIndex(item =&gt; </span><span class="xquery">&#123;</span><br><span class="xquery">            <span class="hljs-keyword">if</span> (<span class="hljs-type">item</span><span class="hljs-built_in">.id</span> ==<span class="hljs-built_in"> id</span>) &#123;</span><br><span class="xquery">              <span class="hljs-keyword">return</span><span class="hljs-built_in"> true</span>;</span><br><span class="xquery">            &#125;</span><br><span class="xml">          &#125;)</span><br><br><span class="xml">          // console.log(index)</span><br><span class="xml">          this.list.splice(index, 1)</span><br><span class="xml">        &#125;,</span><br><span class="xml">        search(keywords) </span><span class="xquery">&#123; // 根据关键字，进行数据的搜索</span><br><span class="xquery">          /* var newList = []</span><br><span class="xquery">          this.list.forEach(<span class="hljs-type">item</span> =&gt; &#123;</span><br><span class="xquery">            <span class="hljs-keyword">if</span> (<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>.indexOf(keywords) != -<span class="hljs-number">1</span>) &#123;</span><br><span class="xquery">              newList.push(<span class="hljs-type">item</span>)</span><br><span class="xquery">            &#125;</span><br><span class="xml">          &#125;)</span><br><span class="xml">          return newList */</span><br><br><span class="xml">          // 注意：  forEach   some   filter   findIndex   这些都属于数组的新方法，</span><br><span class="xml">          //  都会对数组中的每一项，进行遍历，执行相关的操作；</span><br><span class="xml">          return this.list.filter(item =&gt; </span><span class="xquery">&#123;</span><br><span class="xquery">            // <span class="hljs-keyword">if</span>(<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>.indexOf(keywords) != -<span class="hljs-number">1</span>)</span><br><br><span class="xquery">            // 注意 ： ES6中，为字符串提供了一个新方法，叫做  String.prototype.includes(<span class="hljs-string">&#x27;要包含的字符串&#x27;</span>)</span><br><span class="xquery">            //  如果包含，则返回<span class="hljs-built_in"> true</span> ，否则返回<span class="hljs-built_in"> false</span></span><br><span class="xquery">            //  contain</span><br><span class="xquery">            <span class="hljs-keyword">if</span> (<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>.includes(keywords)) &#123;</span><br><span class="xquery">              <span class="hljs-keyword">return</span> <span class="hljs-type">item</span></span><br><span class="xquery">            &#125;</span><br><span class="xml">          &#125;)</span><br><span class="xml">          // return newList</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/02/Vue-js-II/01.png" alt="01"></p><p><strong>插入删除问题</strong></p><p><img src="/2019/11/02/Vue-js-II/02.png" alt="02"></p><p><img src="/2019/11/02/Vue-js-II/03.png" alt="03"></p><p><img src="/2019/11/02/Vue-js-II/04.png" alt="04"></p><p><img src="/2019/11/02/Vue-js-II/05.png" alt="05"></p><p><img src="/2019/11/02/Vue-js-II/06.png" alt="06"></p><h2 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值表达式和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol><li>HTML元素：</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.ctime</span> | dataFormat(<span class="hljs-name">&#x27;yyyy-mm-dd&#x27;</span>)&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="/2019/11/02/Vue-js-II/07.png" alt="07"></p><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">filters: &#123; <span class="hljs-comment">// 私有局部过滤器定义在VM对象中，只能在 当前 VM 对象所控制的 View 区域进行使用</span><br>    <span class="hljs-function"><span class="hljs-title">dataFormat</span>(<span class="hljs-params">input, pattern = <span class="hljs-string">&quot;&quot;</span></span>)</span> &#123; <span class="hljs-comment">// 在参数列表中 通过 pattern=&quot;&quot; 来指定形参默认值，防止报错</span><br>      <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(input);<br>      <span class="hljs-comment">// 获取年月日</span><br>      <span class="hljs-keyword">var</span> y = dt.getFullYear();<br>      <span class="hljs-keyword">var</span> m = (dt.getMonth() + <span class="hljs-number">1</span>).toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>      <span class="hljs-keyword">var</span> d = dt.getDate().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>      <span class="hljs-comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br>      <span class="hljs-comment">// 否则，就返回  年-月-日 时：分：秒</span><br>      <span class="hljs-keyword">if</span> (pattern.toLowerCase() === <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span>`</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 获取时分秒</span><br>        <span class="hljs-keyword">var</span> hh = dt.getHours().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span> <span class="hljs-subst">$&#123;hh&#125;</span>:<span class="hljs-subst">$&#123;mm&#125;</span>:<span class="hljs-subst">$&#123;ss&#125;</span>`</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 头部填充或 String.prototype.padEnd(maxLength, fillString=’’)尾部填充来填充字符串；</p></blockquote><p><img src="/2019/11/02/Vue-js-II/padstart.png"></p><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 定义一个全局过滤器，定义在VM对象外边</span><br>Vue.filter(<span class="hljs-string">&#x27;dataFormat&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">input, pattern = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(input);<br>  <span class="hljs-comment">// 获取年月日</span><br>  <span class="hljs-keyword">var</span> y = dt.getFullYear();<br>  <span class="hljs-keyword">var</span> m = (dt.getMonth() + <span class="hljs-number">1</span>).toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">var</span> d = dt.getDate().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>  <span class="hljs-comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span><br>  <span class="hljs-comment">// 否则，就返回  年-月-日 时：分：秒</span><br>  <span class="hljs-keyword">if</span> (pattern.toLowerCase() === <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span>`</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 获取时分秒</span><br>    <span class="hljs-keyword">var</span> hh = dt.getHours().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span>-<span class="hljs-subst">$&#123;m&#125;</span>-<span class="hljs-subst">$&#123;d&#125;</span> <span class="hljs-subst">$&#123;hh&#125;</span>:<span class="hljs-subst">$&#123;mm&#125;</span>:<span class="hljs-subst">$&#123;ss&#125;</span>`</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><p><strong>完整代码</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app2&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-color</span>=<span class="hljs-string">&quot;&#x27;pink&#x27;&quot;</span> <span class="hljs-attr">v-fontweight</span>=<span class="hljs-string">&quot;900&quot;</span> <span class="hljs-attr">v-fontsize</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">dt</span> | dateFormat &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">    </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml">    // 全局的过滤器， 进行时间的格式化</span><br><span class="xml">    // 所谓的全局过滤器，就是所有的VM实例都共享的</span><br><span class="xml">    Vue.filter(&#x27;dateFormat&#x27;, function (dateStr, pattern = &quot;&quot;) &#123;</span><br><span class="xml">      // 根据给定的时间字符串，得到特定的时间</span><br><span class="xml">      var dt = new Date(dateStr)</span><br><br><span class="xml">      //   yyyy-mm-dd</span><br><span class="xml">      var y = dt.getFullYear()</span><br><span class="xml">      var m = dt.getMonth() + 1</span><br><span class="xml">      var d = dt.getDate()</span><br><span class="xml">      // return y + &#x27;-&#x27; + m + &#x27;-&#x27; + d</span><br><br><span class="xml">      if (pattern.toLowerCase() === &#x27;yyyy-mm-dd&#x27;) &#123;</span><br><span class="xml">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`</span><br><span class="xml">      &#125; else &#123;</span><br><span class="xml">        var hh = dt.getHours()</span><br><span class="xml">        var mm = dt.getMinutes()</span><br><span class="xml">        var ss = dt.getSeconds()</span><br><br><span class="xml">        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;)</span><br><br><span class="xml">    // 如何自定义一个私有的过滤器（局部）</span><br><span class="xml">    var vm2 = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app2&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        dt: new Date()</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;&#125;,</span><br><span class="xml">      filters: &#123; // 定义私有过滤器    过滤器有两个 条件  【过滤器名称 和 处理函数】</span><br><span class="xml">        // 过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一致了，这时候 优先调用私有过滤器</span><br><span class="xml">        dateFormat: function (dateStr, pattern = &#x27;&#x27;) &#123;</span><br><span class="xml">          // 根据给定的时间字符串，得到特定的时间</span><br><span class="xml">          var dt = new Date(dateStr)</span><br><br><span class="xml">          //   yyyy-mm-dd</span><br><span class="xml">          var y = dt.getFullYear()</span><br><span class="xml">          var m = (dt.getMonth() + 1).toString().padStart(2, &#x27;0&#x27;)</span><br><span class="xml">          var d = dt.getDate().toString().padStart(2, &#x27;0&#x27;)</span><br><br><span class="xml">          if (pattern.toLowerCase() === &#x27;yyyy-mm-dd&#x27;) &#123;</span><br><span class="xml">            return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`</span><br><span class="xml">          &#125; else &#123;</span><br><span class="xml">            var hh = dt.getHours().toString().padStart(2, &#x27;0&#x27;)</span><br><span class="xml">            var mm = dt.getMinutes().toString().padStart(2, &#x27;0&#x27;)</span><br><span class="xml">            var ss = dt.getSeconds().toString().padStart(2, &#x27;0&#x27;)</span><br><br><span class="xml">            return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125; ~~~~~~~`</span><br><span class="xml">          &#125;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;)</span><br><br><span class="xml">    // 过滤器的定义语法</span><br><span class="xml">    // Vue.filter(&#x27;过滤器的名称&#x27;, function()&#123;&#125;)</span><br><br><span class="xml">    // 过滤器中的 function ，第一个参数，已经被规定死了，永远都是 过滤器 管道符前面 传递过来的数据</span><br><span class="xml">    /* Vue.filter(&#x27;过滤器的名称&#x27;, function (data) &#123;</span><br><span class="xml">      return data + &#x27;123&#x27;</span><br><span class="xml">    &#125;) */</span><br><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 过滤器调用时候的格式    </span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">name</span> | 过滤器的名称 &#125;&#125;</span><span class="xml"><span class="hljs-comment"> --&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Vue</span>.directive(&#x27;<span class="hljs-literal">on</span>&#x27;).keyCodes.f<span class="hljs-number">2</span> = <span class="hljs-number">113</span>;<br></code></pre></td></tr></table></figure><h3 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6">2.x中自定义键盘修饰符</a></h3><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Vue</span>.config.keyCodes.f<span class="hljs-number">2</span> = <span class="hljs-number">113</span>;//键盘码字f<span class="hljs-number">2</span>是<span class="hljs-number">113</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用自定义的按键修饰符：</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;name&quot;</span> @keyup.<span class="hljs-attribute">f2</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;name&quot;</span> @keyup.<span class="hljs-attribute">113</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html">自定义指令</a></h2><ol><li>自定义<code>全局</code>和<code>局部</code>的 自定义指令：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs awk">    <span class="hljs-regexp">//</span> document.getElementById(<span class="hljs-string">&#x27;search&#x27;</span>).focus()不推荐使用的DOM操作<br>    <span class="hljs-regexp">//</span> 使用  Vue.directive() 定义全局的指令  v-focus<br>    <span class="hljs-regexp">//</span> 其中：参数<span class="hljs-number">1</span> ： 指令的名称，注意，在定义的时候，指令的名称前面，不需要加 v- 前缀, <br>    <span class="hljs-regexp">//</span> 但是： 在调用的时候，必须 在指令名称前 加上 v- 前缀来进行调用<br>    <span class="hljs-regexp">//</span>  参数<span class="hljs-number">2</span>： 是一个对象，这个对象身上，有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作<br>    Vue.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>      bind: <span class="hljs-keyword">function</span> (el) &#123; <span class="hljs-regexp">//</span> 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次<br>        <span class="hljs-regexp">//</span> 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象<br>        <span class="hljs-regexp">//</span> 在元素 刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用<br>        <span class="hljs-regexp">//</span>  因为，一个元素，只有插入DOM之后，才能获取焦点<br>        <span class="hljs-regexp">//</span> el.focus()<br>      &#125;,<br>      inserted: <span class="hljs-keyword">function</span> (el) &#123;  <span class="hljs-regexp">//</span> inserted 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发<span class="hljs-number">1</span>次】<br>        el.focus()<br>        <span class="hljs-regexp">//</span> 和JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效<br>      &#125;,<br>      updated: <span class="hljs-keyword">function</span> (el) &#123;  <span class="hljs-regexp">//</span> 当VNode更新的时候，会执行 updated， 可能会触发多次<br>      &#125;<br>    &#125;)<br>    <br>    <span class="hljs-regexp">//</span> 自定义一个 设置字体颜色的 指令<br>    Vue.directive(<span class="hljs-string">&#x27;color&#x27;</span>, &#123;<br>      <span class="hljs-regexp">//</span> 样式，只要通过指令绑定给了元素，不管这个元素有没有被插入到页面中去，这个元素肯定有了一个内联的样式<br>      <span class="hljs-regexp">//</span> 将来元素肯定会显示到页面中，这时候，浏览器的渲染引擎必然会解析样式，应用给这个元素<br>      bind: <span class="hljs-keyword">function</span> (el, binding) &#123;<br>        <span class="hljs-regexp">//</span> el.style.color = <span class="hljs-string">&#x27;red&#x27;</span><br>        <span class="hljs-regexp">//</span> console.log(binding.name)<br>        <span class="hljs-regexp">//</span> 和样式相关的操作，一般都可以在 bind 执行<br><br>        <span class="hljs-regexp">//</span> console.log(binding.value)<br>        <span class="hljs-regexp">//</span> console.log(binding.expression)<br><br>        el.style.color = binding.value<br>      &#125;<br>    &#125;)<br><br><br><br><span class="hljs-regexp">//</span> 在VM对象里定义，自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：<br>      directives: &#123;<br>        color: &#123; <span class="hljs-regexp">//</span> 为元素设置指定的字体颜色<br>          bind(el, binding) &#123;<br>            el.style.color = binding.value;<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&#x27;font-weight&#x27;</span>: <span class="hljs-keyword">function</span> (el, binding2) &#123; <span class="hljs-regexp">//</span> 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数<br>          el.style.fontWeight = binding2.value;<br>        &#125;,<br>        <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-keyword">function</span> (el, binding) &#123; <span class="hljs-regexp">//</span> 注意：这个 <span class="hljs-keyword">function</span> 等同于 把 代码写到了 bind 和 update 中去<br>          el.style.fontSize = parseInt(binding.value) + <span class="hljs-string">&#x27;px&#x27;</span><br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>自定义指令的使用方式：</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;searchName&quot;</span> v-focus <span class="hljs-attribute">v-color</span>=<span class="hljs-string">&quot;&#x27;red&#x27;&quot;</span> <span class="hljs-attribute">v-font-weight</span>=<span class="hljs-string">&quot;900&quot;</span> <span class="hljs-attribute">v-fontsize</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Vue.elementDirective(<span class="hljs-string">&#x27;red-color&#x27;</span>, &#123;<br>  bind: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.el.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing">&lt;<span class="hljs-built_in">red</span>-<span class="hljs-built_in">color</span>&gt;<span class="hljs-number">1232</span>&lt;/<span class="hljs-built_in">red</span>-<span class="hljs-built_in">color</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">vue实例的生命周期</a></h2><ul><li>什么是生命周期：从Vue实例<code>创建</code>、<code>运行</code>、到<code>销毁</code>期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li><code>生命周期钩子</code> = <code>生命周期函数</code> = <code>生命周期事件</code></li><li>主要的生命周期函数分类：</li></ul><ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul><p><img src="/2019/11/02/Vue-js-II/lifecycle.png" alt="lc"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改msg&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;msg=&#x27;No&#x27;&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        msg: &#x27;ok&#x27;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">        show() &#123;</span><br><span class="xml">          console.log(&#x27;执行了show方法&#x27;)</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      beforeCreate() &#123; // 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它</span><br><span class="xml">        // console.log(this.msg)</span><br><span class="xml">        // this.show()</span><br><span class="xml">        // 注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化</span><br><span class="xml">      &#125;,</span><br><span class="xml">      created() &#123; // 这是遇到的第二个生命周期函数</span><br><span class="xml">        // console.log(this.msg)</span><br><span class="xml">        // this.show()</span><br><span class="xml">        //  在 created 中，data 和 methods 都已经被初始化好了！</span><br><span class="xml">        // 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</span><br><span class="xml">      &#125;,</span><br><span class="xml">      beforeMount() &#123; // 这是遇到的第3个生命周期函数，表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中</span><br><span class="xml">        // console.log(document.getElementById(&#x27;h3&#x27;).innerText)</span><br><span class="xml">        // 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串</span><br><span class="xml">      &#125;,</span><br><span class="xml">      mounted() &#123; // 这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了</span><br><span class="xml">        // console.log(document.getElementById(&#x27;h3&#x27;).innerText)</span><br><span class="xml">        // 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动</span><br><span class="xml">      &#125;,</span><br><span class="xml">      </span><br><span class="xml">      </span><br><span class="xml">      // 接下来的是运行中的两个事件</span><br><span class="xml">      beforeUpdate() &#123; // 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】</span><br><span class="xml">        /* console.log(&#x27;界面上元素的内容：&#x27; + document.getElementById(&#x27;h3&#x27;).innerText)</span><br><span class="xml">        console.log(&#x27;data 中的 msg 数据是：&#x27; + this.msg) */</span><br><span class="xml">        // 得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步</span><br><span class="xml">      &#125;,</span><br><span class="xml">      updated() &#123;</span><br><span class="xml">        console.log(&#x27;界面上元素的内容：&#x27; + document.getElementById(&#x27;h3&#x27;).innerText)</span><br><span class="xml">        console.log(&#x27;data 中的 msg 数据是：&#x27; + this.msg)</span><br><span class="xml">        // updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="vue-resource-实现-get-post-jsonp请求"><a href="#vue-resource-实现-get-post-jsonp请求" class="headerlink" title="vue-resource 实现 get, post, jsonp请求"></a><a href="https://github.com/pagekit/vue-resource">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p><ol><li>之前的学习中，如何发起数据（ajax？）请求？</li><li>常见的数据请求类型？  get  post  jsonp</li><li>测试的URL请求资源地址：</li></ol><ul><li>get请求地址： <a href="http://vue.studyit.io/api/getlunbo">http://vue.studyit.io/api/getlunbo</a></li><li>post请求地址：<a href="http://vue.studyit.io/api/post">http://vue.studyit.io/api/post</a></li><li>jsonp请求地址：<a href="http://vue.studyit.io/api/jsonp">http://vue.studyit.io/api/jsonp</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 注意：vue-resource 依赖于 Vue，所以先后顺序要注意  --&gt;</span><br>  <span class="hljs-comment">&lt;!-- this.$http.jsonp --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-resource-1.3.4.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;get请求&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getInfo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;post请求&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;postInfo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jsonp请求&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;jsonpInfo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 发起get请求</span></span><br><span class="javascript">          <span class="hljs-comment">//  当发起get请求之后， 通过 .then 来设置成功的回调函数</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.$http.get(<span class="hljs-string">&#x27;http://vue.studyit.io/api/getlunbo&#x27;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 通过 result.body 拿到服务器返回的成功的数据</span></span><br><span class="javascript">            <span class="hljs-comment">// console.log(result.body)</span></span><br>          &#125;)<br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">postInfo</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 发起 post 请求   application/x-wwww-form-urlencoded</span></span><br><span class="javascript">          <span class="hljs-comment">//  手动发起的 Post 请求，默认没有表单格式，所以，有的服务器处理不了</span></span><br><span class="javascript">          <span class="hljs-comment">//  通过 post 方法的第三个参数， &#123; emulateJSON: true &#125; 设置 提交的内容类型 为 普通表单数据格式</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.$http.post(<span class="hljs-string">&#x27;http://vue.studyit.io/api/post&#x27;</span>, &#123;&#125;, &#123; <span class="hljs-attr">emulateJSON</span>: <span class="hljs-literal">true</span> &#125;).then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(result.body)</span><br>          &#125;)<br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">jsonpInfo</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// 发起JSONP 请求</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.$http.jsonp(<span class="hljs-string">&#x27;http://vue.studyit.io/api/jsonp&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(result.body)</span><br>          &#125;)<br>        &#125;<br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>JSONP的实现原理</li></ol><ul><li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li><li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li><li>具体实现过程：<ul><li>先在客户端定义一个回调方法，预定义对数据的操作；</li><li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li><li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li><li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li></ul></li><li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//node服务器代码app.js     nser快速创建创建一个node服务器</span><br>    <br>    <span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br>    <span class="hljs-comment">// 导入解析 URL 地址的核心模块</span><br>    <span class="hljs-keyword">const</span> urlModule = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><br>    <span class="hljs-keyword">const</span> server = http.createServer();<br>    <span class="hljs-comment">// 监听 服务器的 request 请求事件，处理每个请求</span><br>    server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> url = req.url;<br><br>      <span class="hljs-comment">// 解析客户端请求的URL地址</span><br>      <span class="hljs-keyword">var</span> info = urlModule.parse(url, <span class="hljs-literal">true</span>);<br><br>      <span class="hljs-comment">// 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据</span><br>      <span class="hljs-keyword">if</span> (info.pathname === <span class="hljs-string">&#x27;/getjsonp&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 获取客户端指定的回调函数的名称</span><br>        <span class="hljs-keyword">var</span> cbName = info.query.callback;<br>        <span class="hljs-comment">// 手动拼接要返回给客户端的数据对象</span><br>        <span class="hljs-keyword">var</span> data = &#123;<br>          name: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>          age: <span class="hljs-number">22</span>,<br>          gender: <span class="hljs-string">&#x27;男&#x27;</span>,<br>          hobby: [<span class="hljs-string">&#x27;吃饭&#x27;</span>, <span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-string">&#x27;运动&#x27;</span>]<br>        &#125;<br>        <span class="hljs-comment">// 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-string">`<span class="hljs-subst">$&#123;cbName&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(data)&#125;</span>)`</span>;<br>        <span class="hljs-comment">// 将拼接好的方法的调用，返回给客户端去解析执行</span><br>        res.end(result);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.end(<span class="hljs-string">&#x27;404&#x27;</span>);<br>      &#125;<br>    &#125;);<br><br>    server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;server running at http://127.0.0.1:3000&#x27;</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li>vue-resource 的配置步骤：</li></ol><ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li><li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li></ul><ol start="6"><li>发送get请求：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// get 方式获取数据</span><br>  <span class="hljs-built_in">this</span>.$http.get(<span class="hljs-string">&#x27;http://127.0.0.1:8899/api/getlunbo&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.body);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>发送post请求：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">postInfo</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;http://127.0.0.1:8899/api/post&#x27;</span>;<br>  <span class="hljs-comment">// post 方法接收三个参数：</span><br>  <span class="hljs-comment">// 参数1： 要请求的URL地址</span><br>  <span class="hljs-comment">// 参数2： 要发送的数据对象</span><br>  <span class="hljs-comment">// 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded</span><br>  <span class="hljs-built_in">this</span>.$http.post(url, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span> &#125;, &#123; <span class="hljs-attr">emulateJSON</span>: <span class="hljs-literal">true</span> &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.body);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>发送JSONP请求获取数据：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">jsonpInfo</span>(<span class="hljs-params"></span>)</span> &#123; <span class="hljs-comment">// JSONP形式从服务器获取数据</span><br>  <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;http://127.0.0.1:8899/api/jsonp&#x27;</span>;<br>  <span class="hljs-built_in">this</span>.$http.jsonp(url).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res.body);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 客户端JSONP页面 .html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showInfo123</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(data)</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:3000/getscript?callback=showInfo123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;script&gt;</span><br><span class="hljs-comment">  show()</span><br><span class="hljs-comment">&lt;/script&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//   --服务端代码 .js--</span><br><br><span class="hljs-comment">// 导入 http 内置模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-comment">// 这个核心模块，能够帮我们解析 URL地址，从而拿到  pathname  query </span><br><span class="hljs-keyword">const</span> urlModule = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br><br><span class="hljs-comment">// 创建一个 http 服务器</span><br><span class="hljs-keyword">const</span> server = http.createServer()<br><span class="hljs-comment">// 监听 http 服务器的 request 请求</span><br>server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br><br>  <span class="hljs-comment">// const url = req.url</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">pathname</span>: url, query &#125; = urlModule.parse(req.url, <span class="hljs-literal">true</span>)<br><br>  <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/getscript&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 拼接一个合法的JS脚本，这里拼接的是一个方法的调用</span><br>    <span class="hljs-comment">// var scriptStr = &#x27;show()&#x27;</span><br><br>    <span class="hljs-keyword">var</span> data = &#123;<br>      name: <span class="hljs-string">&#x27;xjj&#x27;</span>,<br>      age: <span class="hljs-number">18</span>,<br>      gender: <span class="hljs-string">&#x27;女孩子&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">var</span> scriptStr = <span class="hljs-string">`<span class="hljs-subst">$&#123;query.callback&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(data)&#125;</span>)`</span><br>    <span class="hljs-comment">// res.end 发送给 客户端， 客户端去把 这个 字符串，当作JS代码去解析执行</span><br>    res.end(scriptStr)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.end(<span class="hljs-string">&#x27;404&#x27;</span>)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 指定端口号并启动服务器监听</span><br>server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;server listen at http://127.0.0.1:3000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="/2019/11/02/Vue-js-II/nodemon.png" alt="nodemon"></p><h2 id="配置本地数据库和数据接口API"><a href="#配置本地数据库和数据接口API" class="headerlink" title="配置本地数据库和数据接口API"></a>配置本地数据库和数据接口API</h2><ol><li>先解压安装 <code>PHPStudy</code>;</li><li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li><li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li><li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li><li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li><li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li><li>如果API启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是root，默认的密码也是root</li></ol><h2 id="品牌管理改造"><a href="#品牌管理改造" class="headerlink" title="品牌管理改造"></a>品牌管理改造</h2><p><strong>展示品牌列表、添加品牌数据、删除品牌数据</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-resource-1.3.4.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./lib/bootstrap-3.3.7.css&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span>添加品牌<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body form-inline&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">          Name:</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-bordered table-hover table-striped&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Ctime<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Operation<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.id</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.ctime</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 如果我们通过全局配置了，请求的数据接口 根域名，则 ，在每次单独发起 http 请求的时候，请求的 url 路径，应该以相对路径开头，前面不能带 /  ，否则 不会启用根路径做拼接；</span><br><span class="xml">    Vue.http.options.root = &#x27;www.liulongbin.top:3005/&#x27;;</span><br><span class="xml">    // 全局启用 emulateJSON 选项</span><br><span class="xml">    Vue.http.options.emulateJSON = true;</span><br><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        name: &#x27;&#x27;,</span><br><span class="xml">        list: [ // 存放所有品牌列表的数组</span><br><span class="xml">        ]</span><br><span class="xml">      &#125;,</span><br><span class="xml">      created() &#123; // 当 vm 实例 的 data 和 methods 初始化完毕后，vm实例会自动执行created 这个生命周期函数</span><br><span class="xml">        this.getAllList()</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">        getAllList() &#123; // 获取所有的品牌列表 </span><br><span class="xml">          // 分析：</span><br><span class="xml">          // 1. 由于已经导入了 Vue-resource这个包，所以 ，可以直接通过  this.$http 来发起数据请求</span><br><span class="xml">          // 2. 根据接口API文档，知道，获取列表的时候，应该发起一个 get 请求</span><br><span class="xml">          // 3. this.$http.get(&#x27;url&#x27;).then(function(result)&#123;&#125;)</span><br><span class="xml">          // 4. 当通过 then 指定回调函数之后，在回调函数中，可以拿到数据服务器返回的 result</span><br><span class="xml">          // 5. 先判断 result.status 是否等于0，如果等于0，就成功了，可以 把 result.message 赋值给 this.list ; 如果不等于0，可以弹框提醒，获取数据失败！</span><br><br><span class="xml">          this.$http.get(&#x27;api/getprodlist&#x27;).then(result =&gt; &#123;</span><br><span class="xml">            // 注意： 通过 $http 获取到的数据，都在 result.body 中放着</span><br><span class="xml">            var result = result.body</span><br><span class="xml">            if (result.status === 0) &#123;</span><br><span class="xml">              // 成功了</span><br><span class="xml">              this.list = result.message</span><br><span class="xml">            &#125; else &#123;</span><br><span class="xml">              // 失败了</span><br><span class="xml">              alert(&#x27;获取数据失败！&#x27;)</span><br><span class="xml">            &#125;</span><br><span class="xml">          &#125;)</span><br><span class="xml">        &#125;,</span><br><span class="xml">        add() &#123;  // 添加品牌列表到后台服务器</span><br><span class="xml">          // 分析：</span><br><span class="xml">          // 1. 听过查看 数据API接口，发现，要发送一个 Post 请求，  this.$http.post</span><br><span class="xml">          // 2. this.$http.post() 中接收三个参数：</span><br><span class="xml">          //   2.1 第一个参数： 要请求的URL地址</span><br><span class="xml">          //   2.2 第二个参数： 要提交给服务器的数据 ，要以对象形式提交给服务器 &#123; name: this.name &#125;</span><br><span class="xml">          //   3.3 第三个参数： 是一个配置对象，要以哪种表单数据类型提交过去， &#123; emulateJSON: true &#125;, 以普通表单格式，将数据提交给服务器 application/x-www-form-urlencoded</span><br><span class="xml">          // 3. 在 post 方法中，使用 .then 来设置成功的回调函数，如果想要拿到成功的结果，需要 result.body</span><br><br><span class="xml">          /* this.$http.post(&#x27;api/addproduct&#x27;, &#123; name: this.name &#125;, &#123; emulateJSON: true &#125;).then(result =&gt; &#123;</span><br><span class="xml">            if (result.body.status === 0) &#123;</span><br><span class="xml">              // 成功了！</span><br><span class="xml">              // 添加完成后，只需要手动，再调用一下 getAllList 就能刷新品牌列表了</span><br><span class="xml">              this.getAllList()</span><br><span class="xml">              // 清空 name </span><br><span class="xml">              this.name = &#x27;&#x27;</span><br><span class="xml">            &#125; else &#123;</span><br><span class="xml">              // 失败了</span><br><span class="xml">              alert(&#x27;添加失败！&#x27;)</span><br><span class="xml">            &#125;</span><br><span class="xml">          &#125;) */</span><br><br><span class="xml">          this.$http.post(&#x27;api/addproduct&#x27;, &#123; name: this.name &#125;).then(result =&gt; &#123;</span><br><span class="xml">            if (result.body.status === 0) &#123;</span><br><span class="xml">              // 成功了！</span><br><span class="xml">              // 添加完成后，只需要手动，再调用一下 getAllList 就能刷新品牌列表了</span><br><span class="xml">              this.getAllList()</span><br><span class="xml">              // 清空 name </span><br><span class="xml">              this.name = &#x27;&#x27;</span><br><span class="xml">            &#125; else &#123;</span><br><span class="xml">              // 失败了</span><br><span class="xml">              alert(&#x27;添加失败！&#x27;)</span><br><span class="xml">            &#125;</span><br><span class="xml">          &#125;)</span><br><span class="xml">        &#125;,</span><br><span class="xml">        del(id) &#123; // 删除品牌</span><br><span class="xml">          this.$http.get(&#x27;api/delproduct/&#x27; + id).then(result =&gt; &#123;</span><br><span class="xml">            if (result.body.status === 0) &#123;</span><br><span class="xml">              // 删除成功</span><br><span class="xml">              this.getAllList()</span><br><span class="xml">            &#125; else &#123;</span><br><span class="xml">              alert(&#x27;删除失败！&#x27;)</span><br><span class="xml">            &#125;</span><br><span class="xml">          &#125;)</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Vue中的动画"><a href="#Vue中的动画" class="headerlink" title="Vue中的动画"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html">Vue中的动画</a></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 没有动画效果，生硬 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggle&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;flag=!flag&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>这是一个H3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        flag: <span class="hljs-literal">false</span></span><br>      &#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p><h3 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h3><ol><li>HTML结构：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;动起来&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;myAnimate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isshow&quot;</span>&gt;</span>动画哦<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>VM 实例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    isshow: <span class="hljs-literal">false</span><br>  &#125;,<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">myAnimate</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.isshow = !<span class="hljs-built_in">this</span>.isshow;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li>定义两组类样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 定义进入和离开时候的过渡状态 */</span><br>    <span class="hljs-selector-class">.fade-enter-active</span>,<br>    <span class="hljs-selector-class">.fade-leave-active</span> &#123;<br>      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.2s</span> ease;<br>      <span class="hljs-attribute">position</span>: absolute;<br>    &#125;<br><br>    <span class="hljs-comment">/* 定义进入过渡的开始状态 和 离开过渡的结束状态 */</span><br>    <span class="hljs-selector-class">.fade-enter</span>,<br>    <span class="hljs-selector-class">.fade-leave-to</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">100px</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 2. 自定义两组样式，来控制 transition 内部的元素实现动画 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-comment">/* v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入 */</span></span><br><span class="css">    <span class="hljs-comment">/* v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了 */</span></span><br>    .v-enter,<br>    .v-leave-to &#123;<br><span class="css">      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">150px</span>);</span><br>    &#125;<br><br><span class="css">    <span class="hljs-comment">/* v-enter-active 【入场动画的时间段】 */</span></span><br><span class="css">    <span class="hljs-comment">/* v-leave-active 【离场动画的时间段】 */</span></span><br>    .v-enter-active,<br>    .v-leave-active&#123;<br><span class="css">      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.8s</span> ease;</span><br>    &#125;<br><br>    .my-enter,<br>    .my-leave-to &#123;<br><span class="css">      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">70px</span>);</span><br>    &#125;<br><br>    .my-enter-active,<br>    .my-leave-active&#123;<br><span class="css">      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.8s</span> ease;</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggle&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;flag=!flag&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1. 使用 transition 元素，把 需要被动画控制的元素，包裹起来 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- transition 元素，是 Vue 官方提供的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>这是一个H3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggle2&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;flag2=!flag2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h6</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag2&quot;</span>&gt;</span>这是一个H6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        flag: <span class="hljs-literal">false</span>,</span><br><span class="javascript">        flag2: <span class="hljs-literal">false</span></span><br>      &#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D">使用第三方 CSS 动画库</a></h3><ol><li>导入动画类库：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;./lib/animate.css&quot;</span>&gt;<br></code></pre></td></tr></table></figure></li><li>定义 transition 及属性：<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;transition<br>enter-active-<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;fadeInRight&quot;</span><br>    leave-active-<span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;fadeOutRight&quot;</span><br>    :duration=<span class="hljs-string">&quot;&#123; enter: 500, leave: 800 &#125;&quot;</span>&gt;<br>  &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;animated&quot;</span> v-show=<span class="hljs-string">&quot;isshow&quot;</span>&gt;动画哦&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/transition&gt;<br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./lib/animate.css&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 入场 bounceIn    离场 bounceOut --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggle&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;flag=!flag&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- &lt;transition enter-active-class=&quot;animated bounceIn&quot; leave-active-class=&quot;animated bounceOut&quot;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>这是一个H3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span> --&gt;</span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- 使用 :duration=&quot;毫秒值&quot; 来统一设置 入场 和 离场 时候的动画时长 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- &lt;transition enter-active-class=&quot;bounceIn&quot; leave-active-class=&quot;bounceOut&quot; :duration=&quot;200&quot;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;animated&quot;</span>&gt;</span>这是一个H3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span> --&gt;</span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- 使用  :duration=&quot;</span></span><span class="hljs-template-variable">&#123; enter: 200, leave: 400 &#125;</span><span class="xml"><span class="hljs-comment">&quot;  来分别设置 入场的时长 和 离场的时长  --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> </span></span><br><span class="xml">    enter-active-class=&quot;bounceIn&quot; </span><br><span class="xml">    leave-active-class=&quot;bounceOut&quot; </span><br><span class="xml">    :duration=&quot;</span><span class="hljs-template-variable">&#123; enter: 200, leave: 400 &#125;</span><span class="xml">&quot;&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;animated&quot;</span>&gt;</span>这是一个H3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span> </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">      el: &#x27;#app&#x27;,</span><br><span class="hljs-template-variable">      data: &#123;</span><br><span class="hljs-template-variable">        flag: false</span><br><span class="hljs-template-variable">      &#125;</span><span class="xml">,</span><br><span class="xml">      methods: </span><span class="hljs-template-variable">&#123;&#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h3><ol><li>定义 transition 组件以及三个钩子函数：<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;切换动画&quot;</span> @click=<span class="hljs-string">&quot;isshow = !isshow&quot;</span>&gt;<br>    &lt;transition<br>    @<span class="hljs-keyword">before</span>-enter=<span class="hljs-string">&quot;beforeEnter&quot;</span><br>    @enter=<span class="hljs-string">&quot;enter&quot;</span><br>    @<span class="hljs-keyword">after</span>-enter=<span class="hljs-string">&quot;afterEnter&quot;</span>&gt;<br>      &lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;isshow&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;OK&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/transition&gt;<br>  &lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure></li><li>定义三个 methods 钩子方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">beforeEnter</span>(<span class="hljs-params">el</span>)</span> &#123; <span class="hljs-comment">// 动画进入之前的回调</span><br>          el.style.transform = <span class="hljs-string">&#x27;translateX(500px)&#x27;</span>;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">enter</span>(<span class="hljs-params">el, done</span>)</span> &#123; <span class="hljs-comment">// 动画进入完成时候的回调</span><br>          el.offsetWidth;<br>          el.style.transform = <span class="hljs-string">&#x27;translateX(0px)&#x27;</span>;<br>          done();<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">afterEnter</span>(<span class="hljs-params">el</span>)</span> &#123; <span class="hljs-comment">// 动画进入完成之后的回调</span><br>          <span class="hljs-built_in">this</span>.isshow = !<span class="hljs-built_in">this</span>.isshow;<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure></li><li>定义动画过渡时长和样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.show</span>&#123;<br>      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.4s</span> ease;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>完整代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    .ball &#123;<br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: red;</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;快到碗里来&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;flag=!flag&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 1. 使用 transition 元素把 小球包裹起来 --&gt;</span><br>    &lt;transition<br>      @before-enter=&quot;beforeEnter&quot;<br>      @enter=&quot;enter&quot;<br>      @after-enter=&quot;afterEnter&quot;&gt;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ball&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        flag: <span class="hljs-literal">false</span></span><br>      &#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-comment">// 注意： 动画钩子函数的第一个参数：el，表示 要执行动画的那个DOM元素，是个原生的 JS DOM对象</span></span><br><span class="javascript">        <span class="hljs-comment">// 大家可以认为 ， el 是通过 document.getElementById(&#x27;&#x27;) 方式获取到的原生JS DOM对象</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">beforeEnter</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// beforeEnter 表示动画入场之前，此时，动画尚未开始，可以 在 beforeEnter 中，设置元素开始动画之前的起始样式</span></span><br><span class="javascript">          <span class="hljs-comment">// 设置小球开始动画之前的，起始位置</span></span><br><span class="javascript">          el.style.transform = <span class="hljs-string">&quot;translate(0, 0)&quot;</span></span><br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">enter</span>(<span class="hljs-params">el, done</span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// 这句话，没有实际的作用，但是，如果不写，出不来动画效果；</span></span><br><span class="javascript">          <span class="hljs-comment">// 可以认为 el.offsetWidth 会强制动画刷新</span></span><br>          el.offsetWidth<br><span class="javascript">          <span class="hljs-comment">// enter 表示动画 开始之后的样式，这里，可以设置小球完成动画之后的，结束状态</span></span><br><span class="javascript">          el.style.transform = <span class="hljs-string">&quot;translate(150px, 450px)&quot;</span></span><br><span class="javascript">          el.style.transition = <span class="hljs-string">&#x27;all 1s ease&#x27;</span></span><br><br><span class="javascript">          <span class="hljs-comment">// 这里的 done， 起始就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用</span></span><br>          done()<br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">afterEnter</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// 动画完成之后，会调用 afterEnter</span></span><br><span class="javascript">          <span class="hljs-comment">// console.log(&#x27;ok&#x27;)</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.flag = !<span class="hljs-built_in">this</span>.flag</span><br>        &#125;<br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1">v-for 的列表过渡</a></h3><ol><li>定义过渡样式：<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">&lt;<span class="hljs-string">style</span>&gt;<br>    .<span class="hljs-built_in">list-enter,</span><br><span class="hljs-built_in"></span>    .<span class="hljs-built_in">list-leave-to</span> &#123;<br>      <span class="hljs-string">opacity</span>: <span class="hljs-string">0</span>;<br>      <span class="hljs-string">transform</span>: <span class="hljs-string">translateY</span>(<span class="hljs-string">10px</span>);<br>    &#125;<br><br>    .<span class="hljs-built_in">list-enter-active,</span><br><span class="hljs-built_in"></span>    .<span class="hljs-built_in">list-leave-active</span> &#123;<br>      <span class="hljs-string">transition</span>: <span class="hljs-string">all</span> <span class="hljs-string">0</span>.<span class="hljs-string">3s</span> <span class="hljs-string">ease</span>;<br>    &#125;<br>&lt;/<span class="hljs-string">style</span>&gt;<br></code></pre></td></tr></table></figure></li><li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;txt&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;ul&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, i) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>定义 VM中的结构：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span><br><span class="hljs-keyword">var</span> vm = new Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-keyword">data</span>: &#123;<br>    txt: <span class="hljs-string">&#x27;&#x27;</span>,<br>    list: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>  &#125;,<br>  methods: &#123;<br>    add() &#123;<br>      <span class="hljs-keyword">this</span>.list.push(<span class="hljs-keyword">this</span>.txt);<br>      <span class="hljs-keyword">this</span>.txt = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h3></li></ol><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p><ul><li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.v-move</span>&#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.8s</span> ease;<br>&#125;<br><span class="hljs-selector-class">.v-leave-active</span>&#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>完整代码</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml">    li &#123;</span><br><span class="xml">      border: 1px dashed #999;</span><br><span class="xml">      margin: 5px;</span><br><span class="xml">      line-height: 35px;</span><br><span class="xml">      padding-left: 5px;</span><br><span class="xml">      font-size: 12px;</span><br><span class="xml">      width: 100%;</span><br><span class="xml">    &#125;</span><br><br><span class="xml">    li:hover &#123;</span><br><span class="xml">      background-color: hotpink;</span><br><span class="xml">      transition: all 0.8s ease;</span><br><span class="xml">    &#125;</span><br><br><span class="xml">    .v-enter,</span><br><span class="xml">    .v-leave-to &#123;</span><br><span class="xml">      opacity: 0;</span><br><span class="xml">      transform: translateY(80px);</span><br><span class="xml">    &#125;</span><br><br><span class="xml">    .v-enter-active,</span><br><span class="xml">    .v-leave-active &#123;</span><br><span class="xml">      transition: all 0.6s ease;</span><br><span class="xml">    &#125;</span><br><br><span class="xml">    /* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果 */</span><br><span class="xml">    .v-move &#123;</span><br><span class="xml">      transition: all 0.6s ease;</span><br><span class="xml">    &#125;</span><br><span class="xml">    .v-leave-active&#123;</span><br><span class="xml">      position: absolute;</span><br><span class="xml">    &#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        Id:</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        Name:</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- &lt;ul&gt; --&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个 元素 设置 :key 属性 --&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 给 ransition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果 --&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签 --&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">appear</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, i) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(i)&quot;</span>&gt;</span></span><br><span class="xml">          </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.id</span>&#125;&#125;</span><span class="xml"> --- </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.name</span>&#125;&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- &lt;/ul&gt; --&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        id: &#x27;&#x27;,</span><br><span class="xml">        name: &#x27;&#x27;,</span><br><span class="xml">        list: [</span><br><span class="xml">          &#123; id: 1, name: &#x27;赵高&#x27; &#125;,</span><br><span class="xml">          &#123; id: 2, name: &#x27;秦桧&#x27; &#125;,</span><br><span class="xml">          &#123; id: 3, name: &#x27;严嵩&#x27; &#125;,</span><br><span class="xml">          &#123; id: 4, name: &#x27;魏忠贤&#x27; &#125;</span><br><span class="xml">        ]</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">        add() &#123;</span><br><span class="xml">          this.list.push(&#123; id: this.id, name: this.name &#125;)</span><br><span class="xml">          this.id = this.name = &#x27;&#x27;</span><br><span class="xml">        &#125;,</span><br><span class="xml">        del(i) &#123;</span><br><span class="xml">          this.list.splice(i, 1)</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://v1-cn.vuejs.org/">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html">js 里面的键盘事件对应的键码</a></li><li><a href="https://github.com/pagekit/vue-resource">pagekit/vue-resource</a></li><li><a href="https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html">navicat如何导入sql文件和导出sql文件</a></li><li><a href="http://cubic-bezier.com/#.4,-0.3,1,.33">贝塞尔在线生成器</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java细节摘要</title>
    <link href="/2019/11/01/Java%E6%91%98%E8%A6%81/"/>
    <url>/2019/11/01/Java%E6%91%98%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<p>在 Java 的领域里，基本数据类型变量存的是数据本身，</p><p>而引用类型变量存的是保存数据的内存空间地址。</p><p><img src="/2019/11/01/Java%E6%91%98%E8%A6%81/type.png" alt="type"></p><p>为什么会有不同大小的类型，举个例子比如存 5 这个数据怎么存的？</p><p>A.   byte(8位，范围是-128到127)</p><p>B.   short（16位）</p><p>C.   int（32位）</p><p>D.   long (64位)</p><p>给long赋值时，因为整数默认是int类型，要转换为long类型的值，后面加上l或L  </p><p>上面的byte short int long 最大长度可以通过<code>jdk文档</code>去找到 具体的范围。</p><p>同一个整数可以使用不同的进制表示：<code>System.out.println(0b101</code>)需jdk1.7才能按照十进制输出</p><p>默认的进制10进制     二进制： 是 0b 或者 0B开头    八进制： 是0开头   十六进制： 0X (0x) 开头</p><p>Java7 开始 支持数字之间用 _ 分割（12_34_56输出123456）  </p><p>float(单精度32位), 默认浮点数的类型是 double,直接赋值时必须在数字后加上f 或F（ 表示一个浮点数在数字后面加一个F）</p><p>double( 双精度64位)</p><p>区别：对于单精度浮点数，运行速度相比double更快，占内存更小，但是当数值非常大或者     非常小的时候会变得不精确。</p><p>双精度比单精度表示的位数大 精确的位数多,简单地说, float表示的小数点位数少。</p><p>表现形式： 常规 3.14     科学计数法 3.14e2 3.14e-2</p><p>注意：表式的时候会有精度损失（使用浮点数的时候需要注意）</p><p>例如 double num= 1.0, 是一个无限接近1.0的一个值</p><p><strong>那怎么更精确的表示浮点数呢</strong>？<strong>BigDecimal</strong></p><p><strong>结论</strong>：浮点运算很少是精确的，只要是超过精度能表示的范围就会产生误差。往往产生误差不是 因为数的大小，而是因为数的精度。因此，产生的结果接近但不等于想要的结果。尤其在使用 float 和 double 作精确运 算的时候要特别小心。</p><p>char    16 位[0-65535] (2个字节,16位)。字符常量使用单引号   ‘  ’  包裹起来。</p><p>表现形式：</p><p>‘A’最常用，最直观的方式  </p><p>使用一个数字表示，对应有一个ASCII码表</p><p>例如:char c = 65;//表示 ’A’ 这个字符</p><p><img src="/2019/11/01/Java%E6%91%98%E8%A6%81/ASCii.jpg" alt="ascii">16进制表现形式    ‘A’-》65（10进制）    ‘A’ -》0x41（16进制）怎么表示？ ‘\u0041’</p><p>\r表示接受键盘输入，相当于按下了回车键；</p><p>\n表示换行；</p><p>\t表示相当于Table键制表符，；</p><p>\b表示退格键，相当于Back Space键；</p><p>&#39;表示单引号；</p><p>&#39;‘表示双引号；</p><p>\表示一个斜杠\。</p><p>值只有两个 true false，不能使用 0 1表示</p><p>String是 java中已经设计好的一个类，表示的值是字符串（Java中设计的类和我们自己设计的类的性质是一样的）</p><p>String s = “你好”;</p><p>当String 和 + 一起使用的时候，这时候+ 是拼接字符串的功能</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(“你好”+<span class="hljs-number">2</span>);<span class="hljs-comment">//结果为  你好2</span><br><span class="hljs-built_in">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">int</span> b = <span class="hljs-number">10</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(“a=”+a+”,b=”+b); <span class="hljs-comment">//结果为a=5,b=10  </span><br></code></pre></td></tr></table></figure><p><strong>一个类其实就是一种引用数据类型</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>A a; <span class="hljs-comment">// 声明了一个A类型的变量</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>误区</strong> <strong>：</strong> 很多人一开始觉得 Java中提供的类才是一种类型，而我们自己写觉得不是！</p><p>我们自己写的类和Java已经写好的，性质一样,  面向对象会详细讲解这块内容 </p><p><strong>数据类型转换</strong></p><p>①<strong>自动类型</strong>提升byte -》short -》int -》 long            float -》 double  char  boolean</p><p><img src="/2019/11/01/Java%E6%91%98%E8%A6%81/%E7%B1%BB%E5%9E%8B%E6%8F%90%E5%8D%87.png" alt="asd"></p><p>​         思考：为什么float 在long 后面？  </p><p>②数据类型的转换：数据的类型转换，比如整数10转换成小数10.0</p><p>③本质任何一个数据也都是有类型的！true , 3.14</p><p><strong>强制类型转换：</strong></p><p>①大数据类型转小数据类型[存储空间大小]</p><p>②相同存储空间不同类型表达值范围不一样      例如：char（无符号）及short（有符号）</p><p><strong>在Java中，boolean类型与所有其他7种类型都不能进行转换。</strong> (byte short int long float double char)  </p><ol><li>  数据类型过长 和 溢出</li></ol><ol start="2"><li>  long, float, double只要两个操作数中有一个是上面类型的，另一个就会被转换成相应类型，并且结果也是该类型</li></ol><ol start="3"><li>  如果2个操作数（包括byte，short，char，int），都将会转换为int类型，并且结果也是int（自动向上转型）</li></ol><ol start="4"><li>  char类型向更高长度类型（例如整型）转换时，会转换为对应的ASCII码值，再做其他类型的自动转换</li></ol><p>需要注意的是：char型具有两个字节，其数值范围是0 ~ 2^16-1，这直接导致byte型不能自动类型提升到char，char和short直接也不会发生自动类型提升（因为值范围问题），同时，byte当然可以直接提升到short型。</p><p> 所以，char 不能和byte short 相互自动转换</p><ol start="5"><li>  特例   </li></ol><p>①——————————————————————-&gt;</p><p>int a = 129;</p><p>byte b = (byte)a;//编译器只看容器不看值</p><p>System.out.println(b);//结果为-127</p><p>②——————————————————————&gt;</p><p>byte b = 100;//可以自动转换</p><p>float  f = 1.3;//不能自动转换</p><p>int a = 2147483647;</p><p>a = a+1;</p><p>System.out.println(a); // 结果为 -2147483648</p><p>高 转 低会导致精度丢失,不同类型的强制转换，可能会导致精度的下降.</p><p>比如说：double 转 float </p><p><strong>示例一</strong>：</p><p>int i1=123;</p><p>​         int i2=456; </p><p>​         float f1 = (float) ((i1+i2)*1.2);//容量大的类型转换为容量小的类型时，要加上强制转换符</p><p><strong>示例二</strong>：</p><p>short i=99;</p><p>char c=(char)i; </p><p>System.out.println(c); </p><p><strong>示例三</strong>：</p><p>byte b1=1;</p><p>byte b2=2;</p><p>byte b3=(byte)(b1+b2); //byte，short，char在计算时首先转换为int，大容//量（int）转换为小容量的类型（byte）时要加强制转换</p><p>​      <strong>特</strong> <strong>例</strong>：</p><p>byte t = 127;//不报错</p><p>int a = 127;</p><p>byte b = (byte)a;//需要强制转换才不报错：编译器只看容器不看值</p><p>System.out.println(b); // 结果为 127</p><p>如果值比long还大 ———–&gt;  怎么办？</p><p>java提供了一个类：BigInteger：用于处理较大整数：目前知道就好…</p><p>​         表达式 ： 由常量、变量、运算符和（） 组成的算式  </p><p>整数（小数）相除的例子  10/3 =3； 10.0/3=3.33333…</p><p>0/0    0.0/0.0       结果是NaN ,任何的NaN都不等于自己（面试题）</p><p>1.0/0.0      Infinity,表示无穷大</p><p><strong>自增自减运算的优先级 比 算术运算符 高</strong>  </p><p><img src="/2019/11/01/Java%E6%91%98%E8%A6%81/%E8%87%AA%E5%A2%9E%E5%87%8F%E8%BF%90%E7%AE%97.png" alt="q"></p><h3 id="比较运算符符号-gt-lt-gt-lt-instanceof"><a href="#比较运算符符号-gt-lt-gt-lt-instanceof" class="headerlink" title="比较运算符符号  ==  !=   &gt; &lt;  &gt;=  &lt;=  instanceof"></a>比较运算符符号  <strong>==  !=   &gt; &lt;  &gt;=  &lt;=  instanceof</strong></h3><p><strong>特别说明</strong>：instanceof 是判断一个对象是否属于某种类类型</p><p>思考：是否可以用于我们之前学习的基本数据类型（回忆一下我们之前学习的数据类型除了基本数据类型 还有什么？）</p><p>常见错误**：</p><p>​      例如：判断一个整数的变量 a里面的数据 在0-100之间</p><p>​      正确写法： a&gt;0  &amp;&amp; a&lt;100</p><p>​      错误写法:  0&lt; a &lt; 100 (java没有这种语法，不支持)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">short</span> s = <span class="hljs-number">3</span>;<br><span class="hljs-attribute">s</span> += <span class="hljs-number">2</span>;//存在隐式转换，隐式转换和自动转换概念不一样<br><span class="hljs-attribute">short</span> s = <span class="hljs-number">3</span>;<br><span class="hljs-attribute">s</span> = s+<span class="hljs-number">2</span>;//结果值是int，int不能自动转换为short<br></code></pre></td></tr></table></figure><p>昨天的面试final和finally的区别</p><p>finaly块里能用continue，break和return吗？</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java细节摘要</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java注解</title>
    <link href="/2019/11/01/Java%E6%B3%A8%E8%A7%A3/"/>
    <url>/2019/11/01/Java%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="Java注解"><a href="#Java注解" class="headerlink" title="Java注解"></a>Java注解</h3><h4 id="一、认识注解"><a href="#一、认识注解" class="headerlink" title="一、认识注解"></a>一、认识注解</h4><p>　　注解(Annotation)很重要，未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，现在已经有不少的人开始用注解了，注解是JDK1.5之后才有的新特性</p><p>​    JDK1.5之后内部提供的三个注解：</p><p>​        @Deprecated 意思是“<strong>废弃的，过时的</strong>”</p><p>​        @Override 意思是“<strong>重写、覆盖</strong>”</p><p>​        @SuppressWarnings 意思是“<strong>压缩警告</strong></p><blockquote><p>JDK内置注解：Override指“重写，覆盖”/Deprecated指“过时的，废弃的”/SuppressWarnings“镇压警告”</p><p>元注解：Documented/Inherited/Retention/Target/Constraint</p><p>自定义注解</p><p>解析注解</p><p>自定义注解生成SQL语句</p></blockquote><p>注解范例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package cn.kongwei_liao.annotation;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此类是用来演示注解(Annotation)的应用的，注解也是JDK1.5新增加的特性之一</span><br><span class="hljs-comment"> * JDK1.5内部提供的三种注解是：<span class="hljs-doctag">@SuppressWarnings</span>(&quot;:deprecation&quot;)、<span class="hljs-doctag">@Deprecated</span>、<span class="hljs-doctag">@Override</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author <span class="hljs-variable">Kongwei_Liao</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类名的命名是有讲究的，类名、属性名、变量名一般是名词，或者是形容词+名词，方法一般是动词，或者是动词+名词，</span><br><span class="hljs-comment"> * 以AnnotationTest作为类名和以TestAnnotation作为类名是有区别的，</span><br><span class="hljs-comment"> * 前者是注解的测试，符合名词的特征，后者是测试注解，听起来就是一个动作名称，是方法的命名特征</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationTest</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-variable">args</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">&quot;:deprecation&quot;</span>)<br>    <span class="hljs-comment">//这里就是注解，称为压缩警告，这是JDK内部自带的一个注解，`一个注解就是一个类`，在这里使用了这个注解就是创建了SuppressWarnings类的一个实例对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        System.runFinalizersOnExit(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//The method runFinalizersOnExit(boolean) from the type System is deprecated(过时的，废弃的)</span><br>        <span class="hljs-comment">//这里的runFinalizersOnExit()方法画了一条横线表示此方法已经过时了，不建议使用了</span><br>    &#125;<br>    <span class="hljs-meta">@Deprecated</span> <span class="hljs-comment">//这也是JDK内部自带的一个注解，意思就是说这个方法已经废弃了，不建议使用了</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hi,Kongwei_Liao&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//这也是JDK1.5之后内部提供的一个注解，意思就是要重写(覆盖)JDK内部的toString()方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Kongwei_Liao&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    总结：<strong>注解(Annotation)相当于一种标记，在程序中加入注解就等于为程序打上某种标记</strong>，没有加，则等于没有任何标记，以后，<strong>javac编译器、开发工具和其他程序可以<code>通过反射</code>**来了解你的类及各种元素上有无何种标记，看你的程序有什么标记，就去干相应的事，</strong>标记可以加在包、类，属性、方法，方法的参数以及局部变量上**。</p><p><img src="/2019/11/01/Java%E6%B3%A8%E8%A7%A3/AnnoStruct.jpg" alt="注解结构"></p><p>注解就相当于一个你的源程序要调用的一个类，在源程序中应用某个注解，得事先准备好这个注解类。就像你要调用某个类，得事先开发好这个类。 </p><h3 id="二、自定义注解及其应用"><a href="#二、自定义注解及其应用" class="headerlink" title="二、自定义注解及其应用"></a>二、自定义注解及其应用</h3><p><strong>自定义一个最简单的注解：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> @<span class="hljs-keyword">interface</span> <span class="hljs-symbol">MyAnnotation</span>&#123;&#125;<span class="hljs-comment">//自定义一个最简单的注解</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.annotation;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这是一个自定义的注解(Annotation)类 在定义注解(Annotation)类时使用了另一个注解类Retention</span><br><span class="hljs-comment"> * 在注解类上使用另一个注解类，那么被使用的注解类就称为元注解</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kongwei_liao</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//Retention注解决定MyAnnotation注解的生命周期</span><br><span class="hljs-meta">@Target( &#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><span class="hljs-comment">//Target注解决定MyAnnotation注解可以加在哪些成分上，如加在类身上，或者属性身上，或者方法身上等成分</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-comment"> * 这个注解的意思是让MyAnnotation注解只在java源文件中存在，编译成.class文件后注解就不存在了</span><br><span class="hljs-comment"> * @Retention(RetentionPolicy.CLASS)</span><br><span class="hljs-comment"> * 这个注解的意思是让MyAnnotation注解在java源文件(.java文件)中存在，编译成.class文件后注解也还存在，</span><br><span class="hljs-comment"> * 被MyAnnotation注解类标识的类被类加载器加载到内存中后MyAnnotation注解就不存在了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这里是在注解类MyAnnotation上使用另一个注解类，这里的Retention称为元注解。</span><br><span class="hljs-comment"> * Retention注解括号中的&quot;RetentionPolicy.RUNTIME&quot;意思是让MyAnnotation这个注解的生命周期一直程序运行时都存在</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>把自定义的注解加到某个类上：</strong> </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@ MyAnnotation <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">AnnotationUse</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>用反射测试进行测试AnnotationUse的定义上是否有@MyAnnotation</strong></p><p><img src="/2019/11/01/Java%E6%B3%A8%E8%A7%A3/%E5%8F%8D%E5%B0%84API.png" alt="反射"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-keyword">annotation</span>;<br><br><span class="hljs-meta">@MyAnnotation</span><span class="hljs-comment">//这里是将新创建好的注解类MyAnnotation标记到AnnotaionTest类上</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationUse</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> static void main(String[] args) &#123;<br>        <span class="hljs-comment">// 这里是检查Annotation类是否有注解，这里需要使用反射才能完成对Annotation类的检查</span><br>        <span class="hljs-keyword">if</span> (AnnotationUse.<span class="hljs-keyword">class</span>.isAnnotationPresent(MyAnnotation.<span class="hljs-keyword">class</span>)) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * MyAnnotation是一个类，这个类的实例对象annotation是通过反射得到的，这个实例对象是如何创建的呢？</span><br><span class="hljs-comment">             * 一旦在某个类上使用了@MyAnnotation，那么这个MyAnnotation类的实例对象annotation就会被创建出来了</span><br><span class="hljs-comment">             * 假设很多人考驾照，教练在有些学员身上贴一些绿牌子、黄牌子，贴绿牌子的表示送礼送得比较多的，</span><br><span class="hljs-comment">             * 贴黄牌子的学员表示送礼送得比较少的，不贴牌子的学员表示没有送过礼的，通过这个牌子就可以标识出不同的学员</span><br><span class="hljs-comment">             * 教官在考核时一看，哦，这个学员是有牌子的，是送过礼给他的，优先让有牌子的学员过，此时这个牌子就是一个注解</span><br><span class="hljs-comment">             * 一个牌子就是一个注解的实例对象，实实在在存在的牌子就是一个实实在在的注解对象，把牌子拿下来(去掉注解)注解对象就不存在了</span><br><span class="hljs-comment">             */</span><br>            MyAnnotation <span class="hljs-keyword">annotation</span> = (MyAnnotation) AnnotationUse.<span class="hljs-keyword">class</span><br>                    .getAnnotation(MyAnnotation.<span class="hljs-keyword">class</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>);<span class="hljs-comment">// 打印MyAnnotation对象，这里输出的结果为：@cn.kongwei_liao.annotation.MyAnnotation()</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、-Retention元注解"><a href="#三、-Retention元注解" class="headerlink" title="三、@Retention元注解"></a>三、@Retention元注解</h3><p>根据反射的测试的问题，引出@Retention元注解的讲解：</p><p>其三种取值：<strong>RetentionPolicy.SOURCE</strong>、<strong>RetentionPolicy.CLASS</strong>、<strong>RetentionPolicy.RUNTIME</strong></p><p>分别对应：Java源文件(.java文件)—-&gt;.class文件—-&gt;内存中的字节码 </p><h3 id="四、-Retention注解说明"><a href="#四、-Retention注解说明" class="headerlink" title="四、 Retention注解说明"></a>四、 Retention注解说明</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Documented</span><br><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-variable">@Target</span>(ElementType.ANNOTATION_TYPE)<br>public <span class="hljs-variable">@interface</span> Retention &#123;<br><br>    <span class="hljs-selector-tag">RetentionPolicy</span> <span class="hljs-selector-tag">value</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs applescript">public enum RetentionPolicy &#123;<br>    /**<br>     * Annotations are <span class="hljs-keyword">to</span> be discarded <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> compiler.<br>     * （注解将被编译器忽略掉）<br>     */<br>    SOURCE,<br><br>    /**<br>     * Annotations are <span class="hljs-keyword">to</span> be recorded <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">class</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> compiler<br>     * <span class="hljs-keyword">but</span> need <span class="hljs-keyword">not</span> be retained <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> VM <span class="hljs-keyword">at</span> <span class="hljs-built_in">run</span> <span class="hljs-built_in">time</span>.  This <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> default<br>     * behavior.<br>     * （注解将被编译器记录在<span class="hljs-built_in">class</span>文件中，但在运行时不会被虚拟机保留，这是一个默认的行为）<br>     */<br>    CLASS,<br><br>    /**<br>     * Annotations are <span class="hljs-keyword">to</span> be recorded <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">class</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> compiler <span class="hljs-keyword">and</span><br>     * retained <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> VM <span class="hljs-keyword">at</span> <span class="hljs-built_in">run</span> <span class="hljs-built_in">time</span>, so they may be <span class="hljs-built_in">read</span> reflectively.<br>     * （注解将被编译器记录在<span class="hljs-built_in">class</span>文件中，而且在运行时会被虚拟机保留，因此它们能通过反射被读取到）<br>     * @see java.lang.reflect.AnnotatedElement<br>     */<br>    RUNTIME<br>&#125;<br></code></pre></td></tr></table></figure><p>​        当在Java源程序上加了一个注解，这个Java源程序要由javac去编译，javac把java源文件编译成.class文件，</p><p>​        在编译成class时可能会把Java源程序上的一些注解给去掉，java编译器(javac)在处理java源程序时，可能会认为这个注解没有用了，于是就把这个注解去掉了，那么此时在编译好的class中就找不到注解了， 这是编译器编译java源程序时对注解进行处理的第一种可能情况，</p><p>​        假设java编译器在把java源程序编译成class时，没有把java源程序中的注解去掉，那么此时在编译好的class中就可以找到注解，当程序使用编译好的class文件时，需要用类加载器把class文件加载到内存中，class文件中的东西不是字节码，class文件里面的东西由类加载器加载到内存中去，</p><p>​        类加载器在加载class文件时，会对class文件里面的东西进行处理，如安全检查，处理完以后得到的最终在内存中的二进制的东西才是字节码，类加载器在把class文件加载到内存中时也有转换，转换时是否把class文件中的注解保留下来，这也有说法，</p><p>​        所以说<strong>一个注解的生命周期有三个阶段：java源文件是一个阶段，class文件是一个阶段，内存中的字节码是一个阶段</strong>,</p><p>​        javac把java源文件编译成.class文件时，有可能去掉里面的注解，类加载器把.class文件加载到内存时也有可能去掉里面的注解，</p><p>​        因此**在自定义注解时就可以使用Retention注解指明自定义注解的生命周期，自定义注解的生命周期是在RetentionPolicy.SOURCE阶段(java源文件阶段)，还是在RetentionPolicy.CLASS阶段(class文件阶段)，或者是在RetentionPolicy.RUNTIME阶段(内存中的字节码运行时阶段)**，</p><p>​        根据<strong>JDK提供的API可以知道默认是在RetentionPolicy.CLASS阶段 (JDK的API写到：the retention policy defaults to RetentionPolicy.CLASS.)</strong></p><blockquote><p><strong>下面看看@Deprecated、@Override、@SuppressWarnings这三个注解的@Retention注解的属性值分别是什么吧</strong></p></blockquote><h4 id="4-1、-Deprecated"><a href="#4-1、-Deprecated" class="headerlink" title="4.1、@Deprecated"></a><strong>4.1、@Deprecated</strong></h4><p>　　Java API中是这样定义的@Deprecated的</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Documented</span><br><span class="hljs-variable">@Retention</span>(value=RUNTIME)<br>public <span class="hljs-variable">@interface</span> Deprecated<br></code></pre></td></tr></table></figure><h4 id="4-2、-Override"><a href="#4-2、-Override" class="headerlink" title="4.2、@Override"></a><strong>4.2、@Override</strong></h4><p>　　Java API中是这样定义的@Override的</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Target</span>(value=METHOD)<br><span class="hljs-variable">@Retention</span>(value=SOURCE)<br>public <span class="hljs-variable">@interface</span> Override<br></code></pre></td></tr></table></figure><p>　　@Override是给javac(java编译器)看的，编译完以后就@Override注解就没有价值了，@Override注解在源代码中有用，编译成.class文件后@Override注解就没有用了，因此@Override的Retention的属性值是RetentionPolicy.SOURCE</p><h4 id="4-3、-SuppressWarnings"><a href="#4-3、-SuppressWarnings" class="headerlink" title="4.3、@SuppressWarnings"></a><strong>4.3、@SuppressWarnings</strong></h4><p>　　Java API中是这样定义的@SuppressWarnings的</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Target</span>(value=&#123;TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE&#125;)<br><span class="hljs-variable">@Retention</span>(value=SOURCE)<br>public <span class="hljs-variable">@interface</span> SuppressWarnings<br></code></pre></td></tr></table></figure><p>　　@SuppressWarnings是给javac(java编译器)看的，编译器编译完java文件后，@SuppressWarnings注解就没有用了，所以@SuppressWarnings的Retention的属性值是RetentionPolicy.SOURCE</p><h3 id="五、-Target元注解"><a href="#五、-Target元注解" class="headerlink" title="五、@Target元注解"></a>五、@Target元注解</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Documented</span><br><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-variable">@Target</span>(ElementType.ANNOTATION_TYPE)<br>public <span class="hljs-variable">@interface</span> Target &#123;<br>    <span class="hljs-selector-tag">ElementType</span><span class="hljs-selector-attr">[]</span> <span class="hljs-selector-tag">value</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">public enum ElementType &#123;<br>    <span class="hljs-comment">/** 类，接口（包括注解类型）或enum声明  */</span><br><span class="hljs-built_in">    TYPE,</span><br>    <span class="hljs-comment">/** 域声明（包括 enum 实例） */</span><br><span class="hljs-built_in">    FIELD,</span><br>    <span class="hljs-comment">/** 方法声明 */</span><br><span class="hljs-built_in">    METHOD,</span><br>    <span class="hljs-comment">/** 参数声明 */</span><br><span class="hljs-built_in">    PARAMETER,</span><br>    <span class="hljs-comment">/** 构造器声明 */</span><br><span class="hljs-built_in">    CONSTRUCTOR,</span><br>    <span class="hljs-comment">/** 局部变量声明  */</span><br><span class="hljs-built_in">    LOCAL_VARIABLE,</span><br>    <span class="hljs-comment">/** Annotation type declaration */</span><br><span class="hljs-built_in">    ANNOTATION_TYPE,</span><br>    <span class="hljs-comment">/**  包声明  */</span><br><span class="hljs-built_in">    PACKAGE,</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类型参数声明</span><br><span class="hljs-comment">     * @since 1.8</span><br><span class="hljs-comment">     */</span><br><span class="hljs-built_in">    TYPE_PARAMETER,</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类型的使用</span><br><span class="hljs-comment">     * @since 1.8</span><br><span class="hljs-comment">     */</span><br>    TYPE_USE<br>&#125;<br></code></pre></td></tr></table></figure><p>　　<code>@Target元注解决定了一个注解可以标识到哪些成分上</code>，如标识在在类，或者属性，或者方法等成分身上，@Target默认值为任何元素(成分)</p><p>例如：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>@Target(value=&#123;TYPE,<span class="hljs-keyword">FIELD</span>,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE&#125;)<br><span class="hljs-symbol">2 </span>@Retention(value=SOURCE)<br><span class="hljs-symbol">3 </span>public @interface SuppressWarnings<br></code></pre></td></tr></table></figure><h3 id="六、-Documented元注解"><a href="#六、-Documented元注解" class="headerlink" title="六、 @Documented元注解"></a>六、 @Documented元注解</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Documented</span><br><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-variable">@Target</span>(ElementType.ANNOTATION_TYPE)<br>public <span class="hljs-variable">@interface</span> Documented &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p> 即拥有这个注解的元素可以被javadoc此类的工具文档化。它代表着此注解会被javadoc工具提取成文档。在doc文档中的内容会因为此注解的信息内容不同而不同。相当与@return,@param 等。  </p><h3 id="七、-Inherited-元注解"><a href="#七、-Inherited-元注解" class="headerlink" title="七、@Inherited 元注解"></a>七、@Inherited 元注解</h3><p> @Inherited注解标记其他的注解用于指明标记的注解是可以被自动继承的。 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Documented</span><br><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-variable">@Target</span>(ElementType.ANNOTATION_TYPE)<br>public <span class="hljs-variable">@interface</span> Inherited &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p> 允许子类继承父类中的注解。即拥有此注解的元素其子类可以继承父类的注解。 </p><h3 id="八、为注解增加属性"><a href="#八、为注解增加属性" class="headerlink" title="八、为注解增加属性"></a>八、为注解增加属性</h3><p>　　注解可以看成是一种<code>特殊的类</code>，既然是类，那自然可以为类添加属性</p><h4 id="8-1-添加属性"><a href="#8-1-添加属性" class="headerlink" title="8.1.添加属性"></a>8.<strong>1.添加属性</strong></h4><p>　<strong>语法：类型 属性名();</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.annotation;<br> <br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-comment">//Retention注解决定MyAnnotation注解的生命周期</span><br><span class="hljs-meta">@Target( &#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义基本属性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">color</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//这不是声明的方法吗，为什么在在注解中称为属性**Q1**</span><br>&#125;<br></code></pre></td></tr></table></figure><p>　　其实从代码的写法上来看，注解更像是一种<code>特殊的接口</code>，注解的属性定义方式就和接口中定义方法的方式一样，而<code>应用了注解的类可以认为是实现了这个特殊的接口</code></p><h4 id="8-2-应用属性"><a href="#8-2-应用属性" class="headerlink" title="8.2.应用属性"></a>8.<strong>2.应用属性</strong></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-keyword">annotation</span>;<br><br><span class="hljs-meta">@MyAnnotation(color=<span class="hljs-meta-string">&quot;red&quot;</span>)</span><span class="hljs-comment">//应用MyAnnotation注解的color属性   **Q1 without A**</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAnnotationTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> static void main(String[] args) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 用反射方式获得注解对应的实例对象后，在通过该对象调用属性对应的方法</span><br><span class="hljs-comment">        */</span><br>        MyAnnotation <span class="hljs-keyword">annotation</span> = (MyAnnotation) MyAnnotationTest.<span class="hljs-keyword">class</span>.getAnnotation(MyAnnotation.<span class="hljs-keyword">class</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.color());<span class="hljs-comment">//输出red</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-3-为属性指定缺省值-默认值"><a href="#8-3-为属性指定缺省值-默认值" class="headerlink" title="8.3.为属性指定缺省值(默认值)"></a>8.3.<strong>为属性指定缺省值(默认值)</strong></h4><p>　　<strong>语法：类型 属性名() default 默认值;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//Retention注解决定MyAnnotation注解的生命周期</span><br><span class="hljs-meta">@Target( &#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-function">String <span class="hljs-title">color</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;blue&quot;</span>;<span class="hljs-comment">//为属性指定缺省值   **Q1**</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">package</span> cn.kongwei_liao.annotation;<br><br><span class="hljs-keyword">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> MyAnnotationTest &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 用反射方式获得注解对应的实例对象后，在通过该对象调用属性对应的方法</span><br><span class="hljs-comment">         */</span><br>         MyAnnotation annotation = (MyAnnotation) MyAnnotationTest.<span class="hljs-keyword">class</span>.getAnnotation(MyAnnotation.<span class="hljs-keyword">class</span>);<br>         System.<span class="hljs-keyword">out</span>.println(annotation.color());<span class="hljs-comment">//输出color属性的默认值：blue</span><br>        <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-4-value属性"><a href="#8-4-value属性" class="headerlink" title="8.4.value属性"></a><strong>8.4.value属性</strong></h4><p>　　如果一个<code>注解中有一个名称为value的属性</code>，且你只想设置value属性(即其他属性都采用默认值或者你只有一个value属性)，那么可以省略掉“value=”部分。</p><p>　　例如：@SuppressWarnings(“deprecation”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-comment">//Retention注解决定MyAnnotation注解的生命周期</span><br><span class="hljs-meta">@Target( &#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-function">String <span class="hljs-title">color</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;blue&quot;</span>;<span class="hljs-comment">//为属性指定缺省值</span><br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//定义一个名称为value的属性    **Q2一定是叫value属性名吗**</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-keyword">annotation</span>;<br><br><span class="hljs-meta">@MyAnnotation(<span class="hljs-meta-string">&quot;kongwei_liao&quot;</span>)</span><span class="hljs-comment">//等价于@MyAnnotation(value=&quot;kongwei_liao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAnnotationTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> static void main(String[] args) &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 用反射方式获得注解对应的实例对象后，在通过该对象调用属性对应的方法</span><br><span class="hljs-comment">         */</span><br>        MyAnnotation <span class="hljs-keyword">annotation</span> = (MyAnnotation) MyAnnotationTest.<span class="hljs-keyword">class</span>.getAnnotation(MyAnnotation.<span class="hljs-keyword">class</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.color());<span class="hljs-comment">//输出color属性的默认值：blue</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、为注解增加高级属性"><a href="#九、为注解增加高级属性" class="headerlink" title="九、为注解增加高级属性"></a>九、为注解增加高级属性</h3><h4 id="9-1、-数组类型的属性"><a href="#9-1、-数组类型的属性" class="headerlink" title="9.1、**数组类型的属性**"></a>9.1、**<code>数组类型</code>的属性**</h4><ul><li>增加数组类型的属性：int[] arrayAttr() default {1,2,4};</li><li>应用数组类型的属性：@MyAnnotation(arrayAttr={2,4,5})</li><li>如果数组属性只有一个值，这时候属性值部分可以省略大括号，如：@MyAnnotation(arrayAttr=2)，这就表示数组属性只有一个值，值为2</li></ul><h4 id="9-2-、-枚举类型的属性"><a href="#9-2-、-枚举类型的属性" class="headerlink" title="9.2.、**枚举类型的属性**"></a>9.2.、**<code>枚举类型</code>的属性**</h4><ul><li>增加枚举类型的属性：EumTrafficLamp lamp() default EumTrafficLamp.RED;</li><li>应用枚举类型的属性：@MyAnnotation(lamp=EumTrafficLamp.GREEN)</li></ul><h4 id="9-3、-注解类型的属性"><a href="#9-3、-注解类型的属性" class="headerlink" title="9.3、**注解类型的属性**"></a>9.3、**<code>注解类型</code>的属性**</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MetaAnnotation注解类为元注解</span><br><span class="hljs-comment"> * @author kongwei_liao</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> @<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MetaAnnotation</span> </span>&#123;<br>    <span class="hljs-keyword">String</span> value();<span class="hljs-comment">//元注解MetaAnnotation设置有一个唯一的属性value</span><br>&#125;<br></code></pre></td></tr></table></figure><p>　　为注解添加一个注解类型的属性,并指定注解属性的缺省值：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">MetaAnnotation annotationAttr() default <span class="hljs-keyword">@MetaAnnotation</span>(<span class="hljs-string">&quot;xdp&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="十、注解综合测试"><a href="#十、注解综合测试" class="headerlink" title="十、注解综合测试"></a>十、注解综合测试</h3><p>EumTrafficLamp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.annotation;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 交通信号灯颜色枚举</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> kongwei_liao</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">EumTrafficLamp</span> </span>&#123;<br>    RED,<span class="hljs-comment">//红</span><br>    YELLOW,<span class="hljs-comment">//黄</span><br>    GREEN<span class="hljs-comment">//绿</span><br>&#125;<br></code></pre></td></tr></table></figure><p>MetaAnnotation.java</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MetaAnnotation注解类为元注解</span><br><span class="hljs-comment"> * @author kongwei_liao</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> @<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MetaAnnotation</span> </span>&#123;<br>    <span class="hljs-keyword">String</span> value();<span class="hljs-comment">//元注解MetaAnnotation设置有一个唯一的属性value</span><br>&#125;<br></code></pre></td></tr></table></figure><p>MyAnnotation.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.kongwei_liao.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-comment">//Retention注解决定MyAnnotation注解的生命周期</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-function">String <span class="hljs-title">color</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;blue&quot;</span>;<span class="hljs-comment">//为属性指定缺省值</span><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为注解添加value属性，这个value属性很特殊，如果一个注解中只有一个value属性要设置，</span><br><span class="hljs-comment">     * 那么在设置注解的属性值时，可以省略属性名和等号不写， 直接写属性值，如<span class="hljs-doctag">@SuppressWarnings</span>(&quot;deprecation&quot;)，</span><br><span class="hljs-comment">     * 这里的MyAnnotation注解设置了两个String类型的属性，color和value，</span><br><span class="hljs-comment">     * 因为color属性指定有缺省值，value属性又是属于特殊的属性，因此使用MyAnnotation注解时</span><br><span class="hljs-comment">     * 可以这样使用MyAnnotation注解：&quot;<span class="hljs-doctag">@MyAnnotation</span>(color=&quot;red&quot;,value=&quot;xdp&quot;)&quot;</span><br><span class="hljs-comment">     * 也可以这样使用：&quot;<span class="hljs-doctag">@MyAnnotation</span>(&quot;kongwei_liao&quot;)&quot;，这样写就表示MyAnnotation注解只有一个value属性要设置，color属性采用缺省值</span><br><span class="hljs-comment">     * 当一个注解只有一个value属性要设置时，是可以省略&quot;value=&quot;的</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//定义一个名称为value的属性</span><br>     <span class="hljs-comment">//添加一个int类型数组的属性</span><br>     <span class="hljs-keyword">int</span>[] arrayAttr() <span class="hljs-keyword">default</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br>     <span class="hljs-comment">//添加一个枚举类型的属性，并指定枚举属性的缺省值，缺省值只能从枚举类EumTrafficLamp中定义的枚举对象中取出任意一个作为缺省值</span><br>     <span class="hljs-function">EumTrafficLamp <span class="hljs-title">lamp</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> EumTrafficLamp.RED</span>;<br>     <span class="hljs-comment">//为注解添加一个注解类型的属性,并指定注解属性的缺省值</span><br>     <span class="hljs-function">MetaAnnotation <span class="hljs-title">annotationAttr</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> @<span class="hljs-title">MetaAnnotation</span><span class="hljs-params">(<span class="hljs-string">&quot;xdp&quot;</span>)</span></span>;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>MyAnnotationTest.java</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> cn.kongwei_liao.<span class="hljs-keyword">annotation</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这里是将新创建好的注解类MyAnnotation标记到AnnotaionTest类上，</span><br><span class="hljs-comment"> * 并应用了注解类MyAnnotation中定义各种不同类型的的属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@MyAnnotation(</span><br><span class="hljs-meta">        color=<span class="hljs-meta-string">&quot;red&quot;</span>,</span><br><span class="hljs-meta">        value=<span class="hljs-meta-string">&quot;kongwei_liao&quot;</span>,</span><br><span class="hljs-meta">        arrayAttr=&#123;3,5,6&#125;,</span><br><span class="hljs-meta">       lamp=EumTrafficLamp.GREEN,</span><br><span class="hljs-meta">       annotationAttr=@MetaAnnotation(<span class="hljs-meta-string">&quot;gacl&quot;</span>)</span><br>        )<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAnnotationTest</span> </span>&#123;<br>    <span class="hljs-meta">@MyAnnotation(<span class="hljs-meta-string">&quot;将MyAnnotation注解标注到main方法上&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> static void main(String[] args) &#123;<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 这里是检查Annotation类是否有注解，这里需要使用反射才能完成对Annotation类的检查</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(MyAnnotationTest.<span class="hljs-keyword">class</span>.isAnnotationPresent(MyAnnotation.<span class="hljs-keyword">class</span>)) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 用反射方式获得注解对应的实例对象后，在通过该对象调用属性对应的方法</span><br><span class="hljs-comment">             * MyAnnotation是一个类，这个类的实例对象annotation是通过反射得到的，这个实例对象是如何创建的呢？</span><br><span class="hljs-comment">             * 一旦在某个类上使用了<span class="hljs-doctag">@MyAnnotation</span>，那么这个MyAnnotation类的实例对象annotation就会被创建出来了</span><br><span class="hljs-comment">             */</span><br>            MyAnnotation <span class="hljs-keyword">annotation</span> = (MyAnnotation) MyAnnotationTest.<span class="hljs-keyword">class</span>.getAnnotation(MyAnnotation.<span class="hljs-keyword">class</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.color());<span class="hljs-comment">//输出color属性的默认值：red</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.value());<span class="hljs-comment">//输出value属性的默认值：kongwei_liao</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.arrayAttr().length);<span class="hljs-comment">//这里输出的数组属性的长度的结果为：3，数组属性有三个元素，因此数组的长度为3</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.lamp());<span class="hljs-comment">//这里输出的枚举属性值为：GREEN</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">annotation</span>.annotationAttr().value());<span class="hljs-comment">//这里输出的注解属性值:gacl</span><br>            <br>            MetaAnnotation ma = <span class="hljs-keyword">annotation</span>.annotationAttr();<span class="hljs-comment">//annotation是MyAnnotation类的一个实例对象</span><br>            System.<span class="hljs-keyword">out</span>.println(ma.value());<span class="hljs-comment">//输出的结果为：gacl</span><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过引入自定义HTML生成器的注解类，在类中标注出字段以及字段的名称（标签），在运行时动态读取类中的注解信息，直接生成HTML页面，如此可省去大量的JSP页面编写工作。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>注解(Annotation)</tag>
      
      <tag>Retention元注解</tag>
      
      <tag>Target元注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js-I</title>
    <link href="/2019/10/31/Vue-js-I/"/>
    <url>/2019/10/31/Vue-js-I/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-I"><a href="#Vue-js-I" class="headerlink" title="Vue.js - I"></a>Vue.js - I</h1><p>学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>以项目驱动实践；</p><h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3><ul><li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p></li><li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p></li><li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p></li><li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p></li></ul><h2 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h2><ul><li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；</li></ul><ul><li>企业中，使用框架，能够提高开发的效率；</li></ul><ul><li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li><li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li></ul><ul><li>增强自己就业时候的竞争力</li></ul><ul><li>人无我有，人有我优</li><li>你平时不忙的时候，都在干嘛？</li></ul><h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul><li>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</li></ul><ul><li>node 中的 express；</li></ul><ul><li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</li></ul><ul><li><ol><li>从Jquery 切换到 Zepto</li></ol></li><li><ol start="2"><li>从 EJS 切换到 art-template</li></ol></li></ul><h2 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul><li><p>MVC 是后端的分层开发概念；</p></li><li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p></li><li><p>为什么有了MVC还要有MVVM</p></li></ul><p><img src="/2019/10/31/Vue-js-I/MVC%E5%92%8CMVVM%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE%E8%A7%A3.png" alt="1"></p><h2 id="Vue-js-基本代码-和-MVVM-之间的对应关系（同上图）"><a href="#Vue-js-基本代码-和-MVVM-之间的对应关系（同上图）" class="headerlink" title="Vue.js 基本代码 和 MVVM 之间的对应关系（同上图）"></a>Vue.js 基本代码 和 MVVM 之间的对应关系（同上图）</h2><h2 id="Vue之-基本的代码结构和插值表达式"><a href="#Vue之-基本的代码结构和插值表达式" class="headerlink" title="Vue之 - 基本的代码结构和插值表达式"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code></h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 1. 导入Vue的包 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 将来 new 的Vue实例，会控制这个 元素中的所有内容 --&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- Vue 实例所控制的这个元素区域，就是我们的 V  --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!--</span></span><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span><span class="xml"><span class="hljs-comment">插值表达式--&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 2. 创建一个Vue的实例</span><br><span class="xml">    // 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数</span><br><span class="xml">    //  注意：我们 new 出来的这个 vm 对象，就是我们 MVVM中的 VM调度者</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,  // 表示，当前我们 new 的这个 Vue 实例，要控制页面上的哪个区域</span><br><span class="xml">      // 这里的 data 就是 MVVM中的 M，专门用来保存 每个页面的数据的</span><br><span class="xml">      data: &#123; // data 属性中，存放的是 el 中要用到的数据</span><br><span class="xml">        msg: &#x27;欢迎学习Vue&#x27; // 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;)</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 1. 如何定义一个基本的Vue代码结构 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 2. 插值表达式  --&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p><strong>之后的代码区域会省略body标签外的内容</strong></p></blockquote><h2 id="Vue指令之v-cloak-v-text和v-html"><a href="#Vue指令之v-cloak-v-text和v-html" class="headerlink" title="Vue指令之v-cloak,v-text和v-html"></a>Vue指令之<code>v-cloak</code>,<code>v-text</code>和<code>v-html</code></h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 使用 v-cloak 能够解决 插值表达式闪烁的问题 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-cloak</span>&gt;</span>++++++++ </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="xml"> ----------<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!-- 插值表达式额外的内容不覆盖 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>==================<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><span class="hljs-comment">&lt;!-- 解析到此处时=========被msg内容覆盖覆盖 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- v-text会覆盖元素中原本的内容，但是 插值表达式 只会替换自己的这个占位符，不会把 整个元素的内容清空 --&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg2</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--当作普通字符串--&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--当作普通字符串--&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span>1212112<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--当作HTML标签内容--&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--为什么放到这里会有更好的演示效果，思考一下--&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        msg: &#x27;123&#x27;,</span><br><span class="xml">        msg2: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>哈哈，我是一个大大的H1， 我大，我骄傲<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&#x27;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123; // 这个 methods属性中定义了当前Vue实例所有可用的方法</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;)</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 1. v-cloak --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 2. v-text --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 3. v-html --&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Vue指令之v-bind的三种用法和v-on"><a href="#Vue指令之v-bind的三种用法和v-on" class="headerlink" title="Vue指令之v-bind的三种用法和v-on"></a>Vue指令之<code>v-bind</code>的三种用法和<code>v-on</code></h2><ol><li><p>直接使用指令<code>v-bind</code></p></li><li><p>使用简化指令<code>:</code></p></li><li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- v-bind: 是 Vue中，提供的用于绑定属性的指令 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; title=&quot;mytitle&quot;&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle&quot;&gt; --&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle + &#x27;123&#x27;&quot;&gt; --&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 注意： v-bind: 指令可以被简写为 :要绑定的属性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle&quot;&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Vue 中提供了 v-on: 事件绑定机制 --&gt;</span><br>    <span class="hljs-comment">&lt;!--Vue不提倡的DOM操作--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle + &#x27;123&#x27;&quot; id=&quot;btn&quot;&gt; --&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--Vue的v-on事件绑定--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle + &#x27;123&#x27;&quot; v-on:click=&quot;alert(&#x27;hello&#x27;)&quot;&gt; --&gt;</span><span class="hljs-comment">&lt;!--不能这样写会报alert未定义的错误--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        mytitle: <span class="hljs-string">&#x27;这是一个自己定义的title&#x27;</span></span><br>      &#125;,<br><span class="javascript">      methods: &#123; <span class="hljs-comment">// 这个 methods属性中定义了当前Vue实例所有可用的方法</span></span><br><span class="javascript">        show: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          alert(<span class="hljs-string">&#x27;Hello&#x27;</span>)</span><br>        &#125;<br>      &#125;<br>    &#125;)<br><br><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">      alert(<span class="hljs-string">&#x27;Hello&#x27;</span>)</span><br>    &#125; <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 1. v-bind   Vue提供的属性绑定机制   缩写是 : --&gt;</span><br><span class="hljs-comment">&lt;!-- 2. v-on     Vue提供的事件绑定机制   缩写是 @ --&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2019/10/31/Vue-js-I/v-onError.png" alt="2"></p><h2 id="Vue指令之v-on做跑马灯效果"><a href="#Vue指令之v-on做跑马灯效果" class="headerlink" title="Vue指令之v-on做跑马灯效果"></a>Vue指令之<code>v-on</code>做<code>跑马灯效果</code></h2><h3 id="跑马灯效果代码实现"><a href="#跑马灯效果代码实现" class="headerlink" title="跑马灯效果代码实现"></a>跑马灯效果代码实现</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-comment">&lt;!-- 2. 创建一个要控制的区域 --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;浪起来&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;lang&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;低调&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 注意：在 VM实例中，如果想要获取 data 上的数据，或者 想要调用 methods 中的 方法，必须通过 this.数据属性名  或  this.方法名 来进行访问，这里的this，就表示 我们 new 出来的  VM 实例对象</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        msg: &#x27;猥琐发育，别浪~~！&#x27;,</span><br><span class="xml">        intervalId: null // 在data上定义 定时器Id</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">        lang() &#123;</span><br><span class="xml">          // console.log(this.msg)</span><br><span class="xml">          // 获取到头的第一个字符</span><br><span class="xml">          // this</span><br><br><span class="xml">          if (this.intervalId != null) return;//验证当前是否已有定时器运行</span><br><br><span class="xml">          //嵌套函数this指向问题</span><br><span class="xml">          // var _this=this;</span><br><span class="xml">          // setInterval(function() &#123; </span><br><span class="xml">          //   var start = _this.msg.substring(0, 1)</span><br><span class="xml">          //   // 获取到 后面的所有字符</span><br><span class="xml">          //   var end = _this.msg.substring(1)</span><br><span class="xml">          //   // 重新拼接得到新的字符串，并赋值给 this.msg</span><br><span class="xml">          //   _this.msg = end + start</span><br><span class="xml">          // &#125;, 400)</span><br><br><span class="xml">          this.intervalId = </span><br><span class="xml">          setInterval(() =&gt; &#123; //=&gt;实现嵌套函数</span><br><span class="xml">            var start = this.msg.substring(0, 1)</span><br><span class="xml">            var end = this.msg.substring(1)</span><br><span class="xml">            this.msg = end + start</span><br><span class="xml">          &#125;, 400)</span><br><br><span class="xml">          // 注意： VM实例，会监听自己身上 data 中所有数据的改变，只要数据一发生变化，就会自动把 最新的数据，从data 上同步到页面中去；【好处：程序员只需要关心数据，不需要考虑如何重新渲染DOM页面】</span><br><span class="xml">        &#125;,</span><br><span class="xml">        stop() &#123; // 停止定时器</span><br><span class="xml">          clearInterval(this.intervalId)</span><br><span class="xml">          // 每当清除了定时器之后，需要重新把 intervalId 置为 null</span><br><span class="xml">          this.intervalId = null;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;)</span><br><br><span class="xml">    // 分析：</span><br><span class="xml">    // 1. 给 【浪起来】 按钮，绑定一个点击事件   v-on   @</span><br><span class="xml">    // 2. 在按钮的事件处理函数中，写相关的业务逻辑代码：拿到 msg 字符串，然后 调用 字符串的 substring 来进行字符串的截取操作，把 第一个字符截取出来，放到最后一个位置即可；</span><br><span class="xml">    // 3. 为了实现点击下按钮，自动截取的功能，需要把 2 步骤中的代码，放到一个定时器中去；</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h3><ul><li><p>.stop       阻止冒泡</p></li><li><p>.prevent    阻止默认事件</p></li><li><p>.capture    添加事件侦听器时使用事件捕获模式</p></li><li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p></li><li><p>.once       事件只触发一次</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    .inner &#123;<br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: darkcyan;</span><br>    &#125;<br>    .outer &#123;<br><span class="css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: red;</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用  .stop  阻止冒泡 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;div class=&quot;inner&quot; @click=&quot;div1Handler&quot;&gt;</span><br><span class="hljs-comment">      &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click.stop=&quot;btnHandler&quot;&gt;</span><br><span class="hljs-comment">    &lt;/div&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用 .prevent 阻止默认行为 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;linkClick&quot;&gt;有问题，先去百度&lt;/a&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用  .capture 实现捕获触发事件的机制 先触发div1Handler，在执行btnHandler --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;div class=&quot;inner&quot; @click.capture=&quot;div1Handler&quot;&gt;</span><br><span class="hljs-comment">      &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click=&quot;btnHandler&quot;&gt;</span><br><span class="hljs-comment">    &lt;/div&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;div class=&quot;inner&quot; @click.self=&quot;div1Handler&quot;&gt;</span><br><span class="hljs-comment">      &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click=&quot;btnHandler&quot;&gt;</span><br><span class="hljs-comment">    &lt;/div&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent.once=&quot;linkClick&quot;&gt;有问题，先去百度&lt;/a&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;a href=&quot;http://www.baidu.com&quot; @click.once.prevent=&quot;linkClick&quot;&gt;有问题，先去百度&lt;/a&gt; --&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 演示： .stop 和 .self 的区别 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;</span><br><span class="hljs-comment">      &lt;div class=&quot;inner&quot; @click=&quot;div1Handler&quot;&gt;</span><br><span class="hljs-comment">        &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click.stop=&quot;btnHandler&quot;&gt;</span><br><span class="hljs-comment">      &lt;/div&gt;</span><br><span class="hljs-comment">    &lt;/div&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- .self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡的行为 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;div class=&quot;outer&quot; @click=&quot;div2Handler&quot;&gt;</span><br><span class="hljs-comment">      &lt;div class=&quot;inner&quot; @click.self=&quot;div1Handler&quot;&gt;</span><br><span class="hljs-comment">        &lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click=&quot;btnHandler&quot;&gt;</span><br><span class="hljs-comment">      &lt;/div&gt;</span><br><span class="hljs-comment">    &lt;/div&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;&#125;,<br>      methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">div1Handler</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是触发了 inner div 的点击事件&#x27;</span>)</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">btnHandler</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是触发了 btn 按钮 的点击事件&#x27;</span>)</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">linkClick</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;触发了连接的点击事件&#x27;</span>)</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">div2Handler</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是触发了 outer div 的点击事件&#x27;</span>)</span><br>        &#125;<br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定  --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;text&quot; v-bind:value=&quot;msg&quot; style=&quot;width:100%;&quot;&gt; --&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- 使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 注意： v-model 只能运用在 表单元素中 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- input(radio, text, address, email....)   select    checkbox   textarea   --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- v-model没有value --&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        msg: &#x27;大家都是好学生，爱敲代码，爱学习，爱思考，简直是完美，没瑕疵！&#x27;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h2><p>Vue实例代码：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;n1&quot;</span>&gt;</span></span><br><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;opt&quot;</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;+&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;n2&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;=&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;calc&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span></span><br><span class="xml">    </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(</span><span class="xquery">&#123;</span><br><span class="xquery">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="xquery">      data: &#123;</span><br><span class="xquery">        n1: <span class="hljs-number">0</span>,</span><br><span class="xquery">        n2: <span class="hljs-number">0</span>,</span><br><span class="xquery">        result: <span class="hljs-number">0</span>,</span><br><span class="xquery">        opt: <span class="hljs-string">&#x27;+&#x27;</span></span><br><span class="xquery">      &#125;</span><span class="xml">,</span><br><span class="xml">      methods: </span><span class="xquery">&#123;</span><br><span class="xquery">        calc() &#123; // 计算器算数的方法  </span><br><span class="xquery">          // 逻辑：</span><br><span class="xquery">          /* <span class="hljs-keyword">switch</span> (this.opt) &#123;</span><br><span class="xquery">            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:</span><br><span class="xquery">              this.result = parseInt(this.n1) + parseInt(this.n2)</span><br><span class="xquery">              break;</span><br><span class="xquery">            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:</span><br><span class="xquery">              this.result = parseInt(this.n1) - parseInt(this.n2)</span><br><span class="xquery">              break;</span><br><span class="xquery">            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:</span><br><span class="xquery">              this.result = parseInt(this.n1) * parseInt(this.n2)</span><br><span class="xquery">              break;</span><br><span class="xquery">            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:</span><br><span class="xquery">              this.result = parseInt(this.n1) / parseInt(this.n2)</span><br><span class="xquery">              break;</span><br><span class="xquery">          &#125;</span><span class="xml"> */</span><br><br><span class="xml">          // 注意：这是投机取巧的方式，正式开发中，尽量少用</span><br><span class="xml">          var codeStr = &#x27;parseInt(this.n1) &#x27; + this.opt + &#x27; parseInt(this.n2)&#x27;</span><br><span class="xml">          this.result = eval(codeStr)</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol><li>数组<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;h1 :<span class="hljs-keyword">class</span>=&quot;[&#x27;<span class="hljs-symbol">red</span>&#x27;, &#x27;<span class="hljs-symbol">thin</span>&#x27;]&quot;&gt;这是一个邪恶的<span class="hljs-symbol">H1</span>&lt;/<span class="hljs-symbol">h1</span>&gt;<br></code></pre></td></tr></table></figure></li><li>数组中使用三元表达式<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;h1 :<span class="hljs-keyword">class</span>=&quot;[&#x27;<span class="hljs-symbol">red</span>&#x27;, &#x27;<span class="hljs-symbol">thin</span>&#x27;, <span class="hljs-symbol">isactive</span>?&#x27;<span class="hljs-symbol">active</span>&#x27;:&#x27;&#x27;]&quot;&gt;这是一个邪恶的<span class="hljs-symbol">H1</span>&lt;/<span class="hljs-symbol">h1</span>&gt;<br></code></pre></td></tr></table></figure></li><li>数组中嵌套对象<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[&#x27;red&#x27;, &#x27;thin&#x27;, </span></span></span><span class="hljs-template-variable">&#123;&#x27;active&#x27;: isactive&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">]&quot;</span>&gt;</span>这是一个邪恶的H1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>直接使用对象<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;h1 :<span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;</span>&#123;red:<span class="hljs-literal">true</span>, italic:<span class="hljs-literal">true</span>, active:<span class="hljs-literal">true</span>, thin:<span class="hljs-literal">true</span>&#125;<span class="hljs-string">&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</span><br></code></pre></td></tr></table></figure><h5 id="class样式完整代码"><a href="#class样式完整代码" class="headerlink" title="class样式完整代码"></a>class样式完整代码</h5></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib/vue-2.4.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    .red &#123;<br><span class="css">      <span class="hljs-attribute">color</span>: red;</span><br>    &#125;<br>    .thin &#123;<br><span class="css">      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;</span><br>    &#125;<br>    .italic &#123;<br><span class="css">      <span class="hljs-attribute">font-style</span>: italic;</span><br>    &#125;<br>    .active &#123;<br><span class="css">      <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">0.5em</span>;</span><br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 class=&quot;red thin&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 第一种使用方式，直接传递一个数组，注意： 这里的 class 需要使用  v-bind 做数据绑定 引号注意--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 :class=&quot;[&#x27;thin&#x27;, &#x27;italic&#x27;]&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 在数组中使用三元表达式 flag没有加引号，你来区别一下--&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 :class=&quot;[&#x27;thin&#x27;, &#x27;italic&#x27;, flag?&#x27;active&#x27;:&#x27;&#x27;]&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 在数组中使用 对象来代替三元表达式，提高代码的可读性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 :class=&quot;[&#x27;thin&#x27;, &#x27;italic&#x27;, &#123;&#x27;active&#x27;:flag&#125; ]&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符 --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;h1 :class=&quot;&#123; red: true, thin: true, italic: false, active: false &#125;&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObj&quot;</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        flag: <span class="hljs-literal">true</span>,</span><br><span class="javascript">        classObj: &#123; <span class="hljs-attr">red</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">thin</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">italic</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">active</span>: <span class="hljs-literal">false</span> &#125;</span><br>      &#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><ol><li>直接在元素上通过 <code>:style</code> 的形式，书写样式对象<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;color: &#x27;red&#x27;, &#x27;font-size&#x27;: &#x27;40px&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>这是一个善良的H1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</li></ol><ul><li>在data上定义样式：<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">data</span>: &#123;<br>        h1StyleObj: &#123; <span class="hljs-built_in">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;font-size&#x27;</span>: <span class="hljs-string">&#x27;40px&#x27;</span>, <span class="hljs-string">&#x27;font-weight&#x27;</span>: <span class="hljs-string">&#x27;200&#x27;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;h1StyleObj&quot;</span>&gt;</span>这是一个善良的H1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</li></ol><ul><li>在data上定义样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">data: &#123;<br>        h1StyleObj: &#123; color: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;font-size&#x27;</span>: <span class="hljs-string">&#x27;40px&#x27;</span>, <span class="hljs-string">&#x27;font-weight&#x27;</span>: <span class="hljs-string">&#x27;200&#x27;</span> &#125;,<br>        h1StyleObj2: &#123; fontStyle: <span class="hljs-string">&#x27;italic&#x27;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;[h1StyleObj, h1StyleObj2]&quot;</span>&gt;</span>这是一个善良的H1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="内联样式完整代码"><a href="#内联样式完整代码" class="headerlink" title="内联样式完整代码"></a>内联样式完整代码</h4></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 对象就是无序键值对的集合 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 :style=&quot;&#123; color: &#x27;red&#x27;, &#x27;font-weight&#x27;: 200 &#125;&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 :style=&quot;styleObj1&quot;&gt;这是一个h1&lt;/h1&gt; --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;[ styleObj1, styleObj2 ]&quot;</span>&gt;</span>这是一个h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        styleObj1: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;font-weight&#x27;</span>: <span class="hljs-number">200</span> &#125;,</span><br><span class="javascript">        styleObj2: &#123; <span class="hljs-string">&#x27;font-style&#x27;</span>: <span class="hljs-string">&#x27;italic&#x27;</span> &#125;</span><br>      &#125;,<br>      methods: &#123;&#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol><li>迭代数组</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- &lt;p&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">list</span>[0]&#125;&#125;</span><span class="xml"><span class="hljs-comment">&lt;/p&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">list</span>[1]&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">list</span>[2]&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">list</span>[3]&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">list</span>[4]&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> --&gt;</span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!--普通数组--&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, i) in list&quot;</span>&gt;</span>索引值：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="xml"> --- 每一项：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    </span><br><span class="xml">    <span class="hljs-comment">&lt;!--对象数组--&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user, i) in list2&quot;</span>&gt;</span>Id：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">user.id</span> &#125;&#125;</span><span class="xml"> --- 名字：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">user.name</span> &#125;&#125;</span><span class="xml"> --- 索引：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        list: [1, 2, 3, 4, 5, 6],</span><br><span class="xml">        list2: [</span><br><span class="xml">          &#123; id: 1, name: &#x27;zs1&#x27; &#125;,</span><br><span class="xml">          &#123; id: 2, name: &#x27;zs2&#x27; &#125;,</span><br><span class="xml">          &#123; id: 3, name: &#x27;zs3&#x27; &#125;,</span><br><span class="xml">          &#123; id: 4, name: &#x27;zs4&#x27; &#125;</span><br><span class="xml">        ]</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;&#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>迭代对象中的属性</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 注意：在遍历对象身上的键值对的时候， 除了 有  val  key  ,在第三个位置还有 一个 索引  --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(val, key, i) in user&quot;</span>&gt;</span>值是： </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">val</span> &#125;&#125;</span><span class="xml"> --- 键是： </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">key</span>&#125;&#125;</span><span class="xml"> -- 索引： </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(&#123;</span><br><span class="xml">      el: &#x27;#app&#x27;,</span><br><span class="xml">      data: &#123;</span><br><span class="xml">        user: &#123;</span><br><span class="xml">          id: 1,</span><br><span class="xml">          name: &#x27;托尼·屎大颗&#x27;,</span><br><span class="xml">          gender: &#x27;男&#x27;</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: &#123;&#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="3"><li>迭代数字</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-comment">&lt;!-- in 后面我们放过  普通数组，对象数组，对象， 还可以放数字 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 注意：如果使用 v-for 迭代数字的话，前面的 count 值从 1 开始 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in 10&quot;</span>&gt;</span>这是第 </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="xml"> 个P标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Id:</span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:</span><br><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-comment">&lt;!-- 注意： v-for 循环的时候，key 属性只能使用 number或string --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 注意： key 在使用的时候，必须使用 v-bind 属性绑定的形式，指定 key 的值 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 在组件中，使用v-for循环的时候，或者在一些特殊情况中，如果 v-for 有问题，必须 在使用 v-for 的同时，指定 唯一的 字符串/数字 类型 :key 值 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--</span></span><span class="xml"><span class="hljs-comment">&lt;p v-for=&quot;item in list&quot;&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span></span><span class="xquery">&#123;&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.id</span>&#125;</span><span class="xml">&#125; --- </span><span class="xquery">&#123;&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>&#125;</span><span class="xml">&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="xml">--&gt;</span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span></span><span class="xquery">&#123;&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.id</span>&#125;</span><span class="xml">&#125; --- </span><span class="xquery">&#123;&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>&#125;</span><span class="xml">&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="xml">    var vm = new Vue(</span><span class="xquery">&#123;</span><br><span class="xquery">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="xquery">      data: &#123;</span><br><span class="xquery">       <span class="hljs-built_in"> id</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="xquery">       <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="xquery">        list: [</span><br><span class="xquery">          &#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">1</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;李斯&#x27;</span> &#125;</span><span class="xml">,</span><br><span class="xml">          </span><span class="xquery">&#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">2</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;嬴政&#x27;</span> &#125;</span><span class="xml">,</span><br><span class="xml">          </span><span class="xquery">&#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">3</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;赵高&#x27;</span> &#125;</span><span class="xml">,</span><br><span class="xml">          </span><span class="xquery">&#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">4</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;韩非&#x27;</span> &#125;</span><span class="xml">,</span><br><span class="xml">          </span><span class="xquery">&#123;<span class="hljs-built_in"> id</span>: <span class="hljs-number">5</span>,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;荀子&#x27;</span> &#125;</span><br><span class="xml">        ]</span><br><span class="xml">      &#125;,</span><br><span class="xml">      methods: </span><span class="xquery">&#123;</span><br><span class="xquery">        add() &#123; // 添加方法</span><br><span class="xquery">          //this.list.push(&#123;<span class="hljs-built_in"> id</span>: this<span class="hljs-built_in">.id</span>,<span class="hljs-built_in"> name</span>: this<span class="hljs-built_in">.name</span> &#125;</span><span class="xml">)</span><br><span class="xml">          this.list.unshift(</span><span class="xquery">&#123;<span class="hljs-built_in"> id</span>: this<span class="hljs-built_in">.id</span>,<span class="hljs-built_in"> name</span>: this<span class="hljs-built_in">.name</span> &#125;</span><span class="xml">)</span><br><span class="xml">        &#125;</span><br><span class="xml">      &#125;</span><br><span class="xml">    &#125;);</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><h2 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;toggle&quot;&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggle&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;flag=!flag&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-if 的特点：每次都会重新删除或创建元素 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- v-show 的特点： 每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式 --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- v-if 有较高的切换性能消耗 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- v-show 有较高的初始渲染消耗 --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>这是用v-if控制的元素<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>这是用v-show控制的元素<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">      el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>      data: &#123;<br><span class="javascript">        flag: <span class="hljs-literal">false</span></span><br>      &#125;,<br>      methods: &#123;<br>        /* toggle() &#123;<br><span class="javascript">          <span class="hljs-built_in">this</span>.flag = !<span class="hljs-built_in">this</span>.flag</span><br>        &#125; */<br>      &#125;<br>    &#125;);<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 1. MVC 和 MVVM 的区别 --&gt;</span><br><span class="hljs-comment">&lt;!-- 2. 学习了Vue中最基本代码的结构 --&gt;</span><br><span class="hljs-comment">&lt;!-- 3. 插值表达式   v-cloak   v-text   v-html   v-bind（缩写是:）   v-on（缩写是@）   v-model   v-for   v-if     v-show --&gt;</span><br><span class="hljs-comment">&lt;!-- 4. 事件修饰符  ：  .stop   .prevent   .capture   .self     .once --&gt;</span><br><span class="hljs-comment">&lt;!-- 5. el  指定要控制的区域    data 是个对象，指定了控制的区域内要用到的数据    methods 虽然带个s后缀，但是是个对象，这里可以自定义了方法 --&gt;</span><br><span class="hljs-comment">&lt;!-- 6. 在 VM 实例中，如果要访问 data 上的数据，或者要访问 methods 中的方法， 必须带 this --&gt;</span><br><span class="hljs-comment">&lt;!-- 7. 在 v-for 要会使用 key 属性 （只接受 string / number） --&gt;</span><br><span class="hljs-comment">&lt;!-- 8. v-model 只能应用于表单元素 --&gt;</span><br><span class="hljs-comment">&lt;!-- 9. 在vue中绑定样式两种方式  v-bind:class   v-bind:style --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://v1-cn.vuejs.org/">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html">js 里面的键盘事件对应的键码</a></li><li><a href="http://www.cnblogs.com/kidney/p/6052935.html">Vue.js双向绑定的实现原理</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架和库</tag>
      
      <tag>MVC与MVVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的反射机制:对象拷贝</title>
    <link href="/2019/10/31/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2019/10/31/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="Java中的反射机制：实现对象拷贝"><a href="#Java中的反射机制：实现对象拷贝" class="headerlink" title="Java中的反射机制：实现对象拷贝"></a>Java中的反射机制：实现对象拷贝</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package edu.zzu.stu.liao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><span class="hljs-keyword">private</span> int id;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> nm;<br><span class="hljs-keyword">private</span> int age;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Student</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">this</span>.id=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">this</span>.age=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">this</span>.nm=<span class="hljs-string">&quot;张三&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Student</span>(<span class="hljs-params">int id,<span class="hljs-built_in">String</span> name,int age</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.id=id;<br><span class="hljs-built_in">this</span>.age=age;<br><span class="hljs-built_in">this</span>.nm=name;<br>&#125;<br><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getId</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setId</span>(<span class="hljs-params">int id</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.id=id;<br>&#125;<br><br><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setAge</span>(<span class="hljs-params">int age</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getNm</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> nm;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setNm</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br><span class="hljs-built_in">this</span>.nm=name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[id=&quot;</span>+id+<span class="hljs-string">&quot;,name=&quot;</span>+nm+<span class="hljs-string">&quot;,age=&quot;</span>+age+<span class="hljs-string">&quot;getClass()=&quot;</span>+getClass()+<span class="hljs-string">&quot;,hashCode()=&quot;</span>+hashCode()+<span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package edu.zzu.stu.liao;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-keyword">Method</span>;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CopyStu &#123;<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> <span class="hljs-keyword">copy</span>(<span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span>) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException &#123;<br><br><span class="hljs-keyword">Class</span>&lt;?&gt; classType=<span class="hljs-keyword">object</span>.getClass();<br><br>// 获得Constructor对象,此处获取第一个无参数的构造方法的，需要用无参构造方法来生成一个对象<br>Constructor&lt;?&gt; cons=classType.getConstructor(<span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[] &#123;&#125;);<br>// 通过无参构造方法来生成一个对象<br><span class="hljs-keyword">Object</span> objectCopy=cons.newInstance(<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[] &#123;&#125;);<br>// 以上两行代码等价于：<br>        // <span class="hljs-keyword">Object</span> objectCopy = classType.newInstance();  // 这行代码无法处理构造函数有参数的情况<br><br>//用第二个带参数的构造方法生成对象<br>//        Constructor cons = classType.getConstructor(<span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[] &#123;<span class="hljs-type">int</span>.<span class="hljs-keyword">class</span>, String.<span class="hljs-keyword">class</span>, <span class="hljs-type">int</span>.<span class="hljs-keyword">class</span>&#125;);<br>//        <span class="hljs-keyword">Object</span> objectCopy = cons.newInstance(<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[] &#123;<span class="hljs-number">1</span>, &quot;ZhangSan&quot;,<span class="hljs-number">20</span>&#125;);<br>        <br>Field[] fields=classType.getDeclaredFields();<br><span class="hljs-keyword">for</span>(Field field:fields) &#123;<br>//获取成员变量的名字，此处为id，<span class="hljs-type">name</span>，age<br>String fieldName=field.getName();<br><br>//将属性的首字母转换为大写,用来拼接<span class="hljs-keyword">set</span>和<span class="hljs-keyword">get</span>方法名<br>String <span class="hljs-keyword">set</span>=&quot;set&quot;+fieldName.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase()+fieldName.substring(<span class="hljs-number">1</span>);<br>String <span class="hljs-keyword">get</span>=&quot;get&quot;+fieldName.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase()+fieldName.substring(<span class="hljs-number">1</span>);<br><br>//获取<span class="hljs-keyword">get</span>方法对象<br><span class="hljs-keyword">Method</span> method_get=classType.getMethod(<span class="hljs-keyword">get</span>,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[] &#123;&#125;);<br><br>//获取<span class="hljs-keyword">set</span>方法对象<br>//注意转入属性参数类型，通过 <span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[] &#123;field.getType()&#125;<br><span class="hljs-keyword">Method</span> method_set=classType.getMethod(<span class="hljs-keyword">set</span>,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Class</span>[] &#123;field.getType()&#125;);//注意转入属性参数类型<br><br>//调用<span class="hljs-keyword">get</span>方法获取源对象的值<br><span class="hljs-keyword">Object</span> returnVal=method_get.invoke(<span class="hljs-keyword">object</span>,<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[] &#123;&#125;);<br><br>//调用<span class="hljs-keyword">set</span>方法将这个值复制到目的对象中去<br>method_set.invoke(objectCopy, <span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[] &#123;returnVal&#125;);<br>&#125;<br><span class="hljs-keyword">return</span> objectCopy;<br>&#125;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException &#123;<br><br>Student student1=<span class="hljs-built_in">new</span> Student(<span class="hljs-number">1</span>,&quot;xiaoming&quot;,<span class="hljs-number">18</span>);<br><br>CopyStu copyStu=<span class="hljs-built_in">new</span> CopyStu();<br>Student student2=(Student)copyStu.<span class="hljs-keyword">copy</span>(student1);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;student1:&quot;+student1.toString());<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;student2:&quot;+student2.toString());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/10/31/Java%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D/result.png" alt="111"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反射机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL容器Array（二）</title>
    <link href="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Array/"/>
    <url>/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Array/</url>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Array/containerstruct.png" alt="1"></p><h3 id="之后容器测试用例的-辅助函数介绍"><a href="#之后容器测试用例的-辅助函数介绍" class="headerlink" title="之后容器测试用例的 辅助函数介绍"></a>之后容器测试用例的 辅助函数介绍</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">get_a_target_long</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">get_a_target_string</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-built_in">snprintf</span>(buf,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;%d&quot;</span>,target);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareLongs</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-keyword">long</span>*)a - *(<span class="hljs-keyword">long</span>*)b );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareStrings</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &gt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &lt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //qsort, bsearch, NULL</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ASIZE 50000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">namespace</span> jj01<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">get_a_target_long</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">long</span> target = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;target (0~&quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="hljs-string">&quot;): &quot;</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; target;<br><span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareLongs</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> (*(<span class="hljs-keyword">long</span>*)a - *(<span class="hljs-keyword">long</span>*)b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_array</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_array().......... \n&quot;</span>;<br><br><span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">long</span>, ASIZE&gt; c;<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">0</span>; i &lt; ASIZE; ++i) &#123;<br>c[i] = rand();<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock() - timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-string">&quot; = array[0]= &quot;</span> &lt;&lt; c[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-string">&quot; = array[length-1]= &quot;</span> &lt;&lt; c[<span class="hljs-number">49999</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-string">&quot; = &amp;array[0]= &quot;</span> &lt;&lt; &amp;c[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br><br>timeStart = clock();<br>::qsort(c.data(), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs);<br><span class="hljs-keyword">long</span>* pItem = (<span class="hljs-keyword">long</span>*)::bsearch(&amp;target, (c.data()), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;qsort()+bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock() - timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//    </span><br><span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>jj01::test_array();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Array/arrayresult.png" alt="as"></p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt; //sort()</span></span><br><span class="hljs-keyword">namespace</span> jj02<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_vector</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_vector().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>     <span class="hljs-comment">//曾經最高 i=58389486 then std::bad_alloc</span><br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//1073747823</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.capacity()= &quot;</span> &lt;&lt; c.capacity() &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    &#123;<br>timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;  <br> <br>  <span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br>timeStart = clock();<br>    sort(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><br>timeStart = clock();    <br><span class="hljs-built_in">string</span>* pItem = (<span class="hljs-built_in">string</span>*)::bsearch(&amp;target, (c.data()), <br>                                   c.<span class="hljs-built_in">size</span>(), <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">string</span>), compareStrings); <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br>   <br>  <span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">vector</span>&lt;MyString&gt;(),<span class="hljs-built_in">vector</span>&lt;MyStrNoMove&gt;(), value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++STL标准模板库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
      <tag>C++</tag>
      
      <tag>模板编程</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL容器分类（二）</title>
    <link href="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Deque/"/>
    <url>/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Deque/</url>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Deque/containerstruct.png" alt="1"></p><p>之后容器测试用例的 辅助函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">get_a_target_long</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">get_a_target_string</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-built_in">snprintf</span>(buf,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;%d&quot;</span>,target);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareLongs</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-keyword">long</span>*)a - *(<span class="hljs-keyword">long</span>*)b );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareStrings</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &gt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &lt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Array</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //qsort, bsearch, NULL</span></span><br><br><span class="hljs-keyword">namespace</span> jj01<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_array</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_array().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">long</span>,ASIZE&gt; c;  <br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; ASIZE; ++i) &#123;<br>        c[i] = rand(); <br>    &#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br><br>timeStart = clock();<br>    ::qsort(c.data(), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs);<br><span class="hljs-keyword">long</span>* pItem = (<span class="hljs-keyword">long</span>*)::bsearch(&amp;target, (c.data()), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs); <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;qsort()+bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//    </span><br>  <span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Vector</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt; //sort()</span></span><br><span class="hljs-keyword">namespace</span> jj02<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_vector</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_vector().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>     <span class="hljs-comment">//曾經最高 i=58389486 then std::bad_alloc</span><br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//1073747823</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.capacity()= &quot;</span> &lt;&lt; c.capacity() &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    &#123;<br>timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;  <br> <br>  <span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br>timeStart = clock();<br>    sort(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><br>timeStart = clock();    <br><span class="hljs-built_in">string</span>* pItem = (<span class="hljs-built_in">string</span>*)::bsearch(&amp;target, (c.data()), <br>                                   c.<span class="hljs-built_in">size</span>(), <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">string</span>), compareStrings); <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br>   <br>  <span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">vector</span>&lt;MyString&gt;(),<span class="hljs-built_in">vector</span>&lt;MyStrNoMove&gt;(), value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>List</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt; //find()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj03<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_list</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_list().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));    <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-comment">//357913941</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>  <span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>c.sort();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;    <br>    <br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">list</span>&lt;MyString&gt;(),<span class="hljs-built_in">list</span>&lt;MyStrNoMove&gt;(), value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Forward-List</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj04<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_forward_list</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_forward_list().......... \n&quot;</span>;<br>     <br>forward_list&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_front(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;forward_list.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//536870911</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;forward_list.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>c.sort();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>c.<span class="hljs-built_in">clear</span>(); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Deque</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj05<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_deque</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_deque().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//1073741821</span><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>sort(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">deque</span>&lt;MyString&gt;(),<span class="hljs-built_in">deque</span>&lt;MyStrNoMove&gt;(), value); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stack</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj17<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_stack</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_stack().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 list 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 vector 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 set 為底層 </span><br><span class="hljs-comment">/*!</span><br><span class="hljs-comment">    for(long i=0; i&lt; 10; ++i) &#123;</span><br><span class="hljs-comment">    snprintf(buf, 10, &quot;%d&quot;, rand());</span><br><span class="hljs-comment">        c.push(string(buf));     </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.top()= &quot; &lt;&lt; c.top() &lt;&lt; endl;</span><br><span class="hljs-comment">c.pop();</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.top()= &quot; &lt;&lt; c.top() &lt;&lt; endl;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;push_back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_back&#x27;</span><br><span class="hljs-comment">*/</span><br>    &#125;<br><br><span class="hljs-comment">//!stack&lt;string, map(string&gt;&gt; c5;////以 map 為底層, [Error] template argument 2 is invalid</span><br><span class="hljs-comment">//!stack&lt;string&gt;::iterator ite1;  //[Error] &#x27;iterator&#x27; is not a member of &#x27;std::stack&lt;std::basic_string&lt;char&gt; &gt;&#x27;</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Queue</p><blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj18<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_queue</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_queue().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 list 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 vector 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//!c.pop();  //[Error] &#x27;class std::vector&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_front&#x27;</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 set 為底層 </span><br><span class="hljs-comment">/*!</span><br><span class="hljs-comment">    for(long i=0; i&lt; 10; ++i) &#123;</span><br><span class="hljs-comment">    snprintf(buf, 10, &quot;%d&quot;, rand());</span><br><span class="hljs-comment">        c.push(string(buf));     </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.front()= &quot; &lt;&lt; c.front() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.back()= &quot; &lt;&lt; c.back() &lt;&lt; endl;</span><br><span class="hljs-comment">c.pop();</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.front()= &quot; &lt;&lt; c.front() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.back()= &quot; &lt;&lt; c.back() &lt;&lt; endl;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;push_back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;front&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_front&#x27;</span><br><span class="hljs-comment">*/</span><br>    &#125;<br>    <br><span class="hljs-comment">//! queue&lt;string, map&lt;string&gt;&gt; c5;//以 map 為底層, [Error] template argument 2 is invalid</span><br><span class="hljs-comment">//! queue&lt;string&gt;::iterator ite1;  //[Error] &#x27;iterator&#x27; is not a member of &#x27;std::queue&lt;std::basic_string&lt;char&gt; &gt;&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Multiset</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj06<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_multiset</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_multiset().......... \n&quot;</span>;<br><br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.insert(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multiset.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multiset.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//214748364</span><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>&#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<span class="hljs-comment">//比 c.find(...) 慢很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br> &#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<span class="hljs-comment">//比 std::find(...) 快很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">multiset</span>&lt;MyString&gt;(),<span class="hljs-built_in">multiset</span>&lt;MyStrNoMove&gt;(), value); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Multimap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj07<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_multimap</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_multimap().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>    <span class="hljs-comment">//multimap 不可使用 [] 做 insertion </span><br>        c.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span>,<span class="hljs-built_in">string</span>&gt;(i,buf));   <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multimap.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multimap.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//178956970</span><br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, value=&quot;</span> &lt;&lt; (*pItem).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;  <br><br>c.<span class="hljs-built_in">clear</span>();  <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Unordered_Multiset</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj08<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_unordered_multiset</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_unordered_multiset().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">unordered_multiset</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.insert(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//357913941</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.bucket_count()= &quot;</span> &lt;&lt; c.bucket_count() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.load_factor()= &quot;</span> &lt;&lt; c.load_factor() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_load_factor()= &quot;</span> &lt;&lt; c.max_load_factor() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_bucket_count()= &quot;</span> &lt;&lt; c.max_bucket_count() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">20</span>; ++i) &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bucket #&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; has &quot;</span> &lt;&lt; c.bucket_size(i) &lt;&lt; <span class="hljs-string">&quot; elements.\n&quot;</span>;<br>  &#125;<br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>&#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<span class="hljs-comment">//比 c.find(...) 慢很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br> &#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<span class="hljs-comment">//比 std::find(...) 快很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br>    c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">unordered_multiset</span>&lt;MyString&gt;(),<span class="hljs-built_in">unordered_multiset</span>&lt;MyStrNoMove&gt;(), value);  <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Unordered Multimap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj09<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_unordered_multimap</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_unordered_multimap().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">unordered_multimap</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br><span class="hljs-comment">//multimap 不可使用 [] 進行 insertion </span><br>c.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span>,<span class="hljs-built_in">string</span>&gt;(i,buf));<br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multimap.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multimap.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//357913941</span><br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, value=&quot;</span> &lt;&lt; (*pItem).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure><p>Map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++STL标准模板库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
      <tag>C++</tag>
      
      <tag>模板编程</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL容器分类（二）</title>
    <link href="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8List/"/>
    <url>/2019/10/30/C-STL%E5%AE%B9%E5%99%A8List/</url>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8List/containerstruct.png" alt="1"></p><p>之后容器测试用例的 辅助函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">get_a_target_long</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">get_a_target_string</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-built_in">snprintf</span>(buf,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;%d&quot;</span>,target);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareLongs</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-keyword">long</span>*)a - *(<span class="hljs-keyword">long</span>*)b );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareStrings</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &gt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &lt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Array</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //qsort, bsearch, NULL</span></span><br><br><span class="hljs-keyword">namespace</span> jj01<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_array</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_array().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">long</span>,ASIZE&gt; c;  <br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; ASIZE; ++i) &#123;<br>        c[i] = rand(); <br>    &#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br><br>timeStart = clock();<br>    ::qsort(c.data(), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs);<br><span class="hljs-keyword">long</span>* pItem = (<span class="hljs-keyword">long</span>*)::bsearch(&amp;target, (c.data()), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs); <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;qsort()+bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//    </span><br>  <span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Vector</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt; //sort()</span></span><br><span class="hljs-keyword">namespace</span> jj02<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_vector</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_vector().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>     <span class="hljs-comment">//曾經最高 i=58389486 then std::bad_alloc</span><br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//1073747823</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.capacity()= &quot;</span> &lt;&lt; c.capacity() &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    &#123;<br>timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;  <br> <br>  <span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br>timeStart = clock();<br>    sort(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><br>timeStart = clock();    <br><span class="hljs-built_in">string</span>* pItem = (<span class="hljs-built_in">string</span>*)::bsearch(&amp;target, (c.data()), <br>                                   c.<span class="hljs-built_in">size</span>(), <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">string</span>), compareStrings); <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br>   <br>  <span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">vector</span>&lt;MyString&gt;(),<span class="hljs-built_in">vector</span>&lt;MyStrNoMove&gt;(), value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>List</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt; //find()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj03<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_list</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_list().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));    <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-comment">//357913941</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>  <span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>c.sort();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;    <br>    <br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">list</span>&lt;MyString&gt;(),<span class="hljs-built_in">list</span>&lt;MyStrNoMove&gt;(), value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Forward-List</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj04<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_forward_list</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_forward_list().......... \n&quot;</span>;<br>     <br>forward_list&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_front(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;forward_list.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//536870911</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;forward_list.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>c.sort();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>c.<span class="hljs-built_in">clear</span>(); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Deque</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj05<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_deque</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_deque().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//1073741821</span><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>sort(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">deque</span>&lt;MyString&gt;(),<span class="hljs-built_in">deque</span>&lt;MyStrNoMove&gt;(), value); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stack</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj17<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_stack</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_stack().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 list 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 vector 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 set 為底層 </span><br><span class="hljs-comment">/*!</span><br><span class="hljs-comment">    for(long i=0; i&lt; 10; ++i) &#123;</span><br><span class="hljs-comment">    snprintf(buf, 10, &quot;%d&quot;, rand());</span><br><span class="hljs-comment">        c.push(string(buf));     </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.top()= &quot; &lt;&lt; c.top() &lt;&lt; endl;</span><br><span class="hljs-comment">c.pop();</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.top()= &quot; &lt;&lt; c.top() &lt;&lt; endl;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;push_back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_back&#x27;</span><br><span class="hljs-comment">*/</span><br>    &#125;<br><br><span class="hljs-comment">//!stack&lt;string, map(string&gt;&gt; c5;////以 map 為底層, [Error] template argument 2 is invalid</span><br><span class="hljs-comment">//!stack&lt;string&gt;::iterator ite1;  //[Error] &#x27;iterator&#x27; is not a member of &#x27;std::stack&lt;std::basic_string&lt;char&gt; &gt;&#x27;</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Queue</p><blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj18<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_queue</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_queue().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 list 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 vector 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//!c.pop();  //[Error] &#x27;class std::vector&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_front&#x27;</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 set 為底層 </span><br><span class="hljs-comment">/*!</span><br><span class="hljs-comment">    for(long i=0; i&lt; 10; ++i) &#123;</span><br><span class="hljs-comment">    snprintf(buf, 10, &quot;%d&quot;, rand());</span><br><span class="hljs-comment">        c.push(string(buf));     </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.front()= &quot; &lt;&lt; c.front() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.back()= &quot; &lt;&lt; c.back() &lt;&lt; endl;</span><br><span class="hljs-comment">c.pop();</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.front()= &quot; &lt;&lt; c.front() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.back()= &quot; &lt;&lt; c.back() &lt;&lt; endl;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;push_back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;front&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_front&#x27;</span><br><span class="hljs-comment">*/</span><br>    &#125;<br>    <br><span class="hljs-comment">//! queue&lt;string, map&lt;string&gt;&gt; c5;//以 map 為底層, [Error] template argument 2 is invalid</span><br><span class="hljs-comment">//! queue&lt;string&gt;::iterator ite1;  //[Error] &#x27;iterator&#x27; is not a member of &#x27;std::queue&lt;std::basic_string&lt;char&gt; &gt;&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Multiset</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj06<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_multiset</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_multiset().......... \n&quot;</span>;<br><br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.insert(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multiset.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multiset.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//214748364</span><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>&#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<span class="hljs-comment">//比 c.find(...) 慢很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br> &#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<span class="hljs-comment">//比 std::find(...) 快很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">multiset</span>&lt;MyString&gt;(),<span class="hljs-built_in">multiset</span>&lt;MyStrNoMove&gt;(), value); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Multimap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj07<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_multimap</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_multimap().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>    <span class="hljs-comment">//multimap 不可使用 [] 做 insertion </span><br>        c.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span>,<span class="hljs-built_in">string</span>&gt;(i,buf));   <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multimap.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multimap.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//178956970</span><br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, value=&quot;</span> &lt;&lt; (*pItem).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;  <br><br>c.<span class="hljs-built_in">clear</span>();  <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Unordered_Multiset</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj08<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_unordered_multiset</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_unordered_multiset().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">unordered_multiset</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.insert(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//357913941</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.bucket_count()= &quot;</span> &lt;&lt; c.bucket_count() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.load_factor()= &quot;</span> &lt;&lt; c.load_factor() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_load_factor()= &quot;</span> &lt;&lt; c.max_load_factor() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_bucket_count()= &quot;</span> &lt;&lt; c.max_bucket_count() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">20</span>; ++i) &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bucket #&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; has &quot;</span> &lt;&lt; c.bucket_size(i) &lt;&lt; <span class="hljs-string">&quot; elements.\n&quot;</span>;<br>  &#125;<br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>&#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<span class="hljs-comment">//比 c.find(...) 慢很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br> &#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<span class="hljs-comment">//比 std::find(...) 快很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br>    c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">unordered_multiset</span>&lt;MyString&gt;(),<span class="hljs-built_in">unordered_multiset</span>&lt;MyStrNoMove&gt;(), value);  <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Unordered Multimap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj09<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_unordered_multimap</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_unordered_multimap().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">unordered_multimap</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br><span class="hljs-comment">//multimap 不可使用 [] 進行 insertion </span><br>c.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span>,<span class="hljs-built_in">string</span>&gt;(i,buf));<br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multimap.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multimap.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//357913941</span><br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, value=&quot;</span> &lt;&lt; (*pItem).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure><p>Map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++STL标准模板库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
      <tag>C++</tag>
      
      <tag>模板编程</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL容器分类（二）</title>
    <link href="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Vector/"/>
    <url>/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Vector/</url>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/30/C-STL%E5%AE%B9%E5%99%A8Vector/containerstruct.png" alt="1"></p><p>之后容器测试用例的 辅助函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">get_a_target_long</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">get_a_target_string</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">long</span> target=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;target (0~&quot;</span>&lt;&lt;RAND_MAX&lt;&lt;<span class="hljs-string">&quot;): &quot;</span>;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;target;<br>    <span class="hljs-built_in">snprintf</span>(buf,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;%d&quot;</span>,target);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>(buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareLongs</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-keyword">long</span>*)a - *(<span class="hljs-keyword">long</span>*)b );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareStrings</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &gt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(*(<span class="hljs-built_in">string</span>*)a &lt; *(<span class="hljs-built_in">string</span>*)b )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Array</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //qsort, bsearch, NULL</span></span><br><br><span class="hljs-keyword">namespace</span> jj01<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_array</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_array().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">long</span>,ASIZE&gt; c;  <br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; ASIZE; ++i) &#123;<br>        c[i] = rand(); <br>    &#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;array.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br><br>timeStart = clock();<br>    ::qsort(c.data(), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs);<br><span class="hljs-keyword">long</span>* pItem = (<span class="hljs-keyword">long</span>*)::bsearch(&amp;target, (c.data()), ASIZE, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">long</span>), compareLongs); <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;qsort()+bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//    </span><br>  <span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Vector</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt; //sort()</span></span><br><span class="hljs-keyword">namespace</span> jj02<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_vector</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_vector().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>     <span class="hljs-comment">//曾經最高 i=58389486 then std::bad_alloc</span><br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//1073747823</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.data()= &quot;</span> &lt;&lt; c.data() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;vector.capacity()= &quot;</span> &lt;&lt; c.capacity() &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    &#123;<br>timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;  <br> <br>  <span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br>timeStart = clock();<br>    sort(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><br>timeStart = clock();    <br><span class="hljs-built_in">string</span>* pItem = (<span class="hljs-built_in">string</span>*)::bsearch(&amp;target, (c.data()), <br>                                   c.<span class="hljs-built_in">size</span>(), <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">string</span>), compareStrings); <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bsearch(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br>   <br>  <span class="hljs-keyword">if</span> (pItem != <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">vector</span>&lt;MyString&gt;(),<span class="hljs-built_in">vector</span>&lt;MyStrNoMove&gt;(), value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>List</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt; //find()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj03<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_list</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_list().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));    <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;    <span class="hljs-comment">//357913941</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;list.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>  <span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>c.sort();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;    <br>    <br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">list</span>&lt;MyString&gt;(),<span class="hljs-built_in">list</span>&lt;MyStrNoMove&gt;(), value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Forward-List</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj04<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_forward_list</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_forward_list().......... \n&quot;</span>;<br>     <br>forward_list&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_front(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;forward_list.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//536870911</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;forward_list.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>c.sort();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>c.<span class="hljs-built_in">clear</span>(); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Deque</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj05<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_deque</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_deque().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push_back(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;deque.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//1073741821</span><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    timeStart = clock();<br>sort(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;sort(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">deque</span>&lt;MyString&gt;(),<span class="hljs-built_in">deque</span>&lt;MyStrNoMove&gt;(), value); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stack</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj17<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_stack</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_stack().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 list 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 vector 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;stack.top()= &quot;</span> &lt;&lt; c.top() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 set 為底層 </span><br><span class="hljs-comment">/*!</span><br><span class="hljs-comment">    for(long i=0; i&lt; 10; ++i) &#123;</span><br><span class="hljs-comment">    snprintf(buf, 10, &quot;%d&quot;, rand());</span><br><span class="hljs-comment">        c.push(string(buf));     </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.top()= &quot; &lt;&lt; c.top() &lt;&lt; endl;</span><br><span class="hljs-comment">c.pop();</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;stack.top()= &quot; &lt;&lt; c.top() &lt;&lt; endl;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;push_back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_back&#x27;</span><br><span class="hljs-comment">*/</span><br>    &#125;<br><br><span class="hljs-comment">//!stack&lt;string, map(string&gt;&gt; c5;////以 map 為底層, [Error] template argument 2 is invalid</span><br><span class="hljs-comment">//!stack&lt;string&gt;::iterator ite1;  //[Error] &#x27;iterator&#x27; is not a member of &#x27;std::stack&lt;std::basic_string&lt;char&gt; &gt;&#x27;</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Queue</p><blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj18<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_queue</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_queue().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">list</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 list 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>c.pop();<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 vector 為底層 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; ++i) &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.push(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">//!c.pop();  //[Error] &#x27;class std::vector&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_front&#x27;</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.front()= &quot;</span> &lt;&lt; c.front() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;queue.back()= &quot;</span> &lt;&lt; c.back() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>&#123;<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;&gt; c;<span class="hljs-comment">//以 set 為底層 </span><br><span class="hljs-comment">/*!</span><br><span class="hljs-comment">    for(long i=0; i&lt; 10; ++i) &#123;</span><br><span class="hljs-comment">    snprintf(buf, 10, &quot;%d&quot;, rand());</span><br><span class="hljs-comment">        c.push(string(buf));     </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.front()= &quot; &lt;&lt; c.front() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.back()= &quot; &lt;&lt; c.back() &lt;&lt; endl;</span><br><span class="hljs-comment">c.pop();</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.size()= &quot; &lt;&lt; c.size() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.front()= &quot; &lt;&lt; c.front() &lt;&lt; endl;</span><br><span class="hljs-comment">cout &lt;&lt; &quot;queue.back()= &quot; &lt;&lt; c.back() &lt;&lt; endl;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;push_back&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;front&#x27;</span><br><span class="hljs-comment">//[Error] &#x27;class std::set&lt;std::basic_string&lt;char&gt; &gt;&#x27; has no member named &#x27;pop_front&#x27;</span><br><span class="hljs-comment">*/</span><br>    &#125;<br>    <br><span class="hljs-comment">//! queue&lt;string, map&lt;string&gt;&gt; c5;//以 map 為底層, [Error] template argument 2 is invalid</span><br><span class="hljs-comment">//! queue&lt;string&gt;::iterator ite1;  //[Error] &#x27;iterator&#x27; is not a member of &#x27;std::queue&lt;std::basic_string&lt;char&gt; &gt;&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Multiset</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj06<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_multiset</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_multiset().......... \n&quot;</span>;<br><br><span class="hljs-built_in">multiset</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.insert(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multiset.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multiset.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//214748364</span><br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>&#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<span class="hljs-comment">//比 c.find(...) 慢很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br> &#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<span class="hljs-comment">//比 std::find(...) 快很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br>c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">multiset</span>&lt;MyString&gt;(),<span class="hljs-built_in">multiset</span>&lt;MyStrNoMove&gt;(), value); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Multimap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj07<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_multimap</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_multimap().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">multimap</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>    <span class="hljs-comment">//multimap 不可使用 [] 做 insertion </span><br>        c.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span>,<span class="hljs-built_in">string</span>&gt;(i,buf));   <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multimap.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;multimap.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//178956970</span><br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, value=&quot;</span> &lt;&lt; (*pItem).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;  <br><br>c.<span class="hljs-built_in">clear</span>();  <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Unordered_Multiset</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj08<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_unordered_multiset</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_unordered_multiset().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">unordered_multiset</span>&lt;<span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br>        c.insert(<span class="hljs-built_in">string</span>(buf));     <br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//357913941</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.bucket_count()= &quot;</span> &lt;&lt; c.bucket_count() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.load_factor()= &quot;</span> &lt;&lt; c.load_factor() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_load_factor()= &quot;</span> &lt;&lt; c.max_load_factor() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multiset.max_bucket_count()= &quot;</span> &lt;&lt; c.max_bucket_count() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">20</span>; ++i) &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;bucket #&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; has &quot;</span> &lt;&lt; c.bucket_size(i) &lt;&lt; <span class="hljs-string">&quot; elements.\n&quot;</span>;<br>  &#125;<br><br><span class="hljs-built_in">string</span> target = get_a_target_string();<br>&#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = <span class="hljs-built_in">find</span>(c.<span class="hljs-built_in">begin</span>(), c.<span class="hljs-built_in">end</span>(), target);<span class="hljs-comment">//比 c.find(...) 慢很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;std::find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br> &#123;<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<span class="hljs-comment">//比 std::find(...) 快很多</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, &quot;</span> &lt;&lt; *pItem &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br> &#125;<br> <br>    c.<span class="hljs-built_in">clear</span>();<br>test_moveable(<span class="hljs-built_in">unordered_multiset</span>&lt;MyString&gt;(),<span class="hljs-built_in">unordered_multiset</span>&lt;MyStrNoMove&gt;(), value);  <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Unordered Multimap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt; //abort()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;  //snprintf()</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt; </span></span><br><span class="hljs-keyword">namespace</span> jj09<br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test_unordered_multimap</span><span class="hljs-params">(<span class="hljs-keyword">long</span>&amp; value)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\ntest_unordered_multimap().......... \n&quot;</span>;<br>     <br><span class="hljs-built_in">unordered_multimap</span>&lt;<span class="hljs-keyword">long</span>, <span class="hljs-built_in">string</span>&gt; c;  <br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">clock_t</span> timeStart = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">0</span>; i&lt; value; ++i)<br>    &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;%d&quot;</span>, rand());<br><span class="hljs-comment">//multimap 不可使用 [] 進行 insertion </span><br>c.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">long</span>,<span class="hljs-built_in">string</span>&gt;(i,buf));<br>&#125;<br><span class="hljs-keyword">catch</span>(exception&amp; p) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.what() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multimap.size()= &quot;</span> &lt;&lt; c.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;unordered_multimap.max_size()= &quot;</span> &lt;&lt; c.max_size() &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//357913941</span><br><br><span class="hljs-keyword">long</span> target = get_a_target_long();<br>    timeStart = clock();<br><span class="hljs-keyword">auto</span> pItem = c.<span class="hljs-built_in">find</span>(target);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;c.find(), milli-seconds : &quot;</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">if</span> (pItem != c.<span class="hljs-built_in">end</span>())<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;found, value=&quot;</span> &lt;&lt; (*pItem).second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;not found! &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>Set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure><p>Map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++STL标准模板库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
      <tag>C++</tag>
      
      <tag>模板编程</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++STL标准模板库（一）</title>
    <link href="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <url>/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>使用一个东西，却不明白它的道理，不高明！</strong></p></blockquote><p>本节要求：C++基本语法（包括如何正确使用模板，templates）</p><p>我们的目标:</p><blockquote><ul><li>level 0: 浅尝C++标准库</li><li>level 1: 深入认识C++标准库（做到胸中自有丘壑）</li><li>level 2: 良好使用C++标准库</li><li>level 3: 扩充C++标准库</li></ul></blockquote><p>推荐的几个网站和书籍：</p><blockquote><p>cplusplus.com</p><p>creference.com</p><p>gcc.gnu.org</p><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/tuijian.png" alt="1"></p></blockquote><h3 id="C-Standard-Library"><a href="#C-Standard-Library" class="headerlink" title="C++ Standard Library"></a>C++ Standard Library</h3><h3 id="STL-Standard-Template-Library-标准模板库"><a href="#STL-Standard-Template-Library-标准模板库" class="headerlink" title="STL Standard Template Library,标准模板库"></a>STL Standard Template Library,标准模板库</h3><p>标准库以header files形式呈现:</p><blockquote><ul><li>C++标准库的header files不带副档名(.h)，例如<code>#include&lt;vector&gt;</code></li><li>新式C header files不带副档名.h，例如<code>#include&lt;cstdio&gt;</code></li><li>旧式C header files带副档名.h仍然可用，例如<code>#include&lt;stdio.h&gt;</code></li><li>新式headers内的组件封装于namespace “std”</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>; <span class="hljs-meta">#for example</span><br></code></pre></td></tr></table></figure><ul><li>旧式headers内的组件不封装于namespace “std”</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br></code></pre></td></tr></table></figure></blockquote><h3 id="Test-STL-cpp-对C-标准库的各种测试"><a href="#Test-STL-cpp-对C-标准库的各种测试" class="headerlink" title="Test-STL.cpp   对C++标准库的各种测试"></a>Test-STL.cpp   对C++标准库的各种测试</h3><h4 id="STL六大部件-Components"><a href="#STL六大部件-Components" class="headerlink" title="STL六大部件(Components):"></a>STL六大部件(Components):</h4><blockquote><ul><li>容器(Containers)</li><li>分配器(Allocators)</li><li>算法(Algorithms)</li><li>迭代器(Iterators)</li><li>适配器(Adapters)</li><li>仿函数(Functors)</li></ul></blockquote><h4 id="六大部件之间的关系"><a href="#六大部件之间的关系" class="headerlink" title="六大部件之间的关系"></a>六大部件之间的关系</h4><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/components.png" alt="compoenets"></p><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/stl.png" alt="stl"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ia[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">27</span>,<span class="hljs-number">210</span>,<span class="hljs-number">12</span>,<span class="hljs-number">47</span>,<span class="hljs-number">109</span>,<span class="hljs-number">83</span>&#125;;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;vi(ia,ia+<span class="hljs-number">6</span>);<span class="hljs-comment">//将数组存入vector容器</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;count_if(vi.<span class="hljs-built_in">begin</span>(),vi.<span class="hljs-built_in">end</span>(),not1(bind2nd(less&lt;<span class="hljs-keyword">int</span>&gt;(),<span class="hljs-number">40</span>)));<span class="hljs-comment">//输出数组中大于等于40的元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/result.png" alt="result"></p><h4 id="复杂度，Complexity，Big-oh"><a href="#复杂度，Complexity，Big-oh" class="headerlink" title="复杂度，Complexity，Big-oh"></a>复杂度，Complexity，Big-oh</h4><p>目前常用的Big-oh有下列几种情况：</p><blockquote><p>O(1)或O(c)：称为常数时间(constant time)</p><p>O(n):称为线性时间(linear time)</p><p>O(logn ):称为次线性时间(sub-linear time)</p><p>O(n2):称为平方时间(quadratic time)</p><p>O(n3):称为立方时间(cubic time)</p><p>O(2n):称为指数时间(expnnential time)</p><p>O(nlogn):称为介于线性及二次方成长的中间时间</p></blockquote><h4 id="”前开后闭“-区间"><a href="#”前开后闭“-区间" class="headerlink" title="”前开后闭“ 区间"></a>”前开后闭“ 区间</h4><p><strong><code>c.end()</code>: off by one, pass the end</strong></p><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/container.png" alt="container"></p><h4 id="C-11新特性-新迭代格式"><a href="#C-11新特性-新迭代格式" class="headerlink" title="C++11新特性 新迭代格式"></a>C++11新特性 新迭代格式</h4><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/C11iter.png" alt="image-20191029222035691"></p><h4 id="C-11新特性auto-keyword"><a href="#C-11新特性auto-keyword" class="headerlink" title="C++11新特性auto keyword"></a>C++11新特性auto keyword</h4><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/autokeyword.png" alt="autokeyword"></p><h4 id="容器的结构图"><a href="#容器的结构图" class="headerlink" title="容器的结构图"></a>容器的结构图</h4><p><img src="/2019/10/29/C-STL%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93/containerstruct.png" alt="structconta"></p>]]></content>
    
    
    <categories>
      
      <category>C++STL标准模板库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
      <tag>C++</tag>
      
      <tag>模板编程</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo迁移</title>
    <link href="/2019/10/29/Hexo%E8%BF%81%E7%A7%BB/"/>
    <url>/2019/10/29/Hexo%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>首先，安装 <code>hexo-migrator-rss</code> 插件。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-migrator-rss <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>插件安装完成后，执行下列命令，从 RSS 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo migrate rss &lt;<span class="hljs-built_in">source</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h2><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">new_post_name:</span> <span class="hljs-symbol">:year-</span><span class="hljs-symbol">:month-</span><span class="hljs-symbol">:day-</span><span class="hljs-symbol">:title</span>.md<br></code></pre></td></tr></table></figure><h2 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h2><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code> 参数。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">new_post_name:</span> <span class="hljs-symbol">:year-</span><span class="hljs-symbol">:month-</span><span class="hljs-symbol">:day-</span><span class="hljs-symbol">:title</span>.md<br></code></pre></td></tr></table></figure><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>首先，安装 <code>hexo-migrator-wordpress</code> 插件。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ npm install hexo-migrator-wordpress <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="http://en.support.wordpress.com/export/">WP支持页面</a>）。</p><p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 WordPress 导出的文件路径或网址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo migrate wordpress &lt;<span class="hljs-built_in">source</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意</p><p>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter中的分类与标签</a>）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p></blockquote><h2 id="Joomla"><a href="#Joomla" class="headerlink" title="Joomla"></a>Joomla</h2><p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ npm <span class="hljs-keyword">install </span>hexo-migrator-<span class="hljs-keyword">joomla </span>--save<br></code></pre></td></tr></table></figure><p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ==">J2XML</a> 组件导出 Joomla 文章。<br>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 Joomla 导出的文件路径或网址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo migrate joomla &lt;<span class="hljs-built_in">source</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo开始使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo指令</title>
    <link href="/2019/10/29/Hexo%E6%8C%87%E4%BB%A4/"/>
    <url>/2019/10/29/Hexo%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ hexo <span class="hljs-keyword">init</span> [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href>_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> page <span class="hljs-comment">--path about/me</span><br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>, <code>--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">$ hexo migrate &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>从其他博客系统 <a href>迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">$ hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--safe</span><br></code></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--debug</span><br></code></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--silent</span><br></code></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 <span class="hljs-number">_</span><span class="hljs-keyword">config</span><span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br># 使用 custom<span class="hljs-variable">.yml</span> 和 custom2<span class="hljs-variable">.json</span>，其中 custom2<span class="hljs-variable">.json</span> 优先级更高<br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 <span class="hljs-number">_</span><span class="hljs-keyword">config</span><span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br># 使用 custom<span class="hljs-variable">.yml</span>, custom2<span class="hljs-variable">.json</span> 和 custom3<span class="hljs-variable">.yml</span>，其中 custom3<span class="hljs-variable">.yml</span> 优先级最高，其次是 custom2<span class="hljs-variable">.json</span><br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ hexo --cwd <span class="hljs-regexp">/path/</span>to/cwd<br></code></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo开始使用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo配置</title>
    <link href="/2019/10/29/Hexo%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/10/29/Hexo%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。使用半角逗号 <code>,</code> 分隔多个关键词。</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href>永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr><tr><td><code>pretty_urls</code></td><td>改写 <a href><code>permalink</code></a> 的值来美化 URL</td><td></td></tr><tr><td><code>pretty_urls.trailing_index</code></td><td>是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td><code>true</code></td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>例如：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 比如，一个页面的永久链接是 </span><br><span class="hljs-symbol">http:</span><span class="hljs-comment">//example.com/foo/bar/index.html</span><br><span class="hljs-symbol">pretty_urls:</span>  <br><span class="hljs-symbol">trailing_index:</span> false<br><span class="hljs-meta"># 此时页面的永久链接会变为 http:<span class="hljs-comment">//example.com/foo/bar/</span></span><br></code></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹，<code>source_dir</code> 下的子目录</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><p>例如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">skip_render: <span class="hljs-string">&quot;mypage/**/*&quot;</span><br># 将会直接将 `<span class="hljs-keyword">source</span><span class="hljs-regexp">/mypage/i</span>ndex.html` 和 `<span class="hljs-keyword">source</span><span class="hljs-regexp">/mypage/</span>code.js` 不做改动地输出到 <span class="hljs-string">&#x27;public&#x27;</span> 目录<br># 你也可以用这种方法来跳过对指定文章文件的渲染<br>skip_render: <span class="hljs-string">&quot;_posts/test-post.md&quot;</span><br># 这将会忽略对 <span class="hljs-string">&#x27;test-post.md&#x27;</span> 的渲染<br></code></pre></td></tr></table></figure><blockquote><p>提示</p><p>如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>external_link.enable</code></td><td>在新标签中打开链接</td><td><code>true</code></td></tr><tr><td><code>external_link.field</code></td><td>对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td><code>site</code></td></tr><tr><td><code>external_link.exclude</code></td><td>Exclude hostname. Specify subdomain when applicable, including <code>www</code></td><td><code>[]</code></td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href>Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td><td></td></tr><tr><td><code>highlight.enable</code></td><td>开启代码块高亮</td><td><code>true</code></td></tr><tr><td><code>highlight.auto_detect</code></td><td>如果未指定语言，则启用自动检测</td><td><code>false</code></td></tr><tr><td><code>highlight.line_number</code></td><td>显示行数</td><td><code>true</code></td></tr><tr><td><code>highlight.tab_replace</code></td><td>用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</td><td><code>&#39;&#39;</code></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>,您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td><td></td></tr></tbody></table><h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>HH:mm:ss</code></td></tr><tr><td><code>use_date_for_updated</code></td><td>Use the date of the post in <a href><code>post.updated</code></a> if no updated date is provided in the front-matter. Typically used with Git workflow</td><td><code>true</code></td></tr></tbody></table><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>theme_config</code></td><td>主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr><tr><td><code>meta_generator</code></td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td></tr></tbody></table><h3 id="包括或不包括目录和文件"><a href="#包括或不包括目录和文件" class="headerlink" title="包括或不包括目录和文件"></a>包括或不包括目录和文件</h3><p>在 Hexo 配置文件中，通过设置 include/exclude 可以让 Hexo 进行处理或忽略某些目录和文件夹。你可以使用 <a href="https://github.com/isaacs/minimatch">glob 表达式</a> 对目录和文件进行匹配。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>include</code></td><td>Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 <code>.</code> 开头的文件和文件夹，Hexo 的 <code>_posts</code> 和 <code>_data</code> 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 <code>source</code> 目录下。</td></tr><tr><td><code>exclude</code></td><td>Hexo 会忽略这些文件和目录</td></tr></tbody></table><p>举例：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># <span class="hljs-meta-keyword">Include</span>/Exclude Files/Folders</span><br><br>include:  <br>    - <span class="hljs-string">&quot;.nojekyll&quot;</span>  <br>    <span class="hljs-meta"># 包括 <span class="hljs-string">&#x27;source/css/_typing.css&#x27;</span>  </span><br>    - <span class="hljs-string">&quot;css/_typing.css&quot;</span>  <br>    <span class="hljs-meta"># 包括 <span class="hljs-string">&#x27;source/_css/&#x27;</span> 中的任何文件，但不包括子目录及其其中的文件。  </span><br>    - <span class="hljs-string">&quot;_css/*&quot;</span>  <br>    <span class="hljs-meta"># 包含 <span class="hljs-string">&#x27;source/_css/&#x27;</span> 中的任何文件和子目录下的任何文件  </span><br>    - <span class="hljs-string">&quot;_css/**/*&quot;</span><br><br>exclude:  <br>    <span class="hljs-meta"># 不包括 <span class="hljs-string">&#x27;source/js/test.js&#x27;</span>  </span><br>    - <span class="hljs-string">&quot;js/test.js&quot;</span>  <br>    <span class="hljs-meta"># 不包括 <span class="hljs-string">&#x27;source/js/&#x27;</span> 中的文件、但包括子目录下的所有目录和文件  </span><br>    - <span class="hljs-string">&quot;js/*&quot;</span>  <br>    <span class="hljs-meta"># 不包括 <span class="hljs-string">&#x27;source/js/&#x27;</span> 中的文件和子目录下的任何文件 </span><br>    - <span class="hljs-string">&quot;js/**/*&quot;</span>  <br>    <span class="hljs-meta"># 不包括 <span class="hljs-string">&#x27;source/js/&#x27;</span> 目录下的所有文件名以 <span class="hljs-string">&#x27;test&#x27;</span> 开头的文件，但包括其它文件和子目录下的单文件 </span><br>    - <span class="hljs-string">&quot;js/test*&quot;</span> <br>    <span class="hljs-meta"># 不包括 <span class="hljs-string">&#x27;source/js/&#x27;</span> 及其子目录中任何以 <span class="hljs-string">&#x27;test&#x27;</span> 开头的文件  </span><br>    - <span class="hljs-string">&quot;js/**/test*&quot;</span>  <br>    <span class="hljs-meta"># 不要用 exclude 来忽略 <span class="hljs-string">&#x27;source/_posts/&#x27;</span> 中的文件。你应该使用 <span class="hljs-string">&#x27;skip_render&#x27;</span>，或者在要忽略的文件的文件名之前加一个下划线 <span class="hljs-string">&#x27;_&#x27;</span>  # 在这里配置一个 </span><br>    - <span class="hljs-string">&quot;_posts/hello-world.md&quot;</span> 是没有用的。<br></code></pre></td></tr></table></figure><p>列表中的每一项都必须用单引号或双引号包裹起来。</p><p><code>include</code> 和 <code>exclude</code> 并不适用于 <code>themes/</code> 目录下的文件。如果需要忽略 <code>themes/</code> 目录下的部分文件或文件夹，可以在文件名之前添加下划线 <code>_</code>。</p><h3 id="使用代替配置文件"><a href="#使用代替配置文件" class="headerlink" title="使用代替配置文件"></a>使用代替配置文件</h3><p>可以在 hexo-cli 中使用 <code>--config</code> 参数来指定自定义配置文件的路径。你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sml"># use <span class="hljs-symbol">&#x27;custom</span>.yml&#x27; <span class="hljs-keyword">in</span> place <span class="hljs-keyword">of</span> <span class="hljs-symbol">&#x27;_config</span>.yml&#x27;<br>$ hexo server --config custom.yml<br><br># use <span class="hljs-symbol">&#x27;custom</span>.yml&#x27; &amp; <span class="hljs-symbol">&#x27;custom2</span>.json&#x27;, prioritizing&#x27;custom3.yml&#x27;, <span class="hljs-keyword">then</span> <span class="hljs-symbol">&#x27;custom2</span>.json&#x27;<br>$ hexo generate --config custom.yml,custom2.json,custom3.yml<br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><p>例如，使用 <code>--options</code> 指定了两个自定义配置文件：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span><br></code></pre></td></tr></table></figure><p>如果 <code>custom.yml</code> 中指定了 <code>foo: bar</code>，在 custom2.json 中指定了 <code>&quot;foo&quot;: &quot;dinosaur&quot;</code>，那么在 <code>_multiconfig.yml</code> 中你会得到 <code>foo: dinosaur</code>。</p><h3 id="覆盖主题配置"><a href="#覆盖主题配置" class="headerlink" title="覆盖主题配置"></a>覆盖主题配置</h3><p>通常情况下，Hexo 主题是一个独立的项目，并拥有一个独立的 <code>_config.yml</code> 配置文件。<br>你可以在站点的 <code>_config.yml</code> 配置文件中配置你的主题，这样你就不需要 fork 一份主题并维护主题独立的配置文件。</p><p>以下是一个覆盖主题配置的例子：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># _config.yml</span><br><span class="hljs-symbol">theme_config:</span>  <br><span class="hljs-symbol">bio:</span> <span class="hljs-string">&quot;My awesome bio&quot;</span><br><span class="hljs-meta"># themes/my-theme/_config.yml</span><br><span class="hljs-symbol">bio:</span> <span class="hljs-string">&quot;Some generic bio&quot;</span><br><span class="hljs-symbol">logo:</span> <span class="hljs-string">&quot;a-cool-image.png&quot;</span><br></code></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">&#123;  <br><span class="hljs-symbol">bio:</span> <span class="hljs-string">&quot;My awesome bio&quot;</span>,  <br><span class="hljs-symbol">logo:</span> <span class="hljs-string">&quot;a-cool-image.png&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo开始使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2019/10/29/Hexo/"/>
    <url>/2019/10/29/Hexo/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><blockquote><p>Mac 用户</p><p>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><blockquote><p>For Mac / Linux 用户</p><p>如果你是 macOS 用户，或者是通过软件管理器从默认软件仓库安装 Node.js 的 Linux 用户，在使用 npm 的 <code>-g</code> 参数时可能会遇到一些权限相关的问题。请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题，<strong>并且不要使用 root、sudo 等方法覆盖权限</strong></p></blockquote><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><ul><li><p>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</p></li><li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a> 安装。</p></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><blockquote><p>Windows 用户</p><p>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win">这个页面</a>，收录了存储于百度云的下载地址。</p></blockquote><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/nvm-sh/nvm">nvm</a>。nvm 的开发者提供了一个自动安装 nvm 的简单脚本：</p><p>cURL:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl -o- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/nvm-sh/</span>nvm<span class="hljs-regexp">/v0.34.0/i</span>nstall.sh | sh<br></code></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget -qO- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/nvm-sh/</span>nvm<span class="hljs-regexp">/v0.34.0/i</span>nstall.sh | sh<br></code></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ nvm install <span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><blockquote><p>Windows 用户</p><p>对于 Windows 用户我们推荐使用 <a href="https://github.com/jasongin/nvs/">nvs</a> 而不是 nvm。nvs 具有和 nvm 相似的命令行语法，并且可以通过 Windows Installer (MSI) 安装包进行安装。</p></blockquote><p>或者您也可以下载 <a href="http://nodejs.org/">安装程序</a> 来安装。</p><blockquote><p>Windows 用户</p><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。<br>另外，您也可以使用<strong>Git Bash</strong>，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p></blockquote><blockquote><p>Linux 用户</p><p>大部分 Linux 发行版都会在它们的默认软件包仓库中分发 Node.js。第三方仓库 <a href="https://github.com/nodesource/distributions">NodeSource</a> 通常能分发最新版本的 Node.js。</p></blockquote><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure><h5 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h5><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">package</span>.json<br>&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;hexo-site&quot;</span>,<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;hexo&quot;</span>: &#123; <br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;&quot;</span>  <br>    &#125;,  <br>    <span class="hljs-string">&quot;dependencies&quot;</span>: &#123; <br>        <span class="hljs-string">&quot;hexo&quot;</span>: <span class="hljs-string">&quot;^3.8.0&quot;</span>,<br>        <span class="hljs-string">&quot;hexo-generator-archive&quot;</span>: <span class="hljs-string">&quot;^0.1.5&quot;</span>, <br>        <span class="hljs-string">&quot;hexo-generator-category&quot;</span>: <span class="hljs-string">&quot;^0.1.3&quot;</span>, <br>        <span class="hljs-string">&quot;hexo-generator-index&quot;</span>: <span class="hljs-string">&quot;^0.2.1&quot;</span>,<br>        <span class="hljs-string">&quot;hexo-generator-tag&quot;</span>: <span class="hljs-string">&quot;^0.2.0&quot;</span>, <br>        <span class="hljs-string">&quot;hexo-renderer-ejs&quot;</span>: <span class="hljs-string">&quot;^0.3.1&quot;</span>, <br>        <span class="hljs-string">&quot;hexo-renderer-stylus&quot;</span>: <span class="hljs-string">&quot;^0.3.3&quot;</span>,<br>        <span class="hljs-string">&quot;hexo-renderer-marked&quot;</span>: <span class="hljs-string">&quot;^0.3.2&quot;</span>,<br>        <span class="hljs-string">&quot;hexo-server&quot;</span>: <span class="hljs-string">&quot;^0.3.3&quot;</span>  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h5><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h5 id="source"><a href="#source" class="headerlink" title="source"></a>source</h5><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h5 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h5><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo开始使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown编辑hexo媒体资源问题</title>
    <link href="/2019/10/28/Markdown%E7%BC%96%E8%BE%91hexo%E5%AA%92%E4%BD%93%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/"/>
    <url>/2019/10/28/Markdown%E7%BC%96%E8%BE%91hexo%E5%AA%92%E4%BD%93%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>使用 <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code> 安装0.0.5版本的hexo-asset-image插件。<br>使用 <code>npm install hexo-asset-image --save</code> 安装的是1.0.0版本的hexo-asset-image插件。<br>两者最直接的区别是映射关系不同。</p><p>前者映射<code>/YYYY/MM/DD/* / * .xxx</code>图片能够显示出来，后者不知道为什么映射为<code>/.com//* * / * .xxx</code> 图片资源不能成功访问。</p><p>后者问题解决办法：<br>第一步：安装插件，在hexo根目录打开Git Bash,执行<br>    <code>npm install hexo-asset-image --save</code><br>第二步：打开hexo的配置文件<code>_config.yml</code><br>找到 <code>post_asset_folder</code>，把这个选项从false改成true<br>第三步：打开<br><code>/node_modules/hexo-asset-image/index.js</code><br>将内容更换为下面的代码（在此感谢Ericam_ 大神：<a href="https://blog.csdn.net/xjm850552586%EF%BC%89">https://blog.csdn.net/xjm850552586）</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> str.split(m, i).join(m).length;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);<br>hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> config = hexo.config;<br>  <span class="hljs-keyword">if</span>(config.post_asset_folder)&#123;<br>        <span class="hljs-keyword">var</span> link = data.permalink;<br>    <span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>       <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br>    <span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;<br>    link = link.substring(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++)&#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br> <br>      <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;<br>        ignoreWhitespace: <span class="hljs-literal">false</span>,<br>        xmlMode: <span class="hljs-literal">false</span>,<br>        lowerCaseTags: <span class="hljs-literal">false</span>,<br>        decodeEntities: <span class="hljs-literal">false</span><br>      &#125;);<br><br>      $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;<br>            <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br>            <span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;<br>               !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;<br>              <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>              <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>              <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;<br>              &#125;);<br>              <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;<br>              &#125;);<br>              <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)<br>                srcArray.shift();<br>              src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);<br>              $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);<br>              <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br>            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));<br>        &#125;<br>      &#125;);<br>      data[key] = $.html();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>第四步：现在就可以插入图片了，比如hexo new post photo之后<br>就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内，<br>在photo.md文件里面按markdown的标准写。</p><p>参考链接：<br><a href="https://blog.csdn.net/xjm850552586/article/details/84101345">https://blog.csdn.net/xjm850552586/article/details/84101345</a><br><a href="https://blog.csdn.net/qq_38148394/article/details/79997971">https://blog.csdn.net/qq_38148394/article/details/79997971</a></p><p>参考：DCBXZ<br>链接：<a href="https://www.jianshu.com/p/f72aaad7b852">https://www.jianshu.com/p/f72aaad7b852</a><br>来源：简书</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo静态页面脚手架搭建</title>
    <link href="/2019/10/28/scaffold/"/>
    <url>/2019/10/28/scaffold/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo从零开始到完整搭建"><a href="#Hexo从零开始到完整搭建" class="headerlink" title="Hexo从零开始到完整搭建"></a>Hexo从零开始到完整搭建</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很早就想搭建自己的Blog了，但是以前以为需要有自己的域名、服务器（qiong）还要自己编写页面代码（cai），觉得很麻烦（lan）所以这个想法被搁置了很久。也是最近闲来无事翻了翻开源中国，了解了hexo这个玩意，花了一天时间自己搭了一下。</p><ol><li>安装Git</li><li>安装Nodejs</li><li>安装Hexo</li><li>生成SSH并添加到Github</li><li>部署项目并上传</li><li>绑定个人域名</li><li>修改和配置主题</li></ol><h3 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h3><h4 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h4><ul><li><p>git下载地址：<a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a></p></li><li><p>安装过程：双击Git-2.23.0-64-bit.exe，接着一路’下一步‘就好</p></li><li><p>安装无误后：cmd输入git –version查看Git的版本</p></li></ul><p><img src="/2019/10/28/scaffold/git-v.png" alt="git-v"></p><h4 id="2、安装nodejs"><a href="#2、安装nodejs" class="headerlink" title="2、安装nodejs"></a>2、安装nodejs</h4><p>Hexo是基于nodeJS环境的静态博客，里面的npm工具很有用</p><ul><li><a href="https://nodejs.org/en/">下载地址</a>(说明：LTS为长期支持版，Current为当前最新版)</li><li>安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 <code>Add to PATH</code> ,这样你就不用自己去配置电脑上环境变量了，装完在按 <code>win + r</code> 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。</li><li>查看版本：命令<code>node -v</code></li></ul><p><img src="/2019/10/28/scaffold/node-v.png" alt="node-v"></p><h4 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h4><ul><li><p>先创建一个文件夹，如/Hexo，这个文件夹就相当于我们Blog项目目录</p></li><li><p>执行Hexo安装命令：<code>npm i -g hexo</code></p></li><li><p>安装完成后，查看版本：<code>hexo -v</code></p><p><img src="/2019/10/28/scaffold/hexo-v.png" alt="1572250103953"></p></li><li><p><code>cd</code>到先前创建目录，如/Hexo，执行<code>hexo init</code>初始化命令，完成后即可看到自动创建的如下内容：</p><p><img src="/2019/10/28/scaffold/hexo-init.png" alt="hexo-init"></p></li><li><p>解释一下：</p><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul></li></ul><h4 id="4、搭桥到你的GitHub"><a href="#4、搭桥到你的GitHub" class="headerlink" title="4、搭桥到你的GitHub"></a>4、搭桥到你的GitHub</h4><p>没账号的创建账号，有账号的看下面。</p><ul><li>创建一个repo，名称为<code>yourname.github.io</code>, 其中<code>yourname</code>是你的github名称，按照这个规则创建才有用哦，如下：<br><img src="/2019/10/28/scaffold/newrepo1.png" alt="newrepo1"></li></ul><p>  <img src="/2019/10/28/scaffold/newrepo2.png" alt="newrepo2"></p><ul><li>进入git bash中其实进入cmd一样，配置Github账户信息（YourName和YourEail都替换成你自己的）：<br><img src="/2019/10/28/scaffold/gitbash.png" alt="gitbash"></li></ul><p>  <img src="/2019/10/28/scaffold/gitconfigname.png" alt="gitconfigname"></p><p>  <img src="/2019/10/28/scaffold/gitconfigemail.png" alt="gitconfigemail"></p><p>  <img src="/2019/10/28/scaffold/gitconfig.png" alt="gitconfig"></p><ul><li><p>创建SSH</p><ul><li><p>在Git bash中输入：<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>，生成ssh。然后按下图的方式找到<code>id_rsa.pub</code>文件的内容。<br><img src="/2019/10/28/scaffold/sshdir.png" alt="sshdir"></p></li><li><p>将上面获取的ssh放到github中：<br><img src="/2019/10/28/scaffold/sshcontent.png" alt="sshcontent"></p></li><li><p>添加一个 New SSH key ，title随便取，key就填刚刚那一段。</p></li></ul><p><img src="/2019/10/28/scaffold/githubssh.png" alt="githubssh"></p><ul><li>在gitbash中验证是否添加成功：<code>ssh -T git@github.com</code></li></ul><p><img src="/2019/10/28/scaffold/sshtest.png" alt="sshtest"></p></li></ul><h4 id="5、一步之遥了"><a href="#5、一步之遥了" class="headerlink" title="5、一步之遥了"></a>5、一步之遥了</h4><ul><li>用编辑器打开你的blog项目，修改<code>_config.yml</code>文件的一些配置(冒号之后都是有一个半角空格的)：</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><ul><li>回到Git bash中，进入你的blog目录，分别执行以下命令：</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo server<br></code></pre></td></tr></table></figure><p>注：hexo 3.0把服务器独立成个别模块，需要单独安装：<code>npm i hexo-server</code>。</p><ul><li>打开浏览器输入：<code>http://localhost:4000</code></li></ul><h4 id="6、上传到GitHub"><a href="#6、上传到GitHub" class="headerlink" title="6、上传到GitHub"></a>6、上传到GitHub</h4><ul><li>先安装一波：<code>npm install hexo-deployer-git --save</code>（这样才能将你写好的文章部署到github服务器上并让别人浏览到）</li><li>执行命令(建议每次都按照如下步骤部署)：</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>注意deploy的过程中要输入你的username及passward。如下：</p><p>  <img src="/2019/10/28/scaffold/hexo-deploy.png" alt="hexo-deploy"></p><ul><li>在浏览器中输入<code>http://YourGithubName.github.io</code>就可以看到你的个人博客啦，是不是很兴奋！</li><li>感觉Git bash中东西太多的时候输入<code>clear</code>命令清空一下。</li></ul><h4 id="7、个人域名绑定"><a href="#7、个人域名绑定" class="headerlink" title="7、个人域名绑定"></a>7、个人域名绑定</h4><ul><li><p>第一步购买域名：随便在哪个网站买一个就好了，鄙人是在Tencent购买的kongwei-liao.cn, DNS也是顺道在那买的。</p></li><li><p>第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是<code>kongwei-liao.cn</code>，只能添加一个哦。</p><p><img src="/2019/10/28/scaffold/domainnamebind.png" alt="domainnamebind"></p></li><li><p>到DNS中添加一条记录</p></li></ul><p>其中ip地址为你的Github的地址，可在cmd中ping一下就能看到(<code>ping yourname.github.io</code>)：</p><p>  <img src="/2019/10/28/scaffold/pinggithub.png" alt="pinggithub"></p><ul><li>接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~</li></ul><h4 id="8-修改及配置主题"><a href="#8-修改及配置主题" class="headerlink" title="8. 修改及配置主题"></a>8. <strong>修改及配置主题</strong></h4><ul><li><p>hexo初始化之后默认的主题是<code>landscape</code> , 然后你可以去<a href="https://hexo.io/themes/">这个地址</a>里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是<code>hueman</code>,看起来挺不错，至少是我喜欢的类型。</p><p><img src="/2019/10/28/scaffold/theme1.png" alt="theme1"></p></li><li><p>跟该主题相关的配置在<code>themes/hueman/_config.yml</code>里面,然后根据你的需要在这配配配就行了。</p><p><img src="/2019/10/28/scaffold/theme2.png" alt="theme2"></p></li><li><p>有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦</p></li><li><p>下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似):</p><p>在导航栏添加点东西</p><ul><li>例如我添加了一个更新日志的模块。</li><li>在主题的配置文件中，menu添加一栏：<code>Board: /board</code>。</li><li>然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。</li><li>在主题的<code>hueman/langulages/zh-CN.yml</code>中的index适当的位置加：<code>board: &#39;更新日志&#39;</code>，位置和名字是你自己设定。</li><li>重新部署，然后就OK了</li></ul><p>在侧边栏添加点东西</p><ul><li>回到你的主题的配置文件中，找到<code>widgets</code>一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫<code>communiation</code>且放在了第二行。</li><li>在上面所提到的<code>zh-CN.yml</code>文件中找到sidebar一栏，添加<code>communiation: &#39;你要设的名称&#39;</code>。</li><li>在<code>hueman/layout/widget</code>中添加一个<code>communiation.ejs</code>,填入模板</li></ul><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml">&lt;%</span><span class="ruby"> <span class="hljs-keyword">if</span> (site.posts.length) &#123; </span><span class="xml">%&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-wrap widget-list&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-title&quot;</span>&gt;</span>&lt;%=</span><span class="ruby"> __(<span class="hljs-string">&#x27;sidebar.communiation&#x27;</span>) </span><span class="xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-comment">&lt;!--这里添加你要写的内容--&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">&lt;%</span><span class="ruby"> &#125; </span><span class="xml">%&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo开始使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Node.js</tag>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇练手文章</title>
    <link href="/2019/10/28/%E6%96%87%E7%AB%A0%E5%90%8D/"/>
    <url>/2019/10/28/%E6%96%87%E7%AB%A0%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>你们好啊！我是Kongwei Liao，今天第一次搭建了自己的Blog，今后会将自己生活工作的点点滴滴记录下来与大家分享。</p><h2 id="markdown二级标题"><a href="#markdown二级标题" class="headerlink" title="markdown二级标题"></a>markdown二级标题</h2><h3 id="markdown三级标题"><a href="#markdown三级标题" class="headerlink" title="markdown三级标题"></a>markdown三级标题</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">koukoudayou</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>first time</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
